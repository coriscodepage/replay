

use std::{collections::HashMap, ffi::c_void, ptr};
          
use  gl::types::{GLbitfield, GLboolean, GLbyte, GLdouble, GLeglImageOES, GLenum, GLfixed, GLfloat, GLhalfNV, GLhandleARB, GLint, GLint64, GLintptr, GLshort, GLsizei, GLsizeiptr, GLsync, GLubyte, GLuint, GLuint64, GLushort, GLvoid};

use crate::{call::Call, test::ScopedAllocator, gl_context::Context, region};

static DUMMY_CONTEXT: usize = 4000;
static supportsARBShaderObjects: bool = false;
static queryHandling: u8 = 0;
static QUERY_RUN_AND_CHECK_RESULT: u8 = 2;
static QUERY_SKIP: u8 = 0;
//static GLint
//_getActiveProgram(void);

//static void
//_validateActiveProgram(trace::Call &call);



pub struct GlRetracer {
    context: Context,
    _list_map: region::Map<GLuint>,
    _texture_map: region::Map<GLuint>,
    _query_map: region::Map<GLuint>,
    _buffer_map: region::Map<GLuint>,
    _program_map: region::Map<GLuint>,
    _shader_map: region::Map<GLuint>,
    _location_map: HashMap<GLhandleARB, region::Map<GLint> >,
    _fence_map: region::Map<GLuint>,
    _sync_map: region::Map<GLsync>,
    _arrayAPPLE_map: region::Map<GLuint>,
    _textureHandle_map: region::Map<GLuint64>,
    _sampler_map: region::Map<GLuint>,
    _imageHandle_map: region::Map<GLuint64>,
    _feedback_map: region::Map<GLuint>,
    _framebuffer_map: region::Map<GLuint>,
    _renderbuffer_map: region::Map<GLuint>,
    _array_map: HashMap<usize, region::Map<GLuint> >,
    _pipeline_map: region::Map<GLuint>,
    _handleARB_map: region::Map<GLhandleARB>,
    _subroutine_map: HashMap<GLhandleARB, region::Map<GLuint> >,
    _eglImageOES_map: region::Map<GLeglImageOES>,
    _uniformBlock_map: HashMap<GLuint, region::Map<GLuint> >,
    _programARB_map: region::Map<GLuint>,
    _fragmentShaderATI_map: region::Map<GLuint>,
    _region_map: region::Map<GLuint>,
}

impl GlRetracer {
pub fn retrace_glCullFace(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    unsafe { gl::CullFace(mode) };
}

pub fn retrace_glFrontFace(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    unsafe { gl::FrontFace(mode) };
}

pub fn retrace_glHint(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut mode: GLenum;
    mode = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    unsafe { gl::Hint(target, mode) };
}

pub fn retrace_glLineWidth(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut width: GLfloat;
    width = (call.arg(0)).to_f32().unwrap();

    unsafe { gl::LineWidth(width) };
}

pub fn retrace_glPointSize(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut size: GLfloat;
    size = (call.arg(0)).to_f32().unwrap();

    unsafe { gl::PointSize(size) };
}

pub fn retrace_glPolygonMode(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut face: GLenum;
    face = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut mode: GLenum;
    mode = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    unsafe { gl::PolygonMode(face, mode) };
}

pub fn retrace_glScissor(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut x: GLint;
    x = (call.arg(0)).to_i32().unwrap();

    let mut y: GLint;
    y = (call.arg(1)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(2)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(3)).to_i32().unwrap();

    unsafe { gl::Scissor(x, y, width, height) };
}

pub fn retrace_glTexParameterf(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut param: GLfloat;
    param = (call.arg(2)).to_f32().unwrap();

    unsafe { gl::TexParameterf(target, pname, param) };
}

pub fn retrace_glTexParameterfv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLfloat];
    params = _allocator.alloc_array::<GLfloat>(&call.arg(2));
    let _a_GLfloat86_0 = (call.arg(2)).to_array();
    if let Some(_a_GLfloat86_0) = _a_GLfloat86_0 {
        for _jGLfloat86 in 0.._a_GLfloat86_0.values.len() {
    params[_jGLfloat86] = (*_a_GLfloat86_0.values[_jGLfloat86]).to_f32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

    unsafe { gl::TexParameterfv(target, pname, params) };
}

pub fn retrace_glTexParameteri(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut param: GLint;
    param = (call.arg(2)).to_i32().unwrap();

    unsafe { gl::TexParameteri(target, pname, param) };
}

pub fn retrace_glTexParameteriv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLint];
    params = _allocator.alloc_array::<GLint>(&call.arg(2));
    let _a_GLint129_0 = (call.arg(2)).to_array();
    if let Some(_a_GLint129_0) = _a_GLint129_0 {
        for _jGLint129 in 0.._a_GLint129_0.values.len() {
    params[_jGLint129] = (*_a_GLint129_0.values[_jGLint129]).to_i32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

    unsafe { gl::TexParameteriv(target, pname, params) };
}

pub fn retrace_glTexImage1D(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(1)).to_i32().unwrap();

    let mut internalformat: GLint;
    internalformat = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut width: GLsizei;
    width = (call.arg(3)).to_i32().unwrap();

    let mut border: GLint;
    border = (call.arg(4)).to_i32().unwrap();

    let mut format: GLenum;
    format = (call.arg(5)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(6)).to_u32().unwrap().try_into().unwrap();

    let pixels = (call.arg(7)).to_pointer().unwrap() as *mut c_void;

    unsafe { gl::TexImage1D(target, level, internalformat, width, border, format, _type, pixels) };
}

pub fn retrace_glTexImage2D(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(1)).to_i32().unwrap();

    let mut internalformat: GLint;
    internalformat = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut width: GLsizei;
    width = (call.arg(3)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(4)).to_i32().unwrap();

    let mut border: GLint;
    border = (call.arg(5)).to_i32().unwrap();

    let mut format: GLenum;
    format = (call.arg(6)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(7)).to_u32().unwrap().try_into().unwrap();

    let pixels = (call.arg(8)).to_pointer().unwrap() as *mut c_void;

    unsafe { gl::TexImage2D(target, level, internalformat, width, height, border, format, _type, pixels) };
}

pub fn retrace_glDrawBuffer(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    unsafe { gl::DrawBuffer(mode) };
}

pub fn retrace_glClear(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mask: GLbitfield;
    mask = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    unsafe { gl::Clear(mask) };
}

pub fn retrace_glClearColor(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut red: GLfloat;
    red = (call.arg(0)).to_f32().unwrap();

    let mut green: GLfloat;
    green = (call.arg(1)).to_f32().unwrap();

    let mut blue: GLfloat;
    blue = (call.arg(2)).to_f32().unwrap();

    let mut alpha: GLfloat;
    alpha = (call.arg(3)).to_f32().unwrap();

    unsafe { gl::ClearColor(red, green, blue, alpha) };
}

pub fn retrace_glClearStencil(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut s: GLint;
    s = (call.arg(0)).to_i32().unwrap();

    unsafe { gl::ClearStencil(s) };
}

pub fn retrace_glClearDepth(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut depth: GLdouble;
    depth = (call.arg(0)).to_f64().unwrap();

    unsafe { gl::ClearDepth(depth) };
}

pub fn retrace_glStencilMask(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mask: GLuint;
    mask = (call.arg(0)).to_u32().unwrap();

    unsafe { gl::StencilMask(mask) };
}

pub fn retrace_glColorMask(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut red: GLboolean;
    red = (call.arg(0)).to_u32().unwrap() as u8;

    let mut green: GLboolean;
    green = (call.arg(1)).to_u32().unwrap() as u8;

    let mut blue: GLboolean;
    blue = (call.arg(2)).to_u32().unwrap() as u8;

    let mut alpha: GLboolean;
    alpha = (call.arg(3)).to_u32().unwrap() as u8;

    unsafe { gl::ColorMask(red, green, blue, alpha) };
}

pub fn retrace_glDepthMask(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut flag: GLboolean;
    flag = (call.arg(0)).to_u32().unwrap() as u8;

    unsafe { gl::DepthMask(flag) };
}

pub fn retrace_glDisable(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut cap: GLenum;
    cap = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    if cap == gl::DEBUG_OUTPUT_SYNCHRONOUS {return };;
    unsafe { gl::Disable(cap) };
}

pub fn retrace_glEnable(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut cap: GLenum;
    cap = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    if cap == gl::DEBUG_OUTPUT_SYNCHRONOUS {return };;
    unsafe { gl::Enable(cap) };
}

pub fn retrace_glFinish(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    unsafe { gl::Finish() };
    self.context.needs_flush = false;
    if !self.double_buffer {
        region::frame_complete(call);
    }
}

pub fn retrace_glFlush(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    unsafe { gl::Flush() };
    self.context.needs_flush = false;
    if !self.double_buffer {
        region::frame_complete(call);
    }
}

pub fn retrace_glBlendFunc(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut sfactor: GLenum;
    sfactor = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut dfactor: GLenum;
    dfactor = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    unsafe { gl::BlendFunc(sfactor, dfactor) };
}

pub fn retrace_glLogicOp(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut opcode: GLenum;
    opcode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    unsafe { gl::LogicOp(opcode) };
}

pub fn retrace_glStencilFunc(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut func: GLenum;
    func = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut _ref: GLint;
    _ref = (call.arg(1)).to_i32().unwrap();

    let mut mask: GLuint;
    mask = (call.arg(2)).to_u32().unwrap();

    unsafe { gl::StencilFunc(func, _ref, mask) };
}

pub fn retrace_glStencilOp(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut fail: GLenum;
    fail = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut zfail: GLenum;
    zfail = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut zpass: GLenum;
    zpass = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    unsafe { gl::StencilOp(fail, zfail, zpass) };
}

pub fn retrace_glDepthFunc(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut func: GLenum;
    func = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    unsafe { gl::DepthFunc(func) };
}

pub fn retrace_glPixelStoref(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut pname: GLenum;
    pname = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut param: GLfloat;
    param = (call.arg(1)).to_f32().unwrap();

    unsafe { gl::PixelStoref(pname, param) };
}

pub fn retrace_glPixelStorei(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut pname: GLenum;
    pname = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut param: GLint;
    param = (call.arg(1)).to_i32().unwrap();

    unsafe { gl::PixelStorei(pname, param) };
}

pub fn retrace_glReadBuffer(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    unsafe { gl::ReadBuffer(mode) };
}

pub fn retrace_glReadPixels(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut x: GLint;
    x = (call.arg(0)).to_i32().unwrap();

    let mut y: GLint;
    y = (call.arg(1)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(2)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(3)).to_i32().unwrap();

    let mut format: GLenum;
    format = (call.arg(4)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(5)).to_u32().unwrap().try_into().unwrap();

    let pixels = (call.arg(6)).to_pointer();

    let _pack_buffer = 0;
    if self.context.features("pixel_buffer_object") {
//not found in gl!        unsafe { gl::GetIntegerv(gl::PIXEL_PACK_BUFFER_BINDING, &_pack_buffer) };
    }
     let buffer = Vec::<u8>::new();
    if _pack_buffer != 0 {
     let _w = call.arg(2).to_i32().unwrap();
     let _h = call.arg(3).to_i32().unwrap();
     buffer.resize(_w * _h * 64, 0);
    }
    pixels = buffer.data();
//not found in gl!    unsafe { gl::ReadPixels(x, y, width, height, format, _type, pixels) };
}

pub fn retrace_glGetTexImage(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(1)).to_i32().unwrap();

    let mut format: GLenum;
    format = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let pixels = (call.arg(4)).to_pointer();

    let _pack_buffer = 0;
    if self.context.features("pixel_buffer_object") {
//not found in gl!        unsafe { gl::GetIntegerv(gl::PIXEL_PACK_BUFFER_BINDING, &_pack_buffer) };
    }
     let buffer = Vec::<u8>::new();
    if _pack_buffer != 0 {
        return;
    }
    pixels = buffer.data();
//not found in gl!    unsafe { gl::GetTexImage(target, level, format, _type, pixels) };
}

pub fn retrace_glDepthRange(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut zNear: GLdouble;
    zNear = (call.arg(0)).to_f64().unwrap();

    let mut zFar: GLdouble;
    zFar = (call.arg(1)).to_f64().unwrap();

    unsafe { gl::DepthRange(zNear, zFar) };
}

pub fn retrace_glViewport(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut x: GLint;
    x = (call.arg(0)).to_i32().unwrap();

    let mut y: GLint;
    y = (call.arg(1)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(2)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(3)).to_i32().unwrap();

    glretrace::updateDrawable(x + width, y + height);
    unsafe { gl::Viewport(x, y, width, height) };
}

pub fn retrace_glNewList(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut list: GLuint;
    list = (call.arg(0)).to_u32().unwrap();
    list = self._list_map[list];

    let mut mode: GLenum;
    mode = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    self.context.insideList = true;
//not found in gl!    unsafe { gl::NewList(list, mode) };
}

pub fn retrace_glEndList(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    self.context.insideList = false;
//not found in gl!    unsafe { gl::EndList() };
}

pub fn retrace_glCallList(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut list: GLuint;
    list = (call.arg(0)).to_u32().unwrap();
    list = self._list_map[list];

//not found in gl!    unsafe { gl::CallList(list) };
}

pub fn retrace_glCallLists(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut n: GLsizei;
    n = (call.arg(0)).to_i32().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let lists: &mut [GLc_void];
    let lists = (call.arg(2)).to_pointer().unwrap() as *mut c_void;

//not found in gl!    unsafe { gl::CallLists(n, _type, lists) };
}

pub fn retrace_glDeleteLists(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut list: GLuint;
    list = (call.arg(0)).to_u32().unwrap();
    list = self._list_map[list];

    let mut range: GLsizei;
    range = (call.arg(1)).to_i32().unwrap();

//not found in gl!    unsafe { gl::DeleteLists(list, range) };
}

pub fn retrace_glGenLists(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut range: GLsizei;
    range = (call.arg(0)).to_i32().unwrap();

//not found in gl!    let _result = unsafe { gl::GenLists(range) };

    let _origResult: GLuint;
    _origResult = (*call.ret).to_u32().unwrap();
    for _hPGLuint20 in 0..range {
        _list_map[_origResult + _hPGLuint20] = _result + _hPGLuint20;
    }
}

pub fn retrace_glListBase(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut base: GLuint;
    base = (call.arg(0)).to_u32().unwrap();
    base = self._list_map[base];

//not found in gl!    unsafe { gl::ListBase(base) };
}

pub fn retrace_glBegin(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::Begin(mode) };
    self.context.inside_begin_end = true;
}

pub fn retrace_glBitmap(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut width: GLsizei;
    width = (call.arg(0)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(1)).to_i32().unwrap();

    let mut xorig: GLfloat;
    xorig = (call.arg(2)).to_f32().unwrap();

    let mut yorig: GLfloat;
    yorig = (call.arg(3)).to_f32().unwrap();

    let mut xmove: GLfloat;
    xmove = (call.arg(4)).to_f32().unwrap();

    let mut ymove: GLfloat;
    ymove = (call.arg(5)).to_f32().unwrap();

    let bitmap: &mut [GLubyte];
    let bitmap = (call.arg(6)).to_pointer().unwrap() as *mut c_void;

//not found in gl!    unsafe { gl::Bitmap(width, height, xorig, yorig, xmove, ymove, bitmap) };
}

pub fn retrace_glColor3b(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut red: GLbyte;
    red = (call.arg(0)).to_i32().unwrap();

    let mut green: GLbyte;
    green = (call.arg(1)).to_i32().unwrap();

    let mut blue: GLbyte;
    blue = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::Color3b(red, green, blue) };
}

pub fn retrace_glColor3bv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLbyte];
    v = _allocator.alloc_array::<GLbyte>(&call.arg(0));
    let _a_GLbyte1_0 = (call.arg(0)).to_array();
    if let Some(_a_GLbyte1_0) = _a_GLbyte1_0 {
        for _jGLbyte1 in 0.._a_GLbyte1_0.values.len() {
    v[_jGLbyte1] = (*_a_GLbyte1_0.values[_jGLbyte1]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::Color3bv(v) };
}

pub fn retrace_glColor3d(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut red: GLdouble;
    red = (call.arg(0)).to_f64().unwrap();

    let mut green: GLdouble;
    green = (call.arg(1)).to_f64().unwrap();

    let mut blue: GLdouble;
    blue = (call.arg(2)).to_f64().unwrap();

//not found in gl!    unsafe { gl::Color3d(red, green, blue) };
}

pub fn retrace_glColor3dv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLdouble];
    v = _allocator.alloc_array::<GLdouble>(&call.arg(0));
    let _a_GLdouble25_0 = (call.arg(0)).to_array();
    if let Some(_a_GLdouble25_0) = _a_GLdouble25_0 {
        for _jGLdouble25 in 0.._a_GLdouble25_0.values.len() {
    v[_jGLdouble25] = (*_a_GLdouble25_0.values[_jGLdouble25]).to_f64().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::Color3dv(v) };
}

pub fn retrace_glColor3f(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut red: GLfloat;
    red = (call.arg(0)).to_f32().unwrap();

    let mut green: GLfloat;
    green = (call.arg(1)).to_f32().unwrap();

    let mut blue: GLfloat;
    blue = (call.arg(2)).to_f32().unwrap();

//not found in gl!    unsafe { gl::Color3f(red, green, blue) };
}

pub fn retrace_glColor3fv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLfloat];
    v = _allocator.alloc_array::<GLfloat>(&call.arg(0));
    let _a_GLfloat87_0 = (call.arg(0)).to_array();
    if let Some(_a_GLfloat87_0) = _a_GLfloat87_0 {
        for _jGLfloat87 in 0.._a_GLfloat87_0.values.len() {
    v[_jGLfloat87] = (*_a_GLfloat87_0.values[_jGLfloat87]).to_f32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::Color3fv(v) };
}

pub fn retrace_glColor3i(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut red: GLint;
    red = (call.arg(0)).to_i32().unwrap();

    let mut green: GLint;
    green = (call.arg(1)).to_i32().unwrap();

    let mut blue: GLint;
    blue = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::Color3i(red, green, blue) };
}

pub fn retrace_glColor3iv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLint];
    v = _allocator.alloc_array::<GLint>(&call.arg(0));
    let _a_GLint130_0 = (call.arg(0)).to_array();
    if let Some(_a_GLint130_0) = _a_GLint130_0 {
        for _jGLint130 in 0.._a_GLint130_0.values.len() {
    v[_jGLint130] = (*_a_GLint130_0.values[_jGLint130]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::Color3iv(v) };
}

pub fn retrace_glColor3s(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut red: GLshort;
    red = (call.arg(0)).to_i32().unwrap();

    let mut green: GLshort;
    green = (call.arg(1)).to_i32().unwrap();

    let mut blue: GLshort;
    blue = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::Color3s(red, green, blue) };
}

pub fn retrace_glColor3sv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLshort];
    v = _allocator.alloc_array::<GLshort>(&call.arg(0));
    let _a_GLshort1_0 = (call.arg(0)).to_array();
    if let Some(_a_GLshort1_0) = _a_GLshort1_0 {
        for _jGLshort1 in 0.._a_GLshort1_0.values.len() {
    v[_jGLshort1] = (*_a_GLshort1_0.values[_jGLshort1]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::Color3sv(v) };
}

pub fn retrace_glColor3ub(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut red: GLubyte;
    red = (call.arg(0)).to_u32().unwrap();

    let mut green: GLubyte;
    green = (call.arg(1)).to_u32().unwrap();

    let mut blue: GLubyte;
    blue = (call.arg(2)).to_u32().unwrap();

//not found in gl!    unsafe { gl::Color3ub(red, green, blue) };
}

pub fn retrace_glColor3ubv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLubyte];
    v = _allocator.alloc_array::<GLubyte>(&call.arg(0));
    let _a_GLubyte6_0 = (call.arg(0)).to_array();
    if let Some(_a_GLubyte6_0) = _a_GLubyte6_0 {
        for _jGLubyte6 in 0.._a_GLubyte6_0.values.len() {
    v[_jGLubyte6] = (*_a_GLubyte6_0.values[_jGLubyte6]).to_u32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::Color3ubv(v) };
}

pub fn retrace_glColor3ui(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut red: GLuint;
    red = (call.arg(0)).to_u32().unwrap();

    let mut green: GLuint;
    green = (call.arg(1)).to_u32().unwrap();

    let mut blue: GLuint;
    blue = (call.arg(2)).to_u32().unwrap();

//not found in gl!    unsafe { gl::Color3ui(red, green, blue) };
}

pub fn retrace_glColor3uiv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLuint];
    v = _allocator.alloc_array::<GLuint>(&call.arg(0));
    let _a_GLuint79_0 = (call.arg(0)).to_array();
    if let Some(_a_GLuint79_0) = _a_GLuint79_0 {
        for _jGLuint79 in 0.._a_GLuint79_0.values.len() {
    v[_jGLuint79] = (*_a_GLuint79_0.values[_jGLuint79]).to_u32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::Color3uiv(v) };
}

pub fn retrace_glColor3us(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut red: GLushort;
    red = (call.arg(0)).to_u32().unwrap();

    let mut green: GLushort;
    green = (call.arg(1)).to_u32().unwrap();

    let mut blue: GLushort;
    blue = (call.arg(2)).to_u32().unwrap();

//not found in gl!    unsafe { gl::Color3us(red, green, blue) };
}

pub fn retrace_glColor3usv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLushort];
    v = _allocator.alloc_array::<GLushort>(&call.arg(0));
    let _a_GLushort3_0 = (call.arg(0)).to_array();
    if let Some(_a_GLushort3_0) = _a_GLushort3_0 {
        for _jGLushort3 in 0.._a_GLushort3_0.values.len() {
    v[_jGLushort3] = (*_a_GLushort3_0.values[_jGLushort3]).to_u32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::Color3usv(v) };
}

pub fn retrace_glColor4b(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut red: GLbyte;
    red = (call.arg(0)).to_i32().unwrap();

    let mut green: GLbyte;
    green = (call.arg(1)).to_i32().unwrap();

    let mut blue: GLbyte;
    blue = (call.arg(2)).to_i32().unwrap();

    let mut alpha: GLbyte;
    alpha = (call.arg(3)).to_i32().unwrap();

//not found in gl!    unsafe { gl::Color4b(red, green, blue, alpha) };
}

pub fn retrace_glColor4bv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLbyte];
    v = _allocator.alloc_array::<GLbyte>(&call.arg(0));
    let _a_GLbyte2_0 = (call.arg(0)).to_array();
    if let Some(_a_GLbyte2_0) = _a_GLbyte2_0 {
        for _jGLbyte2 in 0.._a_GLbyte2_0.values.len() {
    v[_jGLbyte2] = (*_a_GLbyte2_0.values[_jGLbyte2]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::Color4bv(v) };
}

pub fn retrace_glColor4d(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut red: GLdouble;
    red = (call.arg(0)).to_f64().unwrap();

    let mut green: GLdouble;
    green = (call.arg(1)).to_f64().unwrap();

    let mut blue: GLdouble;
    blue = (call.arg(2)).to_f64().unwrap();

    let mut alpha: GLdouble;
    alpha = (call.arg(3)).to_f64().unwrap();

//not found in gl!    unsafe { gl::Color4d(red, green, blue, alpha) };
}

pub fn retrace_glColor4dv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLdouble];
    v = _allocator.alloc_array::<GLdouble>(&call.arg(0));
    let _a_GLdouble26_0 = (call.arg(0)).to_array();
    if let Some(_a_GLdouble26_0) = _a_GLdouble26_0 {
        for _jGLdouble26 in 0.._a_GLdouble26_0.values.len() {
    v[_jGLdouble26] = (*_a_GLdouble26_0.values[_jGLdouble26]).to_f64().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::Color4dv(v) };
}

pub fn retrace_glColor4f(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut red: GLfloat;
    red = (call.arg(0)).to_f32().unwrap();

    let mut green: GLfloat;
    green = (call.arg(1)).to_f32().unwrap();

    let mut blue: GLfloat;
    blue = (call.arg(2)).to_f32().unwrap();

    let mut alpha: GLfloat;
    alpha = (call.arg(3)).to_f32().unwrap();

//not found in gl!    unsafe { gl::Color4f(red, green, blue, alpha) };
}

pub fn retrace_glColor4fv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLfloat];
    v = _allocator.alloc_array::<GLfloat>(&call.arg(0));
    let _a_GLfloat88_0 = (call.arg(0)).to_array();
    if let Some(_a_GLfloat88_0) = _a_GLfloat88_0 {
        for _jGLfloat88 in 0.._a_GLfloat88_0.values.len() {
    v[_jGLfloat88] = (*_a_GLfloat88_0.values[_jGLfloat88]).to_f32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::Color4fv(v) };
}

pub fn retrace_glColor4i(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut red: GLint;
    red = (call.arg(0)).to_i32().unwrap();

    let mut green: GLint;
    green = (call.arg(1)).to_i32().unwrap();

    let mut blue: GLint;
    blue = (call.arg(2)).to_i32().unwrap();

    let mut alpha: GLint;
    alpha = (call.arg(3)).to_i32().unwrap();

//not found in gl!    unsafe { gl::Color4i(red, green, blue, alpha) };
}

pub fn retrace_glColor4iv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLint];
    v = _allocator.alloc_array::<GLint>(&call.arg(0));
    let _a_GLint131_0 = (call.arg(0)).to_array();
    if let Some(_a_GLint131_0) = _a_GLint131_0 {
        for _jGLint131 in 0.._a_GLint131_0.values.len() {
    v[_jGLint131] = (*_a_GLint131_0.values[_jGLint131]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::Color4iv(v) };
}

pub fn retrace_glColor4s(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut red: GLshort;
    red = (call.arg(0)).to_i32().unwrap();

    let mut green: GLshort;
    green = (call.arg(1)).to_i32().unwrap();

    let mut blue: GLshort;
    blue = (call.arg(2)).to_i32().unwrap();

    let mut alpha: GLshort;
    alpha = (call.arg(3)).to_i32().unwrap();

//not found in gl!    unsafe { gl::Color4s(red, green, blue, alpha) };
}

pub fn retrace_glColor4sv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLshort];
    v = _allocator.alloc_array::<GLshort>(&call.arg(0));
    let _a_GLshort2_0 = (call.arg(0)).to_array();
    if let Some(_a_GLshort2_0) = _a_GLshort2_0 {
        for _jGLshort2 in 0.._a_GLshort2_0.values.len() {
    v[_jGLshort2] = (*_a_GLshort2_0.values[_jGLshort2]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::Color4sv(v) };
}

pub fn retrace_glColor4ub(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut red: GLubyte;
    red = (call.arg(0)).to_u32().unwrap();

    let mut green: GLubyte;
    green = (call.arg(1)).to_u32().unwrap();

    let mut blue: GLubyte;
    blue = (call.arg(2)).to_u32().unwrap();

    let mut alpha: GLubyte;
    alpha = (call.arg(3)).to_u32().unwrap();

//not found in gl!    unsafe { gl::Color4ub(red, green, blue, alpha) };
}

pub fn retrace_glColor4ubv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLubyte];
    v = _allocator.alloc_array::<GLubyte>(&call.arg(0));
    let _a_GLubyte7_0 = (call.arg(0)).to_array();
    if let Some(_a_GLubyte7_0) = _a_GLubyte7_0 {
        for _jGLubyte7 in 0.._a_GLubyte7_0.values.len() {
    v[_jGLubyte7] = (*_a_GLubyte7_0.values[_jGLubyte7]).to_u32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::Color4ubv(v) };
}

pub fn retrace_glColor4ui(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut red: GLuint;
    red = (call.arg(0)).to_u32().unwrap();

    let mut green: GLuint;
    green = (call.arg(1)).to_u32().unwrap();

    let mut blue: GLuint;
    blue = (call.arg(2)).to_u32().unwrap();

    let mut alpha: GLuint;
    alpha = (call.arg(3)).to_u32().unwrap();

//not found in gl!    unsafe { gl::Color4ui(red, green, blue, alpha) };
}

pub fn retrace_glColor4uiv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLuint];
    v = _allocator.alloc_array::<GLuint>(&call.arg(0));
    let _a_GLuint80_0 = (call.arg(0)).to_array();
    if let Some(_a_GLuint80_0) = _a_GLuint80_0 {
        for _jGLuint80 in 0.._a_GLuint80_0.values.len() {
    v[_jGLuint80] = (*_a_GLuint80_0.values[_jGLuint80]).to_u32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::Color4uiv(v) };
}

pub fn retrace_glColor4us(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut red: GLushort;
    red = (call.arg(0)).to_u32().unwrap();

    let mut green: GLushort;
    green = (call.arg(1)).to_u32().unwrap();

    let mut blue: GLushort;
    blue = (call.arg(2)).to_u32().unwrap();

    let mut alpha: GLushort;
    alpha = (call.arg(3)).to_u32().unwrap();

//not found in gl!    unsafe { gl::Color4us(red, green, blue, alpha) };
}

pub fn retrace_glColor4usv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLushort];
    v = _allocator.alloc_array::<GLushort>(&call.arg(0));
    let _a_GLushort4_0 = (call.arg(0)).to_array();
    if let Some(_a_GLushort4_0) = _a_GLushort4_0 {
        for _jGLushort4 in 0.._a_GLushort4_0.values.len() {
    v[_jGLushort4] = (*_a_GLushort4_0.values[_jGLushort4]).to_u32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::Color4usv(v) };
}

pub fn retrace_glEdgeFlag(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut flag: GLboolean;
    flag = (call.arg(0)).to_u32().unwrap() as u8;

//not found in gl!    unsafe { gl::EdgeFlag(flag) };
}

pub fn retrace_glEdgeFlagv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let flag: &mut [GLboolean];
    flag = _allocator.alloc_array::<GLboolean>(&call.arg(0));
    let _a_PGLboolean_0 = (call.arg(0)).to_array().unwrap();
    flag[0] = (_a_PGLboolean_0.values[0]).to_u32().unwrap() as u8;

//not found in gl!    unsafe { gl::EdgeFlagv(flag) };
}

pub fn retrace_glEnd(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    self.context.insideBeginEnd = false;
//not found in gl!    unsafe { gl::End() };
}

pub fn retrace_glIndexd(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut c: GLdouble;
    c = (call.arg(0)).to_f64().unwrap();

//not found in gl!    unsafe { gl::Indexd(c) };
}

pub fn retrace_glIndexdv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let c: &mut [GLdouble];
    c = _allocator.alloc_array::<GLdouble>(&call.arg(0));
    let _a_PGLdouble1_0 = (call.arg(0)).to_array().unwrap();
    c[0] = (_a_PGLdouble1_0.values[0]).to_f64().unwrap();

//not found in gl!    unsafe { gl::Indexdv(c) };
}

pub fn retrace_glIndexf(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut c: GLfloat;
    c = (call.arg(0)).to_f32().unwrap();

//not found in gl!    unsafe { gl::Indexf(c) };
}

pub fn retrace_glIndexfv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let c: &mut [GLfloat];
    c = _allocator.alloc_array::<GLfloat>(&call.arg(0));
    let _a_PGLfloat11_0 = (call.arg(0)).to_array().unwrap();
    c[0] = (_a_PGLfloat11_0.values[0]).to_f32().unwrap();

//not found in gl!    unsafe { gl::Indexfv(c) };
}

pub fn retrace_glIndexi(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut c: GLint;
    c = (call.arg(0)).to_i32().unwrap();

//not found in gl!    unsafe { gl::Indexi(c) };
}

pub fn retrace_glIndexiv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let c: &mut [GLint];
    c = _allocator.alloc_array::<GLint>(&call.arg(0));
    let _a_PGLint29_0 = (call.arg(0)).to_array().unwrap();
    c[0] = (_a_PGLint29_0.values[0]).to_i32().unwrap();

//not found in gl!    unsafe { gl::Indexiv(c) };
}

pub fn retrace_glIndexs(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut c: GLshort;
    c = (call.arg(0)).to_i32().unwrap();

//not found in gl!    unsafe { gl::Indexs(c) };
}

pub fn retrace_glIndexsv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let c: &mut [GLshort];
    c = _allocator.alloc_array::<GLshort>(&call.arg(0));
    let _a_PGLshort_0 = (call.arg(0)).to_array().unwrap();
    c[0] = (_a_PGLshort_0.values[0]).to_i32().unwrap();

//not found in gl!    unsafe { gl::Indexsv(c) };
}

pub fn retrace_glNormal3b(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut nx: GLbyte;
    nx = (call.arg(0)).to_i32().unwrap();

    let mut ny: GLbyte;
    ny = (call.arg(1)).to_i32().unwrap();

    let mut nz: GLbyte;
    nz = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::Normal3b(nx, ny, nz) };
}

pub fn retrace_glNormal3bv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLbyte];
    v = _allocator.alloc_array::<GLbyte>(&call.arg(0));
    let _a_GLbyte3_0 = (call.arg(0)).to_array();
    if let Some(_a_GLbyte3_0) = _a_GLbyte3_0 {
        for _jGLbyte3 in 0.._a_GLbyte3_0.values.len() {
    v[_jGLbyte3] = (*_a_GLbyte3_0.values[_jGLbyte3]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::Normal3bv(v) };
}

pub fn retrace_glNormal3d(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut nx: GLdouble;
    nx = (call.arg(0)).to_f64().unwrap();

    let mut ny: GLdouble;
    ny = (call.arg(1)).to_f64().unwrap();

    let mut nz: GLdouble;
    nz = (call.arg(2)).to_f64().unwrap();

//not found in gl!    unsafe { gl::Normal3d(nx, ny, nz) };
}

pub fn retrace_glNormal3dv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLdouble];
    v = _allocator.alloc_array::<GLdouble>(&call.arg(0));
    let _a_GLdouble27_0 = (call.arg(0)).to_array();
    if let Some(_a_GLdouble27_0) = _a_GLdouble27_0 {
        for _jGLdouble27 in 0.._a_GLdouble27_0.values.len() {
    v[_jGLdouble27] = (*_a_GLdouble27_0.values[_jGLdouble27]).to_f64().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::Normal3dv(v) };
}

pub fn retrace_glNormal3f(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut nx: GLfloat;
    nx = (call.arg(0)).to_f32().unwrap();

    let mut ny: GLfloat;
    ny = (call.arg(1)).to_f32().unwrap();

    let mut nz: GLfloat;
    nz = (call.arg(2)).to_f32().unwrap();

//not found in gl!    unsafe { gl::Normal3f(nx, ny, nz) };
}

pub fn retrace_glNormal3fv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLfloat];
    v = _allocator.alloc_array::<GLfloat>(&call.arg(0));
    let _a_GLfloat89_0 = (call.arg(0)).to_array();
    if let Some(_a_GLfloat89_0) = _a_GLfloat89_0 {
        for _jGLfloat89 in 0.._a_GLfloat89_0.values.len() {
    v[_jGLfloat89] = (*_a_GLfloat89_0.values[_jGLfloat89]).to_f32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::Normal3fv(v) };
}

pub fn retrace_glNormal3i(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut nx: GLint;
    nx = (call.arg(0)).to_i32().unwrap();

    let mut ny: GLint;
    ny = (call.arg(1)).to_i32().unwrap();

    let mut nz: GLint;
    nz = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::Normal3i(nx, ny, nz) };
}

pub fn retrace_glNormal3iv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLint];
    v = _allocator.alloc_array::<GLint>(&call.arg(0));
    let _a_GLint132_0 = (call.arg(0)).to_array();
    if let Some(_a_GLint132_0) = _a_GLint132_0 {
        for _jGLint132 in 0.._a_GLint132_0.values.len() {
    v[_jGLint132] = (*_a_GLint132_0.values[_jGLint132]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::Normal3iv(v) };
}

pub fn retrace_glNormal3s(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut nx: GLshort;
    nx = (call.arg(0)).to_i32().unwrap();

    let mut ny: GLshort;
    ny = (call.arg(1)).to_i32().unwrap();

    let mut nz: GLshort;
    nz = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::Normal3s(nx, ny, nz) };
}

pub fn retrace_glNormal3sv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLshort];
    v = _allocator.alloc_array::<GLshort>(&call.arg(0));
    let _a_GLshort3_0 = (call.arg(0)).to_array();
    if let Some(_a_GLshort3_0) = _a_GLshort3_0 {
        for _jGLshort3 in 0.._a_GLshort3_0.values.len() {
    v[_jGLshort3] = (*_a_GLshort3_0.values[_jGLshort3]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::Normal3sv(v) };
}

pub fn retrace_glRasterPos2d(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut x: GLdouble;
    x = (call.arg(0)).to_f64().unwrap();

    let mut y: GLdouble;
    y = (call.arg(1)).to_f64().unwrap();

//not found in gl!    unsafe { gl::RasterPos2d(x, y) };
}

pub fn retrace_glRasterPos2dv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLdouble];
    v = _allocator.alloc_array::<GLdouble>(&call.arg(0));
    let _a_GLdouble28_0 = (call.arg(0)).to_array();
    if let Some(_a_GLdouble28_0) = _a_GLdouble28_0 {
        for _jGLdouble28 in 0.._a_GLdouble28_0.values.len() {
    v[_jGLdouble28] = (*_a_GLdouble28_0.values[_jGLdouble28]).to_f64().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::RasterPos2dv(v) };
}

pub fn retrace_glRasterPos2f(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut x: GLfloat;
    x = (call.arg(0)).to_f32().unwrap();

    let mut y: GLfloat;
    y = (call.arg(1)).to_f32().unwrap();

//not found in gl!    unsafe { gl::RasterPos2f(x, y) };
}

pub fn retrace_glRasterPos2fv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLfloat];
    v = _allocator.alloc_array::<GLfloat>(&call.arg(0));
    let _a_GLfloat90_0 = (call.arg(0)).to_array();
    if let Some(_a_GLfloat90_0) = _a_GLfloat90_0 {
        for _jGLfloat90 in 0.._a_GLfloat90_0.values.len() {
    v[_jGLfloat90] = (*_a_GLfloat90_0.values[_jGLfloat90]).to_f32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::RasterPos2fv(v) };
}

pub fn retrace_glRasterPos2i(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut x: GLint;
    x = (call.arg(0)).to_i32().unwrap();

    let mut y: GLint;
    y = (call.arg(1)).to_i32().unwrap();

//not found in gl!    unsafe { gl::RasterPos2i(x, y) };
}

pub fn retrace_glRasterPos2iv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLint];
    v = _allocator.alloc_array::<GLint>(&call.arg(0));
    let _a_GLint133_0 = (call.arg(0)).to_array();
    if let Some(_a_GLint133_0) = _a_GLint133_0 {
        for _jGLint133 in 0.._a_GLint133_0.values.len() {
    v[_jGLint133] = (*_a_GLint133_0.values[_jGLint133]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::RasterPos2iv(v) };
}

pub fn retrace_glRasterPos2s(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut x: GLshort;
    x = (call.arg(0)).to_i32().unwrap();

    let mut y: GLshort;
    y = (call.arg(1)).to_i32().unwrap();

//not found in gl!    unsafe { gl::RasterPos2s(x, y) };
}

pub fn retrace_glRasterPos2sv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLshort];
    v = _allocator.alloc_array::<GLshort>(&call.arg(0));
    let _a_GLshort4_0 = (call.arg(0)).to_array();
    if let Some(_a_GLshort4_0) = _a_GLshort4_0 {
        for _jGLshort4 in 0.._a_GLshort4_0.values.len() {
    v[_jGLshort4] = (*_a_GLshort4_0.values[_jGLshort4]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::RasterPos2sv(v) };
}

pub fn retrace_glRasterPos3d(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut x: GLdouble;
    x = (call.arg(0)).to_f64().unwrap();

    let mut y: GLdouble;
    y = (call.arg(1)).to_f64().unwrap();

    let mut z: GLdouble;
    z = (call.arg(2)).to_f64().unwrap();

//not found in gl!    unsafe { gl::RasterPos3d(x, y, z) };
}

pub fn retrace_glRasterPos3dv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLdouble];
    v = _allocator.alloc_array::<GLdouble>(&call.arg(0));
    let _a_GLdouble29_0 = (call.arg(0)).to_array();
    if let Some(_a_GLdouble29_0) = _a_GLdouble29_0 {
        for _jGLdouble29 in 0.._a_GLdouble29_0.values.len() {
    v[_jGLdouble29] = (*_a_GLdouble29_0.values[_jGLdouble29]).to_f64().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::RasterPos3dv(v) };
}

pub fn retrace_glRasterPos3f(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut x: GLfloat;
    x = (call.arg(0)).to_f32().unwrap();

    let mut y: GLfloat;
    y = (call.arg(1)).to_f32().unwrap();

    let mut z: GLfloat;
    z = (call.arg(2)).to_f32().unwrap();

//not found in gl!    unsafe { gl::RasterPos3f(x, y, z) };
}

pub fn retrace_glRasterPos3fv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLfloat];
    v = _allocator.alloc_array::<GLfloat>(&call.arg(0));
    let _a_GLfloat91_0 = (call.arg(0)).to_array();
    if let Some(_a_GLfloat91_0) = _a_GLfloat91_0 {
        for _jGLfloat91 in 0.._a_GLfloat91_0.values.len() {
    v[_jGLfloat91] = (*_a_GLfloat91_0.values[_jGLfloat91]).to_f32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::RasterPos3fv(v) };
}

pub fn retrace_glRasterPos3i(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut x: GLint;
    x = (call.arg(0)).to_i32().unwrap();

    let mut y: GLint;
    y = (call.arg(1)).to_i32().unwrap();

    let mut z: GLint;
    z = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::RasterPos3i(x, y, z) };
}

pub fn retrace_glRasterPos3iv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLint];
    v = _allocator.alloc_array::<GLint>(&call.arg(0));
    let _a_GLint134_0 = (call.arg(0)).to_array();
    if let Some(_a_GLint134_0) = _a_GLint134_0 {
        for _jGLint134 in 0.._a_GLint134_0.values.len() {
    v[_jGLint134] = (*_a_GLint134_0.values[_jGLint134]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::RasterPos3iv(v) };
}

pub fn retrace_glRasterPos3s(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut x: GLshort;
    x = (call.arg(0)).to_i32().unwrap();

    let mut y: GLshort;
    y = (call.arg(1)).to_i32().unwrap();

    let mut z: GLshort;
    z = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::RasterPos3s(x, y, z) };
}

pub fn retrace_glRasterPos3sv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLshort];
    v = _allocator.alloc_array::<GLshort>(&call.arg(0));
    let _a_GLshort5_0 = (call.arg(0)).to_array();
    if let Some(_a_GLshort5_0) = _a_GLshort5_0 {
        for _jGLshort5 in 0.._a_GLshort5_0.values.len() {
    v[_jGLshort5] = (*_a_GLshort5_0.values[_jGLshort5]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::RasterPos3sv(v) };
}

pub fn retrace_glRasterPos4d(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut x: GLdouble;
    x = (call.arg(0)).to_f64().unwrap();

    let mut y: GLdouble;
    y = (call.arg(1)).to_f64().unwrap();

    let mut z: GLdouble;
    z = (call.arg(2)).to_f64().unwrap();

    let mut w: GLdouble;
    w = (call.arg(3)).to_f64().unwrap();

//not found in gl!    unsafe { gl::RasterPos4d(x, y, z, w) };
}

pub fn retrace_glRasterPos4dv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLdouble];
    v = _allocator.alloc_array::<GLdouble>(&call.arg(0));
    let _a_GLdouble30_0 = (call.arg(0)).to_array();
    if let Some(_a_GLdouble30_0) = _a_GLdouble30_0 {
        for _jGLdouble30 in 0.._a_GLdouble30_0.values.len() {
    v[_jGLdouble30] = (*_a_GLdouble30_0.values[_jGLdouble30]).to_f64().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::RasterPos4dv(v) };
}

pub fn retrace_glRasterPos4f(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut x: GLfloat;
    x = (call.arg(0)).to_f32().unwrap();

    let mut y: GLfloat;
    y = (call.arg(1)).to_f32().unwrap();

    let mut z: GLfloat;
    z = (call.arg(2)).to_f32().unwrap();

    let mut w: GLfloat;
    w = (call.arg(3)).to_f32().unwrap();

//not found in gl!    unsafe { gl::RasterPos4f(x, y, z, w) };
}

pub fn retrace_glRasterPos4fv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLfloat];
    v = _allocator.alloc_array::<GLfloat>(&call.arg(0));
    let _a_GLfloat92_0 = (call.arg(0)).to_array();
    if let Some(_a_GLfloat92_0) = _a_GLfloat92_0 {
        for _jGLfloat92 in 0.._a_GLfloat92_0.values.len() {
    v[_jGLfloat92] = (*_a_GLfloat92_0.values[_jGLfloat92]).to_f32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::RasterPos4fv(v) };
}

pub fn retrace_glRasterPos4i(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut x: GLint;
    x = (call.arg(0)).to_i32().unwrap();

    let mut y: GLint;
    y = (call.arg(1)).to_i32().unwrap();

    let mut z: GLint;
    z = (call.arg(2)).to_i32().unwrap();

    let mut w: GLint;
    w = (call.arg(3)).to_i32().unwrap();

//not found in gl!    unsafe { gl::RasterPos4i(x, y, z, w) };
}

pub fn retrace_glRasterPos4iv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLint];
    v = _allocator.alloc_array::<GLint>(&call.arg(0));
    let _a_GLint135_0 = (call.arg(0)).to_array();
    if let Some(_a_GLint135_0) = _a_GLint135_0 {
        for _jGLint135 in 0.._a_GLint135_0.values.len() {
    v[_jGLint135] = (*_a_GLint135_0.values[_jGLint135]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::RasterPos4iv(v) };
}

pub fn retrace_glRasterPos4s(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut x: GLshort;
    x = (call.arg(0)).to_i32().unwrap();

    let mut y: GLshort;
    y = (call.arg(1)).to_i32().unwrap();

    let mut z: GLshort;
    z = (call.arg(2)).to_i32().unwrap();

    let mut w: GLshort;
    w = (call.arg(3)).to_i32().unwrap();

//not found in gl!    unsafe { gl::RasterPos4s(x, y, z, w) };
}

pub fn retrace_glRasterPos4sv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLshort];
    v = _allocator.alloc_array::<GLshort>(&call.arg(0));
    let _a_GLshort6_0 = (call.arg(0)).to_array();
    if let Some(_a_GLshort6_0) = _a_GLshort6_0 {
        for _jGLshort6 in 0.._a_GLshort6_0.values.len() {
    v[_jGLshort6] = (*_a_GLshort6_0.values[_jGLshort6]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::RasterPos4sv(v) };
}

pub fn retrace_glRectd(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut x1: GLdouble;
    x1 = (call.arg(0)).to_f64().unwrap();

    let mut y1: GLdouble;
    y1 = (call.arg(1)).to_f64().unwrap();

    let mut x2: GLdouble;
    x2 = (call.arg(2)).to_f64().unwrap();

    let mut y2: GLdouble;
    y2 = (call.arg(3)).to_f64().unwrap();

//not found in gl!    unsafe { gl::Rectd(x1, y1, x2, y2) };
}

pub fn retrace_glRectdv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v1: &mut [GLdouble];
    v1 = _allocator.alloc_array::<GLdouble>(&call.arg(0));
    let _a_GLdouble31_0 = (call.arg(0)).to_array();
    if let Some(_a_GLdouble31_0) = _a_GLdouble31_0 {
        for _jGLdouble31 in 0.._a_GLdouble31_0.values.len() {
    v1[_jGLdouble31] = (*_a_GLdouble31_0.values[_jGLdouble31]).to_f64().unwrap();
        }
    }
    let v1 = v1.as_mut_ptr();

    let v2: &mut [GLdouble];
    v2 = _allocator.alloc_array::<GLdouble>(&call.arg(1));
    let _a_GLdouble32_0 = (call.arg(1)).to_array();
    if let Some(_a_GLdouble32_0) = _a_GLdouble32_0 {
        for _jGLdouble32 in 0.._a_GLdouble32_0.values.len() {
    v2[_jGLdouble32] = (*_a_GLdouble32_0.values[_jGLdouble32]).to_f64().unwrap();
        }
    }
    let v2 = v2.as_mut_ptr();

//not found in gl!    unsafe { gl::Rectdv(v1, v2) };
}

pub fn retrace_glRectf(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut x1: GLfloat;
    x1 = (call.arg(0)).to_f32().unwrap();

    let mut y1: GLfloat;
    y1 = (call.arg(1)).to_f32().unwrap();

    let mut x2: GLfloat;
    x2 = (call.arg(2)).to_f32().unwrap();

    let mut y2: GLfloat;
    y2 = (call.arg(3)).to_f32().unwrap();

//not found in gl!    unsafe { gl::Rectf(x1, y1, x2, y2) };
}

pub fn retrace_glRectfv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v1: &mut [GLfloat];
    v1 = _allocator.alloc_array::<GLfloat>(&call.arg(0));
    let _a_GLfloat93_0 = (call.arg(0)).to_array();
    if let Some(_a_GLfloat93_0) = _a_GLfloat93_0 {
        for _jGLfloat93 in 0.._a_GLfloat93_0.values.len() {
    v1[_jGLfloat93] = (*_a_GLfloat93_0.values[_jGLfloat93]).to_f32().unwrap();
        }
    }
    let v1 = v1.as_mut_ptr();

    let v2: &mut [GLfloat];
    v2 = _allocator.alloc_array::<GLfloat>(&call.arg(1));
    let _a_GLfloat94_0 = (call.arg(1)).to_array();
    if let Some(_a_GLfloat94_0) = _a_GLfloat94_0 {
        for _jGLfloat94 in 0.._a_GLfloat94_0.values.len() {
    v2[_jGLfloat94] = (*_a_GLfloat94_0.values[_jGLfloat94]).to_f32().unwrap();
        }
    }
    let v2 = v2.as_mut_ptr();

//not found in gl!    unsafe { gl::Rectfv(v1, v2) };
}

pub fn retrace_glRecti(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut x1: GLint;
    x1 = (call.arg(0)).to_i32().unwrap();

    let mut y1: GLint;
    y1 = (call.arg(1)).to_i32().unwrap();

    let mut x2: GLint;
    x2 = (call.arg(2)).to_i32().unwrap();

    let mut y2: GLint;
    y2 = (call.arg(3)).to_i32().unwrap();

//not found in gl!    unsafe { gl::Recti(x1, y1, x2, y2) };
}

pub fn retrace_glRectiv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v1: &mut [GLint];
    v1 = _allocator.alloc_array::<GLint>(&call.arg(0));
    let _a_GLint136_0 = (call.arg(0)).to_array();
    if let Some(_a_GLint136_0) = _a_GLint136_0 {
        for _jGLint136 in 0.._a_GLint136_0.values.len() {
    v1[_jGLint136] = (*_a_GLint136_0.values[_jGLint136]).to_i32().unwrap();
        }
    }
    let v1 = v1.as_mut_ptr();

    let v2: &mut [GLint];
    v2 = _allocator.alloc_array::<GLint>(&call.arg(1));
    let _a_GLint137_0 = (call.arg(1)).to_array();
    if let Some(_a_GLint137_0) = _a_GLint137_0 {
        for _jGLint137 in 0.._a_GLint137_0.values.len() {
    v2[_jGLint137] = (*_a_GLint137_0.values[_jGLint137]).to_i32().unwrap();
        }
    }
    let v2 = v2.as_mut_ptr();

//not found in gl!    unsafe { gl::Rectiv(v1, v2) };
}

pub fn retrace_glRects(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut x1: GLshort;
    x1 = (call.arg(0)).to_i32().unwrap();

    let mut y1: GLshort;
    y1 = (call.arg(1)).to_i32().unwrap();

    let mut x2: GLshort;
    x2 = (call.arg(2)).to_i32().unwrap();

    let mut y2: GLshort;
    y2 = (call.arg(3)).to_i32().unwrap();

//not found in gl!    unsafe { gl::Rects(x1, y1, x2, y2) };
}

pub fn retrace_glRectsv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v1: &mut [GLshort];
    v1 = _allocator.alloc_array::<GLshort>(&call.arg(0));
    let _a_GLshort7_0 = (call.arg(0)).to_array();
    if let Some(_a_GLshort7_0) = _a_GLshort7_0 {
        for _jGLshort7 in 0.._a_GLshort7_0.values.len() {
    v1[_jGLshort7] = (*_a_GLshort7_0.values[_jGLshort7]).to_i32().unwrap();
        }
    }
    let v1 = v1.as_mut_ptr();

    let v2: &mut [GLshort];
    v2 = _allocator.alloc_array::<GLshort>(&call.arg(1));
    let _a_GLshort8_0 = (call.arg(1)).to_array();
    if let Some(_a_GLshort8_0) = _a_GLshort8_0 {
        for _jGLshort8 in 0.._a_GLshort8_0.values.len() {
    v2[_jGLshort8] = (*_a_GLshort8_0.values[_jGLshort8]).to_i32().unwrap();
        }
    }
    let v2 = v2.as_mut_ptr();

//not found in gl!    unsafe { gl::Rectsv(v1, v2) };
}

pub fn retrace_glTexCoord1d(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut s: GLdouble;
    s = (call.arg(0)).to_f64().unwrap();

//not found in gl!    unsafe { gl::TexCoord1d(s) };
}

pub fn retrace_glTexCoord1dv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLdouble];
    v = _allocator.alloc_array::<GLdouble>(&call.arg(0));
    let _a_PGLdouble2_0 = (call.arg(0)).to_array().unwrap();
    v[0] = (_a_PGLdouble2_0.values[0]).to_f64().unwrap();

//not found in gl!    unsafe { gl::TexCoord1dv(v) };
}

pub fn retrace_glTexCoord1f(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut s: GLfloat;
    s = (call.arg(0)).to_f32().unwrap();

//not found in gl!    unsafe { gl::TexCoord1f(s) };
}

pub fn retrace_glTexCoord1fv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLfloat];
    v = _allocator.alloc_array::<GLfloat>(&call.arg(0));
    let _a_PGLfloat12_0 = (call.arg(0)).to_array().unwrap();
    v[0] = (_a_PGLfloat12_0.values[0]).to_f32().unwrap();

//not found in gl!    unsafe { gl::TexCoord1fv(v) };
}

pub fn retrace_glTexCoord1i(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut s: GLint;
    s = (call.arg(0)).to_i32().unwrap();

//not found in gl!    unsafe { gl::TexCoord1i(s) };
}

pub fn retrace_glTexCoord1iv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLint];
    v = _allocator.alloc_array::<GLint>(&call.arg(0));
    let _a_PGLint30_0 = (call.arg(0)).to_array().unwrap();
    v[0] = (_a_PGLint30_0.values[0]).to_i32().unwrap();

//not found in gl!    unsafe { gl::TexCoord1iv(v) };
}

pub fn retrace_glTexCoord1s(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut s: GLshort;
    s = (call.arg(0)).to_i32().unwrap();

//not found in gl!    unsafe { gl::TexCoord1s(s) };
}

pub fn retrace_glTexCoord1sv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLshort];
    v = _allocator.alloc_array::<GLshort>(&call.arg(0));
    let _a_PGLshort1_0 = (call.arg(0)).to_array().unwrap();
    v[0] = (_a_PGLshort1_0.values[0]).to_i32().unwrap();

//not found in gl!    unsafe { gl::TexCoord1sv(v) };
}

pub fn retrace_glTexCoord2d(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut s: GLdouble;
    s = (call.arg(0)).to_f64().unwrap();

    let mut t: GLdouble;
    t = (call.arg(1)).to_f64().unwrap();

//not found in gl!    unsafe { gl::TexCoord2d(s, t) };
}

pub fn retrace_glTexCoord2dv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLdouble];
    v = _allocator.alloc_array::<GLdouble>(&call.arg(0));
    let _a_GLdouble33_0 = (call.arg(0)).to_array();
    if let Some(_a_GLdouble33_0) = _a_GLdouble33_0 {
        for _jGLdouble33 in 0.._a_GLdouble33_0.values.len() {
    v[_jGLdouble33] = (*_a_GLdouble33_0.values[_jGLdouble33]).to_f64().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::TexCoord2dv(v) };
}

pub fn retrace_glTexCoord2f(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut s: GLfloat;
    s = (call.arg(0)).to_f32().unwrap();

    let mut t: GLfloat;
    t = (call.arg(1)).to_f32().unwrap();

//not found in gl!    unsafe { gl::TexCoord2f(s, t) };
}

pub fn retrace_glTexCoord2fv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLfloat];
    v = _allocator.alloc_array::<GLfloat>(&call.arg(0));
    let _a_GLfloat95_0 = (call.arg(0)).to_array();
    if let Some(_a_GLfloat95_0) = _a_GLfloat95_0 {
        for _jGLfloat95 in 0.._a_GLfloat95_0.values.len() {
    v[_jGLfloat95] = (*_a_GLfloat95_0.values[_jGLfloat95]).to_f32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::TexCoord2fv(v) };
}

pub fn retrace_glTexCoord2i(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut s: GLint;
    s = (call.arg(0)).to_i32().unwrap();

    let mut t: GLint;
    t = (call.arg(1)).to_i32().unwrap();

//not found in gl!    unsafe { gl::TexCoord2i(s, t) };
}

pub fn retrace_glTexCoord2iv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLint];
    v = _allocator.alloc_array::<GLint>(&call.arg(0));
    let _a_GLint138_0 = (call.arg(0)).to_array();
    if let Some(_a_GLint138_0) = _a_GLint138_0 {
        for _jGLint138 in 0.._a_GLint138_0.values.len() {
    v[_jGLint138] = (*_a_GLint138_0.values[_jGLint138]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::TexCoord2iv(v) };
}

pub fn retrace_glTexCoord2s(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut s: GLshort;
    s = (call.arg(0)).to_i32().unwrap();

    let mut t: GLshort;
    t = (call.arg(1)).to_i32().unwrap();

//not found in gl!    unsafe { gl::TexCoord2s(s, t) };
}

pub fn retrace_glTexCoord2sv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLshort];
    v = _allocator.alloc_array::<GLshort>(&call.arg(0));
    let _a_GLshort9_0 = (call.arg(0)).to_array();
    if let Some(_a_GLshort9_0) = _a_GLshort9_0 {
        for _jGLshort9 in 0.._a_GLshort9_0.values.len() {
    v[_jGLshort9] = (*_a_GLshort9_0.values[_jGLshort9]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::TexCoord2sv(v) };
}

pub fn retrace_glTexCoord3d(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut s: GLdouble;
    s = (call.arg(0)).to_f64().unwrap();

    let mut t: GLdouble;
    t = (call.arg(1)).to_f64().unwrap();

    let mut r: GLdouble;
    r = (call.arg(2)).to_f64().unwrap();

//not found in gl!    unsafe { gl::TexCoord3d(s, t, r) };
}

pub fn retrace_glTexCoord3dv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLdouble];
    v = _allocator.alloc_array::<GLdouble>(&call.arg(0));
    let _a_GLdouble34_0 = (call.arg(0)).to_array();
    if let Some(_a_GLdouble34_0) = _a_GLdouble34_0 {
        for _jGLdouble34 in 0.._a_GLdouble34_0.values.len() {
    v[_jGLdouble34] = (*_a_GLdouble34_0.values[_jGLdouble34]).to_f64().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::TexCoord3dv(v) };
}

pub fn retrace_glTexCoord3f(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut s: GLfloat;
    s = (call.arg(0)).to_f32().unwrap();

    let mut t: GLfloat;
    t = (call.arg(1)).to_f32().unwrap();

    let mut r: GLfloat;
    r = (call.arg(2)).to_f32().unwrap();

//not found in gl!    unsafe { gl::TexCoord3f(s, t, r) };
}

pub fn retrace_glTexCoord3fv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLfloat];
    v = _allocator.alloc_array::<GLfloat>(&call.arg(0));
    let _a_GLfloat96_0 = (call.arg(0)).to_array();
    if let Some(_a_GLfloat96_0) = _a_GLfloat96_0 {
        for _jGLfloat96 in 0.._a_GLfloat96_0.values.len() {
    v[_jGLfloat96] = (*_a_GLfloat96_0.values[_jGLfloat96]).to_f32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::TexCoord3fv(v) };
}

pub fn retrace_glTexCoord3i(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut s: GLint;
    s = (call.arg(0)).to_i32().unwrap();

    let mut t: GLint;
    t = (call.arg(1)).to_i32().unwrap();

    let mut r: GLint;
    r = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::TexCoord3i(s, t, r) };
}

pub fn retrace_glTexCoord3iv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLint];
    v = _allocator.alloc_array::<GLint>(&call.arg(0));
    let _a_GLint139_0 = (call.arg(0)).to_array();
    if let Some(_a_GLint139_0) = _a_GLint139_0 {
        for _jGLint139 in 0.._a_GLint139_0.values.len() {
    v[_jGLint139] = (*_a_GLint139_0.values[_jGLint139]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::TexCoord3iv(v) };
}

pub fn retrace_glTexCoord3s(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut s: GLshort;
    s = (call.arg(0)).to_i32().unwrap();

    let mut t: GLshort;
    t = (call.arg(1)).to_i32().unwrap();

    let mut r: GLshort;
    r = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::TexCoord3s(s, t, r) };
}

pub fn retrace_glTexCoord3sv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLshort];
    v = _allocator.alloc_array::<GLshort>(&call.arg(0));
    let _a_GLshort10_0 = (call.arg(0)).to_array();
    if let Some(_a_GLshort10_0) = _a_GLshort10_0 {
        for _jGLshort10 in 0.._a_GLshort10_0.values.len() {
    v[_jGLshort10] = (*_a_GLshort10_0.values[_jGLshort10]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::TexCoord3sv(v) };
}

pub fn retrace_glTexCoord4d(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut s: GLdouble;
    s = (call.arg(0)).to_f64().unwrap();

    let mut t: GLdouble;
    t = (call.arg(1)).to_f64().unwrap();

    let mut r: GLdouble;
    r = (call.arg(2)).to_f64().unwrap();

    let mut q: GLdouble;
    q = (call.arg(3)).to_f64().unwrap();

//not found in gl!    unsafe { gl::TexCoord4d(s, t, r, q) };
}

pub fn retrace_glTexCoord4dv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLdouble];
    v = _allocator.alloc_array::<GLdouble>(&call.arg(0));
    let _a_GLdouble35_0 = (call.arg(0)).to_array();
    if let Some(_a_GLdouble35_0) = _a_GLdouble35_0 {
        for _jGLdouble35 in 0.._a_GLdouble35_0.values.len() {
    v[_jGLdouble35] = (*_a_GLdouble35_0.values[_jGLdouble35]).to_f64().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::TexCoord4dv(v) };
}

pub fn retrace_glTexCoord4f(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut s: GLfloat;
    s = (call.arg(0)).to_f32().unwrap();

    let mut t: GLfloat;
    t = (call.arg(1)).to_f32().unwrap();

    let mut r: GLfloat;
    r = (call.arg(2)).to_f32().unwrap();

    let mut q: GLfloat;
    q = (call.arg(3)).to_f32().unwrap();

//not found in gl!    unsafe { gl::TexCoord4f(s, t, r, q) };
}

pub fn retrace_glTexCoord4fv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLfloat];
    v = _allocator.alloc_array::<GLfloat>(&call.arg(0));
    let _a_GLfloat97_0 = (call.arg(0)).to_array();
    if let Some(_a_GLfloat97_0) = _a_GLfloat97_0 {
        for _jGLfloat97 in 0.._a_GLfloat97_0.values.len() {
    v[_jGLfloat97] = (*_a_GLfloat97_0.values[_jGLfloat97]).to_f32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::TexCoord4fv(v) };
}

pub fn retrace_glTexCoord4i(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut s: GLint;
    s = (call.arg(0)).to_i32().unwrap();

    let mut t: GLint;
    t = (call.arg(1)).to_i32().unwrap();

    let mut r: GLint;
    r = (call.arg(2)).to_i32().unwrap();

    let mut q: GLint;
    q = (call.arg(3)).to_i32().unwrap();

//not found in gl!    unsafe { gl::TexCoord4i(s, t, r, q) };
}

pub fn retrace_glTexCoord4iv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLint];
    v = _allocator.alloc_array::<GLint>(&call.arg(0));
    let _a_GLint140_0 = (call.arg(0)).to_array();
    if let Some(_a_GLint140_0) = _a_GLint140_0 {
        for _jGLint140 in 0.._a_GLint140_0.values.len() {
    v[_jGLint140] = (*_a_GLint140_0.values[_jGLint140]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::TexCoord4iv(v) };
}

pub fn retrace_glTexCoord4s(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut s: GLshort;
    s = (call.arg(0)).to_i32().unwrap();

    let mut t: GLshort;
    t = (call.arg(1)).to_i32().unwrap();

    let mut r: GLshort;
    r = (call.arg(2)).to_i32().unwrap();

    let mut q: GLshort;
    q = (call.arg(3)).to_i32().unwrap();

//not found in gl!    unsafe { gl::TexCoord4s(s, t, r, q) };
}

pub fn retrace_glTexCoord4sv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLshort];
    v = _allocator.alloc_array::<GLshort>(&call.arg(0));
    let _a_GLshort11_0 = (call.arg(0)).to_array();
    if let Some(_a_GLshort11_0) = _a_GLshort11_0 {
        for _jGLshort11 in 0.._a_GLshort11_0.values.len() {
    v[_jGLshort11] = (*_a_GLshort11_0.values[_jGLshort11]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::TexCoord4sv(v) };
}

pub fn retrace_glVertex2d(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut x: GLdouble;
    x = (call.arg(0)).to_f64().unwrap();

    let mut y: GLdouble;
    y = (call.arg(1)).to_f64().unwrap();

//not found in gl!    unsafe { gl::Vertex2d(x, y) };
}

pub fn retrace_glVertex2dv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLdouble];
    v = _allocator.alloc_array::<GLdouble>(&call.arg(0));
    let _a_GLdouble36_0 = (call.arg(0)).to_array();
    if let Some(_a_GLdouble36_0) = _a_GLdouble36_0 {
        for _jGLdouble36 in 0.._a_GLdouble36_0.values.len() {
    v[_jGLdouble36] = (*_a_GLdouble36_0.values[_jGLdouble36]).to_f64().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::Vertex2dv(v) };
}

pub fn retrace_glVertex2f(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut x: GLfloat;
    x = (call.arg(0)).to_f32().unwrap();

    let mut y: GLfloat;
    y = (call.arg(1)).to_f32().unwrap();

//not found in gl!    unsafe { gl::Vertex2f(x, y) };
}

pub fn retrace_glVertex2fv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLfloat];
    v = _allocator.alloc_array::<GLfloat>(&call.arg(0));
    let _a_GLfloat98_0 = (call.arg(0)).to_array();
    if let Some(_a_GLfloat98_0) = _a_GLfloat98_0 {
        for _jGLfloat98 in 0.._a_GLfloat98_0.values.len() {
    v[_jGLfloat98] = (*_a_GLfloat98_0.values[_jGLfloat98]).to_f32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::Vertex2fv(v) };
}

pub fn retrace_glVertex2i(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut x: GLint;
    x = (call.arg(0)).to_i32().unwrap();

    let mut y: GLint;
    y = (call.arg(1)).to_i32().unwrap();

//not found in gl!    unsafe { gl::Vertex2i(x, y) };
}

pub fn retrace_glVertex2iv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLint];
    v = _allocator.alloc_array::<GLint>(&call.arg(0));
    let _a_GLint141_0 = (call.arg(0)).to_array();
    if let Some(_a_GLint141_0) = _a_GLint141_0 {
        for _jGLint141 in 0.._a_GLint141_0.values.len() {
    v[_jGLint141] = (*_a_GLint141_0.values[_jGLint141]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::Vertex2iv(v) };
}

pub fn retrace_glVertex2s(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut x: GLshort;
    x = (call.arg(0)).to_i32().unwrap();

    let mut y: GLshort;
    y = (call.arg(1)).to_i32().unwrap();

//not found in gl!    unsafe { gl::Vertex2s(x, y) };
}

pub fn retrace_glVertex2sv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLshort];
    v = _allocator.alloc_array::<GLshort>(&call.arg(0));
    let _a_GLshort12_0 = (call.arg(0)).to_array();
    if let Some(_a_GLshort12_0) = _a_GLshort12_0 {
        for _jGLshort12 in 0.._a_GLshort12_0.values.len() {
    v[_jGLshort12] = (*_a_GLshort12_0.values[_jGLshort12]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::Vertex2sv(v) };
}

pub fn retrace_glVertex3d(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut x: GLdouble;
    x = (call.arg(0)).to_f64().unwrap();

    let mut y: GLdouble;
    y = (call.arg(1)).to_f64().unwrap();

    let mut z: GLdouble;
    z = (call.arg(2)).to_f64().unwrap();

//not found in gl!    unsafe { gl::Vertex3d(x, y, z) };
}

pub fn retrace_glVertex3dv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLdouble];
    v = _allocator.alloc_array::<GLdouble>(&call.arg(0));
    let _a_GLdouble37_0 = (call.arg(0)).to_array();
    if let Some(_a_GLdouble37_0) = _a_GLdouble37_0 {
        for _jGLdouble37 in 0.._a_GLdouble37_0.values.len() {
    v[_jGLdouble37] = (*_a_GLdouble37_0.values[_jGLdouble37]).to_f64().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::Vertex3dv(v) };
}

pub fn retrace_glVertex3f(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut x: GLfloat;
    x = (call.arg(0)).to_f32().unwrap();

    let mut y: GLfloat;
    y = (call.arg(1)).to_f32().unwrap();

    let mut z: GLfloat;
    z = (call.arg(2)).to_f32().unwrap();

//not found in gl!    unsafe { gl::Vertex3f(x, y, z) };
}

pub fn retrace_glVertex3fv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLfloat];
    v = _allocator.alloc_array::<GLfloat>(&call.arg(0));
    let _a_GLfloat99_0 = (call.arg(0)).to_array();
    if let Some(_a_GLfloat99_0) = _a_GLfloat99_0 {
        for _jGLfloat99 in 0.._a_GLfloat99_0.values.len() {
    v[_jGLfloat99] = (*_a_GLfloat99_0.values[_jGLfloat99]).to_f32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::Vertex3fv(v) };
}

pub fn retrace_glVertex3i(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut x: GLint;
    x = (call.arg(0)).to_i32().unwrap();

    let mut y: GLint;
    y = (call.arg(1)).to_i32().unwrap();

    let mut z: GLint;
    z = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::Vertex3i(x, y, z) };
}

pub fn retrace_glVertex3iv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLint];
    v = _allocator.alloc_array::<GLint>(&call.arg(0));
    let _a_GLint142_0 = (call.arg(0)).to_array();
    if let Some(_a_GLint142_0) = _a_GLint142_0 {
        for _jGLint142 in 0.._a_GLint142_0.values.len() {
    v[_jGLint142] = (*_a_GLint142_0.values[_jGLint142]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::Vertex3iv(v) };
}

pub fn retrace_glVertex3s(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut x: GLshort;
    x = (call.arg(0)).to_i32().unwrap();

    let mut y: GLshort;
    y = (call.arg(1)).to_i32().unwrap();

    let mut z: GLshort;
    z = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::Vertex3s(x, y, z) };
}

pub fn retrace_glVertex3sv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLshort];
    v = _allocator.alloc_array::<GLshort>(&call.arg(0));
    let _a_GLshort13_0 = (call.arg(0)).to_array();
    if let Some(_a_GLshort13_0) = _a_GLshort13_0 {
        for _jGLshort13 in 0.._a_GLshort13_0.values.len() {
    v[_jGLshort13] = (*_a_GLshort13_0.values[_jGLshort13]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::Vertex3sv(v) };
}

pub fn retrace_glVertex4d(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut x: GLdouble;
    x = (call.arg(0)).to_f64().unwrap();

    let mut y: GLdouble;
    y = (call.arg(1)).to_f64().unwrap();

    let mut z: GLdouble;
    z = (call.arg(2)).to_f64().unwrap();

    let mut w: GLdouble;
    w = (call.arg(3)).to_f64().unwrap();

//not found in gl!    unsafe { gl::Vertex4d(x, y, z, w) };
}

pub fn retrace_glVertex4dv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLdouble];
    v = _allocator.alloc_array::<GLdouble>(&call.arg(0));
    let _a_GLdouble38_0 = (call.arg(0)).to_array();
    if let Some(_a_GLdouble38_0) = _a_GLdouble38_0 {
        for _jGLdouble38 in 0.._a_GLdouble38_0.values.len() {
    v[_jGLdouble38] = (*_a_GLdouble38_0.values[_jGLdouble38]).to_f64().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::Vertex4dv(v) };
}

pub fn retrace_glVertex4f(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut x: GLfloat;
    x = (call.arg(0)).to_f32().unwrap();

    let mut y: GLfloat;
    y = (call.arg(1)).to_f32().unwrap();

    let mut z: GLfloat;
    z = (call.arg(2)).to_f32().unwrap();

    let mut w: GLfloat;
    w = (call.arg(3)).to_f32().unwrap();

//not found in gl!    unsafe { gl::Vertex4f(x, y, z, w) };
}

pub fn retrace_glVertex4fv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLfloat];
    v = _allocator.alloc_array::<GLfloat>(&call.arg(0));
    let _a_GLfloat100_0 = (call.arg(0)).to_array();
    if let Some(_a_GLfloat100_0) = _a_GLfloat100_0 {
        for _jGLfloat100 in 0.._a_GLfloat100_0.values.len() {
    v[_jGLfloat100] = (*_a_GLfloat100_0.values[_jGLfloat100]).to_f32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::Vertex4fv(v) };
}

pub fn retrace_glVertex4i(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut x: GLint;
    x = (call.arg(0)).to_i32().unwrap();

    let mut y: GLint;
    y = (call.arg(1)).to_i32().unwrap();

    let mut z: GLint;
    z = (call.arg(2)).to_i32().unwrap();

    let mut w: GLint;
    w = (call.arg(3)).to_i32().unwrap();

//not found in gl!    unsafe { gl::Vertex4i(x, y, z, w) };
}

pub fn retrace_glVertex4iv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLint];
    v = _allocator.alloc_array::<GLint>(&call.arg(0));
    let _a_GLint143_0 = (call.arg(0)).to_array();
    if let Some(_a_GLint143_0) = _a_GLint143_0 {
        for _jGLint143 in 0.._a_GLint143_0.values.len() {
    v[_jGLint143] = (*_a_GLint143_0.values[_jGLint143]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::Vertex4iv(v) };
}

pub fn retrace_glVertex4s(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut x: GLshort;
    x = (call.arg(0)).to_i32().unwrap();

    let mut y: GLshort;
    y = (call.arg(1)).to_i32().unwrap();

    let mut z: GLshort;
    z = (call.arg(2)).to_i32().unwrap();

    let mut w: GLshort;
    w = (call.arg(3)).to_i32().unwrap();

//not found in gl!    unsafe { gl::Vertex4s(x, y, z, w) };
}

pub fn retrace_glVertex4sv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLshort];
    v = _allocator.alloc_array::<GLshort>(&call.arg(0));
    let _a_GLshort14_0 = (call.arg(0)).to_array();
    if let Some(_a_GLshort14_0) = _a_GLshort14_0 {
        for _jGLshort14 in 0.._a_GLshort14_0.values.len() {
    v[_jGLshort14] = (*_a_GLshort14_0.values[_jGLshort14]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::Vertex4sv(v) };
}

pub fn retrace_glClipPlane(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut plane: GLenum;
    plane = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let equation: &mut [GLdouble];
    equation = _allocator.alloc_array::<GLdouble>(&call.arg(1));
    let _a_GLdouble39_0 = (call.arg(1)).to_array();
    if let Some(_a_GLdouble39_0) = _a_GLdouble39_0 {
        for _jGLdouble39 in 0.._a_GLdouble39_0.values.len() {
    equation[_jGLdouble39] = (*_a_GLdouble39_0.values[_jGLdouble39]).to_f64().unwrap();
        }
    }
    let equation = equation.as_mut_ptr();

//not found in gl!    unsafe { gl::ClipPlane(plane, equation) };
}

pub fn retrace_glColorMaterial(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut face: GLenum;
    face = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut mode: GLenum;
    mode = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::ColorMaterial(face, mode) };
}

pub fn retrace_glFogf(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut pname: GLenum;
    pname = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut param: GLfloat;
    param = (call.arg(1)).to_f32().unwrap();

//not found in gl!    unsafe { gl::Fogf(pname, param) };
}

pub fn retrace_glFogfv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut pname: GLenum;
    pname = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLfloat];
    params = _allocator.alloc_array::<GLfloat>(&call.arg(1));
    let _a_GLfloat101_0 = (call.arg(1)).to_array();
    if let Some(_a_GLfloat101_0) = _a_GLfloat101_0 {
        for _jGLfloat101 in 0.._a_GLfloat101_0.values.len() {
    params[_jGLfloat101] = (*_a_GLfloat101_0.values[_jGLfloat101]).to_f32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::Fogfv(pname, params) };
}

pub fn retrace_glFogi(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut pname: GLenum;
    pname = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut param: GLint;
    param = (call.arg(1)).to_i32().unwrap();

//not found in gl!    unsafe { gl::Fogi(pname, param) };
}

pub fn retrace_glFogiv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut pname: GLenum;
    pname = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLint];
    params = _allocator.alloc_array::<GLint>(&call.arg(1));
    let _a_GLint144_0 = (call.arg(1)).to_array();
    if let Some(_a_GLint144_0) = _a_GLint144_0 {
        for _jGLint144 in 0.._a_GLint144_0.values.len() {
    params[_jGLint144] = (*_a_GLint144_0.values[_jGLint144]).to_i32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::Fogiv(pname, params) };
}

pub fn retrace_glLightf(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut light: GLenum;
    light = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut param: GLfloat;
    param = (call.arg(2)).to_f32().unwrap();

//not found in gl!    unsafe { gl::Lightf(light, pname, param) };
}

pub fn retrace_glLightfv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut light: GLenum;
    light = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLfloat];
    params = _allocator.alloc_array::<GLfloat>(&call.arg(2));
    let _a_GLfloat102_0 = (call.arg(2)).to_array();
    if let Some(_a_GLfloat102_0) = _a_GLfloat102_0 {
        for _jGLfloat102 in 0.._a_GLfloat102_0.values.len() {
    params[_jGLfloat102] = (*_a_GLfloat102_0.values[_jGLfloat102]).to_f32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::Lightfv(light, pname, params) };
}

pub fn retrace_glLighti(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut light: GLenum;
    light = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut param: GLint;
    param = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::Lighti(light, pname, param) };
}

pub fn retrace_glLightiv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut light: GLenum;
    light = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLint];
    params = _allocator.alloc_array::<GLint>(&call.arg(2));
    let _a_GLint145_0 = (call.arg(2)).to_array();
    if let Some(_a_GLint145_0) = _a_GLint145_0 {
        for _jGLint145 in 0.._a_GLint145_0.values.len() {
    params[_jGLint145] = (*_a_GLint145_0.values[_jGLint145]).to_i32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::Lightiv(light, pname, params) };
}

pub fn retrace_glLightModelf(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut pname: GLenum;
    pname = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut param: GLfloat;
    param = (call.arg(1)).to_f32().unwrap();

//not found in gl!    unsafe { gl::LightModelf(pname, param) };
}

pub fn retrace_glLightModelfv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut pname: GLenum;
    pname = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLfloat];
    params = _allocator.alloc_array::<GLfloat>(&call.arg(1));
    let _a_GLfloat103_0 = (call.arg(1)).to_array();
    if let Some(_a_GLfloat103_0) = _a_GLfloat103_0 {
        for _jGLfloat103 in 0.._a_GLfloat103_0.values.len() {
    params[_jGLfloat103] = (*_a_GLfloat103_0.values[_jGLfloat103]).to_f32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::LightModelfv(pname, params) };
}

pub fn retrace_glLightModeli(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut pname: GLenum;
    pname = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut param: GLint;
    param = (call.arg(1)).to_i32().unwrap();

//not found in gl!    unsafe { gl::LightModeli(pname, param) };
}

pub fn retrace_glLightModeliv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut pname: GLenum;
    pname = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLint];
    params = _allocator.alloc_array::<GLint>(&call.arg(1));
    let _a_GLint146_0 = (call.arg(1)).to_array();
    if let Some(_a_GLint146_0) = _a_GLint146_0 {
        for _jGLint146 in 0.._a_GLint146_0.values.len() {
    params[_jGLint146] = (*_a_GLint146_0.values[_jGLint146]).to_i32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::LightModeliv(pname, params) };
}

pub fn retrace_glLineStipple(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut factor: GLint;
    factor = (call.arg(0)).to_i32().unwrap();

    let mut pattern: GLushort;
    pattern = (call.arg(1)).to_u32().unwrap();

//not found in gl!    unsafe { gl::LineStipple(factor, pattern) };
}

pub fn retrace_glMaterialf(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut face: GLenum;
    face = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut param: GLfloat;
    param = (call.arg(2)).to_f32().unwrap();

//not found in gl!    unsafe { gl::Materialf(face, pname, param) };
}

pub fn retrace_glMaterialfv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut face: GLenum;
    face = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLfloat];
    params = _allocator.alloc_array::<GLfloat>(&call.arg(2));
    let _a_GLfloat104_0 = (call.arg(2)).to_array();
    if let Some(_a_GLfloat104_0) = _a_GLfloat104_0 {
        for _jGLfloat104 in 0.._a_GLfloat104_0.values.len() {
    params[_jGLfloat104] = (*_a_GLfloat104_0.values[_jGLfloat104]).to_f32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::Materialfv(face, pname, params) };
}

pub fn retrace_glMateriali(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut face: GLenum;
    face = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut param: GLint;
    param = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::Materiali(face, pname, param) };
}

pub fn retrace_glMaterialiv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut face: GLenum;
    face = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLint];
    params = _allocator.alloc_array::<GLint>(&call.arg(2));
    let _a_GLint147_0 = (call.arg(2)).to_array();
    if let Some(_a_GLint147_0) = _a_GLint147_0 {
        for _jGLint147 in 0.._a_GLint147_0.values.len() {
    params[_jGLint147] = (*_a_GLint147_0.values[_jGLint147]).to_i32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::Materialiv(face, pname, params) };
}

pub fn retrace_glPolygonStipple(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mask: &mut [GLubyte];
    mask = _allocator.alloc_array::<GLubyte>(&call.arg(0));
    let _a_GLubyte8_0 = (call.arg(0)).to_array();
    if let Some(_a_GLubyte8_0) = _a_GLubyte8_0 {
        for _jGLubyte8 in 0.._a_GLubyte8_0.values.len() {
    mask[_jGLubyte8] = (*_a_GLubyte8_0.values[_jGLubyte8]).to_u32().unwrap();
        }
    }
    let mask = mask.as_mut_ptr();

//not found in gl!    unsafe { gl::PolygonStipple(mask) };
}

pub fn retrace_glShadeModel(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::ShadeModel(mode) };
}

pub fn retrace_glTexEnvf(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut param: GLfloat;
    param = (call.arg(2)).to_f32().unwrap();

//not found in gl!    unsafe { gl::TexEnvf(target, pname, param) };
}

pub fn retrace_glTexEnvfv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLfloat];
    params = _allocator.alloc_array::<GLfloat>(&call.arg(2));
    let _a_GLfloat105_0 = (call.arg(2)).to_array();
    if let Some(_a_GLfloat105_0) = _a_GLfloat105_0 {
        for _jGLfloat105 in 0.._a_GLfloat105_0.values.len() {
    params[_jGLfloat105] = (*_a_GLfloat105_0.values[_jGLfloat105]).to_f32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::TexEnvfv(target, pname, params) };
}

pub fn retrace_glTexEnvi(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut param: GLint;
    param = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::TexEnvi(target, pname, param) };
}

pub fn retrace_glTexEnviv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLint];
    params = _allocator.alloc_array::<GLint>(&call.arg(2));
    let _a_GLint148_0 = (call.arg(2)).to_array();
    if let Some(_a_GLint148_0) = _a_GLint148_0 {
        for _jGLint148 in 0.._a_GLint148_0.values.len() {
    params[_jGLint148] = (*_a_GLint148_0.values[_jGLint148]).to_i32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::TexEnviv(target, pname, params) };
}

pub fn retrace_glTexGend(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut coord: GLenum;
    coord = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut param: GLdouble;
    param = (call.arg(2)).to_f64().unwrap();

//not found in gl!    unsafe { gl::TexGend(coord, pname, param) };
}

pub fn retrace_glTexGendv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut coord: GLenum;
    coord = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLdouble];
    params = _allocator.alloc_array::<GLdouble>(&call.arg(2));
    let _a_GLdouble40_0 = (call.arg(2)).to_array();
    if let Some(_a_GLdouble40_0) = _a_GLdouble40_0 {
        for _jGLdouble40 in 0.._a_GLdouble40_0.values.len() {
    params[_jGLdouble40] = (*_a_GLdouble40_0.values[_jGLdouble40]).to_f64().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::TexGendv(coord, pname, params) };
}

pub fn retrace_glTexGenf(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut coord: GLenum;
    coord = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut param: GLfloat;
    param = (call.arg(2)).to_f32().unwrap();

//not found in gl!    unsafe { gl::TexGenf(coord, pname, param) };
}

pub fn retrace_glTexGenfv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut coord: GLenum;
    coord = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLfloat];
    params = _allocator.alloc_array::<GLfloat>(&call.arg(2));
    let _a_GLfloat106_0 = (call.arg(2)).to_array();
    if let Some(_a_GLfloat106_0) = _a_GLfloat106_0 {
        for _jGLfloat106 in 0.._a_GLfloat106_0.values.len() {
    params[_jGLfloat106] = (*_a_GLfloat106_0.values[_jGLfloat106]).to_f32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::TexGenfv(coord, pname, params) };
}

pub fn retrace_glTexGeni(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut coord: GLenum;
    coord = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut param: GLint;
    param = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::TexGeni(coord, pname, param) };
}

pub fn retrace_glTexGeniv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut coord: GLenum;
    coord = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLint];
    params = _allocator.alloc_array::<GLint>(&call.arg(2));
    let _a_GLint149_0 = (call.arg(2)).to_array();
    if let Some(_a_GLint149_0) = _a_GLint149_0 {
        for _jGLint149 in 0.._a_GLint149_0.values.len() {
    params[_jGLint149] = (*_a_GLint149_0.values[_jGLint149]).to_i32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::TexGeniv(coord, pname, params) };
}

pub fn retrace_glFeedbackBuffer(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut size: GLsizei;
    size = (call.arg(0)).to_i32().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let buffer: &mut [GLfloat];
    buffer = _allocator.alloc_array::<GLfloat>(&call.arg(2));
    _allocator.bind(buffer);

//not found in gl!    unsafe { gl::FeedbackBuffer(size, _type, buffer) };
    let _aGLfloat108 = (call.arg(2)).to_array();
    if (_aGLfloat108) {
        for _jGLfloat108 in 0.._aGLfloat108.values.len() {
        }
    }
}

pub fn retrace_glSelectBuffer(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut size: GLsizei;
    size = (call.arg(0)).to_i32().unwrap();

    let buffer: &mut [GLuint];
    buffer = _allocator.alloc_array::<GLuint>(&call.arg(1));
    _allocator.bind(buffer);

//not found in gl!    unsafe { gl::SelectBuffer(size, buffer) };
    let _aGLuint82 = (call.arg(1)).to_array();
    if (_aGLuint82) {
        for _jGLuint82 in 0.._aGLuint82.values.len() {
        }
    }
}

pub fn retrace_glRenderMode(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    let _result = unsafe { gl::RenderMode(mode) };

}

pub fn retrace_glInitNames(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
//not found in gl!    unsafe { gl::InitNames() };
}

pub fn retrace_glLoadName(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut name: GLuint;
    name = (call.arg(0)).to_u32().unwrap();

//not found in gl!    unsafe { gl::LoadName(name) };
}

pub fn retrace_glPassThrough(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut token: GLfloat;
    token = (call.arg(0)).to_f32().unwrap();

//not found in gl!    unsafe { gl::PassThrough(token) };
}

pub fn retrace_glPopName(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
//not found in gl!    unsafe { gl::PopName() };
}

pub fn retrace_glPushName(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut name: GLuint;
    name = (call.arg(0)).to_u32().unwrap();

//not found in gl!    unsafe { gl::PushName(name) };
}

pub fn retrace_glClearAccum(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut red: GLfloat;
    red = (call.arg(0)).to_f32().unwrap();

    let mut green: GLfloat;
    green = (call.arg(1)).to_f32().unwrap();

    let mut blue: GLfloat;
    blue = (call.arg(2)).to_f32().unwrap();

    let mut alpha: GLfloat;
    alpha = (call.arg(3)).to_f32().unwrap();

//not found in gl!    unsafe { gl::ClearAccum(red, green, blue, alpha) };
}

pub fn retrace_glClearIndex(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut c: GLfloat;
    c = (call.arg(0)).to_f32().unwrap();

//not found in gl!    unsafe { gl::ClearIndex(c) };
}

pub fn retrace_glIndexMask(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mask: GLuint;
    mask = (call.arg(0)).to_u32().unwrap();

//not found in gl!    unsafe { gl::IndexMask(mask) };
}

pub fn retrace_glAccum(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut op: GLenum;
    op = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut value: GLfloat;
    value = (call.arg(1)).to_f32().unwrap();

//not found in gl!    unsafe { gl::Accum(op, value) };
}

pub fn retrace_glPopAttrib(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
//not found in gl!    unsafe { gl::PopAttrib() };
}

pub fn retrace_glPushAttrib(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mask: GLbitfield;
    mask = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::PushAttrib(mask) };
}

pub fn retrace_glMap1d(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut u1: GLdouble;
    u1 = (call.arg(1)).to_f64().unwrap();

    let mut u2: GLdouble;
    u2 = (call.arg(2)).to_f64().unwrap();

    let mut stride: GLint;
    stride = (call.arg(3)).to_i32().unwrap();

    let mut order: GLint;
    order = (call.arg(4)).to_i32().unwrap();

    let points: &mut [GLdouble];
    points = _allocator.alloc_array::<GLdouble>(&call.arg(5));
    let _a_GLdouble41_0 = (call.arg(5)).to_array();
    if let Some(_a_GLdouble41_0) = _a_GLdouble41_0 {
        for _jGLdouble41 in 0.._a_GLdouble41_0.values.len() {
    points[_jGLdouble41] = (*_a_GLdouble41_0.values[_jGLdouble41]).to_f64().unwrap();
        }
    }
    let points = points.as_mut_ptr();

//not found in gl!    unsafe { gl::Map1d(target, u1, u2, stride, order, points) };
}

pub fn retrace_glMap1f(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut u1: GLfloat;
    u1 = (call.arg(1)).to_f32().unwrap();

    let mut u2: GLfloat;
    u2 = (call.arg(2)).to_f32().unwrap();

    let mut stride: GLint;
    stride = (call.arg(3)).to_i32().unwrap();

    let mut order: GLint;
    order = (call.arg(4)).to_i32().unwrap();

    let points: &mut [GLfloat];
    points = _allocator.alloc_array::<GLfloat>(&call.arg(5));
    let _a_GLfloat109_0 = (call.arg(5)).to_array();
    if let Some(_a_GLfloat109_0) = _a_GLfloat109_0 {
        for _jGLfloat109 in 0.._a_GLfloat109_0.values.len() {
    points[_jGLfloat109] = (*_a_GLfloat109_0.values[_jGLfloat109]).to_f32().unwrap();
        }
    }
    let points = points.as_mut_ptr();

//not found in gl!    unsafe { gl::Map1f(target, u1, u2, stride, order, points) };
}

pub fn retrace_glMap2d(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut u1: GLdouble;
    u1 = (call.arg(1)).to_f64().unwrap();

    let mut u2: GLdouble;
    u2 = (call.arg(2)).to_f64().unwrap();

    let mut ustride: GLint;
    ustride = (call.arg(3)).to_i32().unwrap();

    let mut uorder: GLint;
    uorder = (call.arg(4)).to_i32().unwrap();

    let mut v1: GLdouble;
    v1 = (call.arg(5)).to_f64().unwrap();

    let mut v2: GLdouble;
    v2 = (call.arg(6)).to_f64().unwrap();

    let mut vstride: GLint;
    vstride = (call.arg(7)).to_i32().unwrap();

    let mut vorder: GLint;
    vorder = (call.arg(8)).to_i32().unwrap();

    let points: &mut [GLdouble];
    points = _allocator.alloc_array::<GLdouble>(&call.arg(9));
    let _a_GLdouble42_0 = (call.arg(9)).to_array();
    if let Some(_a_GLdouble42_0) = _a_GLdouble42_0 {
        for _jGLdouble42 in 0.._a_GLdouble42_0.values.len() {
    points[_jGLdouble42] = (*_a_GLdouble42_0.values[_jGLdouble42]).to_f64().unwrap();
        }
    }
    let points = points.as_mut_ptr();

//not found in gl!    unsafe { gl::Map2d(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points) };
}

pub fn retrace_glMap2f(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut u1: GLfloat;
    u1 = (call.arg(1)).to_f32().unwrap();

    let mut u2: GLfloat;
    u2 = (call.arg(2)).to_f32().unwrap();

    let mut ustride: GLint;
    ustride = (call.arg(3)).to_i32().unwrap();

    let mut uorder: GLint;
    uorder = (call.arg(4)).to_i32().unwrap();

    let mut v1: GLfloat;
    v1 = (call.arg(5)).to_f32().unwrap();

    let mut v2: GLfloat;
    v2 = (call.arg(6)).to_f32().unwrap();

    let mut vstride: GLint;
    vstride = (call.arg(7)).to_i32().unwrap();

    let mut vorder: GLint;
    vorder = (call.arg(8)).to_i32().unwrap();

    let points: &mut [GLfloat];
    points = _allocator.alloc_array::<GLfloat>(&call.arg(9));
    let _a_GLfloat110_0 = (call.arg(9)).to_array();
    if let Some(_a_GLfloat110_0) = _a_GLfloat110_0 {
        for _jGLfloat110 in 0.._a_GLfloat110_0.values.len() {
    points[_jGLfloat110] = (*_a_GLfloat110_0.values[_jGLfloat110]).to_f32().unwrap();
        }
    }
    let points = points.as_mut_ptr();

//not found in gl!    unsafe { gl::Map2f(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points) };
}

pub fn retrace_glMapGrid1d(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut un: GLint;
    un = (call.arg(0)).to_i32().unwrap();

    let mut u1: GLdouble;
    u1 = (call.arg(1)).to_f64().unwrap();

    let mut u2: GLdouble;
    u2 = (call.arg(2)).to_f64().unwrap();

//not found in gl!    unsafe { gl::MapGrid1d(un, u1, u2) };
}

pub fn retrace_glMapGrid1f(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut un: GLint;
    un = (call.arg(0)).to_i32().unwrap();

    let mut u1: GLfloat;
    u1 = (call.arg(1)).to_f32().unwrap();

    let mut u2: GLfloat;
    u2 = (call.arg(2)).to_f32().unwrap();

//not found in gl!    unsafe { gl::MapGrid1f(un, u1, u2) };
}

pub fn retrace_glMapGrid2d(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut un: GLint;
    un = (call.arg(0)).to_i32().unwrap();

    let mut u1: GLdouble;
    u1 = (call.arg(1)).to_f64().unwrap();

    let mut u2: GLdouble;
    u2 = (call.arg(2)).to_f64().unwrap();

    let mut vn: GLint;
    vn = (call.arg(3)).to_i32().unwrap();

    let mut v1: GLdouble;
    v1 = (call.arg(4)).to_f64().unwrap();

    let mut v2: GLdouble;
    v2 = (call.arg(5)).to_f64().unwrap();

//not found in gl!    unsafe { gl::MapGrid2d(un, u1, u2, vn, v1, v2) };
}

pub fn retrace_glMapGrid2f(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut un: GLint;
    un = (call.arg(0)).to_i32().unwrap();

    let mut u1: GLfloat;
    u1 = (call.arg(1)).to_f32().unwrap();

    let mut u2: GLfloat;
    u2 = (call.arg(2)).to_f32().unwrap();

    let mut vn: GLint;
    vn = (call.arg(3)).to_i32().unwrap();

    let mut v1: GLfloat;
    v1 = (call.arg(4)).to_f32().unwrap();

    let mut v2: GLfloat;
    v2 = (call.arg(5)).to_f32().unwrap();

//not found in gl!    unsafe { gl::MapGrid2f(un, u1, u2, vn, v1, v2) };
}

pub fn retrace_glEvalCoord1d(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut u: GLdouble;
    u = (call.arg(0)).to_f64().unwrap();

//not found in gl!    unsafe { gl::EvalCoord1d(u) };
}

pub fn retrace_glEvalCoord1dv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let u: &mut [GLdouble];
    u = _allocator.alloc_array::<GLdouble>(&call.arg(0));
    let _a_PGLdouble3_0 = (call.arg(0)).to_array().unwrap();
    u[0] = (_a_PGLdouble3_0.values[0]).to_f64().unwrap();

//not found in gl!    unsafe { gl::EvalCoord1dv(u) };
}

pub fn retrace_glEvalCoord1f(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut u: GLfloat;
    u = (call.arg(0)).to_f32().unwrap();

//not found in gl!    unsafe { gl::EvalCoord1f(u) };
}

pub fn retrace_glEvalCoord1fv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let u: &mut [GLfloat];
    u = _allocator.alloc_array::<GLfloat>(&call.arg(0));
    let _a_PGLfloat13_0 = (call.arg(0)).to_array().unwrap();
    u[0] = (_a_PGLfloat13_0.values[0]).to_f32().unwrap();

//not found in gl!    unsafe { gl::EvalCoord1fv(u) };
}

pub fn retrace_glEvalCoord2d(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut u: GLdouble;
    u = (call.arg(0)).to_f64().unwrap();

    let mut v: GLdouble;
    v = (call.arg(1)).to_f64().unwrap();

//not found in gl!    unsafe { gl::EvalCoord2d(u, v) };
}

pub fn retrace_glEvalCoord2dv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let u: &mut [GLdouble];
    u = _allocator.alloc_array::<GLdouble>(&call.arg(0));
    let _a_GLdouble43_0 = (call.arg(0)).to_array();
    if let Some(_a_GLdouble43_0) = _a_GLdouble43_0 {
        for _jGLdouble43 in 0.._a_GLdouble43_0.values.len() {
    u[_jGLdouble43] = (*_a_GLdouble43_0.values[_jGLdouble43]).to_f64().unwrap();
        }
    }
    let u = u.as_mut_ptr();

//not found in gl!    unsafe { gl::EvalCoord2dv(u) };
}

pub fn retrace_glEvalCoord2f(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut u: GLfloat;
    u = (call.arg(0)).to_f32().unwrap();

    let mut v: GLfloat;
    v = (call.arg(1)).to_f32().unwrap();

//not found in gl!    unsafe { gl::EvalCoord2f(u, v) };
}

pub fn retrace_glEvalCoord2fv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let u: &mut [GLfloat];
    u = _allocator.alloc_array::<GLfloat>(&call.arg(0));
    let _a_GLfloat111_0 = (call.arg(0)).to_array();
    if let Some(_a_GLfloat111_0) = _a_GLfloat111_0 {
        for _jGLfloat111 in 0.._a_GLfloat111_0.values.len() {
    u[_jGLfloat111] = (*_a_GLfloat111_0.values[_jGLfloat111]).to_f32().unwrap();
        }
    }
    let u = u.as_mut_ptr();

//not found in gl!    unsafe { gl::EvalCoord2fv(u) };
}

pub fn retrace_glEvalMesh1(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut i1: GLint;
    i1 = (call.arg(1)).to_i32().unwrap();

    let mut i2: GLint;
    i2 = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::EvalMesh1(mode, i1, i2) };
}

pub fn retrace_glEvalPoint1(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut i: GLint;
    i = (call.arg(0)).to_i32().unwrap();

//not found in gl!    unsafe { gl::EvalPoint1(i) };
}

pub fn retrace_glEvalMesh2(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut i1: GLint;
    i1 = (call.arg(1)).to_i32().unwrap();

    let mut i2: GLint;
    i2 = (call.arg(2)).to_i32().unwrap();

    let mut j1: GLint;
    j1 = (call.arg(3)).to_i32().unwrap();

    let mut j2: GLint;
    j2 = (call.arg(4)).to_i32().unwrap();

//not found in gl!    unsafe { gl::EvalMesh2(mode, i1, i2, j1, j2) };
}

pub fn retrace_glEvalPoint2(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut i: GLint;
    i = (call.arg(0)).to_i32().unwrap();

    let mut j: GLint;
    j = (call.arg(1)).to_i32().unwrap();

//not found in gl!    unsafe { gl::EvalPoint2(i, j) };
}

pub fn retrace_glAlphaFunc(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut func: GLenum;
    func = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut _ref: GLfloat;
    _ref = (call.arg(1)).to_f32().unwrap();

//not found in gl!    unsafe { gl::AlphaFunc(func, _ref) };
}

pub fn retrace_glPixelZoom(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut xfactor: GLfloat;
    xfactor = (call.arg(0)).to_f32().unwrap();

    let mut yfactor: GLfloat;
    yfactor = (call.arg(1)).to_f32().unwrap();

//not found in gl!    unsafe { gl::PixelZoom(xfactor, yfactor) };
}

pub fn retrace_glPixelTransferf(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut pname: GLenum;
    pname = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut param: GLfloat;
    param = (call.arg(1)).to_f32().unwrap();

//not found in gl!    unsafe { gl::PixelTransferf(pname, param) };
}

pub fn retrace_glPixelTransferi(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut pname: GLenum;
    pname = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut param: GLint;
    param = (call.arg(1)).to_i32().unwrap();

//not found in gl!    unsafe { gl::PixelTransferi(pname, param) };
}

pub fn retrace_glPixelMapfv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut map: GLenum;
    map = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut mapsize: GLsizei;
    mapsize = (call.arg(1)).to_i32().unwrap();

    let values: &mut [GLfloat];
    values = _allocator.alloc_array::<GLfloat>(&call.arg(2));
    let _a_GLfloat112_0 = (call.arg(2)).to_array();
    if let Some(_a_GLfloat112_0) = _a_GLfloat112_0 {
        for _jGLfloat112 in 0.._a_GLfloat112_0.values.len() {
    values[_jGLfloat112] = (*_a_GLfloat112_0.values[_jGLfloat112]).to_f32().unwrap();
        }
    }
    let values = values.as_mut_ptr();

//not found in gl!    unsafe { gl::PixelMapfv(map, mapsize, values) };
}

pub fn retrace_glPixelMapuiv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut map: GLenum;
    map = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut mapsize: GLsizei;
    mapsize = (call.arg(1)).to_i32().unwrap();

    let values: &mut [GLuint];
    values = _allocator.alloc_array::<GLuint>(&call.arg(2));
    let _a_GLuint83_0 = (call.arg(2)).to_array();
    if let Some(_a_GLuint83_0) = _a_GLuint83_0 {
        for _jGLuint83 in 0.._a_GLuint83_0.values.len() {
    values[_jGLuint83] = (*_a_GLuint83_0.values[_jGLuint83]).to_u32().unwrap();
        }
    }
    let values = values.as_mut_ptr();

//not found in gl!    unsafe { gl::PixelMapuiv(map, mapsize, values) };
}

pub fn retrace_glPixelMapusv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut map: GLenum;
    map = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut mapsize: GLsizei;
    mapsize = (call.arg(1)).to_i32().unwrap();

    let values: &mut [GLushort];
    values = _allocator.alloc_array::<GLushort>(&call.arg(2));
    let _a_GLushort5_0 = (call.arg(2)).to_array();
    if let Some(_a_GLushort5_0) = _a_GLushort5_0 {
        for _jGLushort5 in 0.._a_GLushort5_0.values.len() {
    values[_jGLushort5] = (*_a_GLushort5_0.values[_jGLushort5]).to_u32().unwrap();
        }
    }
    let values = values.as_mut_ptr();

//not found in gl!    unsafe { gl::PixelMapusv(map, mapsize, values) };
}

pub fn retrace_glCopyPixels(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut x: GLint;
    x = (call.arg(0)).to_i32().unwrap();

    let mut y: GLint;
    y = (call.arg(1)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(2)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(3)).to_i32().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(4)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::CopyPixels(x, y, width, height, _type) };
}

pub fn retrace_glDrawPixels(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut width: GLsizei;
    width = (call.arg(0)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(1)).to_i32().unwrap();

    let mut format: GLenum;
    format = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let pixels = (call.arg(4)).to_pointer().unwrap() as *mut c_void;

//not found in gl!    unsafe { gl::DrawPixels(width, height, format, _type, pixels) };
}

pub fn retrace_glGetPixelMapfv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut map: GLenum;
    map = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let values: &mut [GLfloat];
    let values = (call.arg(1)).to_pointer();

    let _pack_buffer = 0;
    if self.context.features("pixel_buffer_object") {
//not found in gl!        unsafe { gl::GetIntegerv(gl::PIXEL_PACK_BUFFER_BINDING, &_pack_buffer) };
    }
     let buffer = Vec::<u8>::new();
    if _pack_buffer != 0 {
    return;
    }
//not found in gl!    unsafe { gl::GetPixelMapfv(map, values) };
    let _aPGLfloat1 = (call.arg(1)).to_array();
    if (_aPGLfloat1) {
    }
}

pub fn retrace_glGetPixelMapuiv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut map: GLenum;
    map = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let values: &mut [GLuint];
    let values = (call.arg(1)).to_pointer();

    let _pack_buffer = 0;
    if self.context.features("pixel_buffer_object") {
//not found in gl!        unsafe { gl::GetIntegerv(gl::PIXEL_PACK_BUFFER_BINDING, &_pack_buffer) };
    }
     let buffer = Vec::<u8>::new();
    if _pack_buffer != 0 {
    return;
    }
//not found in gl!    unsafe { gl::GetPixelMapuiv(map, values) };
    let _aPGLuint21 = (call.arg(1)).to_array();
    if (_aPGLuint21) {
    }
}

pub fn retrace_glGetPixelMapusv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut map: GLenum;
    map = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let values: &mut [GLushort];
    let values = (call.arg(1)).to_pointer();

    let _pack_buffer = 0;
    if self.context.features("pixel_buffer_object") {
//not found in gl!        unsafe { gl::GetIntegerv(gl::PIXEL_PACK_BUFFER_BINDING, &_pack_buffer) };
    }
     let buffer = Vec::<u8>::new();
    if _pack_buffer != 0 {
    return;
    }
//not found in gl!    unsafe { gl::GetPixelMapusv(map, values) };
    let _aPGLushort = (call.arg(1)).to_array();
    if (_aPGLushort) {
    }
}

pub fn retrace_glGetPolygonStipple(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mask: &mut [GLubyte];
    let mask = (call.arg(0)).to_pointer();

    let _pack_buffer = 0;
    if self.context.features("pixel_buffer_object") {
//not found in gl!        unsafe { gl::GetIntegerv(gl::PIXEL_PACK_BUFFER_BINDING, &_pack_buffer) };
    }
     let buffer = Vec::<u8>::new();
    if _pack_buffer != 0 {
    return;
    }
//not found in gl!    unsafe { gl::GetPolygonStipple(mask) };
}

pub fn retrace_glFrustum(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut left: GLdouble;
    left = (call.arg(0)).to_f64().unwrap();

    let mut right: GLdouble;
    right = (call.arg(1)).to_f64().unwrap();

    let mut bottom: GLdouble;
    bottom = (call.arg(2)).to_f64().unwrap();

    let mut top: GLdouble;
    top = (call.arg(3)).to_f64().unwrap();

    let mut zNear: GLdouble;
    zNear = (call.arg(4)).to_f64().unwrap();

    let mut zFar: GLdouble;
    zFar = (call.arg(5)).to_f64().unwrap();

//not found in gl!    unsafe { gl::Frustum(left, right, bottom, top, zNear, zFar) };
}

pub fn retrace_glLoadIdentity(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
//not found in gl!    unsafe { gl::LoadIdentity() };
}

pub fn retrace_glLoadMatrixf(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let m: &mut [GLfloat];
    m = _allocator.alloc_array::<GLfloat>(&call.arg(0));
    let _a_GLfloat113_0 = (call.arg(0)).to_array();
    if let Some(_a_GLfloat113_0) = _a_GLfloat113_0 {
        for _jGLfloat113 in 0.._a_GLfloat113_0.values.len() {
    m[_jGLfloat113] = (*_a_GLfloat113_0.values[_jGLfloat113]).to_f32().unwrap();
        }
    }
    let m = m.as_mut_ptr();

//not found in gl!    unsafe { gl::LoadMatrixf(m) };
}

pub fn retrace_glLoadMatrixd(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let m: &mut [GLdouble];
    m = _allocator.alloc_array::<GLdouble>(&call.arg(0));
    let _a_GLdouble44_0 = (call.arg(0)).to_array();
    if let Some(_a_GLdouble44_0) = _a_GLdouble44_0 {
        for _jGLdouble44 in 0.._a_GLdouble44_0.values.len() {
    m[_jGLdouble44] = (*_a_GLdouble44_0.values[_jGLdouble44]).to_f64().unwrap();
        }
    }
    let m = m.as_mut_ptr();

//not found in gl!    unsafe { gl::LoadMatrixd(m) };
}

pub fn retrace_glMatrixMode(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::MatrixMode(mode) };
}

pub fn retrace_glMultMatrixf(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let m: &mut [GLfloat];
    m = _allocator.alloc_array::<GLfloat>(&call.arg(0));
    let _a_GLfloat114_0 = (call.arg(0)).to_array();
    if let Some(_a_GLfloat114_0) = _a_GLfloat114_0 {
        for _jGLfloat114 in 0.._a_GLfloat114_0.values.len() {
    m[_jGLfloat114] = (*_a_GLfloat114_0.values[_jGLfloat114]).to_f32().unwrap();
        }
    }
    let m = m.as_mut_ptr();

//not found in gl!    unsafe { gl::MultMatrixf(m) };
}

pub fn retrace_glMultMatrixd(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let m: &mut [GLdouble];
    m = _allocator.alloc_array::<GLdouble>(&call.arg(0));
    let _a_GLdouble45_0 = (call.arg(0)).to_array();
    if let Some(_a_GLdouble45_0) = _a_GLdouble45_0 {
        for _jGLdouble45 in 0.._a_GLdouble45_0.values.len() {
    m[_jGLdouble45] = (*_a_GLdouble45_0.values[_jGLdouble45]).to_f64().unwrap();
        }
    }
    let m = m.as_mut_ptr();

//not found in gl!    unsafe { gl::MultMatrixd(m) };
}

pub fn retrace_glOrtho(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut left: GLdouble;
    left = (call.arg(0)).to_f64().unwrap();

    let mut right: GLdouble;
    right = (call.arg(1)).to_f64().unwrap();

    let mut bottom: GLdouble;
    bottom = (call.arg(2)).to_f64().unwrap();

    let mut top: GLdouble;
    top = (call.arg(3)).to_f64().unwrap();

    let mut zNear: GLdouble;
    zNear = (call.arg(4)).to_f64().unwrap();

    let mut zFar: GLdouble;
    zFar = (call.arg(5)).to_f64().unwrap();

//not found in gl!    unsafe { gl::Ortho(left, right, bottom, top, zNear, zFar) };
}

pub fn retrace_glPopMatrix(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
//not found in gl!    unsafe { gl::PopMatrix() };
}

pub fn retrace_glPushMatrix(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
//not found in gl!    unsafe { gl::PushMatrix() };
}

pub fn retrace_glRotated(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut angle: GLdouble;
    angle = (call.arg(0)).to_f64().unwrap();

    let mut x: GLdouble;
    x = (call.arg(1)).to_f64().unwrap();

    let mut y: GLdouble;
    y = (call.arg(2)).to_f64().unwrap();

    let mut z: GLdouble;
    z = (call.arg(3)).to_f64().unwrap();

//not found in gl!    unsafe { gl::Rotated(angle, x, y, z) };
}

pub fn retrace_glRotatef(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut angle: GLfloat;
    angle = (call.arg(0)).to_f32().unwrap();

    let mut x: GLfloat;
    x = (call.arg(1)).to_f32().unwrap();

    let mut y: GLfloat;
    y = (call.arg(2)).to_f32().unwrap();

    let mut z: GLfloat;
    z = (call.arg(3)).to_f32().unwrap();

//not found in gl!    unsafe { gl::Rotatef(angle, x, y, z) };
}

pub fn retrace_glScaled(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut x: GLdouble;
    x = (call.arg(0)).to_f64().unwrap();

    let mut y: GLdouble;
    y = (call.arg(1)).to_f64().unwrap();

    let mut z: GLdouble;
    z = (call.arg(2)).to_f64().unwrap();

//not found in gl!    unsafe { gl::Scaled(x, y, z) };
}

pub fn retrace_glScalef(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut x: GLfloat;
    x = (call.arg(0)).to_f32().unwrap();

    let mut y: GLfloat;
    y = (call.arg(1)).to_f32().unwrap();

    let mut z: GLfloat;
    z = (call.arg(2)).to_f32().unwrap();

//not found in gl!    unsafe { gl::Scalef(x, y, z) };
}

pub fn retrace_glTranslated(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut x: GLdouble;
    x = (call.arg(0)).to_f64().unwrap();

    let mut y: GLdouble;
    y = (call.arg(1)).to_f64().unwrap();

    let mut z: GLdouble;
    z = (call.arg(2)).to_f64().unwrap();

//not found in gl!    unsafe { gl::Translated(x, y, z) };
}

pub fn retrace_glTranslatef(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut x: GLfloat;
    x = (call.arg(0)).to_f32().unwrap();

    let mut y: GLfloat;
    y = (call.arg(1)).to_f32().unwrap();

    let mut z: GLfloat;
    z = (call.arg(2)).to_f32().unwrap();

//not found in gl!    unsafe { gl::Translatef(x, y, z) };
}

pub fn retrace_glDrawArrays(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut first: GLint;
    first = (call.arg(1)).to_i32().unwrap();

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    unsafe { gl::DrawArrays(mode, first, count) };
}

pub fn retrace_glDrawElements(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let indices: &mut [GLc_void];
            indices = (call.arg(3)).to_pointer().unwrap() as *mut c_void;

    unsafe { gl::DrawElements(mode, count, _type, indices) };
}

pub fn retrace_glPolygonOffset(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut factor: GLfloat;
    factor = (call.arg(0)).to_f32().unwrap();

    let mut units: GLfloat;
    units = (call.arg(1)).to_f32().unwrap();

    unsafe { gl::PolygonOffset(factor, units) };
}

pub fn retrace_glCopyTexImage1D(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(1)).to_i32().unwrap();

    let mut internalformat: GLenum;
    internalformat = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut x: GLint;
    x = (call.arg(3)).to_i32().unwrap();

    let mut y: GLint;
    y = (call.arg(4)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(5)).to_i32().unwrap();

    let mut border: GLint;
    border = (call.arg(6)).to_i32().unwrap();

    unsafe { gl::CopyTexImage1D(target, level, internalformat, x, y, width, border) };
}

pub fn retrace_glCopyTexImage2D(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(1)).to_i32().unwrap();

    let mut internalformat: GLenum;
    internalformat = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut x: GLint;
    x = (call.arg(3)).to_i32().unwrap();

    let mut y: GLint;
    y = (call.arg(4)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(5)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(6)).to_i32().unwrap();

    let mut border: GLint;
    border = (call.arg(7)).to_i32().unwrap();

    unsafe { gl::CopyTexImage2D(target, level, internalformat, x, y, width, height, border) };
}

pub fn retrace_glCopyTexSubImage1D(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(1)).to_i32().unwrap();

    let mut xoffset: GLint;
    xoffset = (call.arg(2)).to_i32().unwrap();

    let mut x: GLint;
    x = (call.arg(3)).to_i32().unwrap();

    let mut y: GLint;
    y = (call.arg(4)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(5)).to_i32().unwrap();

    unsafe { gl::CopyTexSubImage1D(target, level, xoffset, x, y, width) };
}

pub fn retrace_glCopyTexSubImage2D(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(1)).to_i32().unwrap();

    let mut xoffset: GLint;
    xoffset = (call.arg(2)).to_i32().unwrap();

    let mut yoffset: GLint;
    yoffset = (call.arg(3)).to_i32().unwrap();

    let mut x: GLint;
    x = (call.arg(4)).to_i32().unwrap();

    let mut y: GLint;
    y = (call.arg(5)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(6)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(7)).to_i32().unwrap();

    unsafe { gl::CopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height) };
}

pub fn retrace_glTexSubImage1D(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(1)).to_i32().unwrap();

    let mut xoffset: GLint;
    xoffset = (call.arg(2)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(3)).to_i32().unwrap();

    let mut format: GLenum;
    format = (call.arg(4)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(5)).to_u32().unwrap().try_into().unwrap();

    let pixels = (call.arg(6)).to_pointer().unwrap() as *mut c_void;

    unsafe { gl::TexSubImage1D(target, level, xoffset, width, format, _type, pixels) };
}

pub fn retrace_glTexSubImage2D(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(1)).to_i32().unwrap();

    let mut xoffset: GLint;
    xoffset = (call.arg(2)).to_i32().unwrap();

    let mut yoffset: GLint;
    yoffset = (call.arg(3)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(4)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(5)).to_i32().unwrap();

    let mut format: GLenum;
    format = (call.arg(6)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(7)).to_u32().unwrap().try_into().unwrap();

    let pixels = (call.arg(8)).to_pointer().unwrap() as *mut c_void;

    unsafe { gl::TexSubImage2D(target, level, xoffset, yoffset, width, height, format, _type, pixels) };
}

pub fn retrace_glBindTexture(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut texture: GLuint;
    texture = (call.arg(1)).to_u32().unwrap();
    texture = self._texture_map[texture];

    unsafe { gl::BindTexture(target, texture) };
}

pub fn retrace_glDeleteTextures(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut n: GLsizei;
    n = (call.arg(0)).to_i32().unwrap();

    let textures: &mut [GLuint];
    textures = _allocator.alloc_array::<GLuint>(&call.arg(1));
    let _a_GLuint84_0 = (call.arg(1)).to_array();
    if let Some(_a_GLuint84_0) = _a_GLuint84_0 {
        for _jGLuint84 in 0.._a_GLuint84_0.values.len() {
    textures[_jGLuint84] = (*_a_GLuint84_0.values[_jGLuint84]).to_u32().unwrap();
    textures[_jGLuint84] = self._texture_map[textures[_jGLuint84]];
        }
    }
    let textures = textures.as_mut_ptr();

    unsafe { gl::DeleteTextures(n, textures) };
}

pub fn retrace_glGenTextures(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut n: GLsizei;
    n = (call.arg(0)).to_i32().unwrap();

    let textures: &mut [GLuint];
    textures = _allocator.alloc_array::<GLuint>(&call.arg(1));

//not found in gl!    unsafe { gl::GenTextures(n, textures) };
    let _aGLuint86 = (call.arg(1)).to_array();
    if (_aGLuint86) {
        for _jGLuint86 in 0.._aGLuint86.values.len() {
    let _origResult: GLuint;
    _origResult = (_aGLuint86.values[_jGLuint86]).to_u32().unwrap();
    self._texture_map[_origResult] = textures[_jGLuint86]; 
        }
    }
}

pub fn retrace_glArrayElement(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut i: GLint;
    i = (call.arg(0)).to_i32().unwrap();

//not found in gl!    unsafe { gl::ArrayElement(i) };
}

pub fn retrace_glColorPointer(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut size: GLint;
    size = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut stride: GLsizei;
    stride = (call.arg(2)).to_i32().unwrap();

    let pointer: &mut [GLc_void];
    pointer = region::to_pointer(call.arg(3), true);

//not found in gl!    unsafe { gl::ColorPointer(size, _type, stride, pointer) };
}

pub fn retrace_glDisableClientState(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut array: GLenum;
    array = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::DisableClientState(array) };
}

pub fn retrace_glEdgeFlagPointer(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut stride: GLsizei;
    stride = (call.arg(0)).to_i32().unwrap();

    let pointer: &mut [GLc_void];
    pointer = region::to_pointer(call.arg(1), true);

//not found in gl!    unsafe { gl::EdgeFlagPointer(stride, pointer) };
}

pub fn retrace_glEnableClientState(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut array: GLenum;
    array = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::EnableClientState(array) };
}

pub fn retrace_glIndexPointer(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut _type: GLenum;
    _type = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut stride: GLsizei;
    stride = (call.arg(1)).to_i32().unwrap();

    let pointer: &mut [GLc_void];
    pointer = region::to_pointer(call.arg(2), true);

//not found in gl!    unsafe { gl::IndexPointer(_type, stride, pointer) };
}

pub fn retrace_glInterleavedArrays(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut format: GLenum;
    format = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut stride: GLsizei;
    stride = (call.arg(1)).to_i32().unwrap();

    let pointer: &mut [GLc_void];
    pointer = region::to_pointer(call.arg(2), true);

//not found in gl!    unsafe { gl::InterleavedArrays(format, stride, pointer) };
}

pub fn retrace_glNormalPointer(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut _type: GLenum;
    _type = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut stride: GLsizei;
    stride = (call.arg(1)).to_i32().unwrap();

    let pointer: &mut [GLc_void];
    pointer = region::to_pointer(call.arg(2), true);

//not found in gl!    unsafe { gl::NormalPointer(_type, stride, pointer) };
}

pub fn retrace_glTexCoordPointer(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut size: GLint;
    size = (call.arg(0)).to_i32().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut stride: GLsizei;
    stride = (call.arg(2)).to_i32().unwrap();

    let pointer: &mut [GLc_void];
    pointer = region::to_pointer(call.arg(3), true);

//not found in gl!    unsafe { gl::TexCoordPointer(size, _type, stride, pointer) };
}

pub fn retrace_glVertexPointer(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut size: GLint;
    size = (call.arg(0)).to_i32().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut stride: GLsizei;
    stride = (call.arg(2)).to_i32().unwrap();

    let pointer: &mut [GLc_void];
    pointer = region::to_pointer(call.arg(3), true);

//not found in gl!    unsafe { gl::VertexPointer(size, _type, stride, pointer) };
}

pub fn retrace_glPrioritizeTextures(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut n: GLsizei;
    n = (call.arg(0)).to_i32().unwrap();

    let textures: &mut [GLuint];
    textures = _allocator.alloc_array::<GLuint>(&call.arg(1));
    let _a_GLuint87_0 = (call.arg(1)).to_array();
    if let Some(_a_GLuint87_0) = _a_GLuint87_0 {
        for _jGLuint87 in 0.._a_GLuint87_0.values.len() {
    textures[_jGLuint87] = (*_a_GLuint87_0.values[_jGLuint87]).to_u32().unwrap();
    textures[_jGLuint87] = self._texture_map[textures[_jGLuint87]];
        }
    }
    let textures = textures.as_mut_ptr();

    let priorities: &mut [GLclampf];
    priorities = _allocator.alloc_array::<GLclampf>(&call.arg(2));
    let _a_GLclampf1_0 = (call.arg(2)).to_array();
    if let Some(_a_GLclampf1_0) = _a_GLclampf1_0 {
        for _jGLclampf1 in 0.._a_GLclampf1_0.values.len() {
    priorities[_jGLclampf1] = (*_a_GLclampf1_0.values[_jGLclampf1]).to_f32().unwrap();
        }
    }
    let priorities = priorities.as_mut_ptr();

//not found in gl!    unsafe { gl::PrioritizeTextures(n, textures, priorities) };
}

pub fn retrace_glIndexub(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut c: GLubyte;
    c = (call.arg(0)).to_u32().unwrap();

//not found in gl!    unsafe { gl::Indexub(c) };
}

pub fn retrace_glIndexubv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let c: &mut [GLubyte];
    c = _allocator.alloc_array::<GLubyte>(&call.arg(0));
    let _a_PGLubyte1_0 = (call.arg(0)).to_array().unwrap();
    c[0] = (_a_PGLubyte1_0.values[0]).to_u32().unwrap();

//not found in gl!    unsafe { gl::Indexubv(c) };
}

pub fn retrace_glPopClientAttrib(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
//not found in gl!    unsafe { gl::PopClientAttrib() };
}

pub fn retrace_glPushClientAttrib(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mask: GLbitfield;
    mask = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::PushClientAttrib(mask) };
}

pub fn retrace_glBlendColor(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut red: GLfloat;
    red = (call.arg(0)).to_f32().unwrap();

    let mut green: GLfloat;
    green = (call.arg(1)).to_f32().unwrap();

    let mut blue: GLfloat;
    blue = (call.arg(2)).to_f32().unwrap();

    let mut alpha: GLfloat;
    alpha = (call.arg(3)).to_f32().unwrap();

    unsafe { gl::BlendColor(red, green, blue, alpha) };
}

pub fn retrace_glBlendEquation(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    unsafe { gl::BlendEquation(mode) };
}

pub fn retrace_glDrawRangeElements(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut start: GLuint;
    start = (call.arg(1)).to_u32().unwrap();

    let mut end: GLuint;
    end = (call.arg(2)).to_u32().unwrap();

    let mut count: GLsizei;
    count = (call.arg(3)).to_i32().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(4)).to_u32().unwrap().try_into().unwrap();

    let indices: &mut [GLc_void];
            indices = (call.arg(5)).to_pointer().unwrap() as *mut c_void;

    unsafe { gl::DrawRangeElements(mode, start, end, count, _type, indices) };
}

pub fn retrace_glTexImage3D(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(1)).to_i32().unwrap();

    let mut internalformat: GLint;
    internalformat = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut width: GLsizei;
    width = (call.arg(3)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(4)).to_i32().unwrap();

    let mut depth: GLsizei;
    depth = (call.arg(5)).to_i32().unwrap();

    let mut border: GLint;
    border = (call.arg(6)).to_i32().unwrap();

    let mut format: GLenum;
    format = (call.arg(7)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(8)).to_u32().unwrap().try_into().unwrap();

    let pixels = (call.arg(9)).to_pointer().unwrap() as *mut c_void;

    unsafe { gl::TexImage3D(target, level, internalformat, width, height, depth, border, format, _type, pixels) };
}

pub fn retrace_glTexSubImage3D(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(1)).to_i32().unwrap();

    let mut xoffset: GLint;
    xoffset = (call.arg(2)).to_i32().unwrap();

    let mut yoffset: GLint;
    yoffset = (call.arg(3)).to_i32().unwrap();

    let mut zoffset: GLint;
    zoffset = (call.arg(4)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(5)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(6)).to_i32().unwrap();

    let mut depth: GLsizei;
    depth = (call.arg(7)).to_i32().unwrap();

    let mut format: GLenum;
    format = (call.arg(8)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(9)).to_u32().unwrap().try_into().unwrap();

    let pixels = (call.arg(10)).to_pointer().unwrap() as *mut c_void;

    unsafe { gl::TexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, _type, pixels) };
}

pub fn retrace_glCopyTexSubImage3D(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(1)).to_i32().unwrap();

    let mut xoffset: GLint;
    xoffset = (call.arg(2)).to_i32().unwrap();

    let mut yoffset: GLint;
    yoffset = (call.arg(3)).to_i32().unwrap();

    let mut zoffset: GLint;
    zoffset = (call.arg(4)).to_i32().unwrap();

    let mut x: GLint;
    x = (call.arg(5)).to_i32().unwrap();

    let mut y: GLint;
    y = (call.arg(6)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(7)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(8)).to_i32().unwrap();

    unsafe { gl::CopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height) };
}

pub fn retrace_glColorTable(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut internalformat: GLenum;
    internalformat = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut width: GLsizei;
    width = (call.arg(2)).to_i32().unwrap();

    let mut format: GLenum;
    format = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(4)).to_u32().unwrap().try_into().unwrap();

    let table: &mut [GLc_void];
    let table = (call.arg(5)).to_pointer().unwrap() as *mut c_void;

//not found in gl!    unsafe { gl::ColorTable(target, internalformat, width, format, _type, table) };
}

pub fn retrace_glColorTableParameterfv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLfloat];
    params = _allocator.alloc_array::<GLfloat>(&call.arg(2));
    let _a_GLfloat115_0 = (call.arg(2)).to_array();
    if let Some(_a_GLfloat115_0) = _a_GLfloat115_0 {
        for _jGLfloat115 in 0.._a_GLfloat115_0.values.len() {
    params[_jGLfloat115] = (*_a_GLfloat115_0.values[_jGLfloat115]).to_f32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::ColorTableParameterfv(target, pname, params) };
}

pub fn retrace_glColorTableParameteriv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLint];
    params = _allocator.alloc_array::<GLint>(&call.arg(2));
    let _a_GLint150_0 = (call.arg(2)).to_array();
    if let Some(_a_GLint150_0) = _a_GLint150_0 {
        for _jGLint150 in 0.._a_GLint150_0.values.len() {
    params[_jGLint150] = (*_a_GLint150_0.values[_jGLint150]).to_i32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::ColorTableParameteriv(target, pname, params) };
}

pub fn retrace_glCopyColorTable(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut internalformat: GLenum;
    internalformat = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut x: GLint;
    x = (call.arg(2)).to_i32().unwrap();

    let mut y: GLint;
    y = (call.arg(3)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(4)).to_i32().unwrap();

//not found in gl!    unsafe { gl::CopyColorTable(target, internalformat, x, y, width) };
}

pub fn retrace_glColorSubTable(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut start: GLsizei;
    start = (call.arg(1)).to_i32().unwrap();

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let mut format: GLenum;
    format = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(4)).to_u32().unwrap().try_into().unwrap();

    let data: &mut [GLc_void];
    let data = (call.arg(5)).to_pointer().unwrap() as *mut c_void;

//not found in gl!    unsafe { gl::ColorSubTable(target, start, count, format, _type, data) };
}

pub fn retrace_glCopyColorSubTable(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut start: GLsizei;
    start = (call.arg(1)).to_i32().unwrap();

    let mut x: GLint;
    x = (call.arg(2)).to_i32().unwrap();

    let mut y: GLint;
    y = (call.arg(3)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(4)).to_i32().unwrap();

//not found in gl!    unsafe { gl::CopyColorSubTable(target, start, x, y, width) };
}

pub fn retrace_glConvolutionFilter1D(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut internalformat: GLenum;
    internalformat = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut width: GLsizei;
    width = (call.arg(2)).to_i32().unwrap();

    let mut format: GLenum;
    format = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(4)).to_u32().unwrap().try_into().unwrap();

    let image: &mut [GLc_void];
    let image = (call.arg(5)).to_pointer().unwrap() as *mut c_void;

//not found in gl!    unsafe { gl::ConvolutionFilter1D(target, internalformat, width, format, _type, image) };
}

pub fn retrace_glConvolutionFilter2D(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut internalformat: GLenum;
    internalformat = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut width: GLsizei;
    width = (call.arg(2)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(3)).to_i32().unwrap();

    let mut format: GLenum;
    format = (call.arg(4)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(5)).to_u32().unwrap().try_into().unwrap();

    let image: &mut [GLc_void];
    let image = (call.arg(6)).to_pointer().unwrap() as *mut c_void;

//not found in gl!    unsafe { gl::ConvolutionFilter2D(target, internalformat, width, height, format, _type, image) };
}

pub fn retrace_glConvolutionParameterf(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut params: GLfloat;
    params = (call.arg(2)).to_f32().unwrap();

//not found in gl!    unsafe { gl::ConvolutionParameterf(target, pname, params) };
}

pub fn retrace_glConvolutionParameterfv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLfloat];
    params = _allocator.alloc_array::<GLfloat>(&call.arg(2));
    let _a_GLfloat116_0 = (call.arg(2)).to_array();
    if let Some(_a_GLfloat116_0) = _a_GLfloat116_0 {
        for _jGLfloat116 in 0.._a_GLfloat116_0.values.len() {
    params[_jGLfloat116] = (*_a_GLfloat116_0.values[_jGLfloat116]).to_f32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::ConvolutionParameterfv(target, pname, params) };
}

pub fn retrace_glConvolutionParameteri(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut params: GLint;
    params = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::ConvolutionParameteri(target, pname, params) };
}

pub fn retrace_glConvolutionParameteriv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLint];
    params = _allocator.alloc_array::<GLint>(&call.arg(2));
    let _a_GLint151_0 = (call.arg(2)).to_array();
    if let Some(_a_GLint151_0) = _a_GLint151_0 {
        for _jGLint151 in 0.._a_GLint151_0.values.len() {
    params[_jGLint151] = (*_a_GLint151_0.values[_jGLint151]).to_i32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::ConvolutionParameteriv(target, pname, params) };
}

pub fn retrace_glCopyConvolutionFilter1D(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut internalformat: GLenum;
    internalformat = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut x: GLint;
    x = (call.arg(2)).to_i32().unwrap();

    let mut y: GLint;
    y = (call.arg(3)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(4)).to_i32().unwrap();

//not found in gl!    unsafe { gl::CopyConvolutionFilter1D(target, internalformat, x, y, width) };
}

pub fn retrace_glCopyConvolutionFilter2D(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut internalformat: GLenum;
    internalformat = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut x: GLint;
    x = (call.arg(2)).to_i32().unwrap();

    let mut y: GLint;
    y = (call.arg(3)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(4)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(5)).to_i32().unwrap();

//not found in gl!    unsafe { gl::CopyConvolutionFilter2D(target, internalformat, x, y, width, height) };
}

pub fn retrace_glGetConvolutionFilter(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut format: GLenum;
    format = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let image: &mut [GLc_void];
    let image = (call.arg(3)).to_pointer();

    let _pack_buffer = 0;
    if self.context.features("pixel_buffer_object") {
//not found in gl!        unsafe { gl::GetIntegerv(gl::PIXEL_PACK_BUFFER_BINDING, &_pack_buffer) };
    }
     let buffer = Vec::<u8>::new();
    if _pack_buffer != 0 {
    return;
    }
//not found in gl!    unsafe { gl::GetConvolutionFilter(target, format, _type, image) };
}

pub fn retrace_glGetSeparableFilter(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut format: GLenum;
    format = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let row: &mut [GLc_void];
    let row = (call.arg(3)).to_pointer();

    let column: &mut [GLc_void];
    let column = (call.arg(4)).to_pointer();

    let span: &mut [GLc_void];
    let span = (call.arg(5)).to_pointer();

    let _pack_buffer = 0;
    if self.context.features("pixel_buffer_object") {
//not found in gl!        unsafe { gl::GetIntegerv(gl::PIXEL_PACK_BUFFER_BINDING, &_pack_buffer) };
    }
     let buffer = Vec::<u8>::new();
    if _pack_buffer != 0 {
    return;
    }
//not found in gl!    unsafe { gl::GetSeparableFilter(target, format, _type, row, column, span) };
}

pub fn retrace_glSeparableFilter2D(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut internalformat: GLenum;
    internalformat = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut width: GLsizei;
    width = (call.arg(2)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(3)).to_i32().unwrap();

    let mut format: GLenum;
    format = (call.arg(4)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(5)).to_u32().unwrap().try_into().unwrap();

    let row: &mut [GLc_void];
    let row = (call.arg(6)).to_pointer().unwrap() as *mut c_void;

    let column: &mut [GLc_void];
    let column = (call.arg(7)).to_pointer().unwrap() as *mut c_void;

//not found in gl!    unsafe { gl::SeparableFilter2D(target, internalformat, width, height, format, _type, row, column) };
}

pub fn retrace_glGetHistogram(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut reset: GLboolean;
    reset = (call.arg(1)).to_u32().unwrap() as u8;

    let mut format: GLenum;
    format = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let values: &mut [GLc_void];
    let values = (call.arg(4)).to_pointer();

    let _pack_buffer = 0;
    if self.context.features("pixel_buffer_object") {
//not found in gl!        unsafe { gl::GetIntegerv(gl::PIXEL_PACK_BUFFER_BINDING, &_pack_buffer) };
    }
     let buffer = Vec::<u8>::new();
    if _pack_buffer != 0 {
    return;
    }
//not found in gl!    unsafe { gl::GetHistogram(target, reset, format, _type, values) };
}

pub fn retrace_glGetMinmax(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut reset: GLboolean;
    reset = (call.arg(1)).to_u32().unwrap() as u8;

    let mut format: GLenum;
    format = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let values: &mut [GLc_void];
    let values = (call.arg(4)).to_pointer();

    let _pack_buffer = 0;
    if self.context.features("pixel_buffer_object") {
//not found in gl!        unsafe { gl::GetIntegerv(gl::PIXEL_PACK_BUFFER_BINDING, &_pack_buffer) };
    }
     let buffer = Vec::<u8>::new();
    if _pack_buffer != 0 {
    return;
    }
//not found in gl!    unsafe { gl::GetMinmax(target, reset, format, _type, values) };
}

pub fn retrace_glHistogram(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut width: GLsizei;
    width = (call.arg(1)).to_i32().unwrap();

    let mut internalformat: GLenum;
    internalformat = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut sink: GLboolean;
    sink = (call.arg(3)).to_u32().unwrap() as u8;

//not found in gl!    unsafe { gl::Histogram(target, width, internalformat, sink) };
}

pub fn retrace_glMinmax(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut internalformat: GLenum;
    internalformat = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut sink: GLboolean;
    sink = (call.arg(2)).to_u32().unwrap() as u8;

//not found in gl!    unsafe { gl::Minmax(target, internalformat, sink) };
}

pub fn retrace_glResetHistogram(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::ResetHistogram(target) };
}

pub fn retrace_glResetMinmax(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::ResetMinmax(target) };
}

pub fn retrace_glActiveTexture(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLenum;
    texture = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    unsafe { gl::ActiveTexture(texture) };
}

pub fn retrace_glSampleCoverage(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut value: GLfloat;
    value = (call.arg(0)).to_f32().unwrap();

    let mut invert: GLboolean;
    invert = (call.arg(1)).to_u32().unwrap() as u8;

    unsafe { gl::SampleCoverage(value, invert) };
}

pub fn retrace_glCompressedTexImage3D(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(1)).to_i32().unwrap();

    let mut internalformat: GLenum;
    internalformat = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut width: GLsizei;
    width = (call.arg(3)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(4)).to_i32().unwrap();

    let mut depth: GLsizei;
    depth = (call.arg(5)).to_i32().unwrap();

    let mut border: GLint;
    border = (call.arg(6)).to_i32().unwrap();

    let mut imageSize: GLsizei;
    imageSize = (call.arg(7)).to_i32().unwrap();

    let data: &mut [GLc_void];
    let data = (call.arg(8)).to_pointer().unwrap() as *mut c_void;

    unsafe { gl::CompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data) };
}

pub fn retrace_glCompressedTexImage2D(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(1)).to_i32().unwrap();

    let mut internalformat: GLenum;
    internalformat = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut width: GLsizei;
    width = (call.arg(3)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(4)).to_i32().unwrap();

    let mut border: GLint;
    border = (call.arg(5)).to_i32().unwrap();

    let mut imageSize: GLsizei;
    imageSize = (call.arg(6)).to_i32().unwrap();

    let data: &mut [GLc_void];
    let data = (call.arg(7)).to_pointer().unwrap() as *mut c_void;

    unsafe { gl::CompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data) };
}

pub fn retrace_glCompressedTexImage1D(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(1)).to_i32().unwrap();

    let mut internalformat: GLenum;
    internalformat = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut width: GLsizei;
    width = (call.arg(3)).to_i32().unwrap();

    let mut border: GLint;
    border = (call.arg(4)).to_i32().unwrap();

    let mut imageSize: GLsizei;
    imageSize = (call.arg(5)).to_i32().unwrap();

    let data: &mut [GLc_void];
    let data = (call.arg(6)).to_pointer().unwrap() as *mut c_void;

    unsafe { gl::CompressedTexImage1D(target, level, internalformat, width, border, imageSize, data) };
}

pub fn retrace_glCompressedTexSubImage3D(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(1)).to_i32().unwrap();

    let mut xoffset: GLint;
    xoffset = (call.arg(2)).to_i32().unwrap();

    let mut yoffset: GLint;
    yoffset = (call.arg(3)).to_i32().unwrap();

    let mut zoffset: GLint;
    zoffset = (call.arg(4)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(5)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(6)).to_i32().unwrap();

    let mut depth: GLsizei;
    depth = (call.arg(7)).to_i32().unwrap();

    let mut format: GLenum;
    format = (call.arg(8)).to_u32().unwrap().try_into().unwrap();

    let mut imageSize: GLsizei;
    imageSize = (call.arg(9)).to_i32().unwrap();

    let data: &mut [GLc_void];
    let data = (call.arg(10)).to_pointer().unwrap() as *mut c_void;

    unsafe { gl::CompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) };
}

pub fn retrace_glCompressedTexSubImage2D(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(1)).to_i32().unwrap();

    let mut xoffset: GLint;
    xoffset = (call.arg(2)).to_i32().unwrap();

    let mut yoffset: GLint;
    yoffset = (call.arg(3)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(4)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(5)).to_i32().unwrap();

    let mut format: GLenum;
    format = (call.arg(6)).to_u32().unwrap().try_into().unwrap();

    let mut imageSize: GLsizei;
    imageSize = (call.arg(7)).to_i32().unwrap();

    let data: &mut [GLc_void];
    let data = (call.arg(8)).to_pointer().unwrap() as *mut c_void;

    unsafe { gl::CompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data) };
}

pub fn retrace_glCompressedTexSubImage1D(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(1)).to_i32().unwrap();

    let mut xoffset: GLint;
    xoffset = (call.arg(2)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(3)).to_i32().unwrap();

    let mut format: GLenum;
    format = (call.arg(4)).to_u32().unwrap().try_into().unwrap();

    let mut imageSize: GLsizei;
    imageSize = (call.arg(5)).to_i32().unwrap();

    let data: &mut [GLc_void];
    let data = (call.arg(6)).to_pointer().unwrap() as *mut c_void;

    unsafe { gl::CompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data) };
}

pub fn retrace_glGetCompressedTexImage(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(1)).to_i32().unwrap();

    let img: &mut [GLc_void];
    let img = (call.arg(2)).to_pointer();

    let _pack_buffer = 0;
    if self.context.features("pixel_buffer_object") {
//not found in gl!        unsafe { gl::GetIntegerv(gl::PIXEL_PACK_BUFFER_BINDING, &_pack_buffer) };
    }
     let buffer = Vec::<u8>::new();
    if _pack_buffer != 0 {
    return;
    }
//not found in gl!    unsafe { gl::GetCompressedTexImage(target, level, img) };
}

pub fn retrace_glClientActiveTexture(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLenum;
    texture = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::ClientActiveTexture(texture) };
}

pub fn retrace_glMultiTexCoord1d(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut s: GLdouble;
    s = (call.arg(1)).to_f64().unwrap();

//not found in gl!    unsafe { gl::MultiTexCoord1d(target, s) };
}

pub fn retrace_glMultiTexCoord1dv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let v: &mut [GLdouble];
    v = _allocator.alloc_array::<GLdouble>(&call.arg(1));
    let _a_PGLdouble4_0 = (call.arg(1)).to_array().unwrap();
    v[0] = (_a_PGLdouble4_0.values[0]).to_f64().unwrap();

//not found in gl!    unsafe { gl::MultiTexCoord1dv(target, v) };
}

pub fn retrace_glMultiTexCoord1f(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut s: GLfloat;
    s = (call.arg(1)).to_f32().unwrap();

//not found in gl!    unsafe { gl::MultiTexCoord1f(target, s) };
}

pub fn retrace_glMultiTexCoord1fv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let v: &mut [GLfloat];
    v = _allocator.alloc_array::<GLfloat>(&call.arg(1));
    let _a_PGLfloat14_0 = (call.arg(1)).to_array().unwrap();
    v[0] = (_a_PGLfloat14_0.values[0]).to_f32().unwrap();

//not found in gl!    unsafe { gl::MultiTexCoord1fv(target, v) };
}

pub fn retrace_glMultiTexCoord1i(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut s: GLint;
    s = (call.arg(1)).to_i32().unwrap();

//not found in gl!    unsafe { gl::MultiTexCoord1i(target, s) };
}

pub fn retrace_glMultiTexCoord1iv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let v: &mut [GLint];
    v = _allocator.alloc_array::<GLint>(&call.arg(1));
    let _a_PGLint31_0 = (call.arg(1)).to_array().unwrap();
    v[0] = (_a_PGLint31_0.values[0]).to_i32().unwrap();

//not found in gl!    unsafe { gl::MultiTexCoord1iv(target, v) };
}

pub fn retrace_glMultiTexCoord1s(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut s: GLshort;
    s = (call.arg(1)).to_i32().unwrap();

//not found in gl!    unsafe { gl::MultiTexCoord1s(target, s) };
}

pub fn retrace_glMultiTexCoord1sv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let v: &mut [GLshort];
    v = _allocator.alloc_array::<GLshort>(&call.arg(1));
    let _a_PGLshort2_0 = (call.arg(1)).to_array().unwrap();
    v[0] = (_a_PGLshort2_0.values[0]).to_i32().unwrap();

//not found in gl!    unsafe { gl::MultiTexCoord1sv(target, v) };
}

pub fn retrace_glMultiTexCoord2d(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut s: GLdouble;
    s = (call.arg(1)).to_f64().unwrap();

    let mut t: GLdouble;
    t = (call.arg(2)).to_f64().unwrap();

//not found in gl!    unsafe { gl::MultiTexCoord2d(target, s, t) };
}

pub fn retrace_glMultiTexCoord2dv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let v: &mut [GLdouble];
    v = _allocator.alloc_array::<GLdouble>(&call.arg(1));
    let _a_GLdouble46_0 = (call.arg(1)).to_array();
    if let Some(_a_GLdouble46_0) = _a_GLdouble46_0 {
        for _jGLdouble46 in 0.._a_GLdouble46_0.values.len() {
    v[_jGLdouble46] = (*_a_GLdouble46_0.values[_jGLdouble46]).to_f64().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::MultiTexCoord2dv(target, v) };
}

pub fn retrace_glMultiTexCoord2f(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut s: GLfloat;
    s = (call.arg(1)).to_f32().unwrap();

    let mut t: GLfloat;
    t = (call.arg(2)).to_f32().unwrap();

//not found in gl!    unsafe { gl::MultiTexCoord2f(target, s, t) };
}

pub fn retrace_glMultiTexCoord2fv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let v: &mut [GLfloat];
    v = _allocator.alloc_array::<GLfloat>(&call.arg(1));
    let _a_GLfloat117_0 = (call.arg(1)).to_array();
    if let Some(_a_GLfloat117_0) = _a_GLfloat117_0 {
        for _jGLfloat117 in 0.._a_GLfloat117_0.values.len() {
    v[_jGLfloat117] = (*_a_GLfloat117_0.values[_jGLfloat117]).to_f32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::MultiTexCoord2fv(target, v) };
}

pub fn retrace_glMultiTexCoord2i(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut s: GLint;
    s = (call.arg(1)).to_i32().unwrap();

    let mut t: GLint;
    t = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::MultiTexCoord2i(target, s, t) };
}

pub fn retrace_glMultiTexCoord2iv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let v: &mut [GLint];
    v = _allocator.alloc_array::<GLint>(&call.arg(1));
    let _a_GLint152_0 = (call.arg(1)).to_array();
    if let Some(_a_GLint152_0) = _a_GLint152_0 {
        for _jGLint152 in 0.._a_GLint152_0.values.len() {
    v[_jGLint152] = (*_a_GLint152_0.values[_jGLint152]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::MultiTexCoord2iv(target, v) };
}

pub fn retrace_glMultiTexCoord2s(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut s: GLshort;
    s = (call.arg(1)).to_i32().unwrap();

    let mut t: GLshort;
    t = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::MultiTexCoord2s(target, s, t) };
}

pub fn retrace_glMultiTexCoord2sv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let v: &mut [GLshort];
    v = _allocator.alloc_array::<GLshort>(&call.arg(1));
    let _a_GLshort15_0 = (call.arg(1)).to_array();
    if let Some(_a_GLshort15_0) = _a_GLshort15_0 {
        for _jGLshort15 in 0.._a_GLshort15_0.values.len() {
    v[_jGLshort15] = (*_a_GLshort15_0.values[_jGLshort15]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::MultiTexCoord2sv(target, v) };
}

pub fn retrace_glMultiTexCoord3d(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut s: GLdouble;
    s = (call.arg(1)).to_f64().unwrap();

    let mut t: GLdouble;
    t = (call.arg(2)).to_f64().unwrap();

    let mut r: GLdouble;
    r = (call.arg(3)).to_f64().unwrap();

//not found in gl!    unsafe { gl::MultiTexCoord3d(target, s, t, r) };
}

pub fn retrace_glMultiTexCoord3dv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let v: &mut [GLdouble];
    v = _allocator.alloc_array::<GLdouble>(&call.arg(1));
    let _a_GLdouble47_0 = (call.arg(1)).to_array();
    if let Some(_a_GLdouble47_0) = _a_GLdouble47_0 {
        for _jGLdouble47 in 0.._a_GLdouble47_0.values.len() {
    v[_jGLdouble47] = (*_a_GLdouble47_0.values[_jGLdouble47]).to_f64().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::MultiTexCoord3dv(target, v) };
}

pub fn retrace_glMultiTexCoord3f(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut s: GLfloat;
    s = (call.arg(1)).to_f32().unwrap();

    let mut t: GLfloat;
    t = (call.arg(2)).to_f32().unwrap();

    let mut r: GLfloat;
    r = (call.arg(3)).to_f32().unwrap();

//not found in gl!    unsafe { gl::MultiTexCoord3f(target, s, t, r) };
}

pub fn retrace_glMultiTexCoord3fv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let v: &mut [GLfloat];
    v = _allocator.alloc_array::<GLfloat>(&call.arg(1));
    let _a_GLfloat118_0 = (call.arg(1)).to_array();
    if let Some(_a_GLfloat118_0) = _a_GLfloat118_0 {
        for _jGLfloat118 in 0.._a_GLfloat118_0.values.len() {
    v[_jGLfloat118] = (*_a_GLfloat118_0.values[_jGLfloat118]).to_f32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::MultiTexCoord3fv(target, v) };
}

pub fn retrace_glMultiTexCoord3i(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut s: GLint;
    s = (call.arg(1)).to_i32().unwrap();

    let mut t: GLint;
    t = (call.arg(2)).to_i32().unwrap();

    let mut r: GLint;
    r = (call.arg(3)).to_i32().unwrap();

//not found in gl!    unsafe { gl::MultiTexCoord3i(target, s, t, r) };
}

pub fn retrace_glMultiTexCoord3iv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let v: &mut [GLint];
    v = _allocator.alloc_array::<GLint>(&call.arg(1));
    let _a_GLint153_0 = (call.arg(1)).to_array();
    if let Some(_a_GLint153_0) = _a_GLint153_0 {
        for _jGLint153 in 0.._a_GLint153_0.values.len() {
    v[_jGLint153] = (*_a_GLint153_0.values[_jGLint153]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::MultiTexCoord3iv(target, v) };
}

pub fn retrace_glMultiTexCoord3s(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut s: GLshort;
    s = (call.arg(1)).to_i32().unwrap();

    let mut t: GLshort;
    t = (call.arg(2)).to_i32().unwrap();

    let mut r: GLshort;
    r = (call.arg(3)).to_i32().unwrap();

//not found in gl!    unsafe { gl::MultiTexCoord3s(target, s, t, r) };
}

pub fn retrace_glMultiTexCoord3sv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let v: &mut [GLshort];
    v = _allocator.alloc_array::<GLshort>(&call.arg(1));
    let _a_GLshort16_0 = (call.arg(1)).to_array();
    if let Some(_a_GLshort16_0) = _a_GLshort16_0 {
        for _jGLshort16 in 0.._a_GLshort16_0.values.len() {
    v[_jGLshort16] = (*_a_GLshort16_0.values[_jGLshort16]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::MultiTexCoord3sv(target, v) };
}

pub fn retrace_glMultiTexCoord4d(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut s: GLdouble;
    s = (call.arg(1)).to_f64().unwrap();

    let mut t: GLdouble;
    t = (call.arg(2)).to_f64().unwrap();

    let mut r: GLdouble;
    r = (call.arg(3)).to_f64().unwrap();

    let mut q: GLdouble;
    q = (call.arg(4)).to_f64().unwrap();

//not found in gl!    unsafe { gl::MultiTexCoord4d(target, s, t, r, q) };
}

pub fn retrace_glMultiTexCoord4dv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let v: &mut [GLdouble];
    v = _allocator.alloc_array::<GLdouble>(&call.arg(1));
    let _a_GLdouble48_0 = (call.arg(1)).to_array();
    if let Some(_a_GLdouble48_0) = _a_GLdouble48_0 {
        for _jGLdouble48 in 0.._a_GLdouble48_0.values.len() {
    v[_jGLdouble48] = (*_a_GLdouble48_0.values[_jGLdouble48]).to_f64().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::MultiTexCoord4dv(target, v) };
}

pub fn retrace_glMultiTexCoord4f(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut s: GLfloat;
    s = (call.arg(1)).to_f32().unwrap();

    let mut t: GLfloat;
    t = (call.arg(2)).to_f32().unwrap();

    let mut r: GLfloat;
    r = (call.arg(3)).to_f32().unwrap();

    let mut q: GLfloat;
    q = (call.arg(4)).to_f32().unwrap();

//not found in gl!    unsafe { gl::MultiTexCoord4f(target, s, t, r, q) };
}

pub fn retrace_glMultiTexCoord4fv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let v: &mut [GLfloat];
    v = _allocator.alloc_array::<GLfloat>(&call.arg(1));
    let _a_GLfloat119_0 = (call.arg(1)).to_array();
    if let Some(_a_GLfloat119_0) = _a_GLfloat119_0 {
        for _jGLfloat119 in 0.._a_GLfloat119_0.values.len() {
    v[_jGLfloat119] = (*_a_GLfloat119_0.values[_jGLfloat119]).to_f32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::MultiTexCoord4fv(target, v) };
}

pub fn retrace_glMultiTexCoord4i(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut s: GLint;
    s = (call.arg(1)).to_i32().unwrap();

    let mut t: GLint;
    t = (call.arg(2)).to_i32().unwrap();

    let mut r: GLint;
    r = (call.arg(3)).to_i32().unwrap();

    let mut q: GLint;
    q = (call.arg(4)).to_i32().unwrap();

//not found in gl!    unsafe { gl::MultiTexCoord4i(target, s, t, r, q) };
}

pub fn retrace_glMultiTexCoord4iv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let v: &mut [GLint];
    v = _allocator.alloc_array::<GLint>(&call.arg(1));
    let _a_GLint154_0 = (call.arg(1)).to_array();
    if let Some(_a_GLint154_0) = _a_GLint154_0 {
        for _jGLint154 in 0.._a_GLint154_0.values.len() {
    v[_jGLint154] = (*_a_GLint154_0.values[_jGLint154]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::MultiTexCoord4iv(target, v) };
}

pub fn retrace_glMultiTexCoord4s(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut s: GLshort;
    s = (call.arg(1)).to_i32().unwrap();

    let mut t: GLshort;
    t = (call.arg(2)).to_i32().unwrap();

    let mut r: GLshort;
    r = (call.arg(3)).to_i32().unwrap();

    let mut q: GLshort;
    q = (call.arg(4)).to_i32().unwrap();

//not found in gl!    unsafe { gl::MultiTexCoord4s(target, s, t, r, q) };
}

pub fn retrace_glMultiTexCoord4sv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let v: &mut [GLshort];
    v = _allocator.alloc_array::<GLshort>(&call.arg(1));
    let _a_GLshort17_0 = (call.arg(1)).to_array();
    if let Some(_a_GLshort17_0) = _a_GLshort17_0 {
        for _jGLshort17 in 0.._a_GLshort17_0.values.len() {
    v[_jGLshort17] = (*_a_GLshort17_0.values[_jGLshort17]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::MultiTexCoord4sv(target, v) };
}

pub fn retrace_glLoadTransposeMatrixf(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let m: &mut [GLfloat];
    m = _allocator.alloc_array::<GLfloat>(&call.arg(0));
    let _a_GLfloat120_0 = (call.arg(0)).to_array();
    if let Some(_a_GLfloat120_0) = _a_GLfloat120_0 {
        for _jGLfloat120 in 0.._a_GLfloat120_0.values.len() {
    m[_jGLfloat120] = (*_a_GLfloat120_0.values[_jGLfloat120]).to_f32().unwrap();
        }
    }
    let m = m.as_mut_ptr();

//not found in gl!    unsafe { gl::LoadTransposeMatrixf(m) };
}

pub fn retrace_glLoadTransposeMatrixd(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let m: &mut [GLdouble];
    m = _allocator.alloc_array::<GLdouble>(&call.arg(0));
    let _a_GLdouble49_0 = (call.arg(0)).to_array();
    if let Some(_a_GLdouble49_0) = _a_GLdouble49_0 {
        for _jGLdouble49 in 0.._a_GLdouble49_0.values.len() {
    m[_jGLdouble49] = (*_a_GLdouble49_0.values[_jGLdouble49]).to_f64().unwrap();
        }
    }
    let m = m.as_mut_ptr();

//not found in gl!    unsafe { gl::LoadTransposeMatrixd(m) };
}

pub fn retrace_glMultTransposeMatrixf(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let m: &mut [GLfloat];
    m = _allocator.alloc_array::<GLfloat>(&call.arg(0));
    let _a_GLfloat121_0 = (call.arg(0)).to_array();
    if let Some(_a_GLfloat121_0) = _a_GLfloat121_0 {
        for _jGLfloat121 in 0.._a_GLfloat121_0.values.len() {
    m[_jGLfloat121] = (*_a_GLfloat121_0.values[_jGLfloat121]).to_f32().unwrap();
        }
    }
    let m = m.as_mut_ptr();

//not found in gl!    unsafe { gl::MultTransposeMatrixf(m) };
}

pub fn retrace_glMultTransposeMatrixd(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let m: &mut [GLdouble];
    m = _allocator.alloc_array::<GLdouble>(&call.arg(0));
    let _a_GLdouble50_0 = (call.arg(0)).to_array();
    if let Some(_a_GLdouble50_0) = _a_GLdouble50_0 {
        for _jGLdouble50 in 0.._a_GLdouble50_0.values.len() {
    m[_jGLdouble50] = (*_a_GLdouble50_0.values[_jGLdouble50]).to_f64().unwrap();
        }
    }
    let m = m.as_mut_ptr();

//not found in gl!    unsafe { gl::MultTransposeMatrixd(m) };
}

pub fn retrace_glBlendFuncSeparate(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut sfactorRGB: GLenum;
    sfactorRGB = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut dfactorRGB: GLenum;
    dfactorRGB = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut sfactorAlpha: GLenum;
    sfactorAlpha = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut dfactorAlpha: GLenum;
    dfactorAlpha = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    unsafe { gl::BlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha) };
}

pub fn retrace_glMultiDrawArrays(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let first: &mut [GLint];
    first = _allocator.alloc_array::<GLint>(&call.arg(1));
    let _a_GLint155_0 = (call.arg(1)).to_array();
    if let Some(_a_GLint155_0) = _a_GLint155_0 {
        for _jGLint155 in 0.._a_GLint155_0.values.len() {
    first[_jGLint155] = (*_a_GLint155_0.values[_jGLint155]).to_i32().unwrap();
        }
    }
    let first = first.as_mut_ptr();

    let count: &mut [GLsizei];
    count = _allocator.alloc_array::<GLsizei>(&call.arg(2));
    let _a_GLsizei5_0 = (call.arg(2)).to_array();
    if let Some(_a_GLsizei5_0) = _a_GLsizei5_0 {
        for _jGLsizei5 in 0.._a_GLsizei5_0.values.len() {
    count[_jGLsizei5] = (*_a_GLsizei5_0.values[_jGLsizei5]).to_i32().unwrap();
        }
    }
    let count = count.as_mut_ptr();

    let mut drawcount: GLsizei;
    drawcount = (call.arg(3)).to_i32().unwrap();

    unsafe { gl::MultiDrawArrays(mode, first, count, drawcount) };
}

pub fn retrace_glMultiDrawElements(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let count: &mut [GLsizei];
    count = _allocator.alloc_array::<GLsizei>(&call.arg(1));
    let _a_GLsizei6_0 = (call.arg(1)).to_array();
    if let Some(_a_GLsizei6_0) = _a_GLsizei6_0 {
        for _jGLsizei6 in 0.._a_GLsizei6_0.values.len() {
    count[_jGLsizei6] = (*_a_GLsizei6_0.values[_jGLsizei6]).to_i32().unwrap();
        }
    }
    let count = count.as_mut_ptr();

    let mut _type: GLenum;
    _type = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let indices: &mut [GLc_void];
    indices = _allocator.alloc_array::< GLvoid >(&call.arg(3));
    let _a_constGLvoid222_0 = (call.arg(3)).to_array();
    if let Some(_a_constGLvoid222_0) = _a_constGLvoid222_0 {
        for _jconstGLvoid222 in 0.._a_constGLvoid222_0.values.len() {
            indices[_jconstGLvoid222] = (*_a_constGLvoid222_0.values[_jconstGLvoid222]).to_pointer().unwrap() as *mut c_void;
        }
    }
    let indices = indices.as_mut_ptr();

    let mut drawcount: GLsizei;
    drawcount = (call.arg(4)).to_i32().unwrap();

    unsafe { gl::MultiDrawElements(mode, count, _type, indices, drawcount) };
}

pub fn retrace_glPointParameterf(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut pname: GLenum;
    pname = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut param: GLfloat;
    param = (call.arg(1)).to_f32().unwrap();

    unsafe { gl::PointParameterf(pname, param) };
}

pub fn retrace_glPointParameterfv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut pname: GLenum;
    pname = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLfloat];
    params = _allocator.alloc_array::<GLfloat>(&call.arg(1));
    let _a_GLfloat122_0 = (call.arg(1)).to_array();
    if let Some(_a_GLfloat122_0) = _a_GLfloat122_0 {
        for _jGLfloat122 in 0.._a_GLfloat122_0.values.len() {
    params[_jGLfloat122] = (*_a_GLfloat122_0.values[_jGLfloat122]).to_f32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

    unsafe { gl::PointParameterfv(pname, params) };
}

pub fn retrace_glPointParameteri(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut pname: GLenum;
    pname = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut param: GLint;
    param = (call.arg(1)).to_i32().unwrap();

    unsafe { gl::PointParameteri(pname, param) };
}

pub fn retrace_glPointParameteriv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut pname: GLenum;
    pname = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLint];
    params = _allocator.alloc_array::<GLint>(&call.arg(1));
    let _a_GLint156_0 = (call.arg(1)).to_array();
    if let Some(_a_GLint156_0) = _a_GLint156_0 {
        for _jGLint156 in 0.._a_GLint156_0.values.len() {
    params[_jGLint156] = (*_a_GLint156_0.values[_jGLint156]).to_i32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

    unsafe { gl::PointParameteriv(pname, params) };
}

pub fn retrace_glFogCoordf(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut coord: GLfloat;
    coord = (call.arg(0)).to_f32().unwrap();

//not found in gl!    unsafe { gl::FogCoordf(coord) };
}

pub fn retrace_glFogCoordfv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let coord: &mut [GLfloat];
    coord = _allocator.alloc_array::<GLfloat>(&call.arg(0));
    let _a_PGLfloat15_0 = (call.arg(0)).to_array().unwrap();
    coord[0] = (_a_PGLfloat15_0.values[0]).to_f32().unwrap();

//not found in gl!    unsafe { gl::FogCoordfv(coord) };
}

pub fn retrace_glFogCoordd(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut coord: GLdouble;
    coord = (call.arg(0)).to_f64().unwrap();

//not found in gl!    unsafe { gl::FogCoordd(coord) };
}

pub fn retrace_glFogCoorddv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let coord: &mut [GLdouble];
    coord = _allocator.alloc_array::<GLdouble>(&call.arg(0));
    let _a_PGLdouble5_0 = (call.arg(0)).to_array().unwrap();
    coord[0] = (_a_PGLdouble5_0.values[0]).to_f64().unwrap();

//not found in gl!    unsafe { gl::FogCoorddv(coord) };
}

pub fn retrace_glFogCoordPointer(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut _type: GLenum;
    _type = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut stride: GLsizei;
    stride = (call.arg(1)).to_i32().unwrap();

    let pointer: &mut [GLc_void];
    pointer = region::to_pointer(call.arg(2), true);

//not found in gl!    unsafe { gl::FogCoordPointer(_type, stride, pointer) };
}

pub fn retrace_glSecondaryColor3b(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut red: GLbyte;
    red = (call.arg(0)).to_i32().unwrap();

    let mut green: GLbyte;
    green = (call.arg(1)).to_i32().unwrap();

    let mut blue: GLbyte;
    blue = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::SecondaryColor3b(red, green, blue) };
}

pub fn retrace_glSecondaryColor3bv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLbyte];
    v = _allocator.alloc_array::<GLbyte>(&call.arg(0));
    let _a_GLbyte4_0 = (call.arg(0)).to_array();
    if let Some(_a_GLbyte4_0) = _a_GLbyte4_0 {
        for _jGLbyte4 in 0.._a_GLbyte4_0.values.len() {
    v[_jGLbyte4] = (*_a_GLbyte4_0.values[_jGLbyte4]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::SecondaryColor3bv(v) };
}

pub fn retrace_glSecondaryColor3d(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut red: GLdouble;
    red = (call.arg(0)).to_f64().unwrap();

    let mut green: GLdouble;
    green = (call.arg(1)).to_f64().unwrap();

    let mut blue: GLdouble;
    blue = (call.arg(2)).to_f64().unwrap();

//not found in gl!    unsafe { gl::SecondaryColor3d(red, green, blue) };
}

pub fn retrace_glSecondaryColor3dv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLdouble];
    v = _allocator.alloc_array::<GLdouble>(&call.arg(0));
    let _a_GLdouble51_0 = (call.arg(0)).to_array();
    if let Some(_a_GLdouble51_0) = _a_GLdouble51_0 {
        for _jGLdouble51 in 0.._a_GLdouble51_0.values.len() {
    v[_jGLdouble51] = (*_a_GLdouble51_0.values[_jGLdouble51]).to_f64().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::SecondaryColor3dv(v) };
}

pub fn retrace_glSecondaryColor3f(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut red: GLfloat;
    red = (call.arg(0)).to_f32().unwrap();

    let mut green: GLfloat;
    green = (call.arg(1)).to_f32().unwrap();

    let mut blue: GLfloat;
    blue = (call.arg(2)).to_f32().unwrap();

//not found in gl!    unsafe { gl::SecondaryColor3f(red, green, blue) };
}

pub fn retrace_glSecondaryColor3fv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLfloat];
    v = _allocator.alloc_array::<GLfloat>(&call.arg(0));
    let _a_GLfloat123_0 = (call.arg(0)).to_array();
    if let Some(_a_GLfloat123_0) = _a_GLfloat123_0 {
        for _jGLfloat123 in 0.._a_GLfloat123_0.values.len() {
    v[_jGLfloat123] = (*_a_GLfloat123_0.values[_jGLfloat123]).to_f32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::SecondaryColor3fv(v) };
}

pub fn retrace_glSecondaryColor3i(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut red: GLint;
    red = (call.arg(0)).to_i32().unwrap();

    let mut green: GLint;
    green = (call.arg(1)).to_i32().unwrap();

    let mut blue: GLint;
    blue = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::SecondaryColor3i(red, green, blue) };
}

pub fn retrace_glSecondaryColor3iv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLint];
    v = _allocator.alloc_array::<GLint>(&call.arg(0));
    let _a_GLint157_0 = (call.arg(0)).to_array();
    if let Some(_a_GLint157_0) = _a_GLint157_0 {
        for _jGLint157 in 0.._a_GLint157_0.values.len() {
    v[_jGLint157] = (*_a_GLint157_0.values[_jGLint157]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::SecondaryColor3iv(v) };
}

pub fn retrace_glSecondaryColor3s(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut red: GLshort;
    red = (call.arg(0)).to_i32().unwrap();

    let mut green: GLshort;
    green = (call.arg(1)).to_i32().unwrap();

    let mut blue: GLshort;
    blue = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::SecondaryColor3s(red, green, blue) };
}

pub fn retrace_glSecondaryColor3sv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLshort];
    v = _allocator.alloc_array::<GLshort>(&call.arg(0));
    let _a_GLshort18_0 = (call.arg(0)).to_array();
    if let Some(_a_GLshort18_0) = _a_GLshort18_0 {
        for _jGLshort18 in 0.._a_GLshort18_0.values.len() {
    v[_jGLshort18] = (*_a_GLshort18_0.values[_jGLshort18]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::SecondaryColor3sv(v) };
}

pub fn retrace_glSecondaryColor3ub(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut red: GLubyte;
    red = (call.arg(0)).to_u32().unwrap();

    let mut green: GLubyte;
    green = (call.arg(1)).to_u32().unwrap();

    let mut blue: GLubyte;
    blue = (call.arg(2)).to_u32().unwrap();

//not found in gl!    unsafe { gl::SecondaryColor3ub(red, green, blue) };
}

pub fn retrace_glSecondaryColor3ubv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLubyte];
    v = _allocator.alloc_array::<GLubyte>(&call.arg(0));
    let _a_GLubyte9_0 = (call.arg(0)).to_array();
    if let Some(_a_GLubyte9_0) = _a_GLubyte9_0 {
        for _jGLubyte9 in 0.._a_GLubyte9_0.values.len() {
    v[_jGLubyte9] = (*_a_GLubyte9_0.values[_jGLubyte9]).to_u32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::SecondaryColor3ubv(v) };
}

pub fn retrace_glSecondaryColor3ui(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut red: GLuint;
    red = (call.arg(0)).to_u32().unwrap();

    let mut green: GLuint;
    green = (call.arg(1)).to_u32().unwrap();

    let mut blue: GLuint;
    blue = (call.arg(2)).to_u32().unwrap();

//not found in gl!    unsafe { gl::SecondaryColor3ui(red, green, blue) };
}

pub fn retrace_glSecondaryColor3uiv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLuint];
    v = _allocator.alloc_array::<GLuint>(&call.arg(0));
    let _a_GLuint88_0 = (call.arg(0)).to_array();
    if let Some(_a_GLuint88_0) = _a_GLuint88_0 {
        for _jGLuint88 in 0.._a_GLuint88_0.values.len() {
    v[_jGLuint88] = (*_a_GLuint88_0.values[_jGLuint88]).to_u32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::SecondaryColor3uiv(v) };
}

pub fn retrace_glSecondaryColor3us(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut red: GLushort;
    red = (call.arg(0)).to_u32().unwrap();

    let mut green: GLushort;
    green = (call.arg(1)).to_u32().unwrap();

    let mut blue: GLushort;
    blue = (call.arg(2)).to_u32().unwrap();

//not found in gl!    unsafe { gl::SecondaryColor3us(red, green, blue) };
}

pub fn retrace_glSecondaryColor3usv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLushort];
    v = _allocator.alloc_array::<GLushort>(&call.arg(0));
    let _a_GLushort6_0 = (call.arg(0)).to_array();
    if let Some(_a_GLushort6_0) = _a_GLushort6_0 {
        for _jGLushort6 in 0.._a_GLushort6_0.values.len() {
    v[_jGLushort6] = (*_a_GLushort6_0.values[_jGLushort6]).to_u32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::SecondaryColor3usv(v) };
}

pub fn retrace_glSecondaryColorPointer(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut size: GLint;
    size = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut stride: GLsizei;
    stride = (call.arg(2)).to_i32().unwrap();

    let pointer: &mut [GLc_void];
    pointer = region::to_pointer(call.arg(3), true);

//not found in gl!    unsafe { gl::SecondaryColorPointer(size, _type, stride, pointer) };
}

pub fn retrace_glWindowPos2d(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut x: GLdouble;
    x = (call.arg(0)).to_f64().unwrap();

    let mut y: GLdouble;
    y = (call.arg(1)).to_f64().unwrap();

//not found in gl!    unsafe { gl::WindowPos2d(x, y) };
}

pub fn retrace_glWindowPos2dv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLdouble];
    v = _allocator.alloc_array::<GLdouble>(&call.arg(0));
    let _a_GLdouble52_0 = (call.arg(0)).to_array();
    if let Some(_a_GLdouble52_0) = _a_GLdouble52_0 {
        for _jGLdouble52 in 0.._a_GLdouble52_0.values.len() {
    v[_jGLdouble52] = (*_a_GLdouble52_0.values[_jGLdouble52]).to_f64().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::WindowPos2dv(v) };
}

pub fn retrace_glWindowPos2f(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut x: GLfloat;
    x = (call.arg(0)).to_f32().unwrap();

    let mut y: GLfloat;
    y = (call.arg(1)).to_f32().unwrap();

//not found in gl!    unsafe { gl::WindowPos2f(x, y) };
}

pub fn retrace_glWindowPos2fv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLfloat];
    v = _allocator.alloc_array::<GLfloat>(&call.arg(0));
    let _a_GLfloat124_0 = (call.arg(0)).to_array();
    if let Some(_a_GLfloat124_0) = _a_GLfloat124_0 {
        for _jGLfloat124 in 0.._a_GLfloat124_0.values.len() {
    v[_jGLfloat124] = (*_a_GLfloat124_0.values[_jGLfloat124]).to_f32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::WindowPos2fv(v) };
}

pub fn retrace_glWindowPos2i(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut x: GLint;
    x = (call.arg(0)).to_i32().unwrap();

    let mut y: GLint;
    y = (call.arg(1)).to_i32().unwrap();

//not found in gl!    unsafe { gl::WindowPos2i(x, y) };
}

pub fn retrace_glWindowPos2iv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLint];
    v = _allocator.alloc_array::<GLint>(&call.arg(0));
    let _a_GLint158_0 = (call.arg(0)).to_array();
    if let Some(_a_GLint158_0) = _a_GLint158_0 {
        for _jGLint158 in 0.._a_GLint158_0.values.len() {
    v[_jGLint158] = (*_a_GLint158_0.values[_jGLint158]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::WindowPos2iv(v) };
}

pub fn retrace_glWindowPos2s(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut x: GLshort;
    x = (call.arg(0)).to_i32().unwrap();

    let mut y: GLshort;
    y = (call.arg(1)).to_i32().unwrap();

//not found in gl!    unsafe { gl::WindowPos2s(x, y) };
}

pub fn retrace_glWindowPos2sv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLshort];
    v = _allocator.alloc_array::<GLshort>(&call.arg(0));
    let _a_GLshort19_0 = (call.arg(0)).to_array();
    if let Some(_a_GLshort19_0) = _a_GLshort19_0 {
        for _jGLshort19 in 0.._a_GLshort19_0.values.len() {
    v[_jGLshort19] = (*_a_GLshort19_0.values[_jGLshort19]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::WindowPos2sv(v) };
}

pub fn retrace_glWindowPos3d(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut x: GLdouble;
    x = (call.arg(0)).to_f64().unwrap();

    let mut y: GLdouble;
    y = (call.arg(1)).to_f64().unwrap();

    let mut z: GLdouble;
    z = (call.arg(2)).to_f64().unwrap();

//not found in gl!    unsafe { gl::WindowPos3d(x, y, z) };
}

pub fn retrace_glWindowPos3dv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLdouble];
    v = _allocator.alloc_array::<GLdouble>(&call.arg(0));
    let _a_GLdouble53_0 = (call.arg(0)).to_array();
    if let Some(_a_GLdouble53_0) = _a_GLdouble53_0 {
        for _jGLdouble53 in 0.._a_GLdouble53_0.values.len() {
    v[_jGLdouble53] = (*_a_GLdouble53_0.values[_jGLdouble53]).to_f64().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::WindowPos3dv(v) };
}

pub fn retrace_glWindowPos3f(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut x: GLfloat;
    x = (call.arg(0)).to_f32().unwrap();

    let mut y: GLfloat;
    y = (call.arg(1)).to_f32().unwrap();

    let mut z: GLfloat;
    z = (call.arg(2)).to_f32().unwrap();

//not found in gl!    unsafe { gl::WindowPos3f(x, y, z) };
}

pub fn retrace_glWindowPos3fv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLfloat];
    v = _allocator.alloc_array::<GLfloat>(&call.arg(0));
    let _a_GLfloat125_0 = (call.arg(0)).to_array();
    if let Some(_a_GLfloat125_0) = _a_GLfloat125_0 {
        for _jGLfloat125 in 0.._a_GLfloat125_0.values.len() {
    v[_jGLfloat125] = (*_a_GLfloat125_0.values[_jGLfloat125]).to_f32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::WindowPos3fv(v) };
}

pub fn retrace_glWindowPos3i(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut x: GLint;
    x = (call.arg(0)).to_i32().unwrap();

    let mut y: GLint;
    y = (call.arg(1)).to_i32().unwrap();

    let mut z: GLint;
    z = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::WindowPos3i(x, y, z) };
}

pub fn retrace_glWindowPos3iv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLint];
    v = _allocator.alloc_array::<GLint>(&call.arg(0));
    let _a_GLint159_0 = (call.arg(0)).to_array();
    if let Some(_a_GLint159_0) = _a_GLint159_0 {
        for _jGLint159 in 0.._a_GLint159_0.values.len() {
    v[_jGLint159] = (*_a_GLint159_0.values[_jGLint159]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::WindowPos3iv(v) };
}

pub fn retrace_glWindowPos3s(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut x: GLshort;
    x = (call.arg(0)).to_i32().unwrap();

    let mut y: GLshort;
    y = (call.arg(1)).to_i32().unwrap();

    let mut z: GLshort;
    z = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::WindowPos3s(x, y, z) };
}

pub fn retrace_glWindowPos3sv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLshort];
    v = _allocator.alloc_array::<GLshort>(&call.arg(0));
    let _a_GLshort20_0 = (call.arg(0)).to_array();
    if let Some(_a_GLshort20_0) = _a_GLshort20_0 {
        for _jGLshort20 in 0.._a_GLshort20_0.values.len() {
    v[_jGLshort20] = (*_a_GLshort20_0.values[_jGLshort20]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::WindowPos3sv(v) };
}

pub fn retrace_glGenQueries(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut n: GLsizei;
    n = (call.arg(0)).to_i32().unwrap();

    let ids: &mut [GLuint];
    ids = _allocator.alloc_array::<GLuint>(&call.arg(1));

//not found in gl!    unsafe { gl::GenQueries(n, ids) };
    let _aGLuint90 = (call.arg(1)).to_array();
    if (_aGLuint90) {
        for _jGLuint90 in 0.._aGLuint90.values.len() {
    let _origResult: GLuint;
    _origResult = (_aGLuint90.values[_jGLuint90]).to_u32().unwrap();
    self._query_map[_origResult] = ids[_jGLuint90]; 
        }
    }
}

pub fn retrace_glDeleteQueries(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut n: GLsizei;
    n = (call.arg(0)).to_i32().unwrap();

    let ids: &mut [GLuint];
    ids = _allocator.alloc_array::<GLuint>(&call.arg(1));
    let _a_GLuint91_0 = (call.arg(1)).to_array();
    if let Some(_a_GLuint91_0) = _a_GLuint91_0 {
        for _jGLuint91 in 0.._a_GLuint91_0.values.len() {
    ids[_jGLuint91] = (*_a_GLuint91_0.values[_jGLuint91]).to_u32().unwrap();
    ids[_jGLuint91] = self._query_map[ids[_jGLuint91]];
        }
    }
    let ids = ids.as_mut_ptr();

    unsafe { gl::DeleteQueries(n, ids) };
}

pub fn retrace_glBeginQuery(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut id: GLuint;
    id = (call.arg(1)).to_u32().unwrap();
    id = self._query_map[id];

    unsafe { gl::BeginQuery(target, id) };
}

pub fn retrace_glEndQuery(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    unsafe { gl::EndQuery(target) };
}

pub fn retrace_glGetQueryObjectiv(&mut self, call: &mut Call) {
    let _query_buffer = 0;
    if self.context.features("query_buffer_object") {
//not found in gl!        unsafe { gl::GetIntegerv(gl::QUERY_BUFFER_BINDING, &_query_buffer) };
    }
    if (_query_buffer == 0 && retrace::queryHandling == retrace::QUERY_SKIP) {
        return;
    }
'wait_for_query_result: loop {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut id: GLuint;
    id = (call.arg(0)).to_u32().unwrap();
    id = self._query_map[id];

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLint];
    let retval: GLint = 0;
    if _query_buffer != 0 {
        params = (call.arg(2)).to_pointer();
    } else {
        params = retval };

//not found in gl!    unsafe { gl::GetQueryObjectiv(id, pname, params) };
    let _aGLint161 = (call.arg(2)).to_array();
    if (_aGLint161) {
        for _jGLint161 in 0.._aGLint161.values.len() {
        }
    }
    if _query_buffer == 0 && queryHandling != QUERY_SKIP {
        let query_result = call.arg(2).to_array().unwrap();
        let expect = query_result.values[0].to_u32().unwrap();
        if call.arg(1).to_u32().unwrap() == gl::QUERY_RESULT_AVAILABLE {
            if expect == 1 && retval == 0 {
                continue 'wait_for_query_result;
        }} else if queryHandling == QUERY_RUN_AND_CHECK_RESULT {
            let diff = (expect as i64 - retval as i64).abs(); 
            if diff > 0 as i64 {
                println!("Warning: query returned {}  but trace contained {} (tol = {})", retval, expect, retrace::queryTolerance);
            }
        }
    break 'wait_for_query_result;
    }
}
}

pub fn retrace_glGetQueryObjectuiv(&mut self, call: &mut Call) {
    let _query_buffer = 0;
    if self.context.features("query_buffer_object") {
//not found in gl!        unsafe { gl::GetIntegerv(gl::QUERY_BUFFER_BINDING, &_query_buffer) };
    }
    if (_query_buffer == 0 && retrace::queryHandling == retrace::QUERY_SKIP) {
        return;
    }
'wait_for_query_result: loop {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut id: GLuint;
    id = (call.arg(0)).to_u32().unwrap();
    id = self._query_map[id];

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLuint];
    let retval: GLuint = 0;
    if _query_buffer != 0 {
        params = (call.arg(2)).to_pointer();
    } else {
        params = retval };

//not found in gl!    unsafe { gl::GetQueryObjectuiv(id, pname, params) };
    let _aGLuint93 = (call.arg(2)).to_array();
    if (_aGLuint93) {
        for _jGLuint93 in 0.._aGLuint93.values.len() {
        }
    }
    if _query_buffer == 0 && queryHandling != QUERY_SKIP {
        let query_result = call.arg(2).to_array().unwrap();
        let expect = query_result.values[0].to_u32().unwrap();
        if call.arg(1).to_u32().unwrap() == gl::QUERY_RESULT_AVAILABLE {
            if expect == 1 && retval == 0 {
                continue 'wait_for_query_result;
        }} else if queryHandling == QUERY_RUN_AND_CHECK_RESULT {
            let diff = (expect as i64 - retval as i64).abs(); 
            if diff > 0 as i64 {
                println!("Warning: query returned {}  but trace contained {} (tol = {})", retval, expect, retrace::queryTolerance);
            }
        }
    break 'wait_for_query_result;
    }
}
}

pub fn retrace_glBindBuffer(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut buffer: GLuint;
    buffer = (call.arg(1)).to_u32().unwrap();
    buffer = self._buffer_map[buffer];

    unsafe { gl::BindBuffer(target, buffer) };
}

pub fn retrace_glDeleteBuffers(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut n: GLsizei;
    n = (call.arg(0)).to_i32().unwrap();

    let buffers: &mut [GLuint];
    buffers = _allocator.alloc_array::<GLuint>(&call.arg(1));
    let _a_GLuint94_0 = (call.arg(1)).to_array();
    if let Some(_a_GLuint94_0) = _a_GLuint94_0 {
        for _jGLuint94 in 0.._a_GLuint94_0.values.len() {
    buffers[_jGLuint94] = (*_a_GLuint94_0.values[_jGLuint94]).to_u32().unwrap();
    buffers[_jGLuint94] = self._buffer_map[buffers[_jGLuint94]];
        }
    }
    let buffers = buffers.as_mut_ptr();

    if self.context.features("ARB_direct_state_access") {
        for i in 0..n {
            let buffer = buffers[i];
            if buffer != 0 && gl::IsBuffer(buffer) {
                let ptr = ptr::null_mut() as *mut c_void;
//not found in gl!                unsafe { gl::GetNamedBufferPointerv(buffers[i], gl::BUFFER_MAP_POINTER, &ptr) };
                if ptr != ptr::null_mut() as *mut c_void {
                    retrace::delRegionByPointer(ptr);
                }
            }
        }
    }
    unsafe { gl::DeleteBuffers(n, buffers) };
}

pub fn retrace_glGenBuffers(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut n: GLsizei;
    n = (call.arg(0)).to_i32().unwrap();

    let buffers: &mut [GLuint];
    buffers = _allocator.alloc_array::<GLuint>(&call.arg(1));

//not found in gl!    unsafe { gl::GenBuffers(n, buffers) };
    let _aGLuint96 = (call.arg(1)).to_array();
    if (_aGLuint96) {
        for _jGLuint96 in 0.._aGLuint96.values.len() {
    let _origResult: GLuint;
    _origResult = (_aGLuint96.values[_jGLuint96]).to_u32().unwrap();
    self._buffer_map[_origResult] = buffers[_jGLuint96]; 
        }
    }
}

pub fn retrace_glBufferData(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut size: GLsizeiptr;
    size = (call.arg(1)).to_i32().unwrap();

    let data: &mut [GLc_void];
    let data = (call.arg(2)).to_pointer().unwrap() as *mut c_void;

    let mut usage: GLenum;
    usage = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    unsafe { gl::BufferData(target, size, data, usage) };
}

pub fn retrace_glBufferSubData(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut offset: GLintptr;
    offset = (call.arg(1)).to_i32().unwrap();

    let mut size: GLsizeiptr;
    size = (call.arg(2)).to_i32().unwrap();

    let data: &mut [GLc_void];
    let data = (call.arg(3)).to_pointer().unwrap() as *mut c_void;

    unsafe { gl::BufferSubData(target, offset, size, data) };
}

pub fn retrace_glMapBuffer(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut access: GLenum;
    access = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let _result = unsafe { gl::MapBuffer(target, access) };

    let length = 0;
//not found in gl!    unsafe { gl::GetBufferParameteriv(target, gl::BUFFER_SIZE, &length) };
    region::add_region(call, (*call.ret).toUIntPtr(), _result, length);
}

pub fn retrace_glUnmapBuffer(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

        let ptr = ptr::null_mut() as *mut c_void;
            unsafe { gl::GetBufferPointerv(target, gl::BUFFER_MAP_POINTER, &ptr) };
        if (ptr) {
            retrace::delRegionByPointer(ptr);
        } else {
            retrace::warning(call) << "failed to get mapped pointer\n";
        }
    let _result = unsafe { gl::UnmapBuffer(target) };

}

pub fn retrace_glBlendEquationSeparate(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut modeRGB: GLenum;
    modeRGB = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut modeAlpha: GLenum;
    modeAlpha = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    unsafe { gl::BlendEquationSeparate(modeRGB, modeAlpha) };
}

pub fn retrace_glDrawBuffers(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut n: GLsizei;
    n = (call.arg(0)).to_i32().unwrap();

    let bufs: &mut [GLenum];
    bufs = _allocator.alloc_array::<GLenum>(&call.arg(1));
    let _a_GLenum14_0 = (call.arg(1)).to_array();
    if let Some(_a_GLenum14_0) = _a_GLenum14_0 {
        for _jGLenum14 in 0.._a_GLenum14_0.values.len() {
    bufs[_jGLenum14] = (*_a_GLenum14_0.values[_jGLenum14]).to_u32().unwrap().try_into().unwrap();
        }
    }
    let bufs = bufs.as_mut_ptr();

    unsafe { gl::DrawBuffers(n, bufs) };
}

pub fn retrace_glStencilOpSeparate(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut face: GLenum;
    face = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut sfail: GLenum;
    sfail = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut dpfail: GLenum;
    dpfail = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut dppass: GLenum;
    dppass = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    unsafe { gl::StencilOpSeparate(face, sfail, dpfail, dppass) };
}

pub fn retrace_glStencilFuncSeparate(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut face: GLenum;
    face = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut func: GLenum;
    func = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut _ref: GLint;
    _ref = (call.arg(2)).to_i32().unwrap();

    let mut mask: GLuint;
    mask = (call.arg(3)).to_u32().unwrap();

    unsafe { gl::StencilFuncSeparate(face, func, _ref, mask) };
}

pub fn retrace_glStencilMaskSeparate(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut face: GLenum;
    face = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut mask: GLuint;
    mask = (call.arg(1)).to_u32().unwrap();

    unsafe { gl::StencilMaskSeparate(face, mask) };
}

pub fn retrace_glAttachShader(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut shader: GLuint;
    shader = (call.arg(1)).to_u32().unwrap();
if supportsARBShaderObjects {
    shader = self._handleARB_map[shader];
} else {
    shader = self._shader_map[shader];
}

    unsafe { gl::AttachShader(program, shader) };
}

pub fn retrace_glBindAttribLocation(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut index: GLuint;
    index = (call.arg(1)).to_u32().unwrap();

    let name: &mut [GLchar];
    name = (call.arg(2)).to_string().unwrap();

    unsafe { gl::BindAttribLocation(program, index, name) };
}

pub fn retrace_glCompileShader(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut shader: GLuint;
    shader = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    shader = self._handleARB_map[shader];
} else {
    shader = self._shader_map[shader];
}

    unsafe { gl::CompileShader(shader) };
        let compile_status = 0;
//not found in gl!        unsafe { gl::GetShaderiv(shader, gl::COMPILE_STATUS, &compile_status) };
        if compile_status == 0 {
             println!("compilation failed");
        }
        let info_log_length = 0;
//not found in gl!        unsafe { gl::GetShaderiv(shader, gl::INFO_LOG_LENGTH, &info_log_length) };
        if info_log_length > 1 {
             let infoLog = vec![0i8; info_log_length].as_mut_ptr();
//not found in gl!             unsafe { gl::GetShaderInfoLog(shader, info_log_length, std::ptr::null_mut(), infoLog) };
        }
}

pub fn retrace_glCreateProgram(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let _result = unsafe { gl::CreateProgram() };

    let _origResult: GLuint;
    _origResult = (*call.ret).to_u32().unwrap();
if supportsARBShaderObjects {
    self._handleARB_map[_origResult] = _result;
} else {
    _program_map[_origResult] = _result;
}
}

pub fn retrace_glCreateShader(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut _type: GLenum;
    _type = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let _result = unsafe { gl::CreateShader(_type) };

    let _origResult: GLuint;
    _origResult = (*call.ret).to_u32().unwrap();
if supportsARBShaderObjects {
    self._handleARB_map[_origResult] = _result;
} else {
    _shader_map[_origResult] = _result;
}
}

pub fn retrace_glDeleteProgram(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    unsafe { gl::DeleteProgram(program) };
}

pub fn retrace_glDeleteShader(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut shader: GLuint;
    shader = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    shader = self._handleARB_map[shader];
} else {
    shader = self._shader_map[shader];
}

    unsafe { gl::DeleteShader(shader) };
}

pub fn retrace_glDetachShader(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut shader: GLuint;
    shader = (call.arg(1)).to_u32().unwrap();
if supportsARBShaderObjects {
    shader = self._handleARB_map[shader];
} else {
    shader = self._shader_map[shader];
}

    unsafe { gl::DetachShader(program, shader) };
}

pub fn retrace_glDisableVertexAttribArray(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    unsafe { gl::DisableVertexAttribArray(index) };
}

pub fn retrace_glEnableVertexAttribArray(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    unsafe { gl::EnableVertexAttribArray(index) };
}

pub fn retrace_glGetAttribLocation(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let name: &mut [GLchar];
    name = (call.arg(1)).to_string().unwrap();

    let _result = unsafe { gl::GetAttribLocation(program, name) };

    let _origResult = call.ret.to_i32().unwrap();
}

pub fn retrace_glGetUniformLocation(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let name: &mut [GLchar];
    name = (call.arg(1)).to_string().unwrap();

    let _result = unsafe { gl::GetUniformLocation(program, name) };

    let _origResult: GLint;
    _origResult = (*call.ret).to_i32().unwrap();
    self._location_map[program][_origResult] = _result; 
}

pub fn retrace_glLinkProgram(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    unsafe { gl::LinkProgram(program) };
        let link_status = 0;
//not found in gl!        unsafe { gl::GetProgramiv(program, gl::LINK_STATUS, &link_status) };
        if link_status == 0 {
             println!("link failed");
        }
        let info_log_length = 0;
//not found in gl!        unsafe { gl::GetProgramiv(program, gl::INFO_LOG_LENGTH, &info_log_length) };
        if info_log_length > 1 {
             let infoLog = vec![0i8; info_log_length].as_mut_ptr();
//not found in gl!             unsafe { gl::GetProgramInfoLog(program, info_log_length, std::ptr::null_mut(), infoLog) };
        }
}

pub fn retrace_glShaderSource(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut shader: GLuint;
    shader = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    shader = self._handleARB_map[shader];
} else {
    shader = self._shader_map[shader];
}

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let string: &mut [GLchar];
    string = _allocator.alloc_array::< GLchar >(&call.arg(2));
    let _a_constGLchar22_0 = (call.arg(2)).to_array();
    if let Some(_a_constGLchar22_0) = _a_constGLchar22_0 {
        for _jconstGLchar22 in 0.._a_constGLchar22_0.values.len() {
    string[_jconstGLchar22] = (*_a_constGLchar22_0.values[_jconstGLchar22]).to_string().unwrap();
        }
    }
    let string = string.as_mut_ptr();

    let length: &mut [GLint];
    length = _allocator.alloc_array::<GLint>(&call.arg(3));
    let _a_GLint162_0 = (call.arg(3)).to_array();
    if let Some(_a_GLint162_0) = _a_GLint162_0 {
        for _jGLint162 in 0.._a_GLint162_0.values.len() {
    length[_jGLint162] = (*_a_GLint162_0.values[_jGLint162]).to_i32().unwrap();
        }
    }
    let length = length.as_mut_ptr();

    unsafe { gl::ShaderSource(shader, count, string, length) };
}

pub fn retrace_glUseProgram(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    unsafe { gl::UseProgram(program) };
        self.context.currentUserProgram = call.arg(0).to_u32().unwrap();
        self.context.currentProgram = _glGetInteger(GL_CURRENT_PROGRAM);
}

pub fn retrace_glUniform1f(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut v0: GLfloat;
    v0 = (call.arg(1)).to_f32().unwrap();

    unsafe { gl::Uniform1f(location, v0) };
}

pub fn retrace_glUniform2f(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut v0: GLfloat;
    v0 = (call.arg(1)).to_f32().unwrap();

    let mut v1: GLfloat;
    v1 = (call.arg(2)).to_f32().unwrap();

    unsafe { gl::Uniform2f(location, v0, v1) };
}

pub fn retrace_glUniform3f(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut v0: GLfloat;
    v0 = (call.arg(1)).to_f32().unwrap();

    let mut v1: GLfloat;
    v1 = (call.arg(2)).to_f32().unwrap();

    let mut v2: GLfloat;
    v2 = (call.arg(3)).to_f32().unwrap();

    unsafe { gl::Uniform3f(location, v0, v1, v2) };
}

pub fn retrace_glUniform4f(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut v0: GLfloat;
    v0 = (call.arg(1)).to_f32().unwrap();

    let mut v1: GLfloat;
    v1 = (call.arg(2)).to_f32().unwrap();

    let mut v2: GLfloat;
    v2 = (call.arg(3)).to_f32().unwrap();

    let mut v3: GLfloat;
    v3 = (call.arg(4)).to_f32().unwrap();

    unsafe { gl::Uniform4f(location, v0, v1, v2, v3) };
}

pub fn retrace_glUniform1i(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut v0: GLint;
    v0 = (call.arg(1)).to_i32().unwrap();

    unsafe { gl::Uniform1i(location, v0) };
}

pub fn retrace_glUniform2i(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut v0: GLint;
    v0 = (call.arg(1)).to_i32().unwrap();

    let mut v1: GLint;
    v1 = (call.arg(2)).to_i32().unwrap();

    unsafe { gl::Uniform2i(location, v0, v1) };
}

pub fn retrace_glUniform3i(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut v0: GLint;
    v0 = (call.arg(1)).to_i32().unwrap();

    let mut v1: GLint;
    v1 = (call.arg(2)).to_i32().unwrap();

    let mut v2: GLint;
    v2 = (call.arg(3)).to_i32().unwrap();

    unsafe { gl::Uniform3i(location, v0, v1, v2) };
}

pub fn retrace_glUniform4i(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut v0: GLint;
    v0 = (call.arg(1)).to_i32().unwrap();

    let mut v1: GLint;
    v1 = (call.arg(2)).to_i32().unwrap();

    let mut v2: GLint;
    v2 = (call.arg(3)).to_i32().unwrap();

    let mut v3: GLint;
    v3 = (call.arg(4)).to_i32().unwrap();

    unsafe { gl::Uniform4i(location, v0, v1, v2, v3) };
}

pub fn retrace_glUniform1fv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let value: &mut [GLfloat];
    value = _allocator.alloc_array::<GLfloat>(&call.arg(2));
    let _a_GLfloat126_0 = (call.arg(2)).to_array();
    if let Some(_a_GLfloat126_0) = _a_GLfloat126_0 {
        for _jGLfloat126 in 0.._a_GLfloat126_0.values.len() {
    value[_jGLfloat126] = (*_a_GLfloat126_0.values[_jGLfloat126]).to_f32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

    unsafe { gl::Uniform1fv(location, count, value) };
}

pub fn retrace_glUniform2fv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let value: &mut [GLfloat];
    value = _allocator.alloc_array::<GLfloat>(&call.arg(2));
    let _a_GLfloat127_0 = (call.arg(2)).to_array();
    if let Some(_a_GLfloat127_0) = _a_GLfloat127_0 {
        for _jGLfloat127 in 0.._a_GLfloat127_0.values.len() {
    value[_jGLfloat127] = (*_a_GLfloat127_0.values[_jGLfloat127]).to_f32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

    unsafe { gl::Uniform2fv(location, count, value) };
}

pub fn retrace_glUniform3fv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let value: &mut [GLfloat];
    value = _allocator.alloc_array::<GLfloat>(&call.arg(2));
    let _a_GLfloat128_0 = (call.arg(2)).to_array();
    if let Some(_a_GLfloat128_0) = _a_GLfloat128_0 {
        for _jGLfloat128 in 0.._a_GLfloat128_0.values.len() {
    value[_jGLfloat128] = (*_a_GLfloat128_0.values[_jGLfloat128]).to_f32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

    unsafe { gl::Uniform3fv(location, count, value) };
}

pub fn retrace_glUniform4fv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let value: &mut [GLfloat];
    value = _allocator.alloc_array::<GLfloat>(&call.arg(2));
    let _a_GLfloat129_0 = (call.arg(2)).to_array();
    if let Some(_a_GLfloat129_0) = _a_GLfloat129_0 {
        for _jGLfloat129 in 0.._a_GLfloat129_0.values.len() {
    value[_jGLfloat129] = (*_a_GLfloat129_0.values[_jGLfloat129]).to_f32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

    unsafe { gl::Uniform4fv(location, count, value) };
}

pub fn retrace_glUniform1iv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let value: &mut [GLint];
    value = _allocator.alloc_array::<GLint>(&call.arg(2));
    let _a_GLint163_0 = (call.arg(2)).to_array();
    if let Some(_a_GLint163_0) = _a_GLint163_0 {
        for _jGLint163 in 0.._a_GLint163_0.values.len() {
    value[_jGLint163] = (*_a_GLint163_0.values[_jGLint163]).to_i32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

    unsafe { gl::Uniform1iv(location, count, value) };
}

pub fn retrace_glUniform2iv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let value: &mut [GLint];
    value = _allocator.alloc_array::<GLint>(&call.arg(2));
    let _a_GLint164_0 = (call.arg(2)).to_array();
    if let Some(_a_GLint164_0) = _a_GLint164_0 {
        for _jGLint164 in 0.._a_GLint164_0.values.len() {
    value[_jGLint164] = (*_a_GLint164_0.values[_jGLint164]).to_i32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

    unsafe { gl::Uniform2iv(location, count, value) };
}

pub fn retrace_glUniform3iv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let value: &mut [GLint];
    value = _allocator.alloc_array::<GLint>(&call.arg(2));
    let _a_GLint165_0 = (call.arg(2)).to_array();
    if let Some(_a_GLint165_0) = _a_GLint165_0 {
        for _jGLint165 in 0.._a_GLint165_0.values.len() {
    value[_jGLint165] = (*_a_GLint165_0.values[_jGLint165]).to_i32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

    unsafe { gl::Uniform3iv(location, count, value) };
}

pub fn retrace_glUniform4iv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let value: &mut [GLint];
    value = _allocator.alloc_array::<GLint>(&call.arg(2));
    let _a_GLint166_0 = (call.arg(2)).to_array();
    if let Some(_a_GLint166_0) = _a_GLint166_0 {
        for _jGLint166 in 0.._a_GLint166_0.values.len() {
    value[_jGLint166] = (*_a_GLint166_0.values[_jGLint166]).to_i32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

    unsafe { gl::Uniform4iv(location, count, value) };
}

pub fn retrace_glUniformMatrix2fv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let mut transpose: GLboolean;
    transpose = (call.arg(2)).to_u32().unwrap() as u8;

    let value: &mut [GLfloat];
    value = _allocator.alloc_array::<GLfloat>(&call.arg(3));
    let _a_GLfloat130_0 = (call.arg(3)).to_array();
    if let Some(_a_GLfloat130_0) = _a_GLfloat130_0 {
        for _jGLfloat130 in 0.._a_GLfloat130_0.values.len() {
    value[_jGLfloat130] = (*_a_GLfloat130_0.values[_jGLfloat130]).to_f32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

    unsafe { gl::UniformMatrix2fv(location, count, transpose, value) };
}

pub fn retrace_glUniformMatrix3fv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let mut transpose: GLboolean;
    transpose = (call.arg(2)).to_u32().unwrap() as u8;

    let value: &mut [GLfloat];
    value = _allocator.alloc_array::<GLfloat>(&call.arg(3));
    let _a_GLfloat131_0 = (call.arg(3)).to_array();
    if let Some(_a_GLfloat131_0) = _a_GLfloat131_0 {
        for _jGLfloat131 in 0.._a_GLfloat131_0.values.len() {
    value[_jGLfloat131] = (*_a_GLfloat131_0.values[_jGLfloat131]).to_f32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

    unsafe { gl::UniformMatrix3fv(location, count, transpose, value) };
}

pub fn retrace_glUniformMatrix4fv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let mut transpose: GLboolean;
    transpose = (call.arg(2)).to_u32().unwrap() as u8;

    let value: &mut [GLfloat];
    value = _allocator.alloc_array::<GLfloat>(&call.arg(3));
    let _a_GLfloat132_0 = (call.arg(3)).to_array();
    if let Some(_a_GLfloat132_0) = _a_GLfloat132_0 {
        for _jGLfloat132 in 0.._a_GLfloat132_0.values.len() {
    value[_jGLfloat132] = (*_a_GLfloat132_0.values[_jGLfloat132]).to_f32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

    unsafe { gl::UniformMatrix4fv(location, count, transpose, value) };
}

pub fn retrace_glValidateProgram(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    unsafe { gl::ValidateProgram(program) };
}

pub fn retrace_glVertexAttrib1d(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut x: GLdouble;
    x = (call.arg(1)).to_f64().unwrap();

    unsafe { gl::VertexAttrib1d(index, x) };
}

pub fn retrace_glVertexAttrib1dv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLdouble];
    v = _allocator.alloc_array::<GLdouble>(&call.arg(1));
    let _a_PGLdouble6_0 = (call.arg(1)).to_array().unwrap();
    v[0] = (_a_PGLdouble6_0.values[0]).to_f64().unwrap();

//not found in gl!    unsafe { gl::VertexAttrib1dv(index, v) };
}

pub fn retrace_glVertexAttrib1f(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut x: GLfloat;
    x = (call.arg(1)).to_f32().unwrap();

    unsafe { gl::VertexAttrib1f(index, x) };
}

pub fn retrace_glVertexAttrib1fv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLfloat];
    v = _allocator.alloc_array::<GLfloat>(&call.arg(1));
    let _a_PGLfloat16_0 = (call.arg(1)).to_array().unwrap();
    v[0] = (_a_PGLfloat16_0.values[0]).to_f32().unwrap();

//not found in gl!    unsafe { gl::VertexAttrib1fv(index, v) };
}

pub fn retrace_glVertexAttrib1s(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut x: GLshort;
    x = (call.arg(1)).to_i32().unwrap();

    unsafe { gl::VertexAttrib1s(index, x) };
}

pub fn retrace_glVertexAttrib1sv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLshort];
    v = _allocator.alloc_array::<GLshort>(&call.arg(1));
    let _a_PGLshort3_0 = (call.arg(1)).to_array().unwrap();
    v[0] = (_a_PGLshort3_0.values[0]).to_i32().unwrap();

//not found in gl!    unsafe { gl::VertexAttrib1sv(index, v) };
}

pub fn retrace_glVertexAttrib2d(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut x: GLdouble;
    x = (call.arg(1)).to_f64().unwrap();

    let mut y: GLdouble;
    y = (call.arg(2)).to_f64().unwrap();

    unsafe { gl::VertexAttrib2d(index, x, y) };
}

pub fn retrace_glVertexAttrib2dv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLdouble];
    v = _allocator.alloc_array::<GLdouble>(&call.arg(1));
    let _a_GLdouble54_0 = (call.arg(1)).to_array();
    if let Some(_a_GLdouble54_0) = _a_GLdouble54_0 {
        for _jGLdouble54 in 0.._a_GLdouble54_0.values.len() {
    v[_jGLdouble54] = (*_a_GLdouble54_0.values[_jGLdouble54]).to_f64().unwrap();
        }
    }
    let v = v.as_mut_ptr();

    unsafe { gl::VertexAttrib2dv(index, v) };
}

pub fn retrace_glVertexAttrib2f(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut x: GLfloat;
    x = (call.arg(1)).to_f32().unwrap();

    let mut y: GLfloat;
    y = (call.arg(2)).to_f32().unwrap();

    unsafe { gl::VertexAttrib2f(index, x, y) };
}

pub fn retrace_glVertexAttrib2fv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLfloat];
    v = _allocator.alloc_array::<GLfloat>(&call.arg(1));
    let _a_GLfloat133_0 = (call.arg(1)).to_array();
    if let Some(_a_GLfloat133_0) = _a_GLfloat133_0 {
        for _jGLfloat133 in 0.._a_GLfloat133_0.values.len() {
    v[_jGLfloat133] = (*_a_GLfloat133_0.values[_jGLfloat133]).to_f32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

    unsafe { gl::VertexAttrib2fv(index, v) };
}

pub fn retrace_glVertexAttrib2s(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut x: GLshort;
    x = (call.arg(1)).to_i32().unwrap();

    let mut y: GLshort;
    y = (call.arg(2)).to_i32().unwrap();

    unsafe { gl::VertexAttrib2s(index, x, y) };
}

pub fn retrace_glVertexAttrib2sv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLshort];
    v = _allocator.alloc_array::<GLshort>(&call.arg(1));
    let _a_GLshort21_0 = (call.arg(1)).to_array();
    if let Some(_a_GLshort21_0) = _a_GLshort21_0 {
        for _jGLshort21 in 0.._a_GLshort21_0.values.len() {
    v[_jGLshort21] = (*_a_GLshort21_0.values[_jGLshort21]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

    unsafe { gl::VertexAttrib2sv(index, v) };
}

pub fn retrace_glVertexAttrib3d(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut x: GLdouble;
    x = (call.arg(1)).to_f64().unwrap();

    let mut y: GLdouble;
    y = (call.arg(2)).to_f64().unwrap();

    let mut z: GLdouble;
    z = (call.arg(3)).to_f64().unwrap();

    unsafe { gl::VertexAttrib3d(index, x, y, z) };
}

pub fn retrace_glVertexAttrib3dv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLdouble];
    v = _allocator.alloc_array::<GLdouble>(&call.arg(1));
    let _a_GLdouble55_0 = (call.arg(1)).to_array();
    if let Some(_a_GLdouble55_0) = _a_GLdouble55_0 {
        for _jGLdouble55 in 0.._a_GLdouble55_0.values.len() {
    v[_jGLdouble55] = (*_a_GLdouble55_0.values[_jGLdouble55]).to_f64().unwrap();
        }
    }
    let v = v.as_mut_ptr();

    unsafe { gl::VertexAttrib3dv(index, v) };
}

pub fn retrace_glVertexAttrib3f(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut x: GLfloat;
    x = (call.arg(1)).to_f32().unwrap();

    let mut y: GLfloat;
    y = (call.arg(2)).to_f32().unwrap();

    let mut z: GLfloat;
    z = (call.arg(3)).to_f32().unwrap();

    unsafe { gl::VertexAttrib3f(index, x, y, z) };
}

pub fn retrace_glVertexAttrib3fv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLfloat];
    v = _allocator.alloc_array::<GLfloat>(&call.arg(1));
    let _a_GLfloat134_0 = (call.arg(1)).to_array();
    if let Some(_a_GLfloat134_0) = _a_GLfloat134_0 {
        for _jGLfloat134 in 0.._a_GLfloat134_0.values.len() {
    v[_jGLfloat134] = (*_a_GLfloat134_0.values[_jGLfloat134]).to_f32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

    unsafe { gl::VertexAttrib3fv(index, v) };
}

pub fn retrace_glVertexAttrib3s(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut x: GLshort;
    x = (call.arg(1)).to_i32().unwrap();

    let mut y: GLshort;
    y = (call.arg(2)).to_i32().unwrap();

    let mut z: GLshort;
    z = (call.arg(3)).to_i32().unwrap();

    unsafe { gl::VertexAttrib3s(index, x, y, z) };
}

pub fn retrace_glVertexAttrib3sv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLshort];
    v = _allocator.alloc_array::<GLshort>(&call.arg(1));
    let _a_GLshort22_0 = (call.arg(1)).to_array();
    if let Some(_a_GLshort22_0) = _a_GLshort22_0 {
        for _jGLshort22 in 0.._a_GLshort22_0.values.len() {
    v[_jGLshort22] = (*_a_GLshort22_0.values[_jGLshort22]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

    unsafe { gl::VertexAttrib3sv(index, v) };
}

pub fn retrace_glVertexAttrib4Nbv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLbyte];
    v = _allocator.alloc_array::<GLbyte>(&call.arg(1));
    let _a_GLbyte5_0 = (call.arg(1)).to_array();
    if let Some(_a_GLbyte5_0) = _a_GLbyte5_0 {
        for _jGLbyte5 in 0.._a_GLbyte5_0.values.len() {
    v[_jGLbyte5] = (*_a_GLbyte5_0.values[_jGLbyte5]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

    unsafe { gl::VertexAttrib4Nbv(index, v) };
}

pub fn retrace_glVertexAttrib4Niv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLint];
    v = _allocator.alloc_array::<GLint>(&call.arg(1));
    let _a_GLint167_0 = (call.arg(1)).to_array();
    if let Some(_a_GLint167_0) = _a_GLint167_0 {
        for _jGLint167 in 0.._a_GLint167_0.values.len() {
    v[_jGLint167] = (*_a_GLint167_0.values[_jGLint167]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

    unsafe { gl::VertexAttrib4Niv(index, v) };
}

pub fn retrace_glVertexAttrib4Nsv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLshort];
    v = _allocator.alloc_array::<GLshort>(&call.arg(1));
    let _a_GLshort23_0 = (call.arg(1)).to_array();
    if let Some(_a_GLshort23_0) = _a_GLshort23_0 {
        for _jGLshort23 in 0.._a_GLshort23_0.values.len() {
    v[_jGLshort23] = (*_a_GLshort23_0.values[_jGLshort23]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

    unsafe { gl::VertexAttrib4Nsv(index, v) };
}

pub fn retrace_glVertexAttrib4Nub(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut x: GLubyte;
    x = (call.arg(1)).to_u32().unwrap();

    let mut y: GLubyte;
    y = (call.arg(2)).to_u32().unwrap();

    let mut z: GLubyte;
    z = (call.arg(3)).to_u32().unwrap();

    let mut w: GLubyte;
    w = (call.arg(4)).to_u32().unwrap();

    unsafe { gl::VertexAttrib4Nub(index, x, y, z, w) };
}

pub fn retrace_glVertexAttrib4Nubv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLubyte];
    v = _allocator.alloc_array::<GLubyte>(&call.arg(1));
    let _a_GLubyte10_0 = (call.arg(1)).to_array();
    if let Some(_a_GLubyte10_0) = _a_GLubyte10_0 {
        for _jGLubyte10 in 0.._a_GLubyte10_0.values.len() {
    v[_jGLubyte10] = (*_a_GLubyte10_0.values[_jGLubyte10]).to_u32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

    unsafe { gl::VertexAttrib4Nubv(index, v) };
}

pub fn retrace_glVertexAttrib4Nuiv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLuint];
    v = _allocator.alloc_array::<GLuint>(&call.arg(1));
    let _a_GLuint97_0 = (call.arg(1)).to_array();
    if let Some(_a_GLuint97_0) = _a_GLuint97_0 {
        for _jGLuint97 in 0.._a_GLuint97_0.values.len() {
    v[_jGLuint97] = (*_a_GLuint97_0.values[_jGLuint97]).to_u32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

    unsafe { gl::VertexAttrib4Nuiv(index, v) };
}

pub fn retrace_glVertexAttrib4Nusv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLushort];
    v = _allocator.alloc_array::<GLushort>(&call.arg(1));
    let _a_GLushort7_0 = (call.arg(1)).to_array();
    if let Some(_a_GLushort7_0) = _a_GLushort7_0 {
        for _jGLushort7 in 0.._a_GLushort7_0.values.len() {
    v[_jGLushort7] = (*_a_GLushort7_0.values[_jGLushort7]).to_u32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

    unsafe { gl::VertexAttrib4Nusv(index, v) };
}

pub fn retrace_glVertexAttrib4bv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLbyte];
    v = _allocator.alloc_array::<GLbyte>(&call.arg(1));
    let _a_GLbyte6_0 = (call.arg(1)).to_array();
    if let Some(_a_GLbyte6_0) = _a_GLbyte6_0 {
        for _jGLbyte6 in 0.._a_GLbyte6_0.values.len() {
    v[_jGLbyte6] = (*_a_GLbyte6_0.values[_jGLbyte6]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

    unsafe { gl::VertexAttrib4bv(index, v) };
}

pub fn retrace_glVertexAttrib4d(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut x: GLdouble;
    x = (call.arg(1)).to_f64().unwrap();

    let mut y: GLdouble;
    y = (call.arg(2)).to_f64().unwrap();

    let mut z: GLdouble;
    z = (call.arg(3)).to_f64().unwrap();

    let mut w: GLdouble;
    w = (call.arg(4)).to_f64().unwrap();

    unsafe { gl::VertexAttrib4d(index, x, y, z, w) };
}

pub fn retrace_glVertexAttrib4dv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLdouble];
    v = _allocator.alloc_array::<GLdouble>(&call.arg(1));
    let _a_GLdouble56_0 = (call.arg(1)).to_array();
    if let Some(_a_GLdouble56_0) = _a_GLdouble56_0 {
        for _jGLdouble56 in 0.._a_GLdouble56_0.values.len() {
    v[_jGLdouble56] = (*_a_GLdouble56_0.values[_jGLdouble56]).to_f64().unwrap();
        }
    }
    let v = v.as_mut_ptr();

    unsafe { gl::VertexAttrib4dv(index, v) };
}

pub fn retrace_glVertexAttrib4f(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut x: GLfloat;
    x = (call.arg(1)).to_f32().unwrap();

    let mut y: GLfloat;
    y = (call.arg(2)).to_f32().unwrap();

    let mut z: GLfloat;
    z = (call.arg(3)).to_f32().unwrap();

    let mut w: GLfloat;
    w = (call.arg(4)).to_f32().unwrap();

    unsafe { gl::VertexAttrib4f(index, x, y, z, w) };
}

pub fn retrace_glVertexAttrib4fv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLfloat];
    v = _allocator.alloc_array::<GLfloat>(&call.arg(1));
    let _a_GLfloat135_0 = (call.arg(1)).to_array();
    if let Some(_a_GLfloat135_0) = _a_GLfloat135_0 {
        for _jGLfloat135 in 0.._a_GLfloat135_0.values.len() {
    v[_jGLfloat135] = (*_a_GLfloat135_0.values[_jGLfloat135]).to_f32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

    unsafe { gl::VertexAttrib4fv(index, v) };
}

pub fn retrace_glVertexAttrib4iv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLint];
    v = _allocator.alloc_array::<GLint>(&call.arg(1));
    let _a_GLint168_0 = (call.arg(1)).to_array();
    if let Some(_a_GLint168_0) = _a_GLint168_0 {
        for _jGLint168 in 0.._a_GLint168_0.values.len() {
    v[_jGLint168] = (*_a_GLint168_0.values[_jGLint168]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

    unsafe { gl::VertexAttrib4iv(index, v) };
}

pub fn retrace_glVertexAttrib4s(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut x: GLshort;
    x = (call.arg(1)).to_i32().unwrap();

    let mut y: GLshort;
    y = (call.arg(2)).to_i32().unwrap();

    let mut z: GLshort;
    z = (call.arg(3)).to_i32().unwrap();

    let mut w: GLshort;
    w = (call.arg(4)).to_i32().unwrap();

    unsafe { gl::VertexAttrib4s(index, x, y, z, w) };
}

pub fn retrace_glVertexAttrib4sv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLshort];
    v = _allocator.alloc_array::<GLshort>(&call.arg(1));
    let _a_GLshort24_0 = (call.arg(1)).to_array();
    if let Some(_a_GLshort24_0) = _a_GLshort24_0 {
        for _jGLshort24 in 0.._a_GLshort24_0.values.len() {
    v[_jGLshort24] = (*_a_GLshort24_0.values[_jGLshort24]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

    unsafe { gl::VertexAttrib4sv(index, v) };
}

pub fn retrace_glVertexAttrib4ubv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLubyte];
    v = _allocator.alloc_array::<GLubyte>(&call.arg(1));
    let _a_GLubyte11_0 = (call.arg(1)).to_array();
    if let Some(_a_GLubyte11_0) = _a_GLubyte11_0 {
        for _jGLubyte11 in 0.._a_GLubyte11_0.values.len() {
    v[_jGLubyte11] = (*_a_GLubyte11_0.values[_jGLubyte11]).to_u32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

    unsafe { gl::VertexAttrib4ubv(index, v) };
}

pub fn retrace_glVertexAttrib4uiv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLuint];
    v = _allocator.alloc_array::<GLuint>(&call.arg(1));
    let _a_GLuint98_0 = (call.arg(1)).to_array();
    if let Some(_a_GLuint98_0) = _a_GLuint98_0 {
        for _jGLuint98 in 0.._a_GLuint98_0.values.len() {
    v[_jGLuint98] = (*_a_GLuint98_0.values[_jGLuint98]).to_u32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

    unsafe { gl::VertexAttrib4uiv(index, v) };
}

pub fn retrace_glVertexAttrib4usv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLushort];
    v = _allocator.alloc_array::<GLushort>(&call.arg(1));
    let _a_GLushort8_0 = (call.arg(1)).to_array();
    if let Some(_a_GLushort8_0) = _a_GLushort8_0 {
        for _jGLushort8 in 0.._a_GLushort8_0.values.len() {
    v[_jGLushort8] = (*_a_GLushort8_0.values[_jGLushort8]).to_u32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

    unsafe { gl::VertexAttrib4usv(index, v) };
}

pub fn retrace_glVertexAttribPointer(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut size: GLint;
    size = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut normalized: GLboolean;
    normalized = (call.arg(3)).to_u32().unwrap() as u8;

    let mut stride: GLsizei;
    stride = (call.arg(4)).to_i32().unwrap();

    let pointer: &mut [GLc_void];
    pointer = region::to_pointer(call.arg(5), true);

    unsafe { gl::VertexAttribPointer(index, size, _type, normalized, stride, pointer) };
}

pub fn retrace_glUniformMatrix2x3fv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let mut transpose: GLboolean;
    transpose = (call.arg(2)).to_u32().unwrap() as u8;

    let value: &mut [GLfloat];
    value = _allocator.alloc_array::<GLfloat>(&call.arg(3));
    let _a_GLfloat136_0 = (call.arg(3)).to_array();
    if let Some(_a_GLfloat136_0) = _a_GLfloat136_0 {
        for _jGLfloat136 in 0.._a_GLfloat136_0.values.len() {
    value[_jGLfloat136] = (*_a_GLfloat136_0.values[_jGLfloat136]).to_f32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

    unsafe { gl::UniformMatrix2x3fv(location, count, transpose, value) };
}

pub fn retrace_glUniformMatrix3x2fv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let mut transpose: GLboolean;
    transpose = (call.arg(2)).to_u32().unwrap() as u8;

    let value: &mut [GLfloat];
    value = _allocator.alloc_array::<GLfloat>(&call.arg(3));
    let _a_GLfloat137_0 = (call.arg(3)).to_array();
    if let Some(_a_GLfloat137_0) = _a_GLfloat137_0 {
        for _jGLfloat137 in 0.._a_GLfloat137_0.values.len() {
    value[_jGLfloat137] = (*_a_GLfloat137_0.values[_jGLfloat137]).to_f32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

    unsafe { gl::UniformMatrix3x2fv(location, count, transpose, value) };
}

pub fn retrace_glUniformMatrix2x4fv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let mut transpose: GLboolean;
    transpose = (call.arg(2)).to_u32().unwrap() as u8;

    let value: &mut [GLfloat];
    value = _allocator.alloc_array::<GLfloat>(&call.arg(3));
    let _a_GLfloat138_0 = (call.arg(3)).to_array();
    if let Some(_a_GLfloat138_0) = _a_GLfloat138_0 {
        for _jGLfloat138 in 0.._a_GLfloat138_0.values.len() {
    value[_jGLfloat138] = (*_a_GLfloat138_0.values[_jGLfloat138]).to_f32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

    unsafe { gl::UniformMatrix2x4fv(location, count, transpose, value) };
}

pub fn retrace_glUniformMatrix4x2fv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let mut transpose: GLboolean;
    transpose = (call.arg(2)).to_u32().unwrap() as u8;

    let value: &mut [GLfloat];
    value = _allocator.alloc_array::<GLfloat>(&call.arg(3));
    let _a_GLfloat139_0 = (call.arg(3)).to_array();
    if let Some(_a_GLfloat139_0) = _a_GLfloat139_0 {
        for _jGLfloat139 in 0.._a_GLfloat139_0.values.len() {
    value[_jGLfloat139] = (*_a_GLfloat139_0.values[_jGLfloat139]).to_f32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

    unsafe { gl::UniformMatrix4x2fv(location, count, transpose, value) };
}

pub fn retrace_glUniformMatrix3x4fv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let mut transpose: GLboolean;
    transpose = (call.arg(2)).to_u32().unwrap() as u8;

    let value: &mut [GLfloat];
    value = _allocator.alloc_array::<GLfloat>(&call.arg(3));
    let _a_GLfloat140_0 = (call.arg(3)).to_array();
    if let Some(_a_GLfloat140_0) = _a_GLfloat140_0 {
        for _jGLfloat140 in 0.._a_GLfloat140_0.values.len() {
    value[_jGLfloat140] = (*_a_GLfloat140_0.values[_jGLfloat140]).to_f32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

    unsafe { gl::UniformMatrix3x4fv(location, count, transpose, value) };
}

pub fn retrace_glUniformMatrix4x3fv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let mut transpose: GLboolean;
    transpose = (call.arg(2)).to_u32().unwrap() as u8;

    let value: &mut [GLfloat];
    value = _allocator.alloc_array::<GLfloat>(&call.arg(3));
    let _a_GLfloat141_0 = (call.arg(3)).to_array();
    if let Some(_a_GLfloat141_0) = _a_GLfloat141_0 {
        for _jGLfloat141 in 0.._a_GLfloat141_0.values.len() {
    value[_jGLfloat141] = (*_a_GLfloat141_0.values[_jGLfloat141]).to_f32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

    unsafe { gl::UniformMatrix4x3fv(location, count, transpose, value) };
}

pub fn retrace_glColorMaski(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut r: GLboolean;
    r = (call.arg(1)).to_u32().unwrap() as u8;

    let mut g: GLboolean;
    g = (call.arg(2)).to_u32().unwrap() as u8;

    let mut b: GLboolean;
    b = (call.arg(3)).to_u32().unwrap() as u8;

    let mut a: GLboolean;
    a = (call.arg(4)).to_u32().unwrap() as u8;

    unsafe { gl::ColorMaski(index, r, g, b, a) };
}

pub fn retrace_glEnablei(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut index: GLuint;
    index = (call.arg(1)).to_u32().unwrap();

    unsafe { gl::Enablei(target, index) };
}

pub fn retrace_glDisablei(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut index: GLuint;
    index = (call.arg(1)).to_u32().unwrap();

    unsafe { gl::Disablei(target, index) };
}

pub fn retrace_glBeginTransformFeedback(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut primitiveMode: GLenum;
    primitiveMode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    unsafe { gl::BeginTransformFeedback(primitiveMode) };
}

pub fn retrace_glEndTransformFeedback(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    unsafe { gl::EndTransformFeedback() };
}

pub fn retrace_glBindBufferRange(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut index: GLuint;
    index = (call.arg(1)).to_u32().unwrap();

    let mut buffer: GLuint;
    buffer = (call.arg(2)).to_u32().unwrap();
    buffer = self._buffer_map[buffer];

    let mut offset: GLintptr;
    offset = (call.arg(3)).to_i32().unwrap();

    let mut size: GLsizeiptr;
    size = (call.arg(4)).to_i32().unwrap();

    unsafe { gl::BindBufferRange(target, index, buffer, offset, size) };
}

pub fn retrace_glBindBufferBase(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut index: GLuint;
    index = (call.arg(1)).to_u32().unwrap();

    let mut buffer: GLuint;
    buffer = (call.arg(2)).to_u32().unwrap();
    buffer = self._buffer_map[buffer];

    unsafe { gl::BindBufferBase(target, index, buffer) };
}

pub fn retrace_glTransformFeedbackVaryings(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let varyings: &mut [GLchar];
    varyings = _allocator.alloc_array::<GLchar >(&call.arg(2));
    let _a_GLchar28_0 = (call.arg(2)).to_array();
    if let Some(_a_GLchar28_0) = _a_GLchar28_0 {
        for _jGLchar28 in 0.._a_GLchar28_0.values.len() {
    varyings[_jGLchar28] = (*_a_GLchar28_0.values[_jGLchar28]).to_string().unwrap();
        }
    }
    let varyings = varyings.as_mut_ptr();

    let mut bufferMode: GLenum;
    bufferMode = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    unsafe { gl::TransformFeedbackVaryings(program, count, varyings, bufferMode) };
}

pub fn retrace_glClampColor(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut clamp: GLenum;
    clamp = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    unsafe { gl::ClampColor(target, clamp) };
}

pub fn retrace_glBeginConditionalRender(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut id: GLuint;
    id = (call.arg(0)).to_u32().unwrap();
    id = self._query_map[id];

    let mut mode: GLenum;
    mode = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    unsafe { gl::BeginConditionalRender(id, mode) };
}

pub fn retrace_glEndConditionalRender(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    unsafe { gl::EndConditionalRender() };
}

pub fn retrace_glVertexAttribIPointer(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut size: GLint;
    size = (call.arg(1)).to_i32().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut stride: GLsizei;
    stride = (call.arg(3)).to_i32().unwrap();

    let pointer: &mut [GLc_void];
    pointer = region::to_pointer(call.arg(4), true);

    unsafe { gl::VertexAttribIPointer(index, size, _type, stride, pointer) };
}

pub fn retrace_glVertexAttribI1i(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut x: GLint;
    x = (call.arg(1)).to_i32().unwrap();

    unsafe { gl::VertexAttribI1i(index, x) };
}

pub fn retrace_glVertexAttribI2i(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut x: GLint;
    x = (call.arg(1)).to_i32().unwrap();

    let mut y: GLint;
    y = (call.arg(2)).to_i32().unwrap();

    unsafe { gl::VertexAttribI2i(index, x, y) };
}

pub fn retrace_glVertexAttribI3i(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut x: GLint;
    x = (call.arg(1)).to_i32().unwrap();

    let mut y: GLint;
    y = (call.arg(2)).to_i32().unwrap();

    let mut z: GLint;
    z = (call.arg(3)).to_i32().unwrap();

    unsafe { gl::VertexAttribI3i(index, x, y, z) };
}

pub fn retrace_glVertexAttribI4i(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut x: GLint;
    x = (call.arg(1)).to_i32().unwrap();

    let mut y: GLint;
    y = (call.arg(2)).to_i32().unwrap();

    let mut z: GLint;
    z = (call.arg(3)).to_i32().unwrap();

    let mut w: GLint;
    w = (call.arg(4)).to_i32().unwrap();

    unsafe { gl::VertexAttribI4i(index, x, y, z, w) };
}

pub fn retrace_glVertexAttribI1ui(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut x: GLuint;
    x = (call.arg(1)).to_u32().unwrap();

    unsafe { gl::VertexAttribI1ui(index, x) };
}

pub fn retrace_glVertexAttribI2ui(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut x: GLuint;
    x = (call.arg(1)).to_u32().unwrap();

    let mut y: GLuint;
    y = (call.arg(2)).to_u32().unwrap();

    unsafe { gl::VertexAttribI2ui(index, x, y) };
}

pub fn retrace_glVertexAttribI3ui(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut x: GLuint;
    x = (call.arg(1)).to_u32().unwrap();

    let mut y: GLuint;
    y = (call.arg(2)).to_u32().unwrap();

    let mut z: GLuint;
    z = (call.arg(3)).to_u32().unwrap();

    unsafe { gl::VertexAttribI3ui(index, x, y, z) };
}

pub fn retrace_glVertexAttribI4ui(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut x: GLuint;
    x = (call.arg(1)).to_u32().unwrap();

    let mut y: GLuint;
    y = (call.arg(2)).to_u32().unwrap();

    let mut z: GLuint;
    z = (call.arg(3)).to_u32().unwrap();

    let mut w: GLuint;
    w = (call.arg(4)).to_u32().unwrap();

    unsafe { gl::VertexAttribI4ui(index, x, y, z, w) };
}

pub fn retrace_glVertexAttribI1iv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLint];
    v = _allocator.alloc_array::<GLint>(&call.arg(1));
    let _a_PGLint32_0 = (call.arg(1)).to_array().unwrap();
    v[0] = (_a_PGLint32_0.values[0]).to_i32().unwrap();

//not found in gl!    unsafe { gl::VertexAttribI1iv(index, v) };
}

pub fn retrace_glVertexAttribI2iv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLint];
    v = _allocator.alloc_array::<GLint>(&call.arg(1));
    let _a_GLint169_0 = (call.arg(1)).to_array();
    if let Some(_a_GLint169_0) = _a_GLint169_0 {
        for _jGLint169 in 0.._a_GLint169_0.values.len() {
    v[_jGLint169] = (*_a_GLint169_0.values[_jGLint169]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

    unsafe { gl::VertexAttribI2iv(index, v) };
}

pub fn retrace_glVertexAttribI3iv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLint];
    v = _allocator.alloc_array::<GLint>(&call.arg(1));
    let _a_GLint170_0 = (call.arg(1)).to_array();
    if let Some(_a_GLint170_0) = _a_GLint170_0 {
        for _jGLint170 in 0.._a_GLint170_0.values.len() {
    v[_jGLint170] = (*_a_GLint170_0.values[_jGLint170]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

    unsafe { gl::VertexAttribI3iv(index, v) };
}

pub fn retrace_glVertexAttribI4iv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLint];
    v = _allocator.alloc_array::<GLint>(&call.arg(1));
    let _a_GLint171_0 = (call.arg(1)).to_array();
    if let Some(_a_GLint171_0) = _a_GLint171_0 {
        for _jGLint171 in 0.._a_GLint171_0.values.len() {
    v[_jGLint171] = (*_a_GLint171_0.values[_jGLint171]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

    unsafe { gl::VertexAttribI4iv(index, v) };
}

pub fn retrace_glVertexAttribI1uiv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLuint];
    v = _allocator.alloc_array::<GLuint>(&call.arg(1));
    let _a_PGLuint41_0 = (call.arg(1)).to_array().unwrap();
    v[0] = (_a_PGLuint41_0.values[0]).to_u32().unwrap();

//not found in gl!    unsafe { gl::VertexAttribI1uiv(index, v) };
}

pub fn retrace_glVertexAttribI2uiv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLuint];
    v = _allocator.alloc_array::<GLuint>(&call.arg(1));
    let _a_GLuint99_0 = (call.arg(1)).to_array();
    if let Some(_a_GLuint99_0) = _a_GLuint99_0 {
        for _jGLuint99 in 0.._a_GLuint99_0.values.len() {
    v[_jGLuint99] = (*_a_GLuint99_0.values[_jGLuint99]).to_u32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

    unsafe { gl::VertexAttribI2uiv(index, v) };
}

pub fn retrace_glVertexAttribI3uiv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLuint];
    v = _allocator.alloc_array::<GLuint>(&call.arg(1));
    let _a_GLuint100_0 = (call.arg(1)).to_array();
    if let Some(_a_GLuint100_0) = _a_GLuint100_0 {
        for _jGLuint100 in 0.._a_GLuint100_0.values.len() {
    v[_jGLuint100] = (*_a_GLuint100_0.values[_jGLuint100]).to_u32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

    unsafe { gl::VertexAttribI3uiv(index, v) };
}

pub fn retrace_glVertexAttribI4uiv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLuint];
    v = _allocator.alloc_array::<GLuint>(&call.arg(1));
    let _a_GLuint101_0 = (call.arg(1)).to_array();
    if let Some(_a_GLuint101_0) = _a_GLuint101_0 {
        for _jGLuint101 in 0.._a_GLuint101_0.values.len() {
    v[_jGLuint101] = (*_a_GLuint101_0.values[_jGLuint101]).to_u32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

    unsafe { gl::VertexAttribI4uiv(index, v) };
}

pub fn retrace_glVertexAttribI4bv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLbyte];
    v = _allocator.alloc_array::<GLbyte>(&call.arg(1));
    let _a_GLbyte7_0 = (call.arg(1)).to_array();
    if let Some(_a_GLbyte7_0) = _a_GLbyte7_0 {
        for _jGLbyte7 in 0.._a_GLbyte7_0.values.len() {
    v[_jGLbyte7] = (*_a_GLbyte7_0.values[_jGLbyte7]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

    unsafe { gl::VertexAttribI4bv(index, v) };
}

pub fn retrace_glVertexAttribI4sv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLshort];
    v = _allocator.alloc_array::<GLshort>(&call.arg(1));
    let _a_GLshort25_0 = (call.arg(1)).to_array();
    if let Some(_a_GLshort25_0) = _a_GLshort25_0 {
        for _jGLshort25 in 0.._a_GLshort25_0.values.len() {
    v[_jGLshort25] = (*_a_GLshort25_0.values[_jGLshort25]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

    unsafe { gl::VertexAttribI4sv(index, v) };
}

pub fn retrace_glVertexAttribI4ubv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLubyte];
    v = _allocator.alloc_array::<GLubyte>(&call.arg(1));
    let _a_GLubyte12_0 = (call.arg(1)).to_array();
    if let Some(_a_GLubyte12_0) = _a_GLubyte12_0 {
        for _jGLubyte12 in 0.._a_GLubyte12_0.values.len() {
    v[_jGLubyte12] = (*_a_GLubyte12_0.values[_jGLubyte12]).to_u32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

    unsafe { gl::VertexAttribI4ubv(index, v) };
}

pub fn retrace_glVertexAttribI4usv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLushort];
    v = _allocator.alloc_array::<GLushort>(&call.arg(1));
    let _a_GLushort9_0 = (call.arg(1)).to_array();
    if let Some(_a_GLushort9_0) = _a_GLushort9_0 {
        for _jGLushort9 in 0.._a_GLushort9_0.values.len() {
    v[_jGLushort9] = (*_a_GLushort9_0.values[_jGLushort9]).to_u32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

    unsafe { gl::VertexAttribI4usv(index, v) };
}

pub fn retrace_glBindFragDataLocation(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut color: GLuint;
    color = (call.arg(1)).to_u32().unwrap();

    let name: &mut [GLchar];
    name = (call.arg(2)).to_string().unwrap();

    unsafe { gl::BindFragDataLocation(program, color, name) };
}

pub fn retrace_glUniform1ui(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut v0: GLuint;
    v0 = (call.arg(1)).to_u32().unwrap();

    unsafe { gl::Uniform1ui(location, v0) };
}

pub fn retrace_glUniform2ui(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut v0: GLuint;
    v0 = (call.arg(1)).to_u32().unwrap();

    let mut v1: GLuint;
    v1 = (call.arg(2)).to_u32().unwrap();

    unsafe { gl::Uniform2ui(location, v0, v1) };
}

pub fn retrace_glUniform3ui(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut v0: GLuint;
    v0 = (call.arg(1)).to_u32().unwrap();

    let mut v1: GLuint;
    v1 = (call.arg(2)).to_u32().unwrap();

    let mut v2: GLuint;
    v2 = (call.arg(3)).to_u32().unwrap();

    unsafe { gl::Uniform3ui(location, v0, v1, v2) };
}

pub fn retrace_glUniform4ui(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut v0: GLuint;
    v0 = (call.arg(1)).to_u32().unwrap();

    let mut v1: GLuint;
    v1 = (call.arg(2)).to_u32().unwrap();

    let mut v2: GLuint;
    v2 = (call.arg(3)).to_u32().unwrap();

    let mut v3: GLuint;
    v3 = (call.arg(4)).to_u32().unwrap();

    unsafe { gl::Uniform4ui(location, v0, v1, v2, v3) };
}

pub fn retrace_glUniform1uiv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let value: &mut [GLuint];
    value = _allocator.alloc_array::<GLuint>(&call.arg(2));
    let _a_GLuint102_0 = (call.arg(2)).to_array();
    if let Some(_a_GLuint102_0) = _a_GLuint102_0 {
        for _jGLuint102 in 0.._a_GLuint102_0.values.len() {
    value[_jGLuint102] = (*_a_GLuint102_0.values[_jGLuint102]).to_u32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

    unsafe { gl::Uniform1uiv(location, count, value) };
}

pub fn retrace_glUniform2uiv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let value: &mut [GLuint];
    value = _allocator.alloc_array::<GLuint>(&call.arg(2));
    let _a_GLuint103_0 = (call.arg(2)).to_array();
    if let Some(_a_GLuint103_0) = _a_GLuint103_0 {
        for _jGLuint103 in 0.._a_GLuint103_0.values.len() {
    value[_jGLuint103] = (*_a_GLuint103_0.values[_jGLuint103]).to_u32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

    unsafe { gl::Uniform2uiv(location, count, value) };
}

pub fn retrace_glUniform3uiv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let value: &mut [GLuint];
    value = _allocator.alloc_array::<GLuint>(&call.arg(2));
    let _a_GLuint104_0 = (call.arg(2)).to_array();
    if let Some(_a_GLuint104_0) = _a_GLuint104_0 {
        for _jGLuint104 in 0.._a_GLuint104_0.values.len() {
    value[_jGLuint104] = (*_a_GLuint104_0.values[_jGLuint104]).to_u32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

    unsafe { gl::Uniform3uiv(location, count, value) };
}

pub fn retrace_glUniform4uiv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let value: &mut [GLuint];
    value = _allocator.alloc_array::<GLuint>(&call.arg(2));
    let _a_GLuint105_0 = (call.arg(2)).to_array();
    if let Some(_a_GLuint105_0) = _a_GLuint105_0 {
        for _jGLuint105 in 0.._a_GLuint105_0.values.len() {
    value[_jGLuint105] = (*_a_GLuint105_0.values[_jGLuint105]).to_u32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

    unsafe { gl::Uniform4uiv(location, count, value) };
}

pub fn retrace_glTexParameterIiv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLint];
    params = _allocator.alloc_array::<GLint>(&call.arg(2));
    let _a_GLint172_0 = (call.arg(2)).to_array();
    if let Some(_a_GLint172_0) = _a_GLint172_0 {
        for _jGLint172 in 0.._a_GLint172_0.values.len() {
    params[_jGLint172] = (*_a_GLint172_0.values[_jGLint172]).to_i32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

    unsafe { gl::TexParameterIiv(target, pname, params) };
}

pub fn retrace_glTexParameterIuiv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLuint];
    params = _allocator.alloc_array::<GLuint>(&call.arg(2));
    let _a_GLuint106_0 = (call.arg(2)).to_array();
    if let Some(_a_GLuint106_0) = _a_GLuint106_0 {
        for _jGLuint106 in 0.._a_GLuint106_0.values.len() {
    params[_jGLuint106] = (*_a_GLuint106_0.values[_jGLuint106]).to_u32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

    unsafe { gl::TexParameterIuiv(target, pname, params) };
}

pub fn retrace_glClearBufferiv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut buffer: GLenum;
    buffer = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut drawbuffer: GLint;
    drawbuffer = (call.arg(1)).to_i32().unwrap();

    let value: &mut [GLint];
    value = _allocator.alloc_array::<GLint>(&call.arg(2));
    let _a_GLint173_0 = (call.arg(2)).to_array();
    if let Some(_a_GLint173_0) = _a_GLint173_0 {
        for _jGLint173 in 0.._a_GLint173_0.values.len() {
    value[_jGLint173] = (*_a_GLint173_0.values[_jGLint173]).to_i32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

    unsafe { gl::ClearBufferiv(buffer, drawbuffer, value) };
}

pub fn retrace_glClearBufferuiv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut buffer: GLenum;
    buffer = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut drawbuffer: GLint;
    drawbuffer = (call.arg(1)).to_i32().unwrap();

    let value: &mut [GLuint];
    value = _allocator.alloc_array::<GLuint>(&call.arg(2));
    let _a_GLuint107_0 = (call.arg(2)).to_array();
    if let Some(_a_GLuint107_0) = _a_GLuint107_0 {
        for _jGLuint107 in 0.._a_GLuint107_0.values.len() {
    value[_jGLuint107] = (*_a_GLuint107_0.values[_jGLuint107]).to_u32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

    unsafe { gl::ClearBufferuiv(buffer, drawbuffer, value) };
}

pub fn retrace_glClearBufferfv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut buffer: GLenum;
    buffer = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut drawbuffer: GLint;
    drawbuffer = (call.arg(1)).to_i32().unwrap();

    let value: &mut [GLfloat];
    value = _allocator.alloc_array::<GLfloat>(&call.arg(2));
    let _a_GLfloat142_0 = (call.arg(2)).to_array();
    if let Some(_a_GLfloat142_0) = _a_GLfloat142_0 {
        for _jGLfloat142 in 0.._a_GLfloat142_0.values.len() {
    value[_jGLfloat142] = (*_a_GLfloat142_0.values[_jGLfloat142]).to_f32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

    unsafe { gl::ClearBufferfv(buffer, drawbuffer, value) };
}

pub fn retrace_glClearBufferfi(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut buffer: GLenum;
    buffer = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut drawbuffer: GLint;
    drawbuffer = (call.arg(1)).to_i32().unwrap();

    let mut depth: GLfloat;
    depth = (call.arg(2)).to_f32().unwrap();

    let mut stencil: GLint;
    stencil = (call.arg(3)).to_i32().unwrap();

    unsafe { gl::ClearBufferfi(buffer, drawbuffer, depth, stencil) };
}

pub fn retrace_glDrawArraysInstanced(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut first: GLint;
    first = (call.arg(1)).to_i32().unwrap();

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let mut instancecount: GLsizei;
    instancecount = (call.arg(3)).to_i32().unwrap();

    unsafe { gl::DrawArraysInstanced(mode, first, count, instancecount) };
}

pub fn retrace_glDrawElementsInstanced(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let indices: &mut [GLc_void];
            indices = (call.arg(3)).to_pointer().unwrap() as *mut c_void;

    let mut instancecount: GLsizei;
    instancecount = (call.arg(4)).to_i32().unwrap();

    unsafe { gl::DrawElementsInstanced(mode, count, _type, indices, instancecount) };
}

pub fn retrace_glTexBuffer(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut internalformat: GLenum;
    internalformat = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut buffer: GLuint;
    buffer = (call.arg(2)).to_u32().unwrap();
    buffer = self._buffer_map[buffer];

    unsafe { gl::TexBuffer(target, internalformat, buffer) };
}

pub fn retrace_glPrimitiveRestartIndex(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    unsafe { gl::PrimitiveRestartIndex(index) };
}

pub fn retrace_glFramebufferTexture(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut attachment: GLenum;
    attachment = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut texture: GLuint;
    texture = (call.arg(2)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut level: GLint;
    level = (call.arg(3)).to_i32().unwrap();

    unsafe { gl::FramebufferTexture(target, attachment, texture, level) };
}

pub fn retrace_glVertexAttribDivisor(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut divisor: GLuint;
    divisor = (call.arg(1)).to_u32().unwrap();

    unsafe { gl::VertexAttribDivisor(index, divisor) };
}

pub fn retrace_glMinSampleShading(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut value: GLfloat;
    value = (call.arg(0)).to_f32().unwrap();

    unsafe { gl::MinSampleShading(value) };
}

pub fn retrace_glBlendEquationi(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut buf: GLuint;
    buf = (call.arg(0)).to_u32().unwrap();

    let mut mode: GLenum;
    mode = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    unsafe { gl::BlendEquationi(buf, mode) };
}

pub fn retrace_glBlendEquationSeparatei(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut buf: GLuint;
    buf = (call.arg(0)).to_u32().unwrap();

    let mut modeRGB: GLenum;
    modeRGB = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut modeAlpha: GLenum;
    modeAlpha = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    unsafe { gl::BlendEquationSeparatei(buf, modeRGB, modeAlpha) };
}

pub fn retrace_glBlendFunci(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut buf: GLuint;
    buf = (call.arg(0)).to_u32().unwrap();

    let mut src: GLenum;
    src = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut dst: GLenum;
    dst = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    unsafe { gl::BlendFunci(buf, src, dst) };
}

pub fn retrace_glBlendFuncSeparatei(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut buf: GLuint;
    buf = (call.arg(0)).to_u32().unwrap();

    let mut srcRGB: GLenum;
    srcRGB = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut dstRGB: GLenum;
    dstRGB = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut srcAlpha: GLenum;
    srcAlpha = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let mut dstAlpha: GLenum;
    dstAlpha = (call.arg(4)).to_u32().unwrap().try_into().unwrap();

    unsafe { gl::BlendFuncSeparatei(buf, srcRGB, dstRGB, srcAlpha, dstAlpha) };
}

pub fn retrace_glGetnCompressedTexImage(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut lod: GLint;
    lod = (call.arg(1)).to_i32().unwrap();

    let mut bufSize: GLsizei;
    bufSize = (call.arg(2)).to_i32().unwrap();

    let pixels = (call.arg(3)).to_pointer();

    let _pack_buffer = 0;
    if self.context.features("pixel_buffer_object") {
//not found in gl!        unsafe { gl::GetIntegerv(gl::PIXEL_PACK_BUFFER_BINDING, &_pack_buffer) };
    }
     let buffer = Vec::<u8>::new();
    if _pack_buffer != 0 {
    return;
    }
//not found in gl!    unsafe { gl::GetnCompressedTexImage(target, lod, bufSize, pixels) };
}

pub fn retrace_glGetnTexImage(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(1)).to_i32().unwrap();

    let mut format: GLenum;
    format = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let mut bufSize: GLsizei;
    bufSize = (call.arg(4)).to_i32().unwrap();

    let pixels = (call.arg(5)).to_pointer();

    let _pack_buffer = 0;
    if self.context.features("pixel_buffer_object") {
//not found in gl!        unsafe { gl::GetIntegerv(gl::PIXEL_PACK_BUFFER_BINDING, &_pack_buffer) };
    }
     let buffer = Vec::<u8>::new();
    if _pack_buffer != 0 {
    return;
    }
//not found in gl!    unsafe { gl::GetnTexImage(target, level, format, _type, bufSize, pixels) };
}

pub fn retrace_glGetnPixelMapfv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut map: GLenum;
    map = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut bufSize: GLsizei;
    bufSize = (call.arg(1)).to_i32().unwrap();

    let values: &mut [GLfloat];
    let values = (call.arg(2)).to_pointer();

    let _pack_buffer = 0;
    if self.context.features("pixel_buffer_object") {
//not found in gl!        unsafe { gl::GetIntegerv(gl::PIXEL_PACK_BUFFER_BINDING, &_pack_buffer) };
    }
     let buffer = Vec::<u8>::new();
    if _pack_buffer != 0 {
    return;
    }
//not found in gl!    unsafe { gl::GetnPixelMapfv(map, bufSize, values) };
    let _aGLfloat144 = (call.arg(2)).to_array();
    if (_aGLfloat144) {
        for _jGLfloat144 in 0.._aGLfloat144.values.len() {
        }
    }
}

pub fn retrace_glGetnPixelMapuiv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut map: GLenum;
    map = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut bufSize: GLsizei;
    bufSize = (call.arg(1)).to_i32().unwrap();

    let values: &mut [GLuint];
    let values = (call.arg(2)).to_pointer();

    let _pack_buffer = 0;
    if self.context.features("pixel_buffer_object") {
//not found in gl!        unsafe { gl::GetIntegerv(gl::PIXEL_PACK_BUFFER_BINDING, &_pack_buffer) };
    }
     let buffer = Vec::<u8>::new();
    if _pack_buffer != 0 {
    return;
    }
//not found in gl!    unsafe { gl::GetnPixelMapuiv(map, bufSize, values) };
    let _aGLuint109 = (call.arg(2)).to_array();
    if (_aGLuint109) {
        for _jGLuint109 in 0.._aGLuint109.values.len() {
        }
    }
}

pub fn retrace_glGetnPixelMapusv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut map: GLenum;
    map = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut bufSize: GLsizei;
    bufSize = (call.arg(1)).to_i32().unwrap();

    let values: &mut [GLushort];
    let values = (call.arg(2)).to_pointer();

    let _pack_buffer = 0;
    if self.context.features("pixel_buffer_object") {
//not found in gl!        unsafe { gl::GetIntegerv(gl::PIXEL_PACK_BUFFER_BINDING, &_pack_buffer) };
    }
     let buffer = Vec::<u8>::new();
    if _pack_buffer != 0 {
    return;
    }
//not found in gl!    unsafe { gl::GetnPixelMapusv(map, bufSize, values) };
    let _aGLushort11 = (call.arg(2)).to_array();
    if (_aGLushort11) {
        for _jGLushort11 in 0.._aGLushort11.values.len() {
        }
    }
}

pub fn retrace_glGetnPolygonStipple(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut bufSize: GLsizei;
    bufSize = (call.arg(0)).to_i32().unwrap();

    let pattern: &mut [GLubyte];
    let pattern = (call.arg(1)).to_pointer();

    let _pack_buffer = 0;
    if self.context.features("pixel_buffer_object") {
//not found in gl!        unsafe { gl::GetIntegerv(gl::PIXEL_PACK_BUFFER_BINDING, &_pack_buffer) };
    }
     let buffer = Vec::<u8>::new();
    if _pack_buffer != 0 {
    return;
    }
//not found in gl!    unsafe { gl::GetnPolygonStipple(bufSize, pattern) };
    let _aGLubyte14 = (call.arg(1)).to_array();
    if (_aGLubyte14) {
        for _jGLubyte14 in 0.._aGLubyte14.values.len() {
        }
    }
}

pub fn retrace_glGetnConvolutionFilter(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut format: GLenum;
    format = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut bufSize: GLsizei;
    bufSize = (call.arg(3)).to_i32().unwrap();

    let image: &mut [c_void];
    let image = (call.arg(4)).to_pointer();

    let _pack_buffer = 0;
    if self.context.features("pixel_buffer_object") {
//not found in gl!        unsafe { gl::GetIntegerv(gl::PIXEL_PACK_BUFFER_BINDING, &_pack_buffer) };
    }
     let buffer = Vec::<u8>::new();
    if _pack_buffer != 0 {
    return;
    }
//not found in gl!    unsafe { gl::GetnConvolutionFilter(target, format, _type, bufSize, image) };
}

pub fn retrace_glGetnSeparableFilter(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut format: GLenum;
    format = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut rowBufSize: GLsizei;
    rowBufSize = (call.arg(3)).to_i32().unwrap();

    let row: &mut [c_void];
    let row = (call.arg(4)).to_pointer();

    let mut columnBufSize: GLsizei;
    columnBufSize = (call.arg(5)).to_i32().unwrap();

    let column: &mut [c_void];
    let column = (call.arg(6)).to_pointer();

    let span: &mut [GLc_void];
    let span = (call.arg(7)).to_pointer();

    let _pack_buffer = 0;
    if self.context.features("pixel_buffer_object") {
//not found in gl!        unsafe { gl::GetIntegerv(gl::PIXEL_PACK_BUFFER_BINDING, &_pack_buffer) };
    }
     let buffer = Vec::<u8>::new();
    if _pack_buffer != 0 {
    return;
    }
//not found in gl!    unsafe { gl::GetnSeparableFilter(target, format, _type, rowBufSize, row, columnBufSize, column, span) };
}

pub fn retrace_glGetnHistogram(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut reset: GLboolean;
    reset = (call.arg(1)).to_u32().unwrap() as u8;

    let mut format: GLenum;
    format = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let mut bufSize: GLsizei;
    bufSize = (call.arg(4)).to_i32().unwrap();

    let values: &mut [c_void];
    let values = (call.arg(5)).to_pointer();

    let _pack_buffer = 0;
    if self.context.features("pixel_buffer_object") {
//not found in gl!        unsafe { gl::GetIntegerv(gl::PIXEL_PACK_BUFFER_BINDING, &_pack_buffer) };
    }
     let buffer = Vec::<u8>::new();
    if _pack_buffer != 0 {
    return;
    }
//not found in gl!    unsafe { gl::GetnHistogram(target, reset, format, _type, bufSize, values) };
}

pub fn retrace_glGetnMinmax(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut reset: GLboolean;
    reset = (call.arg(1)).to_u32().unwrap() as u8;

    let mut format: GLenum;
    format = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let mut bufSize: GLsizei;
    bufSize = (call.arg(4)).to_i32().unwrap();

    let values: &mut [c_void];
    let values = (call.arg(5)).to_pointer();

    let _pack_buffer = 0;
    if self.context.features("pixel_buffer_object") {
//not found in gl!        unsafe { gl::GetIntegerv(gl::PIXEL_PACK_BUFFER_BINDING, &_pack_buffer) };
    }
     let buffer = Vec::<u8>::new();
    if _pack_buffer != 0 {
    return;
    }
//not found in gl!    unsafe { gl::GetnMinmax(target, reset, format, _type, bufSize, values) };
}

pub fn retrace_glSpecializeShader(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut shader: GLuint;
    shader = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    shader = self._handleARB_map[shader];
} else {
    shader = self._shader_map[shader];
}

    let pEntryPoint: &mut [GLchar];
    pEntryPoint = (call.arg(1)).to_string().unwrap();

    let mut numSpecializationConstants: GLuint;
    numSpecializationConstants = (call.arg(2)).to_u32().unwrap();

    let pConstantIndex: &mut [GLuint];
    pConstantIndex = _allocator.alloc_array::<GLuint>(&call.arg(3));
    let _a_GLuint110_0 = (call.arg(3)).to_array();
    if let Some(_a_GLuint110_0) = _a_GLuint110_0 {
        for _jGLuint110 in 0.._a_GLuint110_0.values.len() {
    pConstantIndex[_jGLuint110] = (*_a_GLuint110_0.values[_jGLuint110]).to_u32().unwrap();
        }
    }
    let pConstantIndex = pConstantIndex.as_mut_ptr();

    let pConstantValue: &mut [GLuint];
    pConstantValue = _allocator.alloc_array::<GLuint>(&call.arg(4));
    let _a_GLuint111_0 = (call.arg(4)).to_array();
    if let Some(_a_GLuint111_0) = _a_GLuint111_0 {
        for _jGLuint111 in 0.._a_GLuint111_0.values.len() {
    pConstantValue[_jGLuint111] = (*_a_GLuint111_0.values[_jGLuint111]).to_u32().unwrap();
        }
    }
    let pConstantValue = pConstantValue.as_mut_ptr();

//not found in gl!    unsafe { gl::SpecializeShader(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue) };
}

pub fn retrace_glMultiDrawArraysIndirectCount(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let indirect: &mut [GLc_void];
    let indirect = (call.arg(1)).to_pointer().unwrap() as *mut c_void;

    let mut drawcount: GLintptr;
    drawcount = (call.arg(2)).to_i32().unwrap();

    let mut maxdrawcount: GLsizei;
    maxdrawcount = (call.arg(3)).to_i32().unwrap();

    let mut stride: GLsizei;
    stride = (call.arg(4)).to_i32().unwrap();

//not found in gl!    unsafe { gl::MultiDrawArraysIndirectCount(mode, indirect, drawcount, maxdrawcount, stride) };
}

pub fn retrace_glMultiDrawElementsIndirectCount(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let indirect: &mut [GLc_void];
    let indirect = (call.arg(2)).to_pointer().unwrap() as *mut c_void;

    let mut drawcount: GLintptr;
    drawcount = (call.arg(3)).to_i32().unwrap();

    let mut maxdrawcount: GLsizei;
    maxdrawcount = (call.arg(4)).to_i32().unwrap();

    let mut stride: GLsizei;
    stride = (call.arg(5)).to_i32().unwrap();

//not found in gl!    unsafe { gl::MultiDrawElementsIndirectCount(mode, _type, indirect, drawcount, maxdrawcount, stride) };
}

pub fn retrace_glClipPlanef(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut plane: GLenum;
    plane = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let equation: &mut [GLfloat];
    equation = _allocator.alloc_array::<GLfloat>(&call.arg(1));
    let _a_GLfloat145_0 = (call.arg(1)).to_array();
    if let Some(_a_GLfloat145_0) = _a_GLfloat145_0 {
        for _jGLfloat145 in 0.._a_GLfloat145_0.values.len() {
    equation[_jGLfloat145] = (*_a_GLfloat145_0.values[_jGLfloat145]).to_f32().unwrap();
        }
    }
    let equation = equation.as_mut_ptr();

//not found in gl!    unsafe { gl::ClipPlanef(plane, equation) };
}

pub fn retrace_glFrustumf(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut left: GLfloat;
    left = (call.arg(0)).to_f32().unwrap();

    let mut right: GLfloat;
    right = (call.arg(1)).to_f32().unwrap();

    let mut bottom: GLfloat;
    bottom = (call.arg(2)).to_f32().unwrap();

    let mut top: GLfloat;
    top = (call.arg(3)).to_f32().unwrap();

    let mut zNear: GLfloat;
    zNear = (call.arg(4)).to_f32().unwrap();

    let mut zFar: GLfloat;
    zFar = (call.arg(5)).to_f32().unwrap();

//not found in gl!    unsafe { gl::Frustumf(left, right, bottom, top, zNear, zFar) };
}

pub fn retrace_glOrthof(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut left: GLfloat;
    left = (call.arg(0)).to_f32().unwrap();

    let mut right: GLfloat;
    right = (call.arg(1)).to_f32().unwrap();

    let mut bottom: GLfloat;
    bottom = (call.arg(2)).to_f32().unwrap();

    let mut top: GLfloat;
    top = (call.arg(3)).to_f32().unwrap();

    let mut zNear: GLfloat;
    zNear = (call.arg(4)).to_f32().unwrap();

    let mut zFar: GLfloat;
    zFar = (call.arg(5)).to_f32().unwrap();

//not found in gl!    unsafe { gl::Orthof(left, right, bottom, top, zNear, zFar) };
}

pub fn retrace_glAlphaFuncx(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut func: GLenum;
    func = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut _ref: GLclampx;
    _ref = (call.arg(1)).to_i32().unwrap();

//not found in gl!    unsafe { gl::AlphaFuncx(func, _ref) };
}

pub fn retrace_glClearColorx(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut red: GLclampx;
    red = (call.arg(0)).to_i32().unwrap();

    let mut green: GLclampx;
    green = (call.arg(1)).to_i32().unwrap();

    let mut blue: GLclampx;
    blue = (call.arg(2)).to_i32().unwrap();

    let mut alpha: GLclampx;
    alpha = (call.arg(3)).to_i32().unwrap();

//not found in gl!    unsafe { gl::ClearColorx(red, green, blue, alpha) };
}

pub fn retrace_glClearDepthx(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut depth: GLclampx;
    depth = (call.arg(0)).to_i32().unwrap();

//not found in gl!    unsafe { gl::ClearDepthx(depth) };
}

pub fn retrace_glClipPlanex(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut plane: GLenum;
    plane = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let equation: &mut [GLfixed];
    equation = _allocator.alloc_array::<GLfixed>(&call.arg(1));
    let _a_GLfixed9_0 = (call.arg(1)).to_array();
    if let Some(_a_GLfixed9_0) = _a_GLfixed9_0 {
        for _jGLfixed9 in 0.._a_GLfixed9_0.values.len() {
    equation[_jGLfixed9] = (*_a_GLfixed9_0.values[_jGLfixed9]).to_i32().unwrap();
        }
    }
    let equation = equation.as_mut_ptr();

//not found in gl!    unsafe { gl::ClipPlanex(plane, equation) };
}

pub fn retrace_glColor4x(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut red: GLfixed;
    red = (call.arg(0)).to_i32().unwrap();

    let mut green: GLfixed;
    green = (call.arg(1)).to_i32().unwrap();

    let mut blue: GLfixed;
    blue = (call.arg(2)).to_i32().unwrap();

    let mut alpha: GLfixed;
    alpha = (call.arg(3)).to_i32().unwrap();

//not found in gl!    unsafe { gl::Color4x(red, green, blue, alpha) };
}

pub fn retrace_glDepthRangex(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut zNear: GLclampx;
    zNear = (call.arg(0)).to_i32().unwrap();

    let mut zFar: GLclampx;
    zFar = (call.arg(1)).to_i32().unwrap();

//not found in gl!    unsafe { gl::DepthRangex(zNear, zFar) };
}

pub fn retrace_glFogx(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut pname: GLenum;
    pname = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut param: GLfixed;
    param = (call.arg(1)).to_i32().unwrap();

//not found in gl!    unsafe { gl::Fogx(pname, param) };
}

pub fn retrace_glFogxv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut pname: GLenum;
    pname = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLfixed];
    params = _allocator.alloc_array::<GLfixed>(&call.arg(1));
    let _a_GLfixed10_0 = (call.arg(1)).to_array();
    if let Some(_a_GLfixed10_0) = _a_GLfixed10_0 {
        for _jGLfixed10 in 0.._a_GLfixed10_0.values.len() {
    params[_jGLfixed10] = (*_a_GLfixed10_0.values[_jGLfixed10]).to_i32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::Fogxv(pname, params) };
}

pub fn retrace_glFrustumx(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut left: GLfixed;
    left = (call.arg(0)).to_i32().unwrap();

    let mut right: GLfixed;
    right = (call.arg(1)).to_i32().unwrap();

    let mut bottom: GLfixed;
    bottom = (call.arg(2)).to_i32().unwrap();

    let mut top: GLfixed;
    top = (call.arg(3)).to_i32().unwrap();

    let mut zNear: GLfixed;
    zNear = (call.arg(4)).to_i32().unwrap();

    let mut zFar: GLfixed;
    zFar = (call.arg(5)).to_i32().unwrap();

//not found in gl!    unsafe { gl::Frustumx(left, right, bottom, top, zNear, zFar) };
}

pub fn retrace_glLightModelx(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut pname: GLenum;
    pname = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut param: GLfixed;
    param = (call.arg(1)).to_i32().unwrap();

//not found in gl!    unsafe { gl::LightModelx(pname, param) };
}

pub fn retrace_glLightModelxv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut pname: GLenum;
    pname = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLfixed];
    params = _allocator.alloc_array::<GLfixed>(&call.arg(1));
    let _a_GLfixed11_0 = (call.arg(1)).to_array();
    if let Some(_a_GLfixed11_0) = _a_GLfixed11_0 {
        for _jGLfixed11 in 0.._a_GLfixed11_0.values.len() {
    params[_jGLfixed11] = (*_a_GLfixed11_0.values[_jGLfixed11]).to_i32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::LightModelxv(pname, params) };
}

pub fn retrace_glLightx(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut light: GLenum;
    light = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut param: GLfixed;
    param = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::Lightx(light, pname, param) };
}

pub fn retrace_glLightxv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut light: GLenum;
    light = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLfixed];
    params = _allocator.alloc_array::<GLfixed>(&call.arg(2));
    let _a_GLfixed12_0 = (call.arg(2)).to_array();
    if let Some(_a_GLfixed12_0) = _a_GLfixed12_0 {
        for _jGLfixed12 in 0.._a_GLfixed12_0.values.len() {
    params[_jGLfixed12] = (*_a_GLfixed12_0.values[_jGLfixed12]).to_i32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::Lightxv(light, pname, params) };
}

pub fn retrace_glLineWidthx(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut width: GLfixed;
    width = (call.arg(0)).to_i32().unwrap();

//not found in gl!    unsafe { gl::LineWidthx(width) };
}

pub fn retrace_glLoadMatrixx(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let m: &mut [GLfixed];
    m = _allocator.alloc_array::<GLfixed>(&call.arg(0));
    let _a_GLfixed13_0 = (call.arg(0)).to_array();
    if let Some(_a_GLfixed13_0) = _a_GLfixed13_0 {
        for _jGLfixed13 in 0.._a_GLfixed13_0.values.len() {
    m[_jGLfixed13] = (*_a_GLfixed13_0.values[_jGLfixed13]).to_i32().unwrap();
        }
    }
    let m = m.as_mut_ptr();

//not found in gl!    unsafe { gl::LoadMatrixx(m) };
}

pub fn retrace_glMaterialx(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut face: GLenum;
    face = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut param: GLfixed;
    param = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::Materialx(face, pname, param) };
}

pub fn retrace_glMaterialxv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut face: GLenum;
    face = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLfixed];
    params = _allocator.alloc_array::<GLfixed>(&call.arg(2));
    let _a_GLfixed14_0 = (call.arg(2)).to_array();
    if let Some(_a_GLfixed14_0) = _a_GLfixed14_0 {
        for _jGLfixed14 in 0.._a_GLfixed14_0.values.len() {
    params[_jGLfixed14] = (*_a_GLfixed14_0.values[_jGLfixed14]).to_i32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::Materialxv(face, pname, params) };
}

pub fn retrace_glMultMatrixx(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let m: &mut [GLfixed];
    m = _allocator.alloc_array::<GLfixed>(&call.arg(0));
    let _a_GLfixed15_0 = (call.arg(0)).to_array();
    if let Some(_a_GLfixed15_0) = _a_GLfixed15_0 {
        for _jGLfixed15 in 0.._a_GLfixed15_0.values.len() {
    m[_jGLfixed15] = (*_a_GLfixed15_0.values[_jGLfixed15]).to_i32().unwrap();
        }
    }
    let m = m.as_mut_ptr();

//not found in gl!    unsafe { gl::MultMatrixx(m) };
}

pub fn retrace_glMultiTexCoord4x(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut s: GLfixed;
    s = (call.arg(1)).to_i32().unwrap();

    let mut t: GLfixed;
    t = (call.arg(2)).to_i32().unwrap();

    let mut r: GLfixed;
    r = (call.arg(3)).to_i32().unwrap();

    let mut q: GLfixed;
    q = (call.arg(4)).to_i32().unwrap();

//not found in gl!    unsafe { gl::MultiTexCoord4x(target, s, t, r, q) };
}

pub fn retrace_glNormal3x(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut nx: GLfixed;
    nx = (call.arg(0)).to_i32().unwrap();

    let mut ny: GLfixed;
    ny = (call.arg(1)).to_i32().unwrap();

    let mut nz: GLfixed;
    nz = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::Normal3x(nx, ny, nz) };
}

pub fn retrace_glOrthox(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut left: GLfixed;
    left = (call.arg(0)).to_i32().unwrap();

    let mut right: GLfixed;
    right = (call.arg(1)).to_i32().unwrap();

    let mut bottom: GLfixed;
    bottom = (call.arg(2)).to_i32().unwrap();

    let mut top: GLfixed;
    top = (call.arg(3)).to_i32().unwrap();

    let mut zNear: GLfixed;
    zNear = (call.arg(4)).to_i32().unwrap();

    let mut zFar: GLfixed;
    zFar = (call.arg(5)).to_i32().unwrap();

//not found in gl!    unsafe { gl::Orthox(left, right, bottom, top, zNear, zFar) };
}

pub fn retrace_glPointParameterx(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut pname: GLenum;
    pname = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut param: GLfixed;
    param = (call.arg(1)).to_i32().unwrap();

//not found in gl!    unsafe { gl::PointParameterx(pname, param) };
}

pub fn retrace_glPointParameterxv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut pname: GLenum;
    pname = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLfixed];
    params = _allocator.alloc_array::<GLfixed>(&call.arg(1));
    let _a_GLfixed16_0 = (call.arg(1)).to_array();
    if let Some(_a_GLfixed16_0) = _a_GLfixed16_0 {
        for _jGLfixed16 in 0.._a_GLfixed16_0.values.len() {
    params[_jGLfixed16] = (*_a_GLfixed16_0.values[_jGLfixed16]).to_i32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::PointParameterxv(pname, params) };
}

pub fn retrace_glPointSizex(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut size: GLfixed;
    size = (call.arg(0)).to_i32().unwrap();

//not found in gl!    unsafe { gl::PointSizex(size) };
}

pub fn retrace_glPolygonOffsetx(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut factor: GLfixed;
    factor = (call.arg(0)).to_i32().unwrap();

    let mut units: GLfixed;
    units = (call.arg(1)).to_i32().unwrap();

//not found in gl!    unsafe { gl::PolygonOffsetx(factor, units) };
}

pub fn retrace_glRotatex(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut angle: GLfixed;
    angle = (call.arg(0)).to_i32().unwrap();

    let mut x: GLfixed;
    x = (call.arg(1)).to_i32().unwrap();

    let mut y: GLfixed;
    y = (call.arg(2)).to_i32().unwrap();

    let mut z: GLfixed;
    z = (call.arg(3)).to_i32().unwrap();

//not found in gl!    unsafe { gl::Rotatex(angle, x, y, z) };
}

pub fn retrace_glSampleCoveragex(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut value: GLclampx;
    value = (call.arg(0)).to_i32().unwrap();

    let mut invert: GLboolean;
    invert = (call.arg(1)).to_u32().unwrap() as u8;

//not found in gl!    unsafe { gl::SampleCoveragex(value, invert) };
}

pub fn retrace_glScalex(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut x: GLfixed;
    x = (call.arg(0)).to_i32().unwrap();

    let mut y: GLfixed;
    y = (call.arg(1)).to_i32().unwrap();

    let mut z: GLfixed;
    z = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::Scalex(x, y, z) };
}

pub fn retrace_glTexEnvx(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut param: GLfixed;
    param = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::TexEnvx(target, pname, param) };
}

pub fn retrace_glTexEnvxv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLfixed];
    params = _allocator.alloc_array::<GLfixed>(&call.arg(2));
    let _a_GLfixed17_0 = (call.arg(2)).to_array();
    if let Some(_a_GLfixed17_0) = _a_GLfixed17_0 {
        for _jGLfixed17 in 0.._a_GLfixed17_0.values.len() {
    params[_jGLfixed17] = (*_a_GLfixed17_0.values[_jGLfixed17]).to_i32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::TexEnvxv(target, pname, params) };
}

pub fn retrace_glTexParameterx(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut param: GLfixed;
    param = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::TexParameterx(target, pname, param) };
}

pub fn retrace_glTexParameterxv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLfixed];
    params = _allocator.alloc_array::<GLfixed>(&call.arg(2));
    let _a_GLfixed18_0 = (call.arg(2)).to_array();
    if let Some(_a_GLfixed18_0) = _a_GLfixed18_0 {
        for _jGLfixed18 in 0.._a_GLfixed18_0.values.len() {
    params[_jGLfixed18] = (*_a_GLfixed18_0.values[_jGLfixed18]).to_i32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::TexParameterxv(target, pname, params) };
}

pub fn retrace_glTranslatex(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut x: GLfixed;
    x = (call.arg(0)).to_i32().unwrap();

    let mut y: GLfixed;
    y = (call.arg(1)).to_i32().unwrap();

    let mut z: GLfixed;
    z = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::Translatex(x, y, z) };
}

pub fn retrace_glBlendBarrier(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
//not found in gl!    unsafe { gl::BlendBarrier() };
}

pub fn retrace_glPrimitiveBoundingBox(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut minX: GLfloat;
    minX = (call.arg(0)).to_f32().unwrap();

    let mut minY: GLfloat;
    minY = (call.arg(1)).to_f32().unwrap();

    let mut minZ: GLfloat;
    minZ = (call.arg(2)).to_f32().unwrap();

    let mut minW: GLfloat;
    minW = (call.arg(3)).to_f32().unwrap();

    let mut maxX: GLfloat;
    maxX = (call.arg(4)).to_f32().unwrap();

    let mut maxY: GLfloat;
    maxY = (call.arg(5)).to_f32().unwrap();

    let mut maxZ: GLfloat;
    maxZ = (call.arg(6)).to_f32().unwrap();

    let mut maxW: GLfloat;
    maxW = (call.arg(7)).to_f32().unwrap();

//not found in gl!    unsafe { gl::PrimitiveBoundingBox(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW) };
}

pub fn retrace_glTbufferMask3DFX(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mask: GLuint;
    mask = (call.arg(0)).to_u32().unwrap();

//not found in gl!    unsafe { gl::TbufferMask3DFX(mask) };
}

pub fn retrace_glDebugMessageEnableAMD(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut category: GLenum;
    category = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut severity: GLenum;
    severity = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let ids: &mut [GLuint];
    ids = _allocator.alloc_array::<GLuint>(&call.arg(3));
    let _a_GLuint112_0 = (call.arg(3)).to_array();
    if let Some(_a_GLuint112_0) = _a_GLuint112_0 {
        for _jGLuint112 in 0.._a_GLuint112_0.values.len() {
    ids[_jGLuint112] = (*_a_GLuint112_0.values[_jGLuint112]).to_u32().unwrap();
        }
    }
    let ids = ids.as_mut_ptr();

    let mut enabled: GLboolean;
    enabled = (call.arg(4)).to_u32().unwrap() as u8;

//not found in gl!    unsafe { gl::DebugMessageEnableAMD(category, severity, count, ids, enabled) };
}

pub fn retrace_glDebugMessageInsertAMD(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut category: GLenum;
    category = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut severity: GLenum;
    severity = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut id: GLuint;
    id = (call.arg(2)).to_u32().unwrap();

    let mut length: GLsizei;
    length = (call.arg(3)).to_i32().unwrap();

    let buf: &mut [GLchar];
    buf = (call.arg(4)).to_string().unwrap();

//not found in gl!    unsafe { gl::DebugMessageInsertAMD(category, severity, id, length, buf) };
}

pub fn retrace_glBlendFuncIndexedAMD(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut buf: GLuint;
    buf = (call.arg(0)).to_u32().unwrap();

    let mut src: GLenum;
    src = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut dst: GLenum;
    dst = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::BlendFuncIndexedAMD(buf, src, dst) };
}

pub fn retrace_glBlendFuncSeparateIndexedAMD(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut buf: GLuint;
    buf = (call.arg(0)).to_u32().unwrap();

    let mut srcRGB: GLenum;
    srcRGB = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut dstRGB: GLenum;
    dstRGB = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut srcAlpha: GLenum;
    srcAlpha = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let mut dstAlpha: GLenum;
    dstAlpha = (call.arg(4)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::BlendFuncSeparateIndexedAMD(buf, srcRGB, dstRGB, srcAlpha, dstAlpha) };
}

pub fn retrace_glBlendEquationIndexedAMD(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut buf: GLuint;
    buf = (call.arg(0)).to_u32().unwrap();

    let mut mode: GLenum;
    mode = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::BlendEquationIndexedAMD(buf, mode) };
}

pub fn retrace_glBlendEquationSeparateIndexedAMD(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut buf: GLuint;
    buf = (call.arg(0)).to_u32().unwrap();

    let mut modeRGB: GLenum;
    modeRGB = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut modeAlpha: GLenum;
    modeAlpha = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::BlendEquationSeparateIndexedAMD(buf, modeRGB, modeAlpha) };
}

pub fn retrace_glVertexAttribParameteriAMD(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut param: GLint;
    param = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::VertexAttribParameteriAMD(index, pname, param) };
}

pub fn retrace_glMultiDrawArraysIndirectAMD(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let indirect: &mut [GLc_void];
    indirect = region::to_pointer(call.arg(1));

    let mut drawcount: GLsizei;
    drawcount = (call.arg(2)).to_i32().unwrap();

    let mut stride: GLsizei;
    stride = (call.arg(3)).to_i32().unwrap();

//not found in gl!    unsafe { gl::MultiDrawArraysIndirectAMD(mode, indirect, drawcount, stride) };
}

pub fn retrace_glMultiDrawElementsIndirectAMD(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let indirect: &mut [GLc_void];
    indirect = region::to_pointer(call.arg(2));

    let mut drawcount: GLsizei;
    drawcount = (call.arg(3)).to_i32().unwrap();

    let mut stride: GLsizei;
    stride = (call.arg(4)).to_i32().unwrap();

//not found in gl!    unsafe { gl::MultiDrawElementsIndirectAMD(mode, _type, indirect, drawcount, stride) };
}

pub fn retrace_glGenNamesAMD(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut identifier: GLenum;
    identifier = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut num: GLuint;
    num = (call.arg(1)).to_u32().unwrap();

    let names: &mut [GLuint];
    names = _allocator.alloc_array::<GLuint>(&call.arg(2));

//not found in gl!    unsafe { gl::GenNamesAMD(identifier, num, names) };
    let _aGLuint114 = (call.arg(2)).to_array();
    if (_aGLuint114) {
        for _jGLuint114 in 0.._aGLuint114.values.len() {
        }
    }
}

pub fn retrace_glDeleteNamesAMD(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut identifier: GLenum;
    identifier = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut num: GLuint;
    num = (call.arg(1)).to_u32().unwrap();

    let names: &mut [GLuint];
    names = _allocator.alloc_array::<GLuint>(&call.arg(2));
    let _a_GLuint115_0 = (call.arg(2)).to_array();
    if let Some(_a_GLuint115_0) = _a_GLuint115_0 {
        for _jGLuint115 in 0.._a_GLuint115_0.values.len() {
    names[_jGLuint115] = (*_a_GLuint115_0.values[_jGLuint115]).to_u32().unwrap();
        }
    }
    let names = names.as_mut_ptr();

//not found in gl!    unsafe { gl::DeleteNamesAMD(identifier, num, names) };
}

pub fn retrace_glQueryObjectParameteruiAMD(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut id: GLuint;
    id = (call.arg(1)).to_u32().unwrap();
    id = self._query_map[id];

    let mut pname: GLenum;
    pname = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut param: GLuint;
    param = (call.arg(3)).to_u32().unwrap();

//not found in gl!    unsafe { gl::QueryObjectParameteruiAMD(target, id, pname, param) };
}

pub fn retrace_glGenPerfMonitorsAMD(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut n: GLsizei;
    n = (call.arg(0)).to_i32().unwrap();

    let monitors: &mut [GLuint];
    monitors = _allocator.alloc_array::<GLuint>(&call.arg(1));

//not found in gl!    unsafe { gl::GenPerfMonitorsAMD(n, monitors) };
    let _aGLuint117 = (call.arg(1)).to_array();
    if (_aGLuint117) {
        for _jGLuint117 in 0.._aGLuint117.values.len() {
        }
    }
}

pub fn retrace_glDeletePerfMonitorsAMD(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut n: GLsizei;
    n = (call.arg(0)).to_i32().unwrap();

    let monitors: &mut [GLuint];
    monitors = _allocator.alloc_array::<GLuint>(&call.arg(1));
    let _a_GLuint118_0 = (call.arg(1)).to_array();
    if let Some(_a_GLuint118_0) = _a_GLuint118_0 {
        for _jGLuint118 in 0.._a_GLuint118_0.values.len() {
    monitors[_jGLuint118] = (*_a_GLuint118_0.values[_jGLuint118]).to_u32().unwrap();
        }
    }
    let monitors = monitors.as_mut_ptr();

//not found in gl!    unsafe { gl::DeletePerfMonitorsAMD(n, monitors) };
}

pub fn retrace_glSelectPerfMonitorCountersAMD(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut monitor: GLuint;
    monitor = (call.arg(0)).to_u32().unwrap();

    let mut enable: GLboolean;
    enable = (call.arg(1)).to_u32().unwrap() as u8;

    let mut group: GLuint;
    group = (call.arg(2)).to_u32().unwrap();

    let mut numCounters: GLint;
    numCounters = (call.arg(3)).to_i32().unwrap();

    let counterList: &mut [GLuint];
    counterList = _allocator.alloc_array::<GLuint>(&call.arg(4));
    let _a_GLuint119_0 = (call.arg(4)).to_array();
    if let Some(_a_GLuint119_0) = _a_GLuint119_0 {
        for _jGLuint119 in 0.._a_GLuint119_0.values.len() {
    counterList[_jGLuint119] = (*_a_GLuint119_0.values[_jGLuint119]).to_u32().unwrap();
        }
    }
    let counterList = counterList.as_mut_ptr();

//not found in gl!    unsafe { gl::SelectPerfMonitorCountersAMD(monitor, enable, group, numCounters, counterList) };
}

pub fn retrace_glBeginPerfMonitorAMD(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut monitor: GLuint;
    monitor = (call.arg(0)).to_u32().unwrap();

//not found in gl!    unsafe { gl::BeginPerfMonitorAMD(monitor) };
}

pub fn retrace_glEndPerfMonitorAMD(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut monitor: GLuint;
    monitor = (call.arg(0)).to_u32().unwrap();

//not found in gl!    unsafe { gl::EndPerfMonitorAMD(monitor) };
}

pub fn retrace_glSetMultisamplefvAMD(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut pname: GLenum;
    pname = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut index: GLuint;
    index = (call.arg(1)).to_u32().unwrap();

    let val: &mut [GLfloat];
    val = _allocator.alloc_array::<GLfloat>(&call.arg(2));
    let _a_GLfloat146_0 = (call.arg(2)).to_array();
    if let Some(_a_GLfloat146_0) = _a_GLfloat146_0 {
        for _jGLfloat146 in 0.._a_GLfloat146_0.values.len() {
    val[_jGLfloat146] = (*_a_GLfloat146_0.values[_jGLfloat146]).to_f32().unwrap();
        }
    }
    let val = val.as_mut_ptr();

//not found in gl!    unsafe { gl::SetMultisamplefvAMD(pname, index, val) };
}

pub fn retrace_glTexStorageSparseAMD(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut internalFormat: GLenum;
    internalFormat = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut width: GLsizei;
    width = (call.arg(2)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(3)).to_i32().unwrap();

    let mut depth: GLsizei;
    depth = (call.arg(4)).to_i32().unwrap();

    let mut layers: GLsizei;
    layers = (call.arg(5)).to_i32().unwrap();

    let mut flags: GLbitfield;
    flags = (call.arg(6)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::TexStorageSparseAMD(target, internalFormat, width, height, depth, layers, flags) };
}

pub fn retrace_glTextureStorageSparseAMD(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut internalFormat: GLenum;
    internalFormat = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut width: GLsizei;
    width = (call.arg(3)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(4)).to_i32().unwrap();

    let mut depth: GLsizei;
    depth = (call.arg(5)).to_i32().unwrap();

    let mut layers: GLsizei;
    layers = (call.arg(6)).to_i32().unwrap();

    let mut flags: GLbitfield;
    flags = (call.arg(7)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::TextureStorageSparseAMD(texture, target, internalFormat, width, height, depth, layers, flags) };
}

pub fn retrace_glStencilOpValueAMD(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut face: GLenum;
    face = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut value: GLuint;
    value = (call.arg(1)).to_u32().unwrap();

//not found in gl!    unsafe { gl::StencilOpValueAMD(face, value) };
}

pub fn retrace_glTessellationFactorAMD(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut factor: GLfloat;
    factor = (call.arg(0)).to_f32().unwrap();

//not found in gl!    unsafe { gl::TessellationFactorAMD(factor) };
}

pub fn retrace_glTessellationModeAMD(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::TessellationModeAMD(mode) };
}

pub fn retrace_glBlitFramebufferANGLE(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut srcX0: GLint;
    srcX0 = (call.arg(0)).to_i32().unwrap();

    let mut srcY0: GLint;
    srcY0 = (call.arg(1)).to_i32().unwrap();

    let mut srcX1: GLint;
    srcX1 = (call.arg(2)).to_i32().unwrap();

    let mut srcY1: GLint;
    srcY1 = (call.arg(3)).to_i32().unwrap();

    let mut dstX0: GLint;
    dstX0 = (call.arg(4)).to_i32().unwrap();

    let mut dstY0: GLint;
    dstY0 = (call.arg(5)).to_i32().unwrap();

    let mut dstX1: GLint;
    dstX1 = (call.arg(6)).to_i32().unwrap();

    let mut dstY1: GLint;
    dstY1 = (call.arg(7)).to_i32().unwrap();

    let mut mask: GLbitfield;
    mask = (call.arg(8)).to_u32().unwrap().try_into().unwrap();

    let mut filter: GLenum;
    filter = (call.arg(9)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::BlitFramebufferANGLE(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) };
}

pub fn retrace_glRenderbufferStorageMultisampleANGLE(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut samples: GLsizei;
    samples = (call.arg(1)).to_i32().unwrap();
    let max_samples = 0;
//not found in gl!    unsafe { gl::GetIntegerv(gl::MAX_SAMPLES, &max_samples) };
    if samples > max_samples {
        samples = max_samples;
    }

    let mut internalformat: GLenum;
    internalformat = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut width: GLsizei;
    width = (call.arg(3)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(4)).to_i32().unwrap();

//not found in gl!    unsafe { gl::RenderbufferStorageMultisampleANGLE(target, samples, internalformat, width, height) };
}

pub fn retrace_glDrawArraysInstancedANGLE(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut first: GLint;
    first = (call.arg(1)).to_i32().unwrap();

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let mut instancecount: GLsizei;
    instancecount = (call.arg(3)).to_i32().unwrap();

//not found in gl!    unsafe { gl::DrawArraysInstancedANGLE(mode, first, count, instancecount) };
}

pub fn retrace_glDrawElementsInstancedANGLE(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let indices: &mut [GLc_void];
            indices = (call.arg(3)).to_pointer().unwrap() as *mut c_void;

    let mut instancecount: GLsizei;
    instancecount = (call.arg(4)).to_i32().unwrap();

//not found in gl!    unsafe { gl::DrawElementsInstancedANGLE(mode, count, _type, indices, instancecount) };
}

pub fn retrace_glVertexAttribDivisorANGLE(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut divisor: GLuint;
    divisor = (call.arg(1)).to_u32().unwrap();

//not found in gl!    unsafe { gl::VertexAttribDivisorANGLE(index, divisor) };
}

pub fn retrace_glGenQueriesANGLE(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut n: GLsizei;
    n = (call.arg(0)).to_i32().unwrap();

    let ids: &mut [GLuint];
    ids = _allocator.alloc_array::<GLuint>(&call.arg(1));

//not found in gl!    unsafe { gl::GenQueriesANGLE(n, ids) };
    let _aGLuint121 = (call.arg(1)).to_array();
    if (_aGLuint121) {
        for _jGLuint121 in 0.._aGLuint121.values.len() {
    let _origResult: GLuint;
    _origResult = (_aGLuint121.values[_jGLuint121]).to_u32().unwrap();
    self._query_map[_origResult] = ids[_jGLuint121]; 
        }
    }
}

pub fn retrace_glDeleteQueriesANGLE(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut n: GLsizei;
    n = (call.arg(0)).to_i32().unwrap();

    let ids: &mut [GLuint];
    ids = _allocator.alloc_array::<GLuint>(&call.arg(1));
    let _a_GLuint122_0 = (call.arg(1)).to_array();
    if let Some(_a_GLuint122_0) = _a_GLuint122_0 {
        for _jGLuint122 in 0.._a_GLuint122_0.values.len() {
    ids[_jGLuint122] = (*_a_GLuint122_0.values[_jGLuint122]).to_u32().unwrap();
    ids[_jGLuint122] = self._query_map[ids[_jGLuint122]];
        }
    }
    let ids = ids.as_mut_ptr();

//not found in gl!    unsafe { gl::DeleteQueriesANGLE(n, ids) };
}

pub fn retrace_glBeginQueryANGLE(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut id: GLuint;
    id = (call.arg(1)).to_u32().unwrap();
    id = self._query_map[id];

//not found in gl!    unsafe { gl::BeginQueryANGLE(target, id) };
}

pub fn retrace_glEndQueryANGLE(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::EndQueryANGLE(target) };
}

pub fn retrace_glQueryCounterANGLE(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut id: GLuint;
    id = (call.arg(0)).to_u32().unwrap();
    id = self._query_map[id];

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::QueryCounterANGLE(id, target) };
}

pub fn retrace_glGetQueryObjectivANGLE(&mut self, call: &mut Call) {
    let _query_buffer = 0;
    if self.context.features("query_buffer_object") {
//not found in gl!        unsafe { gl::GetIntegerv(gl::QUERY_BUFFER_BINDING, &_query_buffer) };
    }
    if (_query_buffer == 0 && retrace::queryHandling == retrace::QUERY_SKIP) {
        return;
    }
'wait_for_query_result: loop {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut id: GLuint;
    id = (call.arg(0)).to_u32().unwrap();
    id = self._query_map[id];

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLint];
    let retval: GLint = 0;
    if _query_buffer != 0 {
        params = (call.arg(2)).to_pointer();
    } else {
        params = retval };

//not found in gl!    unsafe { gl::GetQueryObjectivANGLE(id, pname, params) };
    let _aGLint175 = (call.arg(2)).to_array();
    if (_aGLint175) {
        for _jGLint175 in 0.._aGLint175.values.len() {
        }
    }
    if _query_buffer == 0 && queryHandling != QUERY_SKIP {
        let query_result = call.arg(2).to_array().unwrap();
        let expect = query_result.values[0].to_u32().unwrap();
        if call.arg(1).to_u32().unwrap() == gl::QUERY_RESULT_AVAILABLE {
            if expect == 1 && retval == 0 {
                continue 'wait_for_query_result;
        }} else if queryHandling == QUERY_RUN_AND_CHECK_RESULT {
            let diff = (expect as i64 - retval as i64).abs(); 
            if diff > 0 as i64 {
                println!("Warning: query returned {}  but trace contained {} (tol = {})", retval, expect, retrace::queryTolerance);
            }
        }
    break 'wait_for_query_result;
    }
}
}

pub fn retrace_glGetQueryObjectuivANGLE(&mut self, call: &mut Call) {
    let _query_buffer = 0;
    if self.context.features("query_buffer_object") {
//not found in gl!        unsafe { gl::GetIntegerv(gl::QUERY_BUFFER_BINDING, &_query_buffer) };
    }
    if (_query_buffer == 0 && retrace::queryHandling == retrace::QUERY_SKIP) {
        return;
    }
'wait_for_query_result: loop {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut id: GLuint;
    id = (call.arg(0)).to_u32().unwrap();
    id = self._query_map[id];

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLuint];
    let retval: GLuint = 0;
    if _query_buffer != 0 {
        params = (call.arg(2)).to_pointer();
    } else {
        params = retval };

//not found in gl!    unsafe { gl::GetQueryObjectuivANGLE(id, pname, params) };
    let _aGLuint124 = (call.arg(2)).to_array();
    if (_aGLuint124) {
        for _jGLuint124 in 0.._aGLuint124.values.len() {
        }
    }
    if _query_buffer == 0 && queryHandling != QUERY_SKIP {
        let query_result = call.arg(2).to_array().unwrap();
        let expect = query_result.values[0].to_u32().unwrap();
        if call.arg(1).to_u32().unwrap() == gl::QUERY_RESULT_AVAILABLE {
            if expect == 1 && retval == 0 {
                continue 'wait_for_query_result;
        }} else if queryHandling == QUERY_RUN_AND_CHECK_RESULT {
            let diff = (expect as i64 - retval as i64).abs(); 
            if diff > 0 as i64 {
                println!("Warning: query returned {}  but trace contained {} (tol = {})", retval, expect, retrace::queryTolerance);
            }
        }
    break 'wait_for_query_result;
    }
}
}

pub fn retrace_glGetQueryObjecti64vANGLE(&mut self, call: &mut Call) {
    let _query_buffer = 0;
    if self.context.features("query_buffer_object") {
//not found in gl!        unsafe { gl::GetIntegerv(gl::QUERY_BUFFER_BINDING, &_query_buffer) };
    }
    if (_query_buffer == 0 && retrace::queryHandling == retrace::QUERY_SKIP) {
        return;
    }
'wait_for_query_result: loop {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut id: GLuint;
    id = (call.arg(0)).to_u32().unwrap();
    id = self._query_map[id];

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLint64];
    let retval: GLint64 = 0;
    if _query_buffer != 0 {
        params = (call.arg(2)).to_pointer();
    } else {
        params = retval };

//not found in gl!    unsafe { gl::GetQueryObjecti64vANGLE(id, pname, params) };
    let _aGLint6413 = (call.arg(2)).to_array();
    if (_aGLint6413) {
        for _jGLint6413 in 0.._aGLint6413.values.len() {
        }
    }
    if _query_buffer == 0 && queryHandling != QUERY_SKIP {
        let query_result = call.arg(2).to_array().unwrap();
        let expect = query_result.values[0].to_u32().unwrap();
        if call.arg(1).to_u32().unwrap() == gl::QUERY_RESULT_AVAILABLE {
            if expect == 1 && retval == 0 {
                continue 'wait_for_query_result;
        }} else if queryHandling == QUERY_RUN_AND_CHECK_RESULT {
            let diff = (expect as i64 - retval as i64).abs(); 
            if diff > 0 as i64 {
                println!("Warning: query returned {}  but trace contained {} (tol = {})", retval, expect, retrace::queryTolerance);
            }
        }
    break 'wait_for_query_result;
    }
}
}

pub fn retrace_glGetQueryObjectui64vANGLE(&mut self, call: &mut Call) {
    let _query_buffer = 0;
    if self.context.features("query_buffer_object") {
//not found in gl!        unsafe { gl::GetIntegerv(gl::QUERY_BUFFER_BINDING, &_query_buffer) };
    }
    if (_query_buffer == 0 && retrace::queryHandling == retrace::QUERY_SKIP) {
        return;
    }
'wait_for_query_result: loop {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut id: GLuint;
    id = (call.arg(0)).to_u32().unwrap();
    id = self._query_map[id];

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLuint64];
    let retval: GLuint64 = 0;
    if _query_buffer != 0 {
        params = (call.arg(2)).to_pointer();
    } else {
        params = retval };

//not found in gl!    unsafe { gl::GetQueryObjectui64vANGLE(id, pname, params) };
    let _aGLuint648 = (call.arg(2)).to_array();
    if (_aGLuint648) {
        for _jGLuint648 in 0.._aGLuint648.values.len() {
        }
    }
    if _query_buffer == 0 && queryHandling != QUERY_SKIP {
        let query_result = call.arg(2).to_array().unwrap();
        let expect = query_result.values[0].to_u32().unwrap();
        if call.arg(1).to_u32().unwrap() == gl::QUERY_RESULT_AVAILABLE {
            if expect == 1 && retval == 0 {
                continue 'wait_for_query_result;
        }} else if queryHandling == QUERY_RUN_AND_CHECK_RESULT {
            let diff = (expect as i64 - retval as i64).abs(); 
            if diff > 0 as i64 {
                println!("Warning: query returned {}  but trace contained {} (tol = {})", retval, expect, retrace::queryTolerance);
            }
        }
    break 'wait_for_query_result;
    }
}
}

pub fn retrace_glCopyTextureLevelsAPPLE(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut destinationTexture: GLuint;
    destinationTexture = (call.arg(0)).to_u32().unwrap();
    destinationTexture = self._texture_map[destinationTexture];

    let mut sourceTexture: GLuint;
    sourceTexture = (call.arg(1)).to_u32().unwrap();
    sourceTexture = self._texture_map[sourceTexture];

    let mut sourceBaseLevel: GLint;
    sourceBaseLevel = (call.arg(2)).to_i32().unwrap();

    let mut sourceLevelCount: GLsizei;
    sourceLevelCount = (call.arg(3)).to_i32().unwrap();

//not found in gl!    unsafe { gl::CopyTextureLevelsAPPLE(destinationTexture, sourceTexture, sourceBaseLevel, sourceLevelCount) };
}

pub fn retrace_glElementPointerAPPLE(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut _type: GLenum;
    _type = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let pointer: &mut [GLc_void];
    let pointer = (call.arg(1)).to_pointer().unwrap() as *mut c_void;

//not found in gl!    unsafe { gl::ElementPointerAPPLE(_type, pointer) };
}

pub fn retrace_glDrawElementArrayAPPLE(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut first: GLint;
    first = (call.arg(1)).to_i32().unwrap();

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::DrawElementArrayAPPLE(mode, first, count) };
}

pub fn retrace_glDrawRangeElementArrayAPPLE(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut start: GLuint;
    start = (call.arg(1)).to_u32().unwrap();

    let mut end: GLuint;
    end = (call.arg(2)).to_u32().unwrap();

    let mut first: GLint;
    first = (call.arg(3)).to_i32().unwrap();

    let mut count: GLsizei;
    count = (call.arg(4)).to_i32().unwrap();

//not found in gl!    unsafe { gl::DrawRangeElementArrayAPPLE(mode, start, end, first, count) };
}

pub fn retrace_glMultiDrawElementArrayAPPLE(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let first: &mut [GLint];
    first = _allocator.alloc_array::<GLint>(&call.arg(1));
    let _a_GLint176_0 = (call.arg(1)).to_array();
    if let Some(_a_GLint176_0) = _a_GLint176_0 {
        for _jGLint176 in 0.._a_GLint176_0.values.len() {
    first[_jGLint176] = (*_a_GLint176_0.values[_jGLint176]).to_i32().unwrap();
        }
    }
    let first = first.as_mut_ptr();

    let count: &mut [GLsizei];
    count = _allocator.alloc_array::<GLsizei>(&call.arg(2));
    let _a_GLsizei7_0 = (call.arg(2)).to_array();
    if let Some(_a_GLsizei7_0) = _a_GLsizei7_0 {
        for _jGLsizei7 in 0.._a_GLsizei7_0.values.len() {
    count[_jGLsizei7] = (*_a_GLsizei7_0.values[_jGLsizei7]).to_i32().unwrap();
        }
    }
    let count = count.as_mut_ptr();

    let mut drawcount: GLsizei;
    drawcount = (call.arg(3)).to_i32().unwrap();

//not found in gl!    unsafe { gl::MultiDrawElementArrayAPPLE(mode, first, count, drawcount) };
}

pub fn retrace_glMultiDrawRangeElementArrayAPPLE(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut start: GLuint;
    start = (call.arg(1)).to_u32().unwrap();

    let mut end: GLuint;
    end = (call.arg(2)).to_u32().unwrap();

    let first: &mut [GLint];
    first = _allocator.alloc_array::<GLint>(&call.arg(3));
    let _a_GLint177_0 = (call.arg(3)).to_array();
    if let Some(_a_GLint177_0) = _a_GLint177_0 {
        for _jGLint177 in 0.._a_GLint177_0.values.len() {
    first[_jGLint177] = (*_a_GLint177_0.values[_jGLint177]).to_i32().unwrap();
        }
    }
    let first = first.as_mut_ptr();

    let count: &mut [GLsizei];
    count = _allocator.alloc_array::<GLsizei>(&call.arg(4));
    let _a_GLsizei8_0 = (call.arg(4)).to_array();
    if let Some(_a_GLsizei8_0) = _a_GLsizei8_0 {
        for _jGLsizei8 in 0.._a_GLsizei8_0.values.len() {
    count[_jGLsizei8] = (*_a_GLsizei8_0.values[_jGLsizei8]).to_i32().unwrap();
        }
    }
    let count = count.as_mut_ptr();

    let mut drawcount: GLsizei;
    drawcount = (call.arg(5)).to_i32().unwrap();

//not found in gl!    unsafe { gl::MultiDrawRangeElementArrayAPPLE(mode, start, end, first, count, drawcount) };
}

pub fn retrace_glGenFencesAPPLE(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut n: GLsizei;
    n = (call.arg(0)).to_i32().unwrap();

    let fences: &mut [GLuint];
    fences = _allocator.alloc_array::<GLuint>(&call.arg(1));

//not found in gl!    unsafe { gl::GenFencesAPPLE(n, fences) };
    let _aGLuint126 = (call.arg(1)).to_array();
    if (_aGLuint126) {
        for _jGLuint126 in 0.._aGLuint126.values.len() {
    let _origResult: GLuint;
    _origResult = (_aGLuint126.values[_jGLuint126]).to_u32().unwrap();
    self._fence_map[_origResult] = fences[_jGLuint126]; 
        }
    }
}

pub fn retrace_glDeleteFencesAPPLE(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut n: GLsizei;
    n = (call.arg(0)).to_i32().unwrap();

    let fences: &mut [GLuint];
    fences = _allocator.alloc_array::<GLuint>(&call.arg(1));
    let _a_GLuint127_0 = (call.arg(1)).to_array();
    if let Some(_a_GLuint127_0) = _a_GLuint127_0 {
        for _jGLuint127 in 0.._a_GLuint127_0.values.len() {
    fences[_jGLuint127] = (*_a_GLuint127_0.values[_jGLuint127]).to_u32().unwrap();
    fences[_jGLuint127] = self._fence_map[fences[_jGLuint127]];
        }
    }
    let fences = fences.as_mut_ptr();

//not found in gl!    unsafe { gl::DeleteFencesAPPLE(n, fences) };
}

pub fn retrace_glSetFenceAPPLE(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut fence: GLuint;
    fence = (call.arg(0)).to_u32().unwrap();
    fence = self._fence_map[fence];

//not found in gl!    unsafe { gl::SetFenceAPPLE(fence) };
}

pub fn retrace_glTestFenceAPPLE(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut fence: GLuint;
    fence = (call.arg(0)).to_u32().unwrap();
    fence = self._fence_map[fence];

//not found in gl!    let _result = unsafe { gl::TestFenceAPPLE(fence) };

}

pub fn retrace_glFinishFenceAPPLE(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut fence: GLuint;
    fence = (call.arg(0)).to_u32().unwrap();
    fence = self._fence_map[fence];

//not found in gl!    unsafe { gl::FinishFenceAPPLE(fence) };
}

pub fn retrace_glTestObjectAPPLE(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut object: GLenum;
    object = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut name: GLuint;
    name = (call.arg(1)).to_u32().unwrap();

//not found in gl!    let _result = unsafe { gl::TestObjectAPPLE(object, name) };

}

pub fn retrace_glFinishObjectAPPLE(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut object: GLenum;
    object = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut name: GLint;
    name = (call.arg(1)).to_i32().unwrap();

//not found in gl!    unsafe { gl::FinishObjectAPPLE(object, name) };
}

pub fn retrace_glBufferParameteriAPPLE(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut param: GLint;
    param = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::BufferParameteriAPPLE(target, pname, param) };
}

pub fn retrace_glFlushMappedBufferRangeAPPLE(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut offset: GLintptr;
    offset = (call.arg(1)).to_i32().unwrap();

    let mut size: GLsizeiptr;
    size = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::FlushMappedBufferRangeAPPLE(target, offset, size) };
}

pub fn retrace_glFlushRenderAPPLE(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
//not found in gl!    unsafe { gl::FlushRenderAPPLE() };
}

pub fn retrace_glFinishRenderAPPLE(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
//not found in gl!    unsafe { gl::FinishRenderAPPLE() };
}

pub fn retrace_glSwapAPPLE(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
//not found in gl!    unsafe { gl::SwapAPPLE() };
}

pub fn retrace_glRenderbufferStorageMultisampleAPPLE(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut samples: GLsizei;
    samples = (call.arg(1)).to_i32().unwrap();
    let max_samples = 0;
//not found in gl!    unsafe { gl::GetIntegerv(gl::MAX_SAMPLES, &max_samples) };
    if samples > max_samples {
        samples = max_samples;
    }

    let mut internalformat: GLenum;
    internalformat = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut width: GLsizei;
    width = (call.arg(3)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(4)).to_i32().unwrap();

//not found in gl!    unsafe { gl::RenderbufferStorageMultisampleAPPLE(target, samples, internalformat, width, height) };
}

pub fn retrace_glResolveMultisampleFramebufferAPPLE(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
//not found in gl!    unsafe { gl::ResolveMultisampleFramebufferAPPLE() };
}

pub fn retrace_glObjectPurgeableAPPLE(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut objectType: GLenum;
    objectType = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut name: GLuint;
    name = (call.arg(1)).to_u32().unwrap();

    let mut option: GLenum;
    option = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    let _result = unsafe { gl::ObjectPurgeableAPPLE(objectType, name, option) };

}

pub fn retrace_glObjectUnpurgeableAPPLE(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut objectType: GLenum;
    objectType = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut name: GLuint;
    name = (call.arg(1)).to_u32().unwrap();

    let mut option: GLenum;
    option = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    let _result = unsafe { gl::ObjectUnpurgeableAPPLE(objectType, name, option) };

}

pub fn retrace_glPointSizePointerAPPLE(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut _type: GLenum;
    _type = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut stride: GLsizei;
    stride = (call.arg(1)).to_i32().unwrap();

    let pointer: &mut [GLc_void];
//FIXME    memset(&pointer, 0, sizeof pointer); 

    if (1) {
    }
//not found in gl!    unsafe { gl::PointSizePointerAPPLE(_type, stride, pointer) };
}

pub fn retrace_glVertexPointSizefAPPLE(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut size: GLfloat;
    size = (call.arg(0)).to_f32().unwrap();

//not found in gl!    unsafe { gl::VertexPointSizefAPPLE(size) };
}

pub fn retrace_glFenceSyncAPPLE(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut condition: GLenum;
    condition = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut flags: GLbitfield;
    flags = (call.arg(1)).to_u32().unwrap();

//not found in gl!    let _result = unsafe { gl::FenceSyncAPPLE(condition, flags) };

    self.context.needs_flush = true;
    let _origResult: GLsync;
    let _origResult = (*call.ret).to_pointer().unwrap() as *mut c_void;
    self._sync_map[_origResult] = _result; 
}

pub fn retrace_glDeleteSyncAPPLE(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut sync: GLsync;
    let sync = (call.arg(0)).to_pointer().unwrap() as *mut c_void;
    sync = self._sync_map[sync];

//not found in gl!    unsafe { gl::DeleteSyncAPPLE(sync) };
}

pub fn retrace_glClientWaitSyncAPPLE(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut sync: GLsync;
    let sync = (call.arg(0)).to_pointer().unwrap() as *mut c_void;
    sync = self._sync_map[sync];

    let mut flags: GLbitfield;
    flags = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut timeout: GLuint64;
    timeout = (call.arg(2)).to_u32().unwrap();

//not found in gl!    let _result = unsafe { gl::ClientWaitSyncAPPLE(sync, flags, timeout) };

}

pub fn retrace_glWaitSyncAPPLE(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut sync: GLsync;
    let sync = (call.arg(0)).to_pointer().unwrap() as *mut c_void;
    sync = self._sync_map[sync];

    let mut flags: GLbitfield;
    flags = (call.arg(1)).to_u32().unwrap();

    let mut timeout: GLuint64;
    timeout = (call.arg(2)).to_u32().unwrap();

//not found in gl!    unsafe { gl::WaitSyncAPPLE(sync, flags, timeout) };
}

pub fn retrace_glTextureRangeAPPLE(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut length: GLsizei;
    length = (call.arg(1)).to_i32().unwrap();

    let pointer: &mut [GLc_void];
    let pointer = (call.arg(2)).to_pointer().unwrap() as *mut c_void;

//not found in gl!    unsafe { gl::TextureRangeAPPLE(target, length, pointer) };
}

pub fn retrace_glBindVertexArrayAPPLE(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut array: GLuint;
    array = (call.arg(0)).to_u32().unwrap();
    array = self._arrayAPPLE_map[array];

//not found in gl!    unsafe { gl::BindVertexArrayAPPLE(array) };
}

pub fn retrace_glDeleteVertexArraysAPPLE(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut n: GLsizei;
    n = (call.arg(0)).to_i32().unwrap();

    let arrays: &mut [GLuint];
    arrays = _allocator.alloc_array::<GLuint>(&call.arg(1));
    let _a_GLuint128_0 = (call.arg(1)).to_array();
    if let Some(_a_GLuint128_0) = _a_GLuint128_0 {
        for _jGLuint128 in 0.._a_GLuint128_0.values.len() {
    arrays[_jGLuint128] = (*_a_GLuint128_0.values[_jGLuint128]).to_u32().unwrap();
    arrays[_jGLuint128] = self._arrayAPPLE_map[arrays[_jGLuint128]];
        }
    }
    let arrays = arrays.as_mut_ptr();

//not found in gl!    unsafe { gl::DeleteVertexArraysAPPLE(n, arrays) };
}

pub fn retrace_glGenVertexArraysAPPLE(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut n: GLsizei;
    n = (call.arg(0)).to_i32().unwrap();

    let arrays: &mut [GLuint];
    arrays = _allocator.alloc_array::<GLuint>(&call.arg(1));

//not found in gl!    unsafe { gl::GenVertexArraysAPPLE(n, arrays) };
    let _aGLuint130 = (call.arg(1)).to_array();
    if (_aGLuint130) {
        for _jGLuint130 in 0.._aGLuint130.values.len() {
    let _origResult: GLuint;
    _origResult = (_aGLuint130.values[_jGLuint130]).to_u32().unwrap();
    self._arrayAPPLE_map[_origResult] = arrays[_jGLuint130]; 
        }
    }
}

pub fn retrace_glVertexArrayRangeAPPLE(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut length: GLsizei;
    length = (call.arg(0)).to_i32().unwrap();

    let pointer: &mut [GLc_void];
//FIXME    memset(&pointer, 0, sizeof pointer); 

    if (1) {
    }
//not found in gl!    unsafe { gl::VertexArrayRangeAPPLE(length, pointer) };
}

pub fn retrace_glFlushVertexArrayRangeAPPLE(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut length: GLsizei;
    length = (call.arg(0)).to_i32().unwrap();

    let pointer: &mut [GLc_void];
//FIXME    memset(&pointer, 0, sizeof pointer); 

    if (1) {
    }
//not found in gl!    unsafe { gl::FlushVertexArrayRangeAPPLE(length, pointer) };
}

pub fn retrace_glVertexArrayParameteriAPPLE(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut pname: GLenum;
    pname = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut param: GLint;
    param = (call.arg(1)).to_i32().unwrap();

//not found in gl!    unsafe { gl::VertexArrayParameteriAPPLE(pname, param) };
}

pub fn retrace_glEnableVertexAttribAPPLE(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::EnableVertexAttribAPPLE(index, pname) };
}

pub fn retrace_glDisableVertexAttribAPPLE(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::DisableVertexAttribAPPLE(index, pname) };
}

pub fn retrace_glMapVertexAttrib1dAPPLE(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut size: GLuint;
    size = (call.arg(1)).to_u32().unwrap();

    let mut u1: GLdouble;
    u1 = (call.arg(2)).to_f64().unwrap();

    let mut u2: GLdouble;
    u2 = (call.arg(3)).to_f64().unwrap();

    let mut stride: GLint;
    stride = (call.arg(4)).to_i32().unwrap();

    let mut order: GLint;
    order = (call.arg(5)).to_i32().unwrap();

    let points: &mut [GLdouble];
//FIXME    memset(&points, 0, sizeof points); 

    if (1) {
    }
//not found in gl!    unsafe { gl::MapVertexAttrib1dAPPLE(index, size, u1, u2, stride, order, points) };
}

pub fn retrace_glMapVertexAttrib1fAPPLE(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut size: GLuint;
    size = (call.arg(1)).to_u32().unwrap();

    let mut u1: GLfloat;
    u1 = (call.arg(2)).to_f32().unwrap();

    let mut u2: GLfloat;
    u2 = (call.arg(3)).to_f32().unwrap();

    let mut stride: GLint;
    stride = (call.arg(4)).to_i32().unwrap();

    let mut order: GLint;
    order = (call.arg(5)).to_i32().unwrap();

    let points: &mut [GLfloat];
//FIXME    memset(&points, 0, sizeof points); 

    if (1) {
    }
//not found in gl!    unsafe { gl::MapVertexAttrib1fAPPLE(index, size, u1, u2, stride, order, points) };
}

pub fn retrace_glMapVertexAttrib2dAPPLE(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut size: GLuint;
    size = (call.arg(1)).to_u32().unwrap();

    let mut u1: GLdouble;
    u1 = (call.arg(2)).to_f64().unwrap();

    let mut u2: GLdouble;
    u2 = (call.arg(3)).to_f64().unwrap();

    let mut ustride: GLint;
    ustride = (call.arg(4)).to_i32().unwrap();

    let mut uorder: GLint;
    uorder = (call.arg(5)).to_i32().unwrap();

    let mut v1: GLdouble;
    v1 = (call.arg(6)).to_f64().unwrap();

    let mut v2: GLdouble;
    v2 = (call.arg(7)).to_f64().unwrap();

    let mut vstride: GLint;
    vstride = (call.arg(8)).to_i32().unwrap();

    let mut vorder: GLint;
    vorder = (call.arg(9)).to_i32().unwrap();

    let points: &mut [GLdouble];
//FIXME    memset(&points, 0, sizeof points); 

    if (1) {
    }
//not found in gl!    unsafe { gl::MapVertexAttrib2dAPPLE(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points) };
}

pub fn retrace_glMapVertexAttrib2fAPPLE(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut size: GLuint;
    size = (call.arg(1)).to_u32().unwrap();

    let mut u1: GLfloat;
    u1 = (call.arg(2)).to_f32().unwrap();

    let mut u2: GLfloat;
    u2 = (call.arg(3)).to_f32().unwrap();

    let mut ustride: GLint;
    ustride = (call.arg(4)).to_i32().unwrap();

    let mut uorder: GLint;
    uorder = (call.arg(5)).to_i32().unwrap();

    let mut v1: GLfloat;
    v1 = (call.arg(6)).to_f32().unwrap();

    let mut v2: GLfloat;
    v2 = (call.arg(7)).to_f32().unwrap();

    let mut vstride: GLint;
    vstride = (call.arg(8)).to_i32().unwrap();

    let mut vorder: GLint;
    vorder = (call.arg(9)).to_i32().unwrap();

    let points: &mut [GLfloat];
//FIXME    memset(&points, 0, sizeof points); 

    if (1) {
    }
//not found in gl!    unsafe { gl::MapVertexAttrib2fAPPLE(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points) };
}

pub fn retrace_glReleaseShaderCompiler(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    unsafe { gl::ReleaseShaderCompiler() };
}

pub fn retrace_glShaderBinary(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut count: GLsizei;
    count = (call.arg(0)).to_i32().unwrap();

    let shaders: &mut [GLuint];
    shaders = _allocator.alloc_array::<GLuint>(&call.arg(1));
    let _a_GLuint131_0 = (call.arg(1)).to_array();
    if let Some(_a_GLuint131_0) = _a_GLuint131_0 {
        for _jGLuint131 in 0.._a_GLuint131_0.values.len() {
    shaders[_jGLuint131] = (*_a_GLuint131_0.values[_jGLuint131]).to_u32().unwrap();
        }
    }
    let shaders = shaders.as_mut_ptr();

    let mut binaryformat: GLenum;
    binaryformat = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let binary: &mut [GLc_void];
    let binary = (call.arg(3)).to_pointer().unwrap() as *mut c_void;

    let mut length: GLsizei;
    length = (call.arg(4)).to_i32().unwrap();

    unsafe { gl::ShaderBinary(count, shaders, binaryformat, binary, length) };
}

pub fn retrace_glDepthRangef(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut n: GLfloat;
    n = (call.arg(0)).to_f32().unwrap();

    let mut f: GLfloat;
    f = (call.arg(1)).to_f32().unwrap();

    unsafe { gl::DepthRangef(n, f) };
}

pub fn retrace_glClearDepthf(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut d: GLfloat;
    d = (call.arg(0)).to_f32().unwrap();

    unsafe { gl::ClearDepthf(d) };
}

pub fn retrace_glMemoryBarrierByRegion(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut barriers: GLbitfield;
    barriers = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    unsafe { gl::MemoryBarrierByRegion(barriers) };
}

pub fn retrace_glPrimitiveBoundingBoxARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut minX: GLfloat;
    minX = (call.arg(0)).to_f32().unwrap();

    let mut minY: GLfloat;
    minY = (call.arg(1)).to_f32().unwrap();

    let mut minZ: GLfloat;
    minZ = (call.arg(2)).to_f32().unwrap();

    let mut minW: GLfloat;
    minW = (call.arg(3)).to_f32().unwrap();

    let mut maxX: GLfloat;
    maxX = (call.arg(4)).to_f32().unwrap();

    let mut maxY: GLfloat;
    maxY = (call.arg(5)).to_f32().unwrap();

    let mut maxZ: GLfloat;
    maxZ = (call.arg(6)).to_f32().unwrap();

    let mut maxW: GLfloat;
    maxW = (call.arg(7)).to_f32().unwrap();

//not found in gl!    unsafe { gl::PrimitiveBoundingBoxARB(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW) };
}

pub fn retrace_glDrawArraysInstancedBaseInstance(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut first: GLint;
    first = (call.arg(1)).to_i32().unwrap();

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let mut instancecount: GLsizei;
    instancecount = (call.arg(3)).to_i32().unwrap();

    let mut baseinstance: GLuint;
    baseinstance = (call.arg(4)).to_u32().unwrap();

    unsafe { gl::DrawArraysInstancedBaseInstance(mode, first, count, instancecount, baseinstance) };
}

pub fn retrace_glDrawElementsInstancedBaseInstance(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let indices: &mut [GLc_void];
            indices = (call.arg(3)).to_pointer().unwrap() as *mut c_void;

    let mut instancecount: GLsizei;
    instancecount = (call.arg(4)).to_i32().unwrap();

    let mut baseinstance: GLuint;
    baseinstance = (call.arg(5)).to_u32().unwrap();

    unsafe { gl::DrawElementsInstancedBaseInstance(mode, count, _type, indices, instancecount, baseinstance) };
}

pub fn retrace_glDrawElementsInstancedBaseVertexBaseInstance(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let indices: &mut [GLc_void];
            indices = (call.arg(3)).to_pointer().unwrap() as *mut c_void;

    let mut instancecount: GLsizei;
    instancecount = (call.arg(4)).to_i32().unwrap();

    let mut basevertex: GLint;
    basevertex = (call.arg(5)).to_i32().unwrap();

    let mut baseinstance: GLuint;
    baseinstance = (call.arg(6)).to_u32().unwrap();

    unsafe { gl::DrawElementsInstancedBaseVertexBaseInstance(mode, count, _type, indices, instancecount, basevertex, baseinstance) };
}

pub fn retrace_glGetTextureHandleARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

//not found in gl!    let _result = unsafe { gl::GetTextureHandleARB(texture) };

    let _origResult: GLuint64;
    _origResult = (*call.ret).to_u32().unwrap();
    self._textureHandle_map[_origResult] = _result; 
}

pub fn retrace_glGetTextureSamplerHandleARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut sampler: GLuint;
    sampler = (call.arg(1)).to_u32().unwrap();
    sampler = self._sampler_map[sampler];

//not found in gl!    let _result = unsafe { gl::GetTextureSamplerHandleARB(texture, sampler) };

    let _origResult: GLuint64;
    _origResult = (*call.ret).to_u32().unwrap();
    self._textureHandle_map[_origResult] = _result; 
}

pub fn retrace_glMakeTextureHandleResidentARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut handle: GLuint64;
    handle = (call.arg(0)).to_u32().unwrap();
    handle = self._textureHandle_map[handle];

//not found in gl!    unsafe { gl::MakeTextureHandleResidentARB(handle) };
}

pub fn retrace_glMakeTextureHandleNonResidentARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut handle: GLuint64;
    handle = (call.arg(0)).to_u32().unwrap();
    handle = self._textureHandle_map[handle];

//not found in gl!    unsafe { gl::MakeTextureHandleNonResidentARB(handle) };
}

pub fn retrace_glGetImageHandleARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut level: GLint;
    level = (call.arg(1)).to_i32().unwrap();

    let mut layered: GLboolean;
    layered = (call.arg(2)).to_u32().unwrap() as u8;

    let mut layer: GLint;
    layer = (call.arg(3)).to_i32().unwrap();

    let mut format: GLenum;
    format = (call.arg(4)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    let _result = unsafe { gl::GetImageHandleARB(texture, level, layered, layer, format) };

    let _origResult: GLuint64;
    _origResult = (*call.ret).to_u32().unwrap();
    self._imageHandle_map[_origResult] = _result; 
}

pub fn retrace_glMakeImageHandleResidentARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut handle: GLuint64;
    handle = (call.arg(0)).to_u32().unwrap();
    handle = self._imageHandle_map[handle];

    let mut access: GLenum;
    access = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::MakeImageHandleResidentARB(handle, access) };
}

pub fn retrace_glMakeImageHandleNonResidentARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut handle: GLuint64;
    handle = (call.arg(0)).to_u32().unwrap();
    handle = self._imageHandle_map[handle];

//not found in gl!    unsafe { gl::MakeImageHandleNonResidentARB(handle) };
}

pub fn retrace_glUniformHandleui64ARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut value: GLuint64;
    value = (call.arg(1)).to_u32().unwrap();

//not found in gl!    unsafe { gl::UniformHandleui64ARB(location, value) };
}

pub fn retrace_glUniformHandleui64vARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let value: &mut [GLuint64];
    value = _allocator.alloc_array::<GLuint64>(&call.arg(2));
    let _a_GLuint649_0 = (call.arg(2)).to_array();
    if let Some(_a_GLuint649_0) = _a_GLuint649_0 {
        for _jGLuint649 in 0.._a_GLuint649_0.values.len() {
    value[_jGLuint649] = (*_a_GLuint649_0.values[_jGLuint649]).to_u32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::UniformHandleui64vARB(location, count, value) };
}

pub fn retrace_glProgramUniformHandleui64ARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut value: GLuint64;
    value = (call.arg(2)).to_u32().unwrap();

//not found in gl!    unsafe { gl::ProgramUniformHandleui64ARB(program, location, value) };
}

pub fn retrace_glProgramUniformHandleui64vARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let values: &mut [GLuint64];
    values = _allocator.alloc_array::<GLuint64>(&call.arg(3));
    let _a_GLuint6410_0 = (call.arg(3)).to_array();
    if let Some(_a_GLuint6410_0) = _a_GLuint6410_0 {
        for _jGLuint6410 in 0.._a_GLuint6410_0.values.len() {
    values[_jGLuint6410] = (*_a_GLuint6410_0.values[_jGLuint6410]).to_u32().unwrap();
        }
    }
    let values = values.as_mut_ptr();

//not found in gl!    unsafe { gl::ProgramUniformHandleui64vARB(program, location, count, values) };
}

pub fn retrace_glVertexAttribL1ui64ARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut x: GLuint64;
    x = (call.arg(1)).to_u32().unwrap();

//not found in gl!    unsafe { gl::VertexAttribL1ui64ARB(index, x) };
}

pub fn retrace_glVertexAttribL1ui64vARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLuint64];
    v = _allocator.alloc_array::<GLuint64>(&call.arg(1));
    let _a_PGLuint643_0 = (call.arg(1)).to_array().unwrap();
    v[0] = (_a_PGLuint643_0.values[0]).to_u32().unwrap();

//not found in gl!    unsafe { gl::VertexAttribL1ui64vARB(index, v) };
}

pub fn retrace_glBindFragDataLocationIndexed(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut colorNumber: GLuint;
    colorNumber = (call.arg(1)).to_u32().unwrap();

    let mut index: GLuint;
    index = (call.arg(2)).to_u32().unwrap();

    let name: &mut [GLchar];
    name = (call.arg(3)).to_string().unwrap();

    unsafe { gl::BindFragDataLocationIndexed(program, colorNumber, index, name) };
}

pub fn retrace_glBufferStorage(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut size: GLsizeiptr;
    size = (call.arg(1)).to_i32().unwrap();

    let data: &mut [GLc_void];
    let data = (call.arg(2)).to_pointer().unwrap() as *mut c_void;

    let mut flags: GLbitfield;
    flags = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    unsafe { gl::BufferStorage(target, size, data, flags) };
}

pub fn retrace_glClearBufferData(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut internalformat: GLenum;
    internalformat = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut format: GLenum;
    format = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let data: &mut [c_void];
    let data = (call.arg(4)).to_pointer().unwrap() as *mut c_void;

    unsafe { gl::ClearBufferData(target, internalformat, format, _type, data) };
}

pub fn retrace_glClearBufferSubData(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut internalformat: GLenum;
    internalformat = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut offset: GLintptr;
    offset = (call.arg(2)).to_i32().unwrap();

    let mut size: GLsizeiptr;
    size = (call.arg(3)).to_i32().unwrap();

    let mut format: GLenum;
    format = (call.arg(4)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(5)).to_u32().unwrap().try_into().unwrap();

    let data: &mut [c_void];
    let data = (call.arg(6)).to_pointer().unwrap() as *mut c_void;

    unsafe { gl::ClearBufferSubData(target, internalformat, offset, size, format, _type, data) };
}

pub fn retrace_glClearTexImage(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut level: GLint;
    level = (call.arg(1)).to_i32().unwrap();

    let mut format: GLenum;
    format = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let data: &mut [GLc_void];
    let data = (call.arg(4)).to_pointer().unwrap() as *mut c_void;

    unsafe { gl::ClearTexImage(texture, level, format, _type, data) };
}

pub fn retrace_glClearTexSubImage(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut level: GLint;
    level = (call.arg(1)).to_i32().unwrap();

    let mut xoffset: GLint;
    xoffset = (call.arg(2)).to_i32().unwrap();

    let mut yoffset: GLint;
    yoffset = (call.arg(3)).to_i32().unwrap();

    let mut zoffset: GLint;
    zoffset = (call.arg(4)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(5)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(6)).to_i32().unwrap();

    let mut depth: GLsizei;
    depth = (call.arg(7)).to_i32().unwrap();

    let mut format: GLenum;
    format = (call.arg(8)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(9)).to_u32().unwrap().try_into().unwrap();

    let data: &mut [GLc_void];
    let data = (call.arg(10)).to_pointer().unwrap() as *mut c_void;

    unsafe { gl::ClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, _type, data) };
}

pub fn retrace_glClipControl(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut origin: GLenum;
    origin = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut depth: GLenum;
    depth = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    unsafe { gl::ClipControl(origin, depth) };
}

pub fn retrace_glClampColorARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut clamp: GLenum;
    clamp = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::ClampColorARB(target, clamp) };
}

pub fn retrace_glDispatchCompute(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut num_groups_x: GLuint;
    num_groups_x = (call.arg(0)).to_u32().unwrap();

    let mut num_groups_y: GLuint;
    num_groups_y = (call.arg(1)).to_u32().unwrap();

    let mut num_groups_z: GLuint;
    num_groups_z = (call.arg(2)).to_u32().unwrap();

    unsafe { gl::DispatchCompute(num_groups_x, num_groups_y, num_groups_z) };
}

pub fn retrace_glDispatchComputeIndirect(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut indirect: GLintptr;
    indirect = (call.arg(0)).to_i32().unwrap();

    unsafe { gl::DispatchComputeIndirect(indirect) };
}

pub fn retrace_glDispatchComputeGroupSizeARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut num_groups_x: GLuint;
    num_groups_x = (call.arg(0)).to_u32().unwrap();

    let mut num_groups_y: GLuint;
    num_groups_y = (call.arg(1)).to_u32().unwrap();

    let mut num_groups_z: GLuint;
    num_groups_z = (call.arg(2)).to_u32().unwrap();

    let mut group_size_x: GLuint;
    group_size_x = (call.arg(3)).to_u32().unwrap();

    let mut group_size_y: GLuint;
    group_size_y = (call.arg(4)).to_u32().unwrap();

    let mut group_size_z: GLuint;
    group_size_z = (call.arg(5)).to_u32().unwrap();

//not found in gl!    unsafe { gl::DispatchComputeGroupSizeARB(num_groups_x, num_groups_y, num_groups_z, group_size_x, group_size_y, group_size_z) };
}

pub fn retrace_glCopyBufferSubData(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut readTarget: GLenum;
    readTarget = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut writeTarget: GLenum;
    writeTarget = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut readOffset: GLintptr;
    readOffset = (call.arg(2)).to_i32().unwrap();

    let mut writeOffset: GLintptr;
    writeOffset = (call.arg(3)).to_i32().unwrap();

    let mut size: GLsizeiptr;
    size = (call.arg(4)).to_i32().unwrap();

    unsafe { gl::CopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size) };
}

pub fn retrace_glCopyImageSubData(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut srcName: GLuint;
    srcName = (call.arg(0)).to_u32().unwrap();
    srcName = self._texture_map[srcName];

    let mut srcTarget: GLenum;
    srcTarget = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut srcLevel: GLint;
    srcLevel = (call.arg(2)).to_i32().unwrap();

    let mut srcX: GLint;
    srcX = (call.arg(3)).to_i32().unwrap();

    let mut srcY: GLint;
    srcY = (call.arg(4)).to_i32().unwrap();

    let mut srcZ: GLint;
    srcZ = (call.arg(5)).to_i32().unwrap();

    let mut dstName: GLuint;
    dstName = (call.arg(6)).to_u32().unwrap();
    dstName = self._texture_map[dstName];

    let mut dstTarget: GLenum;
    dstTarget = (call.arg(7)).to_u32().unwrap().try_into().unwrap();

    let mut dstLevel: GLint;
    dstLevel = (call.arg(8)).to_i32().unwrap();

    let mut dstX: GLint;
    dstX = (call.arg(9)).to_i32().unwrap();

    let mut dstY: GLint;
    dstY = (call.arg(10)).to_i32().unwrap();

    let mut dstZ: GLint;
    dstZ = (call.arg(11)).to_i32().unwrap();

    let mut srcWidth: GLsizei;
    srcWidth = (call.arg(12)).to_i32().unwrap();

    let mut srcHeight: GLsizei;
    srcHeight = (call.arg(13)).to_i32().unwrap();

    let mut srcDepth: GLsizei;
    srcDepth = (call.arg(14)).to_i32().unwrap();

    unsafe { gl::CopyImageSubData(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth) };
}

pub fn retrace_glDebugMessageControlARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut source: GLenum;
    source = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut severity: GLenum;
    severity = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut count: GLsizei;
    count = (call.arg(3)).to_i32().unwrap();

    let ids: &mut [GLuint];
    ids = _allocator.alloc_array::<GLuint>(&call.arg(4));
    let _a_GLuint132_0 = (call.arg(4)).to_array();
    if let Some(_a_GLuint132_0) = _a_GLuint132_0 {
        for _jGLuint132 in 0.._a_GLuint132_0.values.len() {
    ids[_jGLuint132] = (*_a_GLuint132_0.values[_jGLuint132]).to_u32().unwrap();
        }
    }
    let ids = ids.as_mut_ptr();

    let mut enabled: GLboolean;
    enabled = (call.arg(5)).to_u32().unwrap() as u8;

//not found in gl!    unsafe { gl::DebugMessageControlARB(source, _type, severity, count, ids, enabled) };
}

pub fn retrace_glDebugMessageInsertARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut source: GLenum;
    source = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut id: GLuint;
    id = (call.arg(2)).to_u32().unwrap();

    let mut severity: GLenum;
    severity = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let mut length: GLsizei;
    length = (call.arg(4)).to_i32().unwrap();

    let buf: &mut [GLchar];
    buf = (call.arg(5)).to_string().unwrap();

//not found in gl!    unsafe { gl::DebugMessageInsertARB(source, _type, id, severity, length, buf) };
}

pub fn retrace_glCreateTransformFeedbacks(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut n: GLsizei;
    n = (call.arg(0)).to_i32().unwrap();

    let ids: &mut [GLuint];
    ids = _allocator.alloc_array::<GLuint>(&call.arg(1));

//not found in gl!    unsafe { gl::CreateTransformFeedbacks(n, ids) };
    let _aGLuint134 = (call.arg(1)).to_array();
    if (_aGLuint134) {
        for _jGLuint134 in 0.._aGLuint134.values.len() {
    let _origResult: GLuint;
    _origResult = (_aGLuint134.values[_jGLuint134]).to_u32().unwrap();
    self._feedback_map[_origResult] = ids[_jGLuint134]; 
        }
    }
}

pub fn retrace_glTransformFeedbackBufferBase(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut xfb: GLuint;
    xfb = (call.arg(0)).to_u32().unwrap();
    xfb = self._feedback_map[xfb];

    let mut index: GLuint;
    index = (call.arg(1)).to_u32().unwrap();

    let mut buffer: GLuint;
    buffer = (call.arg(2)).to_u32().unwrap();
    buffer = self._buffer_map[buffer];

    unsafe { gl::TransformFeedbackBufferBase(xfb, index, buffer) };
}

pub fn retrace_glTransformFeedbackBufferRange(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut xfb: GLuint;
    xfb = (call.arg(0)).to_u32().unwrap();
    xfb = self._feedback_map[xfb];

    let mut index: GLuint;
    index = (call.arg(1)).to_u32().unwrap();

    let mut buffer: GLuint;
    buffer = (call.arg(2)).to_u32().unwrap();
    buffer = self._buffer_map[buffer];

    let mut offset: GLintptr;
    offset = (call.arg(3)).to_i32().unwrap();

    let mut size: GLsizeiptr;
    size = (call.arg(4)).to_i32().unwrap();

    unsafe { gl::TransformFeedbackBufferRange(xfb, index, buffer, offset, size) };
}

pub fn retrace_glCreateBuffers(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut n: GLsizei;
    n = (call.arg(0)).to_i32().unwrap();

    let buffers: &mut [GLuint];
    buffers = _allocator.alloc_array::<GLuint>(&call.arg(1));

//not found in gl!    unsafe { gl::CreateBuffers(n, buffers) };
    let _aGLuint136 = (call.arg(1)).to_array();
    if (_aGLuint136) {
        for _jGLuint136 in 0.._aGLuint136.values.len() {
    let _origResult: GLuint;
    _origResult = (_aGLuint136.values[_jGLuint136]).to_u32().unwrap();
    self._buffer_map[_origResult] = buffers[_jGLuint136]; 
        }
    }
}

pub fn retrace_glNamedBufferStorage(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut buffer: GLuint;
    buffer = (call.arg(0)).to_u32().unwrap();
    buffer = self._buffer_map[buffer];

    let mut size: GLsizeiptr;
    size = (call.arg(1)).to_i32().unwrap();

    let data: &mut [c_void];
    let data = (call.arg(2)).to_pointer().unwrap() as *mut c_void;

    let mut flags: GLbitfield;
    flags = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    unsafe { gl::NamedBufferStorage(buffer, size, data, flags) };
}

pub fn retrace_glNamedBufferData(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut buffer: GLuint;
    buffer = (call.arg(0)).to_u32().unwrap();
    buffer = self._buffer_map[buffer];

    let mut size: GLsizeiptr;
    size = (call.arg(1)).to_i32().unwrap();

    let data: &mut [c_void];
    let data = (call.arg(2)).to_pointer().unwrap() as *mut c_void;

    let mut usage: GLenum;
    usage = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    unsafe { gl::NamedBufferData(buffer, size, data, usage) };
}

pub fn retrace_glNamedBufferSubData(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut buffer: GLuint;
    buffer = (call.arg(0)).to_u32().unwrap();
    buffer = self._buffer_map[buffer];

    let mut offset: GLintptr;
    offset = (call.arg(1)).to_i32().unwrap();

    let mut size: GLsizeiptr;
    size = (call.arg(2)).to_i32().unwrap();

    let data: &mut [c_void];
    let data = (call.arg(3)).to_pointer().unwrap() as *mut c_void;

    unsafe { gl::NamedBufferSubData(buffer, offset, size, data) };
}

pub fn retrace_glCopyNamedBufferSubData(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut readBuffer: GLuint;
    readBuffer = (call.arg(0)).to_u32().unwrap();
    readBuffer = self._buffer_map[readBuffer];

    let mut writeBuffer: GLuint;
    writeBuffer = (call.arg(1)).to_u32().unwrap();
    writeBuffer = self._buffer_map[writeBuffer];

    let mut readOffset: GLintptr;
    readOffset = (call.arg(2)).to_i32().unwrap();

    let mut writeOffset: GLintptr;
    writeOffset = (call.arg(3)).to_i32().unwrap();

    let mut size: GLsizeiptr;
    size = (call.arg(4)).to_i32().unwrap();

    unsafe { gl::CopyNamedBufferSubData(readBuffer, writeBuffer, readOffset, writeOffset, size) };
}

pub fn retrace_glClearNamedBufferData(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut buffer: GLuint;
    buffer = (call.arg(0)).to_u32().unwrap();
    buffer = self._buffer_map[buffer];

    let mut internalformat: GLenum;
    internalformat = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut format: GLenum;
    format = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let data: &mut [c_void];
    let data = (call.arg(4)).to_pointer().unwrap() as *mut c_void;

    unsafe { gl::ClearNamedBufferData(buffer, internalformat, format, _type, data) };
}

pub fn retrace_glClearNamedBufferSubData(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut buffer: GLuint;
    buffer = (call.arg(0)).to_u32().unwrap();
    buffer = self._buffer_map[buffer];

    let mut internalformat: GLenum;
    internalformat = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut offset: GLintptr;
    offset = (call.arg(2)).to_i32().unwrap();

    let mut size: GLsizeiptr;
    size = (call.arg(3)).to_i32().unwrap();

    let mut format: GLenum;
    format = (call.arg(4)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(5)).to_u32().unwrap().try_into().unwrap();

    let data: &mut [c_void];
    let data = (call.arg(6)).to_pointer().unwrap() as *mut c_void;

    unsafe { gl::ClearNamedBufferSubData(buffer, internalformat, offset, size, format, _type, data) };
}

pub fn retrace_glMapNamedBuffer(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut buffer: GLuint;
    buffer = (call.arg(0)).to_u32().unwrap();
    buffer = self._buffer_map[buffer];

    let mut access: GLenum;
    access = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let _result = unsafe { gl::MapNamedBuffer(buffer, access) };

    let length = 0;
//not found in gl!    unsafe { gl::GetNamedBufferParameteriv(buffer, gl::BUFFER_SIZE, &length) };
    region::add_region(call, (*call.ret).toUIntPtr(), _result, length);
}

pub fn retrace_glMapNamedBufferRange(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut buffer: GLuint;
    buffer = (call.arg(0)).to_u32().unwrap();
    buffer = self._buffer_map[buffer];

    let mut offset: GLintptr;
    offset = (call.arg(1)).to_i32().unwrap();

    let mut length: GLsizeiptr;
    length = (call.arg(2)).to_i32().unwrap();

    let mut access: GLbitfield;
    access = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let _result = unsafe { gl::MapNamedBufferRange(buffer, offset, length, access) };

    region::add_region(call, (*call.ret).toUIntPtr(), _result, length);
}

pub fn retrace_glUnmapNamedBuffer(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut buffer: GLuint;
    buffer = (call.arg(0)).to_u32().unwrap();
    buffer = self._buffer_map[buffer];

        let ptr = ptr::null_mut() as *mut c_void;
            unsafe { gl::GetNamedBufferPointerv(buffer, gl::BUFFER_MAP_POINTER, &ptr) };
        if (ptr) {
            retrace::delRegionByPointer(ptr);
        } else {
            retrace::warning(call) << "failed to get mapped pointer\n";
        }
    let _result = unsafe { gl::UnmapNamedBuffer(buffer) };

}

pub fn retrace_glFlushMappedNamedBufferRange(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut buffer: GLuint;
    buffer = (call.arg(0)).to_u32().unwrap();
    buffer = self._buffer_map[buffer];

    let mut offset: GLintptr;
    offset = (call.arg(1)).to_i32().unwrap();

    let mut length: GLsizeiptr;
    length = (call.arg(2)).to_i32().unwrap();

    unsafe { gl::FlushMappedNamedBufferRange(buffer, offset, length) };
}

pub fn retrace_glCreateFramebuffers(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut n: GLsizei;
    n = (call.arg(0)).to_i32().unwrap();

    let framebuffers: &mut [GLuint];
    framebuffers = _allocator.alloc_array::<GLuint>(&call.arg(1));

//not found in gl!    unsafe { gl::CreateFramebuffers(n, framebuffers) };
    let _aGLuint138 = (call.arg(1)).to_array();
    if (_aGLuint138) {
        for _jGLuint138 in 0.._aGLuint138.values.len() {
    let _origResult: GLuint;
    _origResult = (_aGLuint138.values[_jGLuint138]).to_u32().unwrap();
    self._framebuffer_map[_origResult] = framebuffers[_jGLuint138]; 
        }
    }
}

pub fn retrace_glNamedFramebufferRenderbuffer(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut framebuffer: GLuint;
    framebuffer = (call.arg(0)).to_u32().unwrap();
    framebuffer = self._framebuffer_map[framebuffer];

    let mut attachment: GLenum;
    attachment = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut renderbuffertarget: GLenum;
    renderbuffertarget = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut renderbuffer: GLuint;
    renderbuffer = (call.arg(3)).to_u32().unwrap();
    renderbuffer = self._renderbuffer_map[renderbuffer];

    unsafe { gl::NamedFramebufferRenderbuffer(framebuffer, attachment, renderbuffertarget, renderbuffer) };
}

pub fn retrace_glNamedFramebufferParameteri(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut framebuffer: GLuint;
    framebuffer = (call.arg(0)).to_u32().unwrap();
    framebuffer = self._framebuffer_map[framebuffer];

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut param: GLint;
    param = (call.arg(2)).to_i32().unwrap();

    unsafe { gl::NamedFramebufferParameteri(framebuffer, pname, param) };
}

pub fn retrace_glNamedFramebufferTexture(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut framebuffer: GLuint;
    framebuffer = (call.arg(0)).to_u32().unwrap();
    framebuffer = self._framebuffer_map[framebuffer];

    let mut attachment: GLenum;
    attachment = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut texture: GLuint;
    texture = (call.arg(2)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut level: GLint;
    level = (call.arg(3)).to_i32().unwrap();

    unsafe { gl::NamedFramebufferTexture(framebuffer, attachment, texture, level) };
}

pub fn retrace_glNamedFramebufferTextureLayer(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut framebuffer: GLuint;
    framebuffer = (call.arg(0)).to_u32().unwrap();
    framebuffer = self._framebuffer_map[framebuffer];

    let mut attachment: GLenum;
    attachment = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut texture: GLuint;
    texture = (call.arg(2)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut level: GLint;
    level = (call.arg(3)).to_i32().unwrap();

    let mut layer: GLint;
    layer = (call.arg(4)).to_i32().unwrap();

    unsafe { gl::NamedFramebufferTextureLayer(framebuffer, attachment, texture, level, layer) };
}

pub fn retrace_glNamedFramebufferDrawBuffer(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut framebuffer: GLuint;
    framebuffer = (call.arg(0)).to_u32().unwrap();
    framebuffer = self._framebuffer_map[framebuffer];

    let mut buf: GLenum;
    buf = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    unsafe { gl::NamedFramebufferDrawBuffer(framebuffer, buf) };
}

pub fn retrace_glNamedFramebufferDrawBuffers(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut framebuffer: GLuint;
    framebuffer = (call.arg(0)).to_u32().unwrap();
    framebuffer = self._framebuffer_map[framebuffer];

    let mut n: GLsizei;
    n = (call.arg(1)).to_i32().unwrap();

    let bufs: &mut [GLenum];
    bufs = _allocator.alloc_array::<GLenum>(&call.arg(2));
    let _a_GLenum15_0 = (call.arg(2)).to_array();
    if let Some(_a_GLenum15_0) = _a_GLenum15_0 {
        for _jGLenum15 in 0.._a_GLenum15_0.values.len() {
    bufs[_jGLenum15] = (*_a_GLenum15_0.values[_jGLenum15]).to_u32().unwrap().try_into().unwrap();
        }
    }
    let bufs = bufs.as_mut_ptr();

    unsafe { gl::NamedFramebufferDrawBuffers(framebuffer, n, bufs) };
}

pub fn retrace_glNamedFramebufferReadBuffer(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut framebuffer: GLuint;
    framebuffer = (call.arg(0)).to_u32().unwrap();
    framebuffer = self._framebuffer_map[framebuffer];

    let mut src: GLenum;
    src = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    unsafe { gl::NamedFramebufferReadBuffer(framebuffer, src) };
}

pub fn retrace_glInvalidateNamedFramebufferData(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut framebuffer: GLuint;
    framebuffer = (call.arg(0)).to_u32().unwrap();
    framebuffer = self._framebuffer_map[framebuffer];

    let mut numAttachments: GLsizei;
    numAttachments = (call.arg(1)).to_i32().unwrap();

    let attachments: &mut [GLenum];
    attachments = _allocator.alloc_array::<GLenum>(&call.arg(2));
    let _a_GLenum16_0 = (call.arg(2)).to_array();
    if let Some(_a_GLenum16_0) = _a_GLenum16_0 {
        for _jGLenum16 in 0.._a_GLenum16_0.values.len() {
    attachments[_jGLenum16] = (*_a_GLenum16_0.values[_jGLenum16]).to_u32().unwrap().try_into().unwrap();
        }
    }
    let attachments = attachments.as_mut_ptr();

    unsafe { gl::InvalidateNamedFramebufferData(framebuffer, numAttachments, attachments) };
}

pub fn retrace_glInvalidateNamedFramebufferSubData(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut framebuffer: GLuint;
    framebuffer = (call.arg(0)).to_u32().unwrap();
    framebuffer = self._framebuffer_map[framebuffer];

    let mut numAttachments: GLsizei;
    numAttachments = (call.arg(1)).to_i32().unwrap();

    let attachments: &mut [GLenum];
    attachments = _allocator.alloc_array::<GLenum>(&call.arg(2));
    let _a_GLenum17_0 = (call.arg(2)).to_array();
    if let Some(_a_GLenum17_0) = _a_GLenum17_0 {
        for _jGLenum17 in 0.._a_GLenum17_0.values.len() {
    attachments[_jGLenum17] = (*_a_GLenum17_0.values[_jGLenum17]).to_u32().unwrap().try_into().unwrap();
        }
    }
    let attachments = attachments.as_mut_ptr();

    let mut x: GLint;
    x = (call.arg(3)).to_i32().unwrap();

    let mut y: GLint;
    y = (call.arg(4)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(5)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(6)).to_i32().unwrap();

    unsafe { gl::InvalidateNamedFramebufferSubData(framebuffer, numAttachments, attachments, x, y, width, height) };
}

pub fn retrace_glClearNamedFramebufferiv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut framebuffer: GLuint;
    framebuffer = (call.arg(0)).to_u32().unwrap();
    framebuffer = self._framebuffer_map[framebuffer];

    let mut buffer: GLenum;
    buffer = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut drawbuffer: GLint;
    drawbuffer = (call.arg(2)).to_i32().unwrap();

    let value: &mut [GLint];
    value = _allocator.alloc_array::<GLint>(&call.arg(3));
    let _a_GLint178_0 = (call.arg(3)).to_array();
    if let Some(_a_GLint178_0) = _a_GLint178_0 {
        for _jGLint178 in 0.._a_GLint178_0.values.len() {
    value[_jGLint178] = (*_a_GLint178_0.values[_jGLint178]).to_i32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

    unsafe { gl::ClearNamedFramebufferiv(framebuffer, buffer, drawbuffer, value) };
}

pub fn retrace_glClearNamedFramebufferuiv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut framebuffer: GLuint;
    framebuffer = (call.arg(0)).to_u32().unwrap();
    framebuffer = self._framebuffer_map[framebuffer];

    let mut buffer: GLenum;
    buffer = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut drawbuffer: GLint;
    drawbuffer = (call.arg(2)).to_i32().unwrap();

    let value: &mut [GLuint];
    value = _allocator.alloc_array::<GLuint>(&call.arg(3));
    let _a_GLuint139_0 = (call.arg(3)).to_array();
    if let Some(_a_GLuint139_0) = _a_GLuint139_0 {
        for _jGLuint139 in 0.._a_GLuint139_0.values.len() {
    value[_jGLuint139] = (*_a_GLuint139_0.values[_jGLuint139]).to_u32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

    unsafe { gl::ClearNamedFramebufferuiv(framebuffer, buffer, drawbuffer, value) };
}

pub fn retrace_glClearNamedFramebufferfv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut framebuffer: GLuint;
    framebuffer = (call.arg(0)).to_u32().unwrap();
    framebuffer = self._framebuffer_map[framebuffer];

    let mut buffer: GLenum;
    buffer = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut drawbuffer: GLint;
    drawbuffer = (call.arg(2)).to_i32().unwrap();

    let value: &mut [GLfloat];
    value = _allocator.alloc_array::<GLfloat>(&call.arg(3));
    let _a_GLfloat147_0 = (call.arg(3)).to_array();
    if let Some(_a_GLfloat147_0) = _a_GLfloat147_0 {
        for _jGLfloat147 in 0.._a_GLfloat147_0.values.len() {
    value[_jGLfloat147] = (*_a_GLfloat147_0.values[_jGLfloat147]).to_f32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

    unsafe { gl::ClearNamedFramebufferfv(framebuffer, buffer, drawbuffer, value) };
}

pub fn retrace_glClearNamedFramebufferfi(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut framebuffer: GLuint;
    framebuffer = (call.arg(0)).to_u32().unwrap();
    framebuffer = self._framebuffer_map[framebuffer];

    let mut buffer: GLenum;
    buffer = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut drawbuffer: GLint;
    drawbuffer = (call.arg(2)).to_i32().unwrap();

    let mut depth: GLfloat;
    depth = (call.arg(3)).to_f32().unwrap();

    let mut stencil: GLint;
    stencil = (call.arg(4)).to_i32().unwrap();

    unsafe { gl::ClearNamedFramebufferfi(framebuffer, buffer, drawbuffer, depth, stencil) };
}

pub fn retrace_glBlitNamedFramebuffer(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut readFramebuffer: GLuint;
    readFramebuffer = (call.arg(0)).to_u32().unwrap();
    readFramebuffer = self._framebuffer_map[readFramebuffer];

    let mut drawFramebuffer: GLuint;
    drawFramebuffer = (call.arg(1)).to_u32().unwrap();
    drawFramebuffer = self._framebuffer_map[drawFramebuffer];

    let mut srcX0: GLint;
    srcX0 = (call.arg(2)).to_i32().unwrap();

    let mut srcY0: GLint;
    srcY0 = (call.arg(3)).to_i32().unwrap();

    let mut srcX1: GLint;
    srcX1 = (call.arg(4)).to_i32().unwrap();

    let mut srcY1: GLint;
    srcY1 = (call.arg(5)).to_i32().unwrap();

    let mut dstX0: GLint;
    dstX0 = (call.arg(6)).to_i32().unwrap();

    let mut dstY0: GLint;
    dstY0 = (call.arg(7)).to_i32().unwrap();

    let mut dstX1: GLint;
    dstX1 = (call.arg(8)).to_i32().unwrap();

    let mut dstY1: GLint;
    dstY1 = (call.arg(9)).to_i32().unwrap();

    let mut mask: GLbitfield;
    mask = (call.arg(10)).to_u32().unwrap();

    let mut filter: GLenum;
    filter = (call.arg(11)).to_u32().unwrap().try_into().unwrap();

    unsafe { gl::BlitNamedFramebuffer(readFramebuffer, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) };
}

pub fn retrace_glCheckNamedFramebufferStatus(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut framebuffer: GLuint;
    framebuffer = (call.arg(0)).to_u32().unwrap();
    framebuffer = self._framebuffer_map[framebuffer];

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let _result = unsafe { gl::CheckNamedFramebufferStatus(framebuffer, target) };

    let _origResult = call.ret.to_i32().unwrap();
}

pub fn retrace_glCreateRenderbuffers(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut n: GLsizei;
    n = (call.arg(0)).to_i32().unwrap();

    let renderbuffers: &mut [GLuint];
    renderbuffers = _allocator.alloc_array::<GLuint>(&call.arg(1));

//not found in gl!    unsafe { gl::CreateRenderbuffers(n, renderbuffers) };
    let _aGLuint141 = (call.arg(1)).to_array();
    if (_aGLuint141) {
        for _jGLuint141 in 0.._aGLuint141.values.len() {
    let _origResult: GLuint;
    _origResult = (_aGLuint141.values[_jGLuint141]).to_u32().unwrap();
    self._renderbuffer_map[_origResult] = renderbuffers[_jGLuint141]; 
        }
    }
}

pub fn retrace_glNamedRenderbufferStorage(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut renderbuffer: GLuint;
    renderbuffer = (call.arg(0)).to_u32().unwrap();
    renderbuffer = self._renderbuffer_map[renderbuffer];

    let mut internalformat: GLenum;
    internalformat = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut width: GLsizei;
    width = (call.arg(2)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(3)).to_i32().unwrap();

    unsafe { gl::NamedRenderbufferStorage(renderbuffer, internalformat, width, height) };
}

pub fn retrace_glNamedRenderbufferStorageMultisample(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut renderbuffer: GLuint;
    renderbuffer = (call.arg(0)).to_u32().unwrap();
    renderbuffer = self._renderbuffer_map[renderbuffer];

    let mut samples: GLsizei;
    samples = (call.arg(1)).to_i32().unwrap();
    let max_samples = 0;
//not found in gl!    unsafe { gl::GetIntegerv(gl::MAX_SAMPLES, &max_samples) };
    if samples > max_samples {
        samples = max_samples;
    }

    let mut internalformat: GLenum;
    internalformat = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut width: GLsizei;
    width = (call.arg(3)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(4)).to_i32().unwrap();

    unsafe { gl::NamedRenderbufferStorageMultisample(renderbuffer, samples, internalformat, width, height) };
}

pub fn retrace_glCreateTextures(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut n: GLsizei;
    n = (call.arg(1)).to_i32().unwrap();

    let textures: &mut [GLuint];
    textures = _allocator.alloc_array::<GLuint>(&call.arg(2));

//not found in gl!    unsafe { gl::CreateTextures(target, n, textures) };
    let _aGLuint143 = (call.arg(2)).to_array();
    if (_aGLuint143) {
        for _jGLuint143 in 0.._aGLuint143.values.len() {
    let _origResult: GLuint;
    _origResult = (_aGLuint143.values[_jGLuint143]).to_u32().unwrap();
    self._texture_map[_origResult] = textures[_jGLuint143]; 
        }
    }
}

pub fn retrace_glTextureBuffer(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut internalformat: GLenum;
    internalformat = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut buffer: GLuint;
    buffer = (call.arg(2)).to_u32().unwrap();
    buffer = self._buffer_map[buffer];

    unsafe { gl::TextureBuffer(texture, internalformat, buffer) };
}

pub fn retrace_glTextureBufferRange(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut internalformat: GLenum;
    internalformat = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut buffer: GLuint;
    buffer = (call.arg(2)).to_u32().unwrap();
    buffer = self._buffer_map[buffer];

    let mut offset: GLintptr;
    offset = (call.arg(3)).to_i32().unwrap();

    let mut size: GLsizeiptr;
    size = (call.arg(4)).to_i32().unwrap();

    unsafe { gl::TextureBufferRange(texture, internalformat, buffer, offset, size) };
}

pub fn retrace_glTextureStorage1D(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut levels: GLsizei;
    levels = (call.arg(1)).to_i32().unwrap();

    let mut internalformat: GLenum;
    internalformat = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut width: GLsizei;
    width = (call.arg(3)).to_i32().unwrap();

    unsafe { gl::TextureStorage1D(texture, levels, internalformat, width) };
}

pub fn retrace_glTextureStorage2D(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut levels: GLsizei;
    levels = (call.arg(1)).to_i32().unwrap();

    let mut internalformat: GLenum;
    internalformat = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut width: GLsizei;
    width = (call.arg(3)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(4)).to_i32().unwrap();

    unsafe { gl::TextureStorage2D(texture, levels, internalformat, width, height) };
}

pub fn retrace_glTextureStorage3D(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut levels: GLsizei;
    levels = (call.arg(1)).to_i32().unwrap();

    let mut internalformat: GLenum;
    internalformat = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut width: GLsizei;
    width = (call.arg(3)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(4)).to_i32().unwrap();

    let mut depth: GLsizei;
    depth = (call.arg(5)).to_i32().unwrap();

    unsafe { gl::TextureStorage3D(texture, levels, internalformat, width, height, depth) };
}

pub fn retrace_glTextureStorage2DMultisample(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut samples: GLsizei;
    samples = (call.arg(1)).to_i32().unwrap();
    let max_samples = 0;
//not found in gl!    unsafe { gl::GetIntegerv(gl::MAX_SAMPLES, &max_samples) };
    if samples > max_samples {
        samples = max_samples;
    }

    let mut internalformat: GLenum;
    internalformat = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut width: GLsizei;
    width = (call.arg(3)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(4)).to_i32().unwrap();

    let mut fixedsamplelocations: GLboolean;
    fixedsamplelocations = (call.arg(5)).to_u32().unwrap() as u8;

    unsafe { gl::TextureStorage2DMultisample(texture, samples, internalformat, width, height, fixedsamplelocations) };
}

pub fn retrace_glTextureStorage3DMultisample(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut samples: GLsizei;
    samples = (call.arg(1)).to_i32().unwrap();
    let max_samples = 0;
//not found in gl!    unsafe { gl::GetIntegerv(gl::MAX_SAMPLES, &max_samples) };
    if samples > max_samples {
        samples = max_samples;
    }

    let mut internalformat: GLenum;
    internalformat = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut width: GLsizei;
    width = (call.arg(3)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(4)).to_i32().unwrap();

    let mut depth: GLsizei;
    depth = (call.arg(5)).to_i32().unwrap();

    let mut fixedsamplelocations: GLboolean;
    fixedsamplelocations = (call.arg(6)).to_u32().unwrap() as u8;

    unsafe { gl::TextureStorage3DMultisample(texture, samples, internalformat, width, height, depth, fixedsamplelocations) };
}

pub fn retrace_glTextureSubImage1D(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut level: GLint;
    level = (call.arg(1)).to_i32().unwrap();

    let mut xoffset: GLint;
    xoffset = (call.arg(2)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(3)).to_i32().unwrap();

    let mut format: GLenum;
    format = (call.arg(4)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(5)).to_u32().unwrap().try_into().unwrap();

    let pixels = (call.arg(6)).to_pointer().unwrap() as *mut c_void;

    unsafe { gl::TextureSubImage1D(texture, level, xoffset, width, format, _type, pixels) };
}

pub fn retrace_glTextureSubImage2D(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut level: GLint;
    level = (call.arg(1)).to_i32().unwrap();

    let mut xoffset: GLint;
    xoffset = (call.arg(2)).to_i32().unwrap();

    let mut yoffset: GLint;
    yoffset = (call.arg(3)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(4)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(5)).to_i32().unwrap();

    let mut format: GLenum;
    format = (call.arg(6)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(7)).to_u32().unwrap().try_into().unwrap();

    let pixels = (call.arg(8)).to_pointer().unwrap() as *mut c_void;

    unsafe { gl::TextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, _type, pixels) };
}

pub fn retrace_glTextureSubImage3D(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut level: GLint;
    level = (call.arg(1)).to_i32().unwrap();

    let mut xoffset: GLint;
    xoffset = (call.arg(2)).to_i32().unwrap();

    let mut yoffset: GLint;
    yoffset = (call.arg(3)).to_i32().unwrap();

    let mut zoffset: GLint;
    zoffset = (call.arg(4)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(5)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(6)).to_i32().unwrap();

    let mut depth: GLsizei;
    depth = (call.arg(7)).to_i32().unwrap();

    let mut format: GLenum;
    format = (call.arg(8)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(9)).to_u32().unwrap().try_into().unwrap();

    let pixels = (call.arg(10)).to_pointer().unwrap() as *mut c_void;

    unsafe { gl::TextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, _type, pixels) };
}

pub fn retrace_glCompressedTextureSubImage1D(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut level: GLint;
    level = (call.arg(1)).to_i32().unwrap();

    let mut xoffset: GLint;
    xoffset = (call.arg(2)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(3)).to_i32().unwrap();

    let mut format: GLenum;
    format = (call.arg(4)).to_u32().unwrap().try_into().unwrap();

    let mut imageSize: GLsizei;
    imageSize = (call.arg(5)).to_i32().unwrap();

    let data: &mut [c_void];
    let data = (call.arg(6)).to_pointer().unwrap() as *mut c_void;

    unsafe { gl::CompressedTextureSubImage1D(texture, level, xoffset, width, format, imageSize, data) };
}

pub fn retrace_glCompressedTextureSubImage2D(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut level: GLint;
    level = (call.arg(1)).to_i32().unwrap();

    let mut xoffset: GLint;
    xoffset = (call.arg(2)).to_i32().unwrap();

    let mut yoffset: GLint;
    yoffset = (call.arg(3)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(4)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(5)).to_i32().unwrap();

    let mut format: GLenum;
    format = (call.arg(6)).to_u32().unwrap().try_into().unwrap();

    let mut imageSize: GLsizei;
    imageSize = (call.arg(7)).to_i32().unwrap();

    let data: &mut [c_void];
    let data = (call.arg(8)).to_pointer().unwrap() as *mut c_void;

    unsafe { gl::CompressedTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, imageSize, data) };
}

pub fn retrace_glCompressedTextureSubImage3D(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut level: GLint;
    level = (call.arg(1)).to_i32().unwrap();

    let mut xoffset: GLint;
    xoffset = (call.arg(2)).to_i32().unwrap();

    let mut yoffset: GLint;
    yoffset = (call.arg(3)).to_i32().unwrap();

    let mut zoffset: GLint;
    zoffset = (call.arg(4)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(5)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(6)).to_i32().unwrap();

    let mut depth: GLsizei;
    depth = (call.arg(7)).to_i32().unwrap();

    let mut format: GLenum;
    format = (call.arg(8)).to_u32().unwrap().try_into().unwrap();

    let mut imageSize: GLsizei;
    imageSize = (call.arg(9)).to_i32().unwrap();

    let data: &mut [c_void];
    let data = (call.arg(10)).to_pointer().unwrap() as *mut c_void;

    unsafe { gl::CompressedTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) };
}

pub fn retrace_glCopyTextureSubImage1D(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut level: GLint;
    level = (call.arg(1)).to_i32().unwrap();

    let mut xoffset: GLint;
    xoffset = (call.arg(2)).to_i32().unwrap();

    let mut x: GLint;
    x = (call.arg(3)).to_i32().unwrap();

    let mut y: GLint;
    y = (call.arg(4)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(5)).to_i32().unwrap();

    unsafe { gl::CopyTextureSubImage1D(texture, level, xoffset, x, y, width) };
}

pub fn retrace_glCopyTextureSubImage2D(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut level: GLint;
    level = (call.arg(1)).to_i32().unwrap();

    let mut xoffset: GLint;
    xoffset = (call.arg(2)).to_i32().unwrap();

    let mut yoffset: GLint;
    yoffset = (call.arg(3)).to_i32().unwrap();

    let mut x: GLint;
    x = (call.arg(4)).to_i32().unwrap();

    let mut y: GLint;
    y = (call.arg(5)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(6)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(7)).to_i32().unwrap();

    unsafe { gl::CopyTextureSubImage2D(texture, level, xoffset, yoffset, x, y, width, height) };
}

pub fn retrace_glCopyTextureSubImage3D(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut level: GLint;
    level = (call.arg(1)).to_i32().unwrap();

    let mut xoffset: GLint;
    xoffset = (call.arg(2)).to_i32().unwrap();

    let mut yoffset: GLint;
    yoffset = (call.arg(3)).to_i32().unwrap();

    let mut zoffset: GLint;
    zoffset = (call.arg(4)).to_i32().unwrap();

    let mut x: GLint;
    x = (call.arg(5)).to_i32().unwrap();

    let mut y: GLint;
    y = (call.arg(6)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(7)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(8)).to_i32().unwrap();

    unsafe { gl::CopyTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, x, y, width, height) };
}

pub fn retrace_glTextureParameterf(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut param: GLfloat;
    param = (call.arg(2)).to_f32().unwrap();

    unsafe { gl::TextureParameterf(texture, pname, param) };
}

pub fn retrace_glTextureParameterfv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLfloat];
    params = _allocator.alloc_array::<GLfloat>(&call.arg(2));
    let _a_GLfloat148_0 = (call.arg(2)).to_array();
    if let Some(_a_GLfloat148_0) = _a_GLfloat148_0 {
        for _jGLfloat148 in 0.._a_GLfloat148_0.values.len() {
    params[_jGLfloat148] = (*_a_GLfloat148_0.values[_jGLfloat148]).to_f32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

    unsafe { gl::TextureParameterfv(texture, pname, params) };
}

pub fn retrace_glTextureParameteri(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut param: GLint;
    param = (call.arg(2)).to_i32().unwrap();

    unsafe { gl::TextureParameteri(texture, pname, param) };
}

pub fn retrace_glTextureParameterIiv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLint];
    params = _allocator.alloc_array::<GLint>(&call.arg(2));
    let _a_GLint179_0 = (call.arg(2)).to_array();
    if let Some(_a_GLint179_0) = _a_GLint179_0 {
        for _jGLint179 in 0.._a_GLint179_0.values.len() {
    params[_jGLint179] = (*_a_GLint179_0.values[_jGLint179]).to_i32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

    unsafe { gl::TextureParameterIiv(texture, pname, params) };
}

pub fn retrace_glTextureParameterIuiv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLuint];
    params = _allocator.alloc_array::<GLuint>(&call.arg(2));
    let _a_GLuint144_0 = (call.arg(2)).to_array();
    if let Some(_a_GLuint144_0) = _a_GLuint144_0 {
        for _jGLuint144 in 0.._a_GLuint144_0.values.len() {
    params[_jGLuint144] = (*_a_GLuint144_0.values[_jGLuint144]).to_u32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

    unsafe { gl::TextureParameterIuiv(texture, pname, params) };
}

pub fn retrace_glTextureParameteriv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLint];
    params = _allocator.alloc_array::<GLint>(&call.arg(2));
    let _a_GLint180_0 = (call.arg(2)).to_array();
    if let Some(_a_GLint180_0) = _a_GLint180_0 {
        for _jGLint180 in 0.._a_GLint180_0.values.len() {
    params[_jGLint180] = (*_a_GLint180_0.values[_jGLint180]).to_i32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

    unsafe { gl::TextureParameteriv(texture, pname, params) };
}

pub fn retrace_glGenerateTextureMipmap(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    unsafe { gl::GenerateTextureMipmap(texture) };
}

pub fn retrace_glBindTextureUnit(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut unit: GLuint;
    unit = (call.arg(0)).to_u32().unwrap();

    let mut texture: GLuint;
    texture = (call.arg(1)).to_u32().unwrap();
    texture = self._texture_map[texture];

    unsafe { gl::BindTextureUnit(unit, texture) };
}

pub fn retrace_glGetTextureImage(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut level: GLint;
    level = (call.arg(1)).to_i32().unwrap();

    let mut format: GLenum;
    format = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let mut bufSize: GLsizei;
    bufSize = (call.arg(4)).to_i32().unwrap();

    let pixels = (call.arg(5)).to_pointer();

    let _pack_buffer = 0;
    if self.context.features("pixel_buffer_object") {
//not found in gl!        unsafe { gl::GetIntegerv(gl::PIXEL_PACK_BUFFER_BINDING, &_pack_buffer) };
    }
     let buffer = Vec::<u8>::new();
    if _pack_buffer != 0 {
     buffer.resize(call.arg(4).to_u32().unwrap(), 0);
    }
    pixels = buffer.data();
//not found in gl!    unsafe { gl::GetTextureImage(texture, level, format, _type, bufSize, pixels) };
}

pub fn retrace_glGetCompressedTextureImage(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut level: GLint;
    level = (call.arg(1)).to_i32().unwrap();

    let mut bufSize: GLsizei;
    bufSize = (call.arg(2)).to_i32().unwrap();

    let pixels = (call.arg(3)).to_pointer();

    let _pack_buffer = 0;
    if self.context.features("pixel_buffer_object") {
//not found in gl!        unsafe { gl::GetIntegerv(gl::PIXEL_PACK_BUFFER_BINDING, &_pack_buffer) };
    }
     let buffer = Vec::<u8>::new();
    if _pack_buffer != 0 {
    return;
    }
//not found in gl!    unsafe { gl::GetCompressedTextureImage(texture, level, bufSize, pixels) };
}

pub fn retrace_glCreateVertexArrays(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut n: GLsizei;
    n = (call.arg(0)).to_i32().unwrap();

    let arrays: &mut [GLuint];
    arrays = _allocator.alloc_array::<GLuint>(&call.arg(1));

//not found in gl!    unsafe { gl::CreateVertexArrays(n, arrays) };
    let _aGLuint146 = (call.arg(1)).to_array();
    if (_aGLuint146) {
        for _jGLuint146 in 0.._aGLuint146.values.len() {
    let _origResult: GLuint;
    _origResult = (_aGLuint146.values[_jGLuint146]).to_u32().unwrap();
    self._array_map[DUMMY_CONTEXT][_origResult] = arrays[_jGLuint146]; 
        }
    }
}

pub fn retrace_glDisableVertexArrayAttrib(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut vaobj: GLuint;
    vaobj = (call.arg(0)).to_u32().unwrap();
    vaobj = self._array_map[DUMMY_CONTEXT][vaobj];

    let mut index: GLuint;
    index = (call.arg(1)).to_u32().unwrap();

    unsafe { gl::DisableVertexArrayAttrib(vaobj, index) };
}

pub fn retrace_glEnableVertexArrayAttrib(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut vaobj: GLuint;
    vaobj = (call.arg(0)).to_u32().unwrap();
    vaobj = self._array_map[DUMMY_CONTEXT][vaobj];

    let mut index: GLuint;
    index = (call.arg(1)).to_u32().unwrap();

    unsafe { gl::EnableVertexArrayAttrib(vaobj, index) };
}

pub fn retrace_glVertexArrayElementBuffer(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut vaobj: GLuint;
    vaobj = (call.arg(0)).to_u32().unwrap();
    vaobj = self._array_map[DUMMY_CONTEXT][vaobj];

    let mut buffer: GLuint;
    buffer = (call.arg(1)).to_u32().unwrap();
    buffer = self._buffer_map[buffer];

    unsafe { gl::VertexArrayElementBuffer(vaobj, buffer) };
}

pub fn retrace_glVertexArrayVertexBuffer(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut vaobj: GLuint;
    vaobj = (call.arg(0)).to_u32().unwrap();
    vaobj = self._array_map[DUMMY_CONTEXT][vaobj];

    let mut bindingindex: GLuint;
    bindingindex = (call.arg(1)).to_u32().unwrap();

    let mut buffer: GLuint;
    buffer = (call.arg(2)).to_u32().unwrap();
    buffer = self._buffer_map[buffer];

    let mut offset: GLintptr;
    offset = (call.arg(3)).to_i32().unwrap();

    let mut stride: GLsizei;
    stride = (call.arg(4)).to_i32().unwrap();

    unsafe { gl::VertexArrayVertexBuffer(vaobj, bindingindex, buffer, offset, stride) };
}

pub fn retrace_glVertexArrayVertexBuffers(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut vaobj: GLuint;
    vaobj = (call.arg(0)).to_u32().unwrap();
    vaobj = self._array_map[DUMMY_CONTEXT][vaobj];

    let mut first: GLuint;
    first = (call.arg(1)).to_u32().unwrap();

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let buffers: &mut [GLuint];
    buffers = _allocator.alloc_array::<GLuint>(&call.arg(3));
    let _a_GLuint147_0 = (call.arg(3)).to_array();
    if let Some(_a_GLuint147_0) = _a_GLuint147_0 {
        for _jGLuint147 in 0.._a_GLuint147_0.values.len() {
    buffers[_jGLuint147] = (*_a_GLuint147_0.values[_jGLuint147]).to_u32().unwrap();
        }
    }
    let buffers = buffers.as_mut_ptr();

    let offsets: &mut [GLintptr];
    offsets = _allocator.alloc_array::<GLintptr>(&call.arg(4));
    let _a_GLintptr1_0 = (call.arg(4)).to_array();
    if let Some(_a_GLintptr1_0) = _a_GLintptr1_0 {
        for _jGLintptr1 in 0.._a_GLintptr1_0.values.len() {
    offsets[_jGLintptr1] = (*_a_GLintptr1_0.values[_jGLintptr1]).to_i32().unwrap();
        }
    }
    let offsets = offsets.as_mut_ptr();

    let strides: &mut [GLsizei];
    strides = _allocator.alloc_array::<GLsizei>(&call.arg(5));
    let _a_GLsizei9_0 = (call.arg(5)).to_array();
    if let Some(_a_GLsizei9_0) = _a_GLsizei9_0 {
        for _jGLsizei9 in 0.._a_GLsizei9_0.values.len() {
    strides[_jGLsizei9] = (*_a_GLsizei9_0.values[_jGLsizei9]).to_i32().unwrap();
        }
    }
    let strides = strides.as_mut_ptr();

    unsafe { gl::VertexArrayVertexBuffers(vaobj, first, count, buffers, offsets, strides) };
}

pub fn retrace_glVertexArrayAttribBinding(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut vaobj: GLuint;
    vaobj = (call.arg(0)).to_u32().unwrap();
    vaobj = self._array_map[DUMMY_CONTEXT][vaobj];

    let mut attribindex: GLuint;
    attribindex = (call.arg(1)).to_u32().unwrap();

    let mut bindingindex: GLuint;
    bindingindex = (call.arg(2)).to_u32().unwrap();

    unsafe { gl::VertexArrayAttribBinding(vaobj, attribindex, bindingindex) };
}

pub fn retrace_glVertexArrayAttribFormat(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut vaobj: GLuint;
    vaobj = (call.arg(0)).to_u32().unwrap();
    vaobj = self._array_map[DUMMY_CONTEXT][vaobj];

    let mut attribindex: GLuint;
    attribindex = (call.arg(1)).to_u32().unwrap();

    let mut size: GLint;
    size = (call.arg(2)).to_i32().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let mut normalized: GLboolean;
    normalized = (call.arg(4)).to_u32().unwrap() as u8;

    let mut relativeoffset: GLuint;
    relativeoffset = (call.arg(5)).to_u32().unwrap();

    unsafe { gl::VertexArrayAttribFormat(vaobj, attribindex, size, _type, normalized, relativeoffset) };
}

pub fn retrace_glVertexArrayAttribIFormat(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut vaobj: GLuint;
    vaobj = (call.arg(0)).to_u32().unwrap();
    vaobj = self._array_map[DUMMY_CONTEXT][vaobj];

    let mut attribindex: GLuint;
    attribindex = (call.arg(1)).to_u32().unwrap();

    let mut size: GLint;
    size = (call.arg(2)).to_i32().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let mut relativeoffset: GLuint;
    relativeoffset = (call.arg(4)).to_u32().unwrap();

    unsafe { gl::VertexArrayAttribIFormat(vaobj, attribindex, size, _type, relativeoffset) };
}

pub fn retrace_glVertexArrayAttribLFormat(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut vaobj: GLuint;
    vaobj = (call.arg(0)).to_u32().unwrap();
    vaobj = self._array_map[DUMMY_CONTEXT][vaobj];

    let mut attribindex: GLuint;
    attribindex = (call.arg(1)).to_u32().unwrap();

    let mut size: GLint;
    size = (call.arg(2)).to_i32().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let mut relativeoffset: GLuint;
    relativeoffset = (call.arg(4)).to_u32().unwrap();

    unsafe { gl::VertexArrayAttribLFormat(vaobj, attribindex, size, _type, relativeoffset) };
}

pub fn retrace_glVertexArrayBindingDivisor(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut vaobj: GLuint;
    vaobj = (call.arg(0)).to_u32().unwrap();
    vaobj = self._array_map[DUMMY_CONTEXT][vaobj];

    let mut bindingindex: GLuint;
    bindingindex = (call.arg(1)).to_u32().unwrap();

    let mut divisor: GLuint;
    divisor = (call.arg(2)).to_u32().unwrap();

    unsafe { gl::VertexArrayBindingDivisor(vaobj, bindingindex, divisor) };
}

pub fn retrace_glCreateSamplers(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut n: GLsizei;
    n = (call.arg(0)).to_i32().unwrap();

    let samplers: &mut [GLuint];
    samplers = _allocator.alloc_array::<GLuint>(&call.arg(1));

//not found in gl!    unsafe { gl::CreateSamplers(n, samplers) };
    let _aGLuint149 = (call.arg(1)).to_array();
    if (_aGLuint149) {
        for _jGLuint149 in 0.._aGLuint149.values.len() {
    let _origResult: GLuint;
    _origResult = (_aGLuint149.values[_jGLuint149]).to_u32().unwrap();
    self._sampler_map[_origResult] = samplers[_jGLuint149]; 
        }
    }
}

pub fn retrace_glCreateProgramPipelines(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut n: GLsizei;
    n = (call.arg(0)).to_i32().unwrap();

    let pipelines: &mut [GLuint];
    pipelines = _allocator.alloc_array::<GLuint>(&call.arg(1));

//not found in gl!    unsafe { gl::CreateProgramPipelines(n, pipelines) };
    let _aGLuint151 = (call.arg(1)).to_array();
    if (_aGLuint151) {
        for _jGLuint151 in 0.._aGLuint151.values.len() {
    let _origResult: GLuint;
    _origResult = (_aGLuint151.values[_jGLuint151]).to_u32().unwrap();
    self._pipeline_map[_origResult] = pipelines[_jGLuint151]; 
        }
    }
}

pub fn retrace_glCreateQueries(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut n: GLsizei;
    n = (call.arg(1)).to_i32().unwrap();

    let ids: &mut [GLuint];
    ids = _allocator.alloc_array::<GLuint>(&call.arg(2));

//not found in gl!    unsafe { gl::CreateQueries(target, n, ids) };
    let _aGLuint153 = (call.arg(2)).to_array();
    if (_aGLuint153) {
        for _jGLuint153 in 0.._aGLuint153.values.len() {
    let _origResult: GLuint;
    _origResult = (_aGLuint153.values[_jGLuint153]).to_u32().unwrap();
    self._query_map[_origResult] = ids[_jGLuint153]; 
        }
    }
}

pub fn retrace_glGetQueryBufferObjecti64v(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut id: GLuint;
    id = (call.arg(0)).to_u32().unwrap();
    id = self._query_map[id];

    let mut buffer: GLuint;
    buffer = (call.arg(1)).to_u32().unwrap();
    buffer = self._buffer_map[buffer];

    let mut pname: GLenum;
    pname = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut offset: GLintptr;
    offset = (call.arg(3)).to_i32().unwrap();

    unsafe { gl::GetQueryBufferObjecti64v(id, buffer, pname, offset) };
}

pub fn retrace_glGetQueryBufferObjectiv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut id: GLuint;
    id = (call.arg(0)).to_u32().unwrap();
    id = self._query_map[id];

    let mut buffer: GLuint;
    buffer = (call.arg(1)).to_u32().unwrap();
    buffer = self._buffer_map[buffer];

    let mut pname: GLenum;
    pname = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut offset: GLintptr;
    offset = (call.arg(3)).to_i32().unwrap();

    unsafe { gl::GetQueryBufferObjectiv(id, buffer, pname, offset) };
}

pub fn retrace_glGetQueryBufferObjectui64v(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut id: GLuint;
    id = (call.arg(0)).to_u32().unwrap();
    id = self._query_map[id];

    let mut buffer: GLuint;
    buffer = (call.arg(1)).to_u32().unwrap();
    buffer = self._buffer_map[buffer];

    let mut pname: GLenum;
    pname = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut offset: GLintptr;
    offset = (call.arg(3)).to_i32().unwrap();

    unsafe { gl::GetQueryBufferObjectui64v(id, buffer, pname, offset) };
}

pub fn retrace_glGetQueryBufferObjectuiv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut id: GLuint;
    id = (call.arg(0)).to_u32().unwrap();
    id = self._query_map[id];

    let mut buffer: GLuint;
    buffer = (call.arg(1)).to_u32().unwrap();
    buffer = self._buffer_map[buffer];

    let mut pname: GLenum;
    pname = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut offset: GLintptr;
    offset = (call.arg(3)).to_i32().unwrap();

    unsafe { gl::GetQueryBufferObjectuiv(id, buffer, pname, offset) };
}

pub fn retrace_glDrawBuffersARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut n: GLsizei;
    n = (call.arg(0)).to_i32().unwrap();

    let bufs: &mut [GLenum];
    bufs = _allocator.alloc_array::<GLenum>(&call.arg(1));
    let _a_GLenum18_0 = (call.arg(1)).to_array();
    if let Some(_a_GLenum18_0) = _a_GLenum18_0 {
        for _jGLenum18 in 0.._a_GLenum18_0.values.len() {
    bufs[_jGLenum18] = (*_a_GLenum18_0.values[_jGLenum18]).to_u32().unwrap().try_into().unwrap();
        }
    }
    let bufs = bufs.as_mut_ptr();

//not found in gl!    unsafe { gl::DrawBuffersARB(n, bufs) };
}

pub fn retrace_glBlendEquationiARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut buf: GLuint;
    buf = (call.arg(0)).to_u32().unwrap();

    let mut mode: GLenum;
    mode = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::BlendEquationiARB(buf, mode) };
}

pub fn retrace_glBlendEquationSeparateiARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut buf: GLuint;
    buf = (call.arg(0)).to_u32().unwrap();

    let mut modeRGB: GLenum;
    modeRGB = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut modeAlpha: GLenum;
    modeAlpha = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::BlendEquationSeparateiARB(buf, modeRGB, modeAlpha) };
}

pub fn retrace_glBlendFunciARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut buf: GLuint;
    buf = (call.arg(0)).to_u32().unwrap();

    let mut src: GLenum;
    src = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut dst: GLenum;
    dst = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::BlendFunciARB(buf, src, dst) };
}

pub fn retrace_glBlendFuncSeparateiARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut buf: GLuint;
    buf = (call.arg(0)).to_u32().unwrap();

    let mut srcRGB: GLenum;
    srcRGB = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut dstRGB: GLenum;
    dstRGB = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut srcAlpha: GLenum;
    srcAlpha = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let mut dstAlpha: GLenum;
    dstAlpha = (call.arg(4)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::BlendFuncSeparateiARB(buf, srcRGB, dstRGB, srcAlpha, dstAlpha) };
}

pub fn retrace_glDrawElementsBaseVertex(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let indices: &mut [GLc_void];
            indices = (call.arg(3)).to_pointer().unwrap() as *mut c_void;

    let mut basevertex: GLint;
    basevertex = (call.arg(4)).to_i32().unwrap();

    unsafe { gl::DrawElementsBaseVertex(mode, count, _type, indices, basevertex) };
}

pub fn retrace_glDrawRangeElementsBaseVertex(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut start: GLuint;
    start = (call.arg(1)).to_u32().unwrap();

    let mut end: GLuint;
    end = (call.arg(2)).to_u32().unwrap();

    let mut count: GLsizei;
    count = (call.arg(3)).to_i32().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(4)).to_u32().unwrap().try_into().unwrap();

    let indices: &mut [GLc_void];
            indices = (call.arg(5)).to_pointer().unwrap() as *mut c_void;

    let mut basevertex: GLint;
    basevertex = (call.arg(6)).to_i32().unwrap();

    unsafe { gl::DrawRangeElementsBaseVertex(mode, start, end, count, _type, indices, basevertex) };
}

pub fn retrace_glDrawElementsInstancedBaseVertex(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let indices: &mut [GLc_void];
            indices = (call.arg(3)).to_pointer().unwrap() as *mut c_void;

    let mut instancecount: GLsizei;
    instancecount = (call.arg(4)).to_i32().unwrap();

    let mut basevertex: GLint;
    basevertex = (call.arg(5)).to_i32().unwrap();

    unsafe { gl::DrawElementsInstancedBaseVertex(mode, count, _type, indices, instancecount, basevertex) };
}

pub fn retrace_glMultiDrawElementsBaseVertex(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let count: &mut [GLsizei];
    count = _allocator.alloc_array::<GLsizei>(&call.arg(1));
    let _a_GLsizei10_0 = (call.arg(1)).to_array();
    if let Some(_a_GLsizei10_0) = _a_GLsizei10_0 {
        for _jGLsizei10 in 0.._a_GLsizei10_0.values.len() {
    count[_jGLsizei10] = (*_a_GLsizei10_0.values[_jGLsizei10]).to_i32().unwrap();
        }
    }
    let count = count.as_mut_ptr();

    let mut _type: GLenum;
    _type = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let indices: &mut [GLc_void];
    indices = _allocator.alloc_array::< GLvoid >(&call.arg(3));
    let _a_constGLvoid232_0 = (call.arg(3)).to_array();
    if let Some(_a_constGLvoid232_0) = _a_constGLvoid232_0 {
        for _jconstGLvoid232 in 0.._a_constGLvoid232_0.values.len() {
            indices[_jconstGLvoid232] = (*_a_constGLvoid232_0.values[_jconstGLvoid232]).to_pointer().unwrap() as *mut c_void;
        }
    }
    let indices = indices.as_mut_ptr();

    let mut drawcount: GLsizei;
    drawcount = (call.arg(4)).to_i32().unwrap();

    let basevertex: &mut [GLint];
    basevertex = _allocator.alloc_array::<GLint>(&call.arg(5));
    let _a_GLint181_0 = (call.arg(5)).to_array();
    if let Some(_a_GLint181_0) = _a_GLint181_0 {
        for _jGLint181 in 0.._a_GLint181_0.values.len() {
    basevertex[_jGLint181] = (*_a_GLint181_0.values[_jGLint181]).to_i32().unwrap();
        }
    }
    let basevertex = basevertex.as_mut_ptr();

    unsafe { gl::MultiDrawElementsBaseVertex(mode, count, _type, indices, drawcount, basevertex) };
}

pub fn retrace_glDrawArraysIndirect(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let indirect: &mut [GLc_void];
    let indirect = (call.arg(1)).to_pointer().unwrap() as *mut c_void;

    unsafe { gl::DrawArraysIndirect(mode, indirect) };
}

pub fn retrace_glDrawElementsIndirect(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let indirect: &mut [GLc_void];
    let indirect = (call.arg(2)).to_pointer().unwrap() as *mut c_void;

    unsafe { gl::DrawElementsIndirect(mode, _type, indirect) };
}

pub fn retrace_glDrawArraysInstancedARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut first: GLint;
    first = (call.arg(1)).to_i32().unwrap();

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let mut instancecount: GLsizei;
    instancecount = (call.arg(3)).to_i32().unwrap();

//not found in gl!    unsafe { gl::DrawArraysInstancedARB(mode, first, count, instancecount) };
}

pub fn retrace_glDrawElementsInstancedARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let indices: &mut [GLc_void];
            indices = (call.arg(3)).to_pointer().unwrap() as *mut c_void;

    let mut instancecount: GLsizei;
    instancecount = (call.arg(4)).to_i32().unwrap();

//not found in gl!    unsafe { gl::DrawElementsInstancedARB(mode, count, _type, indices, instancecount) };
}

pub fn retrace_glFramebufferParameteri(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut param: GLint;
    param = (call.arg(2)).to_i32().unwrap();

    unsafe { gl::FramebufferParameteri(target, pname, param) };
}

pub fn retrace_glBindRenderbuffer(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut renderbuffer: GLuint;
    renderbuffer = (call.arg(1)).to_u32().unwrap();
    renderbuffer = self._renderbuffer_map[renderbuffer];

    unsafe { gl::BindRenderbuffer(target, renderbuffer) };
}

pub fn retrace_glDeleteRenderbuffers(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut n: GLsizei;
    n = (call.arg(0)).to_i32().unwrap();

    let renderbuffers: &mut [GLuint];
    renderbuffers = _allocator.alloc_array::<GLuint>(&call.arg(1));
    let _a_GLuint154_0 = (call.arg(1)).to_array();
    if let Some(_a_GLuint154_0) = _a_GLuint154_0 {
        for _jGLuint154 in 0.._a_GLuint154_0.values.len() {
    renderbuffers[_jGLuint154] = (*_a_GLuint154_0.values[_jGLuint154]).to_u32().unwrap();
    renderbuffers[_jGLuint154] = self._renderbuffer_map[renderbuffers[_jGLuint154]];
        }
    }
    let renderbuffers = renderbuffers.as_mut_ptr();

    unsafe { gl::DeleteRenderbuffers(n, renderbuffers) };
}

pub fn retrace_glGenRenderbuffers(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut n: GLsizei;
    n = (call.arg(0)).to_i32().unwrap();

    let renderbuffers: &mut [GLuint];
    renderbuffers = _allocator.alloc_array::<GLuint>(&call.arg(1));

//not found in gl!    unsafe { gl::GenRenderbuffers(n, renderbuffers) };
    let _aGLuint156 = (call.arg(1)).to_array();
    if (_aGLuint156) {
        for _jGLuint156 in 0.._aGLuint156.values.len() {
    let _origResult: GLuint;
    _origResult = (_aGLuint156.values[_jGLuint156]).to_u32().unwrap();
    self._renderbuffer_map[_origResult] = renderbuffers[_jGLuint156]; 
        }
    }
}

pub fn retrace_glRenderbufferStorage(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut internalformat: GLenum;
    internalformat = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut width: GLsizei;
    width = (call.arg(2)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(3)).to_i32().unwrap();

    unsafe { gl::RenderbufferStorage(target, internalformat, width, height) };
}

pub fn retrace_glBindFramebuffer(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut framebuffer: GLuint;
    framebuffer = (call.arg(1)).to_u32().unwrap();
    framebuffer = self._framebuffer_map[framebuffer];

    unsafe { gl::BindFramebuffer(target, framebuffer) };
}

pub fn retrace_glDeleteFramebuffers(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut n: GLsizei;
    n = (call.arg(0)).to_i32().unwrap();

    let framebuffers: &mut [GLuint];
    framebuffers = _allocator.alloc_array::<GLuint>(&call.arg(1));
    let _a_GLuint157_0 = (call.arg(1)).to_array();
    if let Some(_a_GLuint157_0) = _a_GLuint157_0 {
        for _jGLuint157 in 0.._a_GLuint157_0.values.len() {
    framebuffers[_jGLuint157] = (*_a_GLuint157_0.values[_jGLuint157]).to_u32().unwrap();
    framebuffers[_jGLuint157] = self._framebuffer_map[framebuffers[_jGLuint157]];
        }
    }
    let framebuffers = framebuffers.as_mut_ptr();

    unsafe { gl::DeleteFramebuffers(n, framebuffers) };
}

pub fn retrace_glGenFramebuffers(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut n: GLsizei;
    n = (call.arg(0)).to_i32().unwrap();

    let framebuffers: &mut [GLuint];
    framebuffers = _allocator.alloc_array::<GLuint>(&call.arg(1));

//not found in gl!    unsafe { gl::GenFramebuffers(n, framebuffers) };
    let _aGLuint159 = (call.arg(1)).to_array();
    if (_aGLuint159) {
        for _jGLuint159 in 0.._aGLuint159.values.len() {
    let _origResult: GLuint;
    _origResult = (_aGLuint159.values[_jGLuint159]).to_u32().unwrap();
    self._framebuffer_map[_origResult] = framebuffers[_jGLuint159]; 
        }
    }
}

pub fn retrace_glCheckFramebufferStatus(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let _result = unsafe { gl::CheckFramebufferStatus(target) };

    let _origResult = call.ret.to_i32().unwrap();
}

pub fn retrace_glFramebufferTexture1D(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut attachment: GLenum;
    attachment = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut textarget: GLenum;
    textarget = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut texture: GLuint;
    texture = (call.arg(3)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut level: GLint;
    level = (call.arg(4)).to_i32().unwrap();

    unsafe { gl::FramebufferTexture1D(target, attachment, textarget, texture, level) };
}

pub fn retrace_glFramebufferTexture2D(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut attachment: GLenum;
    attachment = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut textarget: GLenum;
    textarget = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut texture: GLuint;
    texture = (call.arg(3)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut level: GLint;
    level = (call.arg(4)).to_i32().unwrap();

    unsafe { gl::FramebufferTexture2D(target, attachment, textarget, texture, level) };
}

pub fn retrace_glFramebufferTexture3D(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut attachment: GLenum;
    attachment = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut textarget: GLenum;
    textarget = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut texture: GLuint;
    texture = (call.arg(3)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut level: GLint;
    level = (call.arg(4)).to_i32().unwrap();

    let mut zoffset: GLint;
    zoffset = (call.arg(5)).to_i32().unwrap();

    unsafe { gl::FramebufferTexture3D(target, attachment, textarget, texture, level, zoffset) };
}

pub fn retrace_glFramebufferRenderbuffer(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut attachment: GLenum;
    attachment = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut renderbuffertarget: GLenum;
    renderbuffertarget = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut renderbuffer: GLuint;
    renderbuffer = (call.arg(3)).to_u32().unwrap();
    renderbuffer = self._renderbuffer_map[renderbuffer];

    unsafe { gl::FramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer) };
}

pub fn retrace_glGenerateMipmap(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    unsafe { gl::GenerateMipmap(target) };
}

pub fn retrace_glBlitFramebuffer(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut srcX0: GLint;
    srcX0 = (call.arg(0)).to_i32().unwrap();

    let mut srcY0: GLint;
    srcY0 = (call.arg(1)).to_i32().unwrap();

    let mut srcX1: GLint;
    srcX1 = (call.arg(2)).to_i32().unwrap();

    let mut srcY1: GLint;
    srcY1 = (call.arg(3)).to_i32().unwrap();

    let mut dstX0: GLint;
    dstX0 = (call.arg(4)).to_i32().unwrap();

    let mut dstY0: GLint;
    dstY0 = (call.arg(5)).to_i32().unwrap();

    let mut dstX1: GLint;
    dstX1 = (call.arg(6)).to_i32().unwrap();

    let mut dstY1: GLint;
    dstY1 = (call.arg(7)).to_i32().unwrap();

    let mut mask: GLbitfield;
    mask = (call.arg(8)).to_u32().unwrap().try_into().unwrap();

    let mut filter: GLenum;
    filter = (call.arg(9)).to_u32().unwrap().try_into().unwrap();

    glretrace::updateDrawable(std::max(dstX0, dstX1), std::max(dstY0, dstY1));
    unsafe { gl::BlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) };
}

pub fn retrace_glRenderbufferStorageMultisample(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut samples: GLsizei;
    samples = (call.arg(1)).to_i32().unwrap();
    let max_samples = 0;
//not found in gl!    unsafe { gl::GetIntegerv(gl::MAX_SAMPLES, &max_samples) };
    if samples > max_samples {
        samples = max_samples;
    }

    let mut internalformat: GLenum;
    internalformat = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut width: GLsizei;
    width = (call.arg(3)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(4)).to_i32().unwrap();

    unsafe { gl::RenderbufferStorageMultisample(target, samples, internalformat, width, height) };
}

pub fn retrace_glFramebufferTextureLayer(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut attachment: GLenum;
    attachment = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut texture: GLuint;
    texture = (call.arg(2)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut level: GLint;
    level = (call.arg(3)).to_i32().unwrap();

    let mut layer: GLint;
    layer = (call.arg(4)).to_i32().unwrap();

    unsafe { gl::FramebufferTextureLayer(target, attachment, texture, level, layer) };
}

pub fn retrace_glProgramParameteriARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut value: GLint;
    value = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::ProgramParameteriARB(program, pname, value) };
}

pub fn retrace_glFramebufferTextureARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut attachment: GLenum;
    attachment = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut texture: GLuint;
    texture = (call.arg(2)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut level: GLint;
    level = (call.arg(3)).to_i32().unwrap();

//not found in gl!    unsafe { gl::FramebufferTextureARB(target, attachment, texture, level) };
}

pub fn retrace_glFramebufferTextureLayerARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut attachment: GLenum;
    attachment = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut texture: GLuint;
    texture = (call.arg(2)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut level: GLint;
    level = (call.arg(3)).to_i32().unwrap();

    let mut layer: GLint;
    layer = (call.arg(4)).to_i32().unwrap();

//not found in gl!    unsafe { gl::FramebufferTextureLayerARB(target, attachment, texture, level, layer) };
}

pub fn retrace_glFramebufferTextureFaceARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut attachment: GLenum;
    attachment = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut texture: GLuint;
    texture = (call.arg(2)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut level: GLint;
    level = (call.arg(3)).to_i32().unwrap();

    let mut face: GLenum;
    face = (call.arg(4)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::FramebufferTextureFaceARB(target, attachment, texture, level, face) };
}

pub fn retrace_glProgramBinary(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut binaryFormat: GLenum;
    binaryFormat = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let binary: &mut [GLc_void];
    let binary = (call.arg(2)).to_pointer().unwrap() as *mut c_void;

    let mut length: GLsizei;
    length = (call.arg(3)).to_i32().unwrap();

    unsafe { gl::ProgramBinary(program, binaryFormat, binary, length) };
        let link_status = 0;
//not found in gl!        unsafe { gl::GetProgramiv(program, gl::LINK_STATUS, &link_status) };
        if link_status == 0 {
             println!("link failed");
        }
        let info_log_length = 0;
//not found in gl!        unsafe { gl::GetProgramiv(program, gl::INFO_LOG_LENGTH, &info_log_length) };
        if info_log_length > 1 {
             let infoLog = vec![0i8; info_log_length].as_mut_ptr();
//not found in gl!             unsafe { gl::GetProgramInfoLog(program, info_log_length, std::ptr::null_mut(), infoLog) };
        }
}

pub fn retrace_glProgramParameteri(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut value: GLint;
    value = (call.arg(2)).to_i32().unwrap();

    unsafe { gl::ProgramParameteri(program, pname, value) };
}

pub fn retrace_glGetTextureSubImage(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut level: GLint;
    level = (call.arg(1)).to_i32().unwrap();

    let mut xoffset: GLint;
    xoffset = (call.arg(2)).to_i32().unwrap();

    let mut yoffset: GLint;
    yoffset = (call.arg(3)).to_i32().unwrap();

    let mut zoffset: GLint;
    zoffset = (call.arg(4)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(5)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(6)).to_i32().unwrap();

    let mut depth: GLsizei;
    depth = (call.arg(7)).to_i32().unwrap();

    let mut format: GLenum;
    format = (call.arg(8)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(9)).to_u32().unwrap().try_into().unwrap();

    let mut bufSize: GLsizei;
    bufSize = (call.arg(10)).to_i32().unwrap();

    let pixels = (call.arg(11)).to_pointer();

    let _pack_buffer = 0;
    if self.context.features("pixel_buffer_object") {
//not found in gl!        unsafe { gl::GetIntegerv(gl::PIXEL_PACK_BUFFER_BINDING, &_pack_buffer) };
    }
     let buffer = Vec::<u8>::new();
    if _pack_buffer != 0 {
    return;
    }
//not found in gl!    unsafe { gl::GetTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, _type, bufSize, pixels) };
}

pub fn retrace_glGetCompressedTextureSubImage(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut level: GLint;
    level = (call.arg(1)).to_i32().unwrap();

    let mut xoffset: GLint;
    xoffset = (call.arg(2)).to_i32().unwrap();

    let mut yoffset: GLint;
    yoffset = (call.arg(3)).to_i32().unwrap();

    let mut zoffset: GLint;
    zoffset = (call.arg(4)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(5)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(6)).to_i32().unwrap();

    let mut depth: GLsizei;
    depth = (call.arg(7)).to_i32().unwrap();

    let mut bufSize: GLsizei;
    bufSize = (call.arg(8)).to_i32().unwrap();

    let pixels = (call.arg(9)).to_pointer();

    let _pack_buffer = 0;
    if self.context.features("pixel_buffer_object") {
//not found in gl!        unsafe { gl::GetIntegerv(gl::PIXEL_PACK_BUFFER_BINDING, &_pack_buffer) };
    }
     let buffer = Vec::<u8>::new();
    if _pack_buffer != 0 {
    return;
    }
//not found in gl!    unsafe { gl::GetCompressedTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels) };
}

pub fn retrace_glSpecializeShaderARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut shader: GLuint;
    shader = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    shader = self._handleARB_map[shader];
} else {
    shader = self._shader_map[shader];
}

    let pEntryPoint: &mut [GLchar];
    pEntryPoint = (call.arg(1)).to_string().unwrap();

    let mut numSpecializationConstants: GLuint;
    numSpecializationConstants = (call.arg(2)).to_u32().unwrap();

    let pConstantIndex: &mut [GLuint];
    pConstantIndex = _allocator.alloc_array::<GLuint>(&call.arg(3));
    let _a_GLuint160_0 = (call.arg(3)).to_array();
    if let Some(_a_GLuint160_0) = _a_GLuint160_0 {
        for _jGLuint160 in 0.._a_GLuint160_0.values.len() {
    pConstantIndex[_jGLuint160] = (*_a_GLuint160_0.values[_jGLuint160]).to_u32().unwrap();
        }
    }
    let pConstantIndex = pConstantIndex.as_mut_ptr();

    let pConstantValue: &mut [GLuint];
    pConstantValue = _allocator.alloc_array::<GLuint>(&call.arg(4));
    let _a_GLuint161_0 = (call.arg(4)).to_array();
    if let Some(_a_GLuint161_0) = _a_GLuint161_0 {
        for _jGLuint161 in 0.._a_GLuint161_0.values.len() {
    pConstantValue[_jGLuint161] = (*_a_GLuint161_0.values[_jGLuint161]).to_u32().unwrap();
        }
    }
    let pConstantValue = pConstantValue.as_mut_ptr();

//not found in gl!    unsafe { gl::SpecializeShaderARB(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue) };
}

pub fn retrace_glUniform1d(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut x: GLdouble;
    x = (call.arg(1)).to_f64().unwrap();

    unsafe { gl::Uniform1d(location, x) };
}

pub fn retrace_glUniform2d(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut x: GLdouble;
    x = (call.arg(1)).to_f64().unwrap();

    let mut y: GLdouble;
    y = (call.arg(2)).to_f64().unwrap();

    unsafe { gl::Uniform2d(location, x, y) };
}

pub fn retrace_glUniform3d(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut x: GLdouble;
    x = (call.arg(1)).to_f64().unwrap();

    let mut y: GLdouble;
    y = (call.arg(2)).to_f64().unwrap();

    let mut z: GLdouble;
    z = (call.arg(3)).to_f64().unwrap();

    unsafe { gl::Uniform3d(location, x, y, z) };
}

pub fn retrace_glUniform4d(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut x: GLdouble;
    x = (call.arg(1)).to_f64().unwrap();

    let mut y: GLdouble;
    y = (call.arg(2)).to_f64().unwrap();

    let mut z: GLdouble;
    z = (call.arg(3)).to_f64().unwrap();

    let mut w: GLdouble;
    w = (call.arg(4)).to_f64().unwrap();

    unsafe { gl::Uniform4d(location, x, y, z, w) };
}

pub fn retrace_glUniform1dv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let value: &mut [GLdouble];
    value = _allocator.alloc_array::<GLdouble>(&call.arg(2));
    let _a_GLdouble57_0 = (call.arg(2)).to_array();
    if let Some(_a_GLdouble57_0) = _a_GLdouble57_0 {
        for _jGLdouble57 in 0.._a_GLdouble57_0.values.len() {
    value[_jGLdouble57] = (*_a_GLdouble57_0.values[_jGLdouble57]).to_f64().unwrap();
        }
    }
    let value = value.as_mut_ptr();

    unsafe { gl::Uniform1dv(location, count, value) };
}

pub fn retrace_glUniform2dv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let value: &mut [GLdouble];
    value = _allocator.alloc_array::<GLdouble>(&call.arg(2));
    let _a_GLdouble58_0 = (call.arg(2)).to_array();
    if let Some(_a_GLdouble58_0) = _a_GLdouble58_0 {
        for _jGLdouble58 in 0.._a_GLdouble58_0.values.len() {
    value[_jGLdouble58] = (*_a_GLdouble58_0.values[_jGLdouble58]).to_f64().unwrap();
        }
    }
    let value = value.as_mut_ptr();

    unsafe { gl::Uniform2dv(location, count, value) };
}

pub fn retrace_glUniform3dv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let value: &mut [GLdouble];
    value = _allocator.alloc_array::<GLdouble>(&call.arg(2));
    let _a_GLdouble59_0 = (call.arg(2)).to_array();
    if let Some(_a_GLdouble59_0) = _a_GLdouble59_0 {
        for _jGLdouble59 in 0.._a_GLdouble59_0.values.len() {
    value[_jGLdouble59] = (*_a_GLdouble59_0.values[_jGLdouble59]).to_f64().unwrap();
        }
    }
    let value = value.as_mut_ptr();

    unsafe { gl::Uniform3dv(location, count, value) };
}

pub fn retrace_glUniform4dv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let value: &mut [GLdouble];
    value = _allocator.alloc_array::<GLdouble>(&call.arg(2));
    let _a_GLdouble60_0 = (call.arg(2)).to_array();
    if let Some(_a_GLdouble60_0) = _a_GLdouble60_0 {
        for _jGLdouble60 in 0.._a_GLdouble60_0.values.len() {
    value[_jGLdouble60] = (*_a_GLdouble60_0.values[_jGLdouble60]).to_f64().unwrap();
        }
    }
    let value = value.as_mut_ptr();

    unsafe { gl::Uniform4dv(location, count, value) };
}

pub fn retrace_glUniformMatrix2dv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let mut transpose: GLboolean;
    transpose = (call.arg(2)).to_u32().unwrap() as u8;

    let value: &mut [GLdouble];
    value = _allocator.alloc_array::<GLdouble>(&call.arg(3));
    let _a_GLdouble61_0 = (call.arg(3)).to_array();
    if let Some(_a_GLdouble61_0) = _a_GLdouble61_0 {
        for _jGLdouble61 in 0.._a_GLdouble61_0.values.len() {
    value[_jGLdouble61] = (*_a_GLdouble61_0.values[_jGLdouble61]).to_f64().unwrap();
        }
    }
    let value = value.as_mut_ptr();

    unsafe { gl::UniformMatrix2dv(location, count, transpose, value) };
}

pub fn retrace_glUniformMatrix3dv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let mut transpose: GLboolean;
    transpose = (call.arg(2)).to_u32().unwrap() as u8;

    let value: &mut [GLdouble];
    value = _allocator.alloc_array::<GLdouble>(&call.arg(3));
    let _a_GLdouble62_0 = (call.arg(3)).to_array();
    if let Some(_a_GLdouble62_0) = _a_GLdouble62_0 {
        for _jGLdouble62 in 0.._a_GLdouble62_0.values.len() {
    value[_jGLdouble62] = (*_a_GLdouble62_0.values[_jGLdouble62]).to_f64().unwrap();
        }
    }
    let value = value.as_mut_ptr();

    unsafe { gl::UniformMatrix3dv(location, count, transpose, value) };
}

pub fn retrace_glUniformMatrix4dv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let mut transpose: GLboolean;
    transpose = (call.arg(2)).to_u32().unwrap() as u8;

    let value: &mut [GLdouble];
    value = _allocator.alloc_array::<GLdouble>(&call.arg(3));
    let _a_GLdouble63_0 = (call.arg(3)).to_array();
    if let Some(_a_GLdouble63_0) = _a_GLdouble63_0 {
        for _jGLdouble63 in 0.._a_GLdouble63_0.values.len() {
    value[_jGLdouble63] = (*_a_GLdouble63_0.values[_jGLdouble63]).to_f64().unwrap();
        }
    }
    let value = value.as_mut_ptr();

    unsafe { gl::UniformMatrix4dv(location, count, transpose, value) };
}

pub fn retrace_glUniformMatrix2x3dv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let mut transpose: GLboolean;
    transpose = (call.arg(2)).to_u32().unwrap() as u8;

    let value: &mut [GLdouble];
    value = _allocator.alloc_array::<GLdouble>(&call.arg(3));
    let _a_GLdouble64_0 = (call.arg(3)).to_array();
    if let Some(_a_GLdouble64_0) = _a_GLdouble64_0 {
        for _jGLdouble64 in 0.._a_GLdouble64_0.values.len() {
    value[_jGLdouble64] = (*_a_GLdouble64_0.values[_jGLdouble64]).to_f64().unwrap();
        }
    }
    let value = value.as_mut_ptr();

    unsafe { gl::UniformMatrix2x3dv(location, count, transpose, value) };
}

pub fn retrace_glUniformMatrix2x4dv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let mut transpose: GLboolean;
    transpose = (call.arg(2)).to_u32().unwrap() as u8;

    let value: &mut [GLdouble];
    value = _allocator.alloc_array::<GLdouble>(&call.arg(3));
    let _a_GLdouble65_0 = (call.arg(3)).to_array();
    if let Some(_a_GLdouble65_0) = _a_GLdouble65_0 {
        for _jGLdouble65 in 0.._a_GLdouble65_0.values.len() {
    value[_jGLdouble65] = (*_a_GLdouble65_0.values[_jGLdouble65]).to_f64().unwrap();
        }
    }
    let value = value.as_mut_ptr();

    unsafe { gl::UniformMatrix2x4dv(location, count, transpose, value) };
}

pub fn retrace_glUniformMatrix3x2dv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let mut transpose: GLboolean;
    transpose = (call.arg(2)).to_u32().unwrap() as u8;

    let value: &mut [GLdouble];
    value = _allocator.alloc_array::<GLdouble>(&call.arg(3));
    let _a_GLdouble66_0 = (call.arg(3)).to_array();
    if let Some(_a_GLdouble66_0) = _a_GLdouble66_0 {
        for _jGLdouble66 in 0.._a_GLdouble66_0.values.len() {
    value[_jGLdouble66] = (*_a_GLdouble66_0.values[_jGLdouble66]).to_f64().unwrap();
        }
    }
    let value = value.as_mut_ptr();

    unsafe { gl::UniformMatrix3x2dv(location, count, transpose, value) };
}

pub fn retrace_glUniformMatrix3x4dv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let mut transpose: GLboolean;
    transpose = (call.arg(2)).to_u32().unwrap() as u8;

    let value: &mut [GLdouble];
    value = _allocator.alloc_array::<GLdouble>(&call.arg(3));
    let _a_GLdouble67_0 = (call.arg(3)).to_array();
    if let Some(_a_GLdouble67_0) = _a_GLdouble67_0 {
        for _jGLdouble67 in 0.._a_GLdouble67_0.values.len() {
    value[_jGLdouble67] = (*_a_GLdouble67_0.values[_jGLdouble67]).to_f64().unwrap();
        }
    }
    let value = value.as_mut_ptr();

    unsafe { gl::UniformMatrix3x4dv(location, count, transpose, value) };
}

pub fn retrace_glUniformMatrix4x2dv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let mut transpose: GLboolean;
    transpose = (call.arg(2)).to_u32().unwrap() as u8;

    let value: &mut [GLdouble];
    value = _allocator.alloc_array::<GLdouble>(&call.arg(3));
    let _a_GLdouble68_0 = (call.arg(3)).to_array();
    if let Some(_a_GLdouble68_0) = _a_GLdouble68_0 {
        for _jGLdouble68 in 0.._a_GLdouble68_0.values.len() {
    value[_jGLdouble68] = (*_a_GLdouble68_0.values[_jGLdouble68]).to_f64().unwrap();
        }
    }
    let value = value.as_mut_ptr();

    unsafe { gl::UniformMatrix4x2dv(location, count, transpose, value) };
}

pub fn retrace_glUniformMatrix4x3dv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let mut transpose: GLboolean;
    transpose = (call.arg(2)).to_u32().unwrap() as u8;

    let value: &mut [GLdouble];
    value = _allocator.alloc_array::<GLdouble>(&call.arg(3));
    let _a_GLdouble69_0 = (call.arg(3)).to_array();
    if let Some(_a_GLdouble69_0) = _a_GLdouble69_0 {
        for _jGLdouble69 in 0.._a_GLdouble69_0.values.len() {
    value[_jGLdouble69] = (*_a_GLdouble69_0.values[_jGLdouble69]).to_f64().unwrap();
        }
    }
    let value = value.as_mut_ptr();

    unsafe { gl::UniformMatrix4x3dv(location, count, transpose, value) };
}

pub fn retrace_glUniform1i64ARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut x: GLint64;
    x = (call.arg(1)).to_i32().unwrap();

//not found in gl!    unsafe { gl::Uniform1i64ARB(location, x) };
}

pub fn retrace_glUniform2i64ARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut x: GLint64;
    x = (call.arg(1)).to_i32().unwrap();

    let mut y: GLint64;
    y = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::Uniform2i64ARB(location, x, y) };
}

pub fn retrace_glUniform3i64ARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut x: GLint64;
    x = (call.arg(1)).to_i32().unwrap();

    let mut y: GLint64;
    y = (call.arg(2)).to_i32().unwrap();

    let mut z: GLint64;
    z = (call.arg(3)).to_i32().unwrap();

//not found in gl!    unsafe { gl::Uniform3i64ARB(location, x, y, z) };
}

pub fn retrace_glUniform4i64ARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut x: GLint64;
    x = (call.arg(1)).to_i32().unwrap();

    let mut y: GLint64;
    y = (call.arg(2)).to_i32().unwrap();

    let mut z: GLint64;
    z = (call.arg(3)).to_i32().unwrap();

    let mut w: GLint64;
    w = (call.arg(4)).to_i32().unwrap();

//not found in gl!    unsafe { gl::Uniform4i64ARB(location, x, y, z, w) };
}

pub fn retrace_glUniform1i64vARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let value: &mut [GLint64];
    value = _allocator.alloc_array::<GLint64>(&call.arg(2));
    let _a_GLint6414_0 = (call.arg(2)).to_array();
    if let Some(_a_GLint6414_0) = _a_GLint6414_0 {
        for _jGLint6414 in 0.._a_GLint6414_0.values.len() {
    value[_jGLint6414] = (*_a_GLint6414_0.values[_jGLint6414]).to_i32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::Uniform1i64vARB(location, count, value) };
}

pub fn retrace_glUniform2i64vARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let value: &mut [GLint64];
    value = _allocator.alloc_array::<GLint64>(&call.arg(2));
    let _a_GLint6415_0 = (call.arg(2)).to_array();
    if let Some(_a_GLint6415_0) = _a_GLint6415_0 {
        for _jGLint6415 in 0.._a_GLint6415_0.values.len() {
    value[_jGLint6415] = (*_a_GLint6415_0.values[_jGLint6415]).to_i32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::Uniform2i64vARB(location, count, value) };
}

pub fn retrace_glUniform3i64vARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let value: &mut [GLint64];
    value = _allocator.alloc_array::<GLint64>(&call.arg(2));
    let _a_GLint6416_0 = (call.arg(2)).to_array();
    if let Some(_a_GLint6416_0) = _a_GLint6416_0 {
        for _jGLint6416 in 0.._a_GLint6416_0.values.len() {
    value[_jGLint6416] = (*_a_GLint6416_0.values[_jGLint6416]).to_i32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::Uniform3i64vARB(location, count, value) };
}

pub fn retrace_glUniform4i64vARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let value: &mut [GLint64];
    value = _allocator.alloc_array::<GLint64>(&call.arg(2));
    let _a_GLint6417_0 = (call.arg(2)).to_array();
    if let Some(_a_GLint6417_0) = _a_GLint6417_0 {
        for _jGLint6417 in 0.._a_GLint6417_0.values.len() {
    value[_jGLint6417] = (*_a_GLint6417_0.values[_jGLint6417]).to_i32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::Uniform4i64vARB(location, count, value) };
}

pub fn retrace_glUniform1ui64ARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut x: GLuint64;
    x = (call.arg(1)).to_u32().unwrap();

//not found in gl!    unsafe { gl::Uniform1ui64ARB(location, x) };
}

pub fn retrace_glUniform2ui64ARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut x: GLuint64;
    x = (call.arg(1)).to_u32().unwrap();

    let mut y: GLuint64;
    y = (call.arg(2)).to_u32().unwrap();

//not found in gl!    unsafe { gl::Uniform2ui64ARB(location, x, y) };
}

pub fn retrace_glUniform3ui64ARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut x: GLuint64;
    x = (call.arg(1)).to_u32().unwrap();

    let mut y: GLuint64;
    y = (call.arg(2)).to_u32().unwrap();

    let mut z: GLuint64;
    z = (call.arg(3)).to_u32().unwrap();

//not found in gl!    unsafe { gl::Uniform3ui64ARB(location, x, y, z) };
}

pub fn retrace_glUniform4ui64ARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut x: GLuint64;
    x = (call.arg(1)).to_u32().unwrap();

    let mut y: GLuint64;
    y = (call.arg(2)).to_u32().unwrap();

    let mut z: GLuint64;
    z = (call.arg(3)).to_u32().unwrap();

    let mut w: GLuint64;
    w = (call.arg(4)).to_u32().unwrap();

//not found in gl!    unsafe { gl::Uniform4ui64ARB(location, x, y, z, w) };
}

pub fn retrace_glUniform1ui64vARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let value: &mut [GLuint64];
    value = _allocator.alloc_array::<GLuint64>(&call.arg(2));
    let _a_GLuint6411_0 = (call.arg(2)).to_array();
    if let Some(_a_GLuint6411_0) = _a_GLuint6411_0 {
        for _jGLuint6411 in 0.._a_GLuint6411_0.values.len() {
    value[_jGLuint6411] = (*_a_GLuint6411_0.values[_jGLuint6411]).to_u32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::Uniform1ui64vARB(location, count, value) };
}

pub fn retrace_glUniform2ui64vARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let value: &mut [GLuint64];
    value = _allocator.alloc_array::<GLuint64>(&call.arg(2));
    let _a_GLuint6412_0 = (call.arg(2)).to_array();
    if let Some(_a_GLuint6412_0) = _a_GLuint6412_0 {
        for _jGLuint6412 in 0.._a_GLuint6412_0.values.len() {
    value[_jGLuint6412] = (*_a_GLuint6412_0.values[_jGLuint6412]).to_u32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::Uniform2ui64vARB(location, count, value) };
}

pub fn retrace_glUniform3ui64vARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let value: &mut [GLuint64];
    value = _allocator.alloc_array::<GLuint64>(&call.arg(2));
    let _a_GLuint6413_0 = (call.arg(2)).to_array();
    if let Some(_a_GLuint6413_0) = _a_GLuint6413_0 {
        for _jGLuint6413 in 0.._a_GLuint6413_0.values.len() {
    value[_jGLuint6413] = (*_a_GLuint6413_0.values[_jGLuint6413]).to_u32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::Uniform3ui64vARB(location, count, value) };
}

pub fn retrace_glUniform4ui64vARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let value: &mut [GLuint64];
    value = _allocator.alloc_array::<GLuint64>(&call.arg(2));
    let _a_GLuint6414_0 = (call.arg(2)).to_array();
    if let Some(_a_GLuint6414_0) = _a_GLuint6414_0 {
        for _jGLuint6414 in 0.._a_GLuint6414_0.values.len() {
    value[_jGLuint6414] = (*_a_GLuint6414_0.values[_jGLuint6414]).to_u32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::Uniform4ui64vARB(location, count, value) };
}

pub fn retrace_glProgramUniform1i64ARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut x: GLint64;
    x = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::ProgramUniform1i64ARB(program, location, x) };
}

pub fn retrace_glProgramUniform2i64ARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut x: GLint64;
    x = (call.arg(2)).to_i32().unwrap();

    let mut y: GLint64;
    y = (call.arg(3)).to_i32().unwrap();

//not found in gl!    unsafe { gl::ProgramUniform2i64ARB(program, location, x, y) };
}

pub fn retrace_glProgramUniform3i64ARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut x: GLint64;
    x = (call.arg(2)).to_i32().unwrap();

    let mut y: GLint64;
    y = (call.arg(3)).to_i32().unwrap();

    let mut z: GLint64;
    z = (call.arg(4)).to_i32().unwrap();

//not found in gl!    unsafe { gl::ProgramUniform3i64ARB(program, location, x, y, z) };
}

pub fn retrace_glProgramUniform4i64ARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut x: GLint64;
    x = (call.arg(2)).to_i32().unwrap();

    let mut y: GLint64;
    y = (call.arg(3)).to_i32().unwrap();

    let mut z: GLint64;
    z = (call.arg(4)).to_i32().unwrap();

    let mut w: GLint64;
    w = (call.arg(5)).to_i32().unwrap();

//not found in gl!    unsafe { gl::ProgramUniform4i64ARB(program, location, x, y, z, w) };
}

pub fn retrace_glProgramUniform1i64vARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let value: &mut [GLint64];
    value = _allocator.alloc_array::<GLint64>(&call.arg(3));
    let _a_GLint6418_0 = (call.arg(3)).to_array();
    if let Some(_a_GLint6418_0) = _a_GLint6418_0 {
        for _jGLint6418 in 0.._a_GLint6418_0.values.len() {
    value[_jGLint6418] = (*_a_GLint6418_0.values[_jGLint6418]).to_i32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::ProgramUniform1i64vARB(program, location, count, value) };
}

pub fn retrace_glProgramUniform2i64vARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let value: &mut [GLint64];
    value = _allocator.alloc_array::<GLint64>(&call.arg(3));
    let _a_GLint6419_0 = (call.arg(3)).to_array();
    if let Some(_a_GLint6419_0) = _a_GLint6419_0 {
        for _jGLint6419 in 0.._a_GLint6419_0.values.len() {
    value[_jGLint6419] = (*_a_GLint6419_0.values[_jGLint6419]).to_i32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::ProgramUniform2i64vARB(program, location, count, value) };
}

pub fn retrace_glProgramUniform3i64vARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let value: &mut [GLint64];
    value = _allocator.alloc_array::<GLint64>(&call.arg(3));
    let _a_GLint6420_0 = (call.arg(3)).to_array();
    if let Some(_a_GLint6420_0) = _a_GLint6420_0 {
        for _jGLint6420 in 0.._a_GLint6420_0.values.len() {
    value[_jGLint6420] = (*_a_GLint6420_0.values[_jGLint6420]).to_i32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::ProgramUniform3i64vARB(program, location, count, value) };
}

pub fn retrace_glProgramUniform4i64vARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let value: &mut [GLint64];
    value = _allocator.alloc_array::<GLint64>(&call.arg(3));
    let _a_GLint6421_0 = (call.arg(3)).to_array();
    if let Some(_a_GLint6421_0) = _a_GLint6421_0 {
        for _jGLint6421 in 0.._a_GLint6421_0.values.len() {
    value[_jGLint6421] = (*_a_GLint6421_0.values[_jGLint6421]).to_i32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::ProgramUniform4i64vARB(program, location, count, value) };
}

pub fn retrace_glProgramUniform1ui64ARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut x: GLuint64;
    x = (call.arg(2)).to_u32().unwrap();

//not found in gl!    unsafe { gl::ProgramUniform1ui64ARB(program, location, x) };
}

pub fn retrace_glProgramUniform2ui64ARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut x: GLuint64;
    x = (call.arg(2)).to_u32().unwrap();

    let mut y: GLuint64;
    y = (call.arg(3)).to_u32().unwrap();

//not found in gl!    unsafe { gl::ProgramUniform2ui64ARB(program, location, x, y) };
}

pub fn retrace_glProgramUniform3ui64ARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut x: GLuint64;
    x = (call.arg(2)).to_u32().unwrap();

    let mut y: GLuint64;
    y = (call.arg(3)).to_u32().unwrap();

    let mut z: GLuint64;
    z = (call.arg(4)).to_u32().unwrap();

//not found in gl!    unsafe { gl::ProgramUniform3ui64ARB(program, location, x, y, z) };
}

pub fn retrace_glProgramUniform4ui64ARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut x: GLuint64;
    x = (call.arg(2)).to_u32().unwrap();

    let mut y: GLuint64;
    y = (call.arg(3)).to_u32().unwrap();

    let mut z: GLuint64;
    z = (call.arg(4)).to_u32().unwrap();

    let mut w: GLuint64;
    w = (call.arg(5)).to_u32().unwrap();

//not found in gl!    unsafe { gl::ProgramUniform4ui64ARB(program, location, x, y, z, w) };
}

pub fn retrace_glProgramUniform1ui64vARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let value: &mut [GLuint64];
    value = _allocator.alloc_array::<GLuint64>(&call.arg(3));
    let _a_GLuint6415_0 = (call.arg(3)).to_array();
    if let Some(_a_GLuint6415_0) = _a_GLuint6415_0 {
        for _jGLuint6415 in 0.._a_GLuint6415_0.values.len() {
    value[_jGLuint6415] = (*_a_GLuint6415_0.values[_jGLuint6415]).to_u32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::ProgramUniform1ui64vARB(program, location, count, value) };
}

pub fn retrace_glProgramUniform2ui64vARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let value: &mut [GLuint64];
    value = _allocator.alloc_array::<GLuint64>(&call.arg(3));
    let _a_GLuint6416_0 = (call.arg(3)).to_array();
    if let Some(_a_GLuint6416_0) = _a_GLuint6416_0 {
        for _jGLuint6416 in 0.._a_GLuint6416_0.values.len() {
    value[_jGLuint6416] = (*_a_GLuint6416_0.values[_jGLuint6416]).to_u32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::ProgramUniform2ui64vARB(program, location, count, value) };
}

pub fn retrace_glProgramUniform3ui64vARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let value: &mut [GLuint64];
    value = _allocator.alloc_array::<GLuint64>(&call.arg(3));
    let _a_GLuint6417_0 = (call.arg(3)).to_array();
    if let Some(_a_GLuint6417_0) = _a_GLuint6417_0 {
        for _jGLuint6417 in 0.._a_GLuint6417_0.values.len() {
    value[_jGLuint6417] = (*_a_GLuint6417_0.values[_jGLuint6417]).to_u32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::ProgramUniform3ui64vARB(program, location, count, value) };
}

pub fn retrace_glProgramUniform4ui64vARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let value: &mut [GLuint64];
    value = _allocator.alloc_array::<GLuint64>(&call.arg(3));
    let _a_GLuint6418_0 = (call.arg(3)).to_array();
    if let Some(_a_GLuint6418_0) = _a_GLuint6418_0 {
        for _jGLuint6418 in 0.._a_GLuint6418_0.values.len() {
    value[_jGLuint6418] = (*_a_GLuint6418_0.values[_jGLuint6418]).to_u32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::ProgramUniform4ui64vARB(program, location, count, value) };
}

pub fn retrace_glMultiDrawArraysIndirectCountARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let indirect: &mut [GLc_void];
    let indirect = (call.arg(1)).to_pointer().unwrap() as *mut c_void;

    let mut drawcount: GLintptr;
    drawcount = (call.arg(2)).to_i32().unwrap();

    let mut maxdrawcount: GLsizei;
    maxdrawcount = (call.arg(3)).to_i32().unwrap();

    let mut stride: GLsizei;
    stride = (call.arg(4)).to_i32().unwrap();

//not found in gl!    unsafe { gl::MultiDrawArraysIndirectCountARB(mode, indirect, drawcount, maxdrawcount, stride) };
}

pub fn retrace_glMultiDrawElementsIndirectCountARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let indirect: &mut [GLc_void];
    let indirect = (call.arg(2)).to_pointer().unwrap() as *mut c_void;

    let mut drawcount: GLintptr;
    drawcount = (call.arg(3)).to_i32().unwrap();

    let mut maxdrawcount: GLsizei;
    maxdrawcount = (call.arg(4)).to_i32().unwrap();

    let mut stride: GLsizei;
    stride = (call.arg(5)).to_i32().unwrap();

//not found in gl!    unsafe { gl::MultiDrawElementsIndirectCountARB(mode, _type, indirect, drawcount, maxdrawcount, stride) };
}

pub fn retrace_glVertexAttribDivisorARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut divisor: GLuint;
    divisor = (call.arg(1)).to_u32().unwrap();

//not found in gl!    unsafe { gl::VertexAttribDivisorARB(index, divisor) };
}

pub fn retrace_glInvalidateTexSubImage(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut level: GLint;
    level = (call.arg(1)).to_i32().unwrap();

    let mut xoffset: GLint;
    xoffset = (call.arg(2)).to_i32().unwrap();

    let mut yoffset: GLint;
    yoffset = (call.arg(3)).to_i32().unwrap();

    let mut zoffset: GLint;
    zoffset = (call.arg(4)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(5)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(6)).to_i32().unwrap();

    let mut depth: GLsizei;
    depth = (call.arg(7)).to_i32().unwrap();

    unsafe { gl::InvalidateTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth) };
}

pub fn retrace_glInvalidateTexImage(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut level: GLint;
    level = (call.arg(1)).to_i32().unwrap();

    unsafe { gl::InvalidateTexImage(texture, level) };
}

pub fn retrace_glInvalidateBufferSubData(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut buffer: GLuint;
    buffer = (call.arg(0)).to_u32().unwrap();
    buffer = self._buffer_map[buffer];

    let mut offset: GLintptr;
    offset = (call.arg(1)).to_i32().unwrap();

    let mut length: GLsizeiptr;
    length = (call.arg(2)).to_i32().unwrap();

    unsafe { gl::InvalidateBufferSubData(buffer, offset, length) };
}

pub fn retrace_glInvalidateBufferData(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut buffer: GLuint;
    buffer = (call.arg(0)).to_u32().unwrap();
    buffer = self._buffer_map[buffer];

    unsafe { gl::InvalidateBufferData(buffer) };
}

pub fn retrace_glInvalidateFramebuffer(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut numAttachments: GLsizei;
    numAttachments = (call.arg(1)).to_i32().unwrap();

    let attachments: &mut [GLenum];
    attachments = _allocator.alloc_array::<GLenum>(&call.arg(2));
    let _a_GLenum19_0 = (call.arg(2)).to_array();
    if let Some(_a_GLenum19_0) = _a_GLenum19_0 {
        for _jGLenum19 in 0.._a_GLenum19_0.values.len() {
    attachments[_jGLenum19] = (*_a_GLenum19_0.values[_jGLenum19]).to_u32().unwrap().try_into().unwrap();
        }
    }
    let attachments = attachments.as_mut_ptr();

    unsafe { gl::InvalidateFramebuffer(target, numAttachments, attachments) };
}

pub fn retrace_glInvalidateSubFramebuffer(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut numAttachments: GLsizei;
    numAttachments = (call.arg(1)).to_i32().unwrap();

    let attachments: &mut [GLenum];
    attachments = _allocator.alloc_array::<GLenum>(&call.arg(2));
    let _a_GLenum20_0 = (call.arg(2)).to_array();
    if let Some(_a_GLenum20_0) = _a_GLenum20_0 {
        for _jGLenum20 in 0.._a_GLenum20_0.values.len() {
    attachments[_jGLenum20] = (*_a_GLenum20_0.values[_jGLenum20]).to_u32().unwrap().try_into().unwrap();
        }
    }
    let attachments = attachments.as_mut_ptr();

    let mut x: GLint;
    x = (call.arg(3)).to_i32().unwrap();

    let mut y: GLint;
    y = (call.arg(4)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(5)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(6)).to_i32().unwrap();

    unsafe { gl::InvalidateSubFramebuffer(target, numAttachments, attachments, x, y, width, height) };
}

pub fn retrace_glMapBufferRange(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut offset: GLintptr;
    offset = (call.arg(1)).to_i32().unwrap();

    let mut length: GLsizeiptr;
    length = (call.arg(2)).to_i32().unwrap();

    let mut access: GLbitfield;
    access = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let _result = unsafe { gl::MapBufferRange(target, offset, length, access) };

    region::add_region(call, (*call.ret).toUIntPtr(), _result, length);
}

pub fn retrace_glFlushMappedBufferRange(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut offset: GLintptr;
    offset = (call.arg(1)).to_i32().unwrap();

    let mut length: GLsizeiptr;
    length = (call.arg(2)).to_i32().unwrap();

    unsafe { gl::FlushMappedBufferRange(target, offset, length) };
}

pub fn retrace_glCurrentPaletteMatrixARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLint;
    index = (call.arg(0)).to_i32().unwrap();

//not found in gl!    unsafe { gl::CurrentPaletteMatrixARB(index) };
}

pub fn retrace_glMatrixIndexubvARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut size: GLint;
    size = (call.arg(0)).to_i32().unwrap();

    let indices: &mut [GLubyte];
    indices = _allocator.alloc_array::<GLubyte>(&call.arg(1));
    let _a_GLubyte15_0 = (call.arg(1)).to_array();
    if let Some(_a_GLubyte15_0) = _a_GLubyte15_0 {
        for _jGLubyte15 in 0.._a_GLubyte15_0.values.len() {
    indices[_jGLubyte15] = (*_a_GLubyte15_0.values[_jGLubyte15]).to_u32().unwrap();
        }
    }
    let indices = indices.as_mut_ptr();

//not found in gl!    unsafe { gl::MatrixIndexubvARB(size, indices) };
}

pub fn retrace_glMatrixIndexusvARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut size: GLint;
    size = (call.arg(0)).to_i32().unwrap();

    let indices: &mut [GLushort];
    indices = _allocator.alloc_array::<GLushort>(&call.arg(1));
    let _a_GLushort12_0 = (call.arg(1)).to_array();
    if let Some(_a_GLushort12_0) = _a_GLushort12_0 {
        for _jGLushort12 in 0.._a_GLushort12_0.values.len() {
    indices[_jGLushort12] = (*_a_GLushort12_0.values[_jGLushort12]).to_u32().unwrap();
        }
    }
    let indices = indices.as_mut_ptr();

//not found in gl!    unsafe { gl::MatrixIndexusvARB(size, indices) };
}

pub fn retrace_glMatrixIndexuivARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut size: GLint;
    size = (call.arg(0)).to_i32().unwrap();

    let indices: &mut [GLuint];
    indices = _allocator.alloc_array::<GLuint>(&call.arg(1));
    let _a_GLuint162_0 = (call.arg(1)).to_array();
    if let Some(_a_GLuint162_0) = _a_GLuint162_0 {
        for _jGLuint162 in 0.._a_GLuint162_0.values.len() {
    indices[_jGLuint162] = (*_a_GLuint162_0.values[_jGLuint162]).to_u32().unwrap();
        }
    }
    let indices = indices.as_mut_ptr();

//not found in gl!    unsafe { gl::MatrixIndexuivARB(size, indices) };
}

pub fn retrace_glMatrixIndexPointerARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut size: GLint;
    size = (call.arg(0)).to_i32().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut stride: GLsizei;
    stride = (call.arg(2)).to_i32().unwrap();

    let pointer: &mut [GLc_void];
//FIXME    memset(&pointer, 0, sizeof pointer); 

    if (1) {
    }
//not found in gl!    unsafe { gl::MatrixIndexPointerARB(size, _type, stride, pointer) };
}

pub fn retrace_glBindBuffersBase(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut first: GLuint;
    first = (call.arg(1)).to_u32().unwrap();

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let buffers: &mut [GLuint];
    buffers = _allocator.alloc_array::<GLuint>(&call.arg(3));
    let _a_GLuint163_0 = (call.arg(3)).to_array();
    if let Some(_a_GLuint163_0) = _a_GLuint163_0 {
        for _jGLuint163 in 0.._a_GLuint163_0.values.len() {
    buffers[_jGLuint163] = (*_a_GLuint163_0.values[_jGLuint163]).to_u32().unwrap();
    buffers[_jGLuint163] = self._buffer_map[buffers[_jGLuint163]];
        }
    }
    let buffers = buffers.as_mut_ptr();

    unsafe { gl::BindBuffersBase(target, first, count, buffers) };
}

pub fn retrace_glBindBuffersRange(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut first: GLuint;
    first = (call.arg(1)).to_u32().unwrap();

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let buffers: &mut [GLuint];
    buffers = _allocator.alloc_array::<GLuint>(&call.arg(3));
    let _a_GLuint164_0 = (call.arg(3)).to_array();
    if let Some(_a_GLuint164_0) = _a_GLuint164_0 {
        for _jGLuint164 in 0.._a_GLuint164_0.values.len() {
    buffers[_jGLuint164] = (*_a_GLuint164_0.values[_jGLuint164]).to_u32().unwrap();
    buffers[_jGLuint164] = self._buffer_map[buffers[_jGLuint164]];
        }
    }
    let buffers = buffers.as_mut_ptr();

    let offsets: &mut [GLintptr];
    offsets = _allocator.alloc_array::<GLintptr>(&call.arg(4));
    let _a_GLintptr2_0 = (call.arg(4)).to_array();
    if let Some(_a_GLintptr2_0) = _a_GLintptr2_0 {
        for _jGLintptr2 in 0.._a_GLintptr2_0.values.len() {
    offsets[_jGLintptr2] = (*_a_GLintptr2_0.values[_jGLintptr2]).to_i32().unwrap();
        }
    }
    let offsets = offsets.as_mut_ptr();

    let sizes: &mut [GLsizeiptr];
    sizes = _allocator.alloc_array::<GLsizeiptr>(&call.arg(5));
    let _a_GLsizeiptr1_0 = (call.arg(5)).to_array();
    if let Some(_a_GLsizeiptr1_0) = _a_GLsizeiptr1_0 {
        for _jGLsizeiptr1 in 0.._a_GLsizeiptr1_0.values.len() {
    sizes[_jGLsizeiptr1] = (*_a_GLsizeiptr1_0.values[_jGLsizeiptr1]).to_i32().unwrap();
        }
    }
    let sizes = sizes.as_mut_ptr();

    unsafe { gl::BindBuffersRange(target, first, count, buffers, offsets, sizes) };
}

pub fn retrace_glBindTextures(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut first: GLuint;
    first = (call.arg(0)).to_u32().unwrap();

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let textures: &mut [GLuint];
    textures = _allocator.alloc_array::<GLuint>(&call.arg(2));
    let _a_GLuint165_0 = (call.arg(2)).to_array();
    if let Some(_a_GLuint165_0) = _a_GLuint165_0 {
        for _jGLuint165 in 0.._a_GLuint165_0.values.len() {
    textures[_jGLuint165] = (*_a_GLuint165_0.values[_jGLuint165]).to_u32().unwrap();
    textures[_jGLuint165] = self._texture_map[textures[_jGLuint165]];
        }
    }
    let textures = textures.as_mut_ptr();

    unsafe { gl::BindTextures(first, count, textures) };
}

pub fn retrace_glBindSamplers(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut first: GLuint;
    first = (call.arg(0)).to_u32().unwrap();

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let samplers: &mut [GLuint];
    samplers = _allocator.alloc_array::<GLuint>(&call.arg(2));
    let _a_GLuint166_0 = (call.arg(2)).to_array();
    if let Some(_a_GLuint166_0) = _a_GLuint166_0 {
        for _jGLuint166 in 0.._a_GLuint166_0.values.len() {
    samplers[_jGLuint166] = (*_a_GLuint166_0.values[_jGLuint166]).to_u32().unwrap();
    samplers[_jGLuint166] = self._sampler_map[samplers[_jGLuint166]];
        }
    }
    let samplers = samplers.as_mut_ptr();

    unsafe { gl::BindSamplers(first, count, samplers) };
}

pub fn retrace_glBindImageTextures(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut first: GLuint;
    first = (call.arg(0)).to_u32().unwrap();

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let textures: &mut [GLuint];
    textures = _allocator.alloc_array::<GLuint>(&call.arg(2));
    let _a_GLuint167_0 = (call.arg(2)).to_array();
    if let Some(_a_GLuint167_0) = _a_GLuint167_0 {
        for _jGLuint167 in 0.._a_GLuint167_0.values.len() {
    textures[_jGLuint167] = (*_a_GLuint167_0.values[_jGLuint167]).to_u32().unwrap();
    textures[_jGLuint167] = self._texture_map[textures[_jGLuint167]];
        }
    }
    let textures = textures.as_mut_ptr();

    unsafe { gl::BindImageTextures(first, count, textures) };
}

pub fn retrace_glBindVertexBuffers(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut first: GLuint;
    first = (call.arg(0)).to_u32().unwrap();

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let buffers: &mut [GLuint];
    buffers = _allocator.alloc_array::<GLuint>(&call.arg(2));
    let _a_GLuint168_0 = (call.arg(2)).to_array();
    if let Some(_a_GLuint168_0) = _a_GLuint168_0 {
        for _jGLuint168 in 0.._a_GLuint168_0.values.len() {
    buffers[_jGLuint168] = (*_a_GLuint168_0.values[_jGLuint168]).to_u32().unwrap();
    buffers[_jGLuint168] = self._buffer_map[buffers[_jGLuint168]];
        }
    }
    let buffers = buffers.as_mut_ptr();

    let offsets: &mut [GLintptr];
    offsets = _allocator.alloc_array::<GLintptr>(&call.arg(3));
    let _a_GLintptr3_0 = (call.arg(3)).to_array();
    if let Some(_a_GLintptr3_0) = _a_GLintptr3_0 {
        for _jGLintptr3 in 0.._a_GLintptr3_0.values.len() {
    offsets[_jGLintptr3] = (*_a_GLintptr3_0.values[_jGLintptr3]).to_i32().unwrap();
        }
    }
    let offsets = offsets.as_mut_ptr();

    let strides: &mut [GLsizei];
    strides = _allocator.alloc_array::<GLsizei>(&call.arg(4));
    let _a_GLsizei11_0 = (call.arg(4)).to_array();
    if let Some(_a_GLsizei11_0) = _a_GLsizei11_0 {
        for _jGLsizei11 in 0.._a_GLsizei11_0.values.len() {
    strides[_jGLsizei11] = (*_a_GLsizei11_0.values[_jGLsizei11]).to_i32().unwrap();
        }
    }
    let strides = strides.as_mut_ptr();

    unsafe { gl::BindVertexBuffers(first, count, buffers, offsets, strides) };
}

pub fn retrace_glMultiDrawArraysIndirect(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let indirect: &mut [GLc_void];
    let indirect = (call.arg(1)).to_pointer().unwrap() as *mut c_void;

    let mut drawcount: GLsizei;
    drawcount = (call.arg(2)).to_i32().unwrap();

    let mut stride: GLsizei;
    stride = (call.arg(3)).to_i32().unwrap();

    unsafe { gl::MultiDrawArraysIndirect(mode, indirect, drawcount, stride) };
}

pub fn retrace_glMultiDrawElementsIndirect(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let indirect: &mut [GLc_void];
    let indirect = (call.arg(2)).to_pointer().unwrap() as *mut c_void;

    let mut drawcount: GLsizei;
    drawcount = (call.arg(3)).to_i32().unwrap();

    let mut stride: GLsizei;
    stride = (call.arg(4)).to_i32().unwrap();

    unsafe { gl::MultiDrawElementsIndirect(mode, _type, indirect, drawcount, stride) };
}

pub fn retrace_glSampleCoverageARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut value: GLfloat;
    value = (call.arg(0)).to_f32().unwrap();

    let mut invert: GLboolean;
    invert = (call.arg(1)).to_u32().unwrap() as u8;

//not found in gl!    unsafe { gl::SampleCoverageARB(value, invert) };
}

pub fn retrace_glActiveTextureARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLenum;
    texture = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::ActiveTextureARB(texture) };
}

pub fn retrace_glClientActiveTextureARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLenum;
    texture = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::ClientActiveTextureARB(texture) };
}

pub fn retrace_glMultiTexCoord1dARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut s: GLdouble;
    s = (call.arg(1)).to_f64().unwrap();

//not found in gl!    unsafe { gl::MultiTexCoord1dARB(target, s) };
}

pub fn retrace_glMultiTexCoord1dvARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let v: &mut [GLdouble];
    v = _allocator.alloc_array::<GLdouble>(&call.arg(1));
    let _a_PGLdouble7_0 = (call.arg(1)).to_array().unwrap();
    v[0] = (_a_PGLdouble7_0.values[0]).to_f64().unwrap();

//not found in gl!    unsafe { gl::MultiTexCoord1dvARB(target, v) };
}

pub fn retrace_glMultiTexCoord1fARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut s: GLfloat;
    s = (call.arg(1)).to_f32().unwrap();

//not found in gl!    unsafe { gl::MultiTexCoord1fARB(target, s) };
}

pub fn retrace_glMultiTexCoord1fvARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let v: &mut [GLfloat];
    v = _allocator.alloc_array::<GLfloat>(&call.arg(1));
    let _a_PGLfloat17_0 = (call.arg(1)).to_array().unwrap();
    v[0] = (_a_PGLfloat17_0.values[0]).to_f32().unwrap();

//not found in gl!    unsafe { gl::MultiTexCoord1fvARB(target, v) };
}

pub fn retrace_glMultiTexCoord1iARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut s: GLint;
    s = (call.arg(1)).to_i32().unwrap();

//not found in gl!    unsafe { gl::MultiTexCoord1iARB(target, s) };
}

pub fn retrace_glMultiTexCoord1ivARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let v: &mut [GLint];
    v = _allocator.alloc_array::<GLint>(&call.arg(1));
    let _a_PGLint33_0 = (call.arg(1)).to_array().unwrap();
    v[0] = (_a_PGLint33_0.values[0]).to_i32().unwrap();

//not found in gl!    unsafe { gl::MultiTexCoord1ivARB(target, v) };
}

pub fn retrace_glMultiTexCoord1sARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut s: GLshort;
    s = (call.arg(1)).to_i32().unwrap();

//not found in gl!    unsafe { gl::MultiTexCoord1sARB(target, s) };
}

pub fn retrace_glMultiTexCoord1svARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let v: &mut [GLshort];
    v = _allocator.alloc_array::<GLshort>(&call.arg(1));
    let _a_PGLshort4_0 = (call.arg(1)).to_array().unwrap();
    v[0] = (_a_PGLshort4_0.values[0]).to_i32().unwrap();

//not found in gl!    unsafe { gl::MultiTexCoord1svARB(target, v) };
}

pub fn retrace_glMultiTexCoord2dARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut s: GLdouble;
    s = (call.arg(1)).to_f64().unwrap();

    let mut t: GLdouble;
    t = (call.arg(2)).to_f64().unwrap();

//not found in gl!    unsafe { gl::MultiTexCoord2dARB(target, s, t) };
}

pub fn retrace_glMultiTexCoord2dvARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let v: &mut [GLdouble];
    v = _allocator.alloc_array::<GLdouble>(&call.arg(1));
    let _a_GLdouble70_0 = (call.arg(1)).to_array();
    if let Some(_a_GLdouble70_0) = _a_GLdouble70_0 {
        for _jGLdouble70 in 0.._a_GLdouble70_0.values.len() {
    v[_jGLdouble70] = (*_a_GLdouble70_0.values[_jGLdouble70]).to_f64().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::MultiTexCoord2dvARB(target, v) };
}

pub fn retrace_glMultiTexCoord2fARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut s: GLfloat;
    s = (call.arg(1)).to_f32().unwrap();

    let mut t: GLfloat;
    t = (call.arg(2)).to_f32().unwrap();

//not found in gl!    unsafe { gl::MultiTexCoord2fARB(target, s, t) };
}

pub fn retrace_glMultiTexCoord2fvARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let v: &mut [GLfloat];
    v = _allocator.alloc_array::<GLfloat>(&call.arg(1));
    let _a_GLfloat149_0 = (call.arg(1)).to_array();
    if let Some(_a_GLfloat149_0) = _a_GLfloat149_0 {
        for _jGLfloat149 in 0.._a_GLfloat149_0.values.len() {
    v[_jGLfloat149] = (*_a_GLfloat149_0.values[_jGLfloat149]).to_f32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::MultiTexCoord2fvARB(target, v) };
}

pub fn retrace_glMultiTexCoord2iARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut s: GLint;
    s = (call.arg(1)).to_i32().unwrap();

    let mut t: GLint;
    t = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::MultiTexCoord2iARB(target, s, t) };
}

pub fn retrace_glMultiTexCoord2ivARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let v: &mut [GLint];
    v = _allocator.alloc_array::<GLint>(&call.arg(1));
    let _a_GLint182_0 = (call.arg(1)).to_array();
    if let Some(_a_GLint182_0) = _a_GLint182_0 {
        for _jGLint182 in 0.._a_GLint182_0.values.len() {
    v[_jGLint182] = (*_a_GLint182_0.values[_jGLint182]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::MultiTexCoord2ivARB(target, v) };
}

pub fn retrace_glMultiTexCoord2sARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut s: GLshort;
    s = (call.arg(1)).to_i32().unwrap();

    let mut t: GLshort;
    t = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::MultiTexCoord2sARB(target, s, t) };
}

pub fn retrace_glMultiTexCoord2svARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let v: &mut [GLshort];
    v = _allocator.alloc_array::<GLshort>(&call.arg(1));
    let _a_GLshort26_0 = (call.arg(1)).to_array();
    if let Some(_a_GLshort26_0) = _a_GLshort26_0 {
        for _jGLshort26 in 0.._a_GLshort26_0.values.len() {
    v[_jGLshort26] = (*_a_GLshort26_0.values[_jGLshort26]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::MultiTexCoord2svARB(target, v) };
}

pub fn retrace_glMultiTexCoord3dARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut s: GLdouble;
    s = (call.arg(1)).to_f64().unwrap();

    let mut t: GLdouble;
    t = (call.arg(2)).to_f64().unwrap();

    let mut r: GLdouble;
    r = (call.arg(3)).to_f64().unwrap();

//not found in gl!    unsafe { gl::MultiTexCoord3dARB(target, s, t, r) };
}

pub fn retrace_glMultiTexCoord3dvARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let v: &mut [GLdouble];
    v = _allocator.alloc_array::<GLdouble>(&call.arg(1));
    let _a_GLdouble71_0 = (call.arg(1)).to_array();
    if let Some(_a_GLdouble71_0) = _a_GLdouble71_0 {
        for _jGLdouble71 in 0.._a_GLdouble71_0.values.len() {
    v[_jGLdouble71] = (*_a_GLdouble71_0.values[_jGLdouble71]).to_f64().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::MultiTexCoord3dvARB(target, v) };
}

pub fn retrace_glMultiTexCoord3fARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut s: GLfloat;
    s = (call.arg(1)).to_f32().unwrap();

    let mut t: GLfloat;
    t = (call.arg(2)).to_f32().unwrap();

    let mut r: GLfloat;
    r = (call.arg(3)).to_f32().unwrap();

//not found in gl!    unsafe { gl::MultiTexCoord3fARB(target, s, t, r) };
}

pub fn retrace_glMultiTexCoord3fvARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let v: &mut [GLfloat];
    v = _allocator.alloc_array::<GLfloat>(&call.arg(1));
    let _a_GLfloat150_0 = (call.arg(1)).to_array();
    if let Some(_a_GLfloat150_0) = _a_GLfloat150_0 {
        for _jGLfloat150 in 0.._a_GLfloat150_0.values.len() {
    v[_jGLfloat150] = (*_a_GLfloat150_0.values[_jGLfloat150]).to_f32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::MultiTexCoord3fvARB(target, v) };
}

pub fn retrace_glMultiTexCoord3iARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut s: GLint;
    s = (call.arg(1)).to_i32().unwrap();

    let mut t: GLint;
    t = (call.arg(2)).to_i32().unwrap();

    let mut r: GLint;
    r = (call.arg(3)).to_i32().unwrap();

//not found in gl!    unsafe { gl::MultiTexCoord3iARB(target, s, t, r) };
}

pub fn retrace_glMultiTexCoord3ivARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let v: &mut [GLint];
    v = _allocator.alloc_array::<GLint>(&call.arg(1));
    let _a_GLint183_0 = (call.arg(1)).to_array();
    if let Some(_a_GLint183_0) = _a_GLint183_0 {
        for _jGLint183 in 0.._a_GLint183_0.values.len() {
    v[_jGLint183] = (*_a_GLint183_0.values[_jGLint183]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::MultiTexCoord3ivARB(target, v) };
}

pub fn retrace_glMultiTexCoord3sARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut s: GLshort;
    s = (call.arg(1)).to_i32().unwrap();

    let mut t: GLshort;
    t = (call.arg(2)).to_i32().unwrap();

    let mut r: GLshort;
    r = (call.arg(3)).to_i32().unwrap();

//not found in gl!    unsafe { gl::MultiTexCoord3sARB(target, s, t, r) };
}

pub fn retrace_glMultiTexCoord3svARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let v: &mut [GLshort];
    v = _allocator.alloc_array::<GLshort>(&call.arg(1));
    let _a_GLshort27_0 = (call.arg(1)).to_array();
    if let Some(_a_GLshort27_0) = _a_GLshort27_0 {
        for _jGLshort27 in 0.._a_GLshort27_0.values.len() {
    v[_jGLshort27] = (*_a_GLshort27_0.values[_jGLshort27]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::MultiTexCoord3svARB(target, v) };
}

pub fn retrace_glMultiTexCoord4dARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut s: GLdouble;
    s = (call.arg(1)).to_f64().unwrap();

    let mut t: GLdouble;
    t = (call.arg(2)).to_f64().unwrap();

    let mut r: GLdouble;
    r = (call.arg(3)).to_f64().unwrap();

    let mut q: GLdouble;
    q = (call.arg(4)).to_f64().unwrap();

//not found in gl!    unsafe { gl::MultiTexCoord4dARB(target, s, t, r, q) };
}

pub fn retrace_glMultiTexCoord4dvARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let v: &mut [GLdouble];
    v = _allocator.alloc_array::<GLdouble>(&call.arg(1));
    let _a_GLdouble72_0 = (call.arg(1)).to_array();
    if let Some(_a_GLdouble72_0) = _a_GLdouble72_0 {
        for _jGLdouble72 in 0.._a_GLdouble72_0.values.len() {
    v[_jGLdouble72] = (*_a_GLdouble72_0.values[_jGLdouble72]).to_f64().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::MultiTexCoord4dvARB(target, v) };
}

pub fn retrace_glMultiTexCoord4fARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut s: GLfloat;
    s = (call.arg(1)).to_f32().unwrap();

    let mut t: GLfloat;
    t = (call.arg(2)).to_f32().unwrap();

    let mut r: GLfloat;
    r = (call.arg(3)).to_f32().unwrap();

    let mut q: GLfloat;
    q = (call.arg(4)).to_f32().unwrap();

//not found in gl!    unsafe { gl::MultiTexCoord4fARB(target, s, t, r, q) };
}

pub fn retrace_glMultiTexCoord4fvARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let v: &mut [GLfloat];
    v = _allocator.alloc_array::<GLfloat>(&call.arg(1));
    let _a_GLfloat151_0 = (call.arg(1)).to_array();
    if let Some(_a_GLfloat151_0) = _a_GLfloat151_0 {
        for _jGLfloat151 in 0.._a_GLfloat151_0.values.len() {
    v[_jGLfloat151] = (*_a_GLfloat151_0.values[_jGLfloat151]).to_f32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::MultiTexCoord4fvARB(target, v) };
}

pub fn retrace_glMultiTexCoord4iARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut s: GLint;
    s = (call.arg(1)).to_i32().unwrap();

    let mut t: GLint;
    t = (call.arg(2)).to_i32().unwrap();

    let mut r: GLint;
    r = (call.arg(3)).to_i32().unwrap();

    let mut q: GLint;
    q = (call.arg(4)).to_i32().unwrap();

//not found in gl!    unsafe { gl::MultiTexCoord4iARB(target, s, t, r, q) };
}

pub fn retrace_glMultiTexCoord4ivARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let v: &mut [GLint];
    v = _allocator.alloc_array::<GLint>(&call.arg(1));
    let _a_GLint184_0 = (call.arg(1)).to_array();
    if let Some(_a_GLint184_0) = _a_GLint184_0 {
        for _jGLint184 in 0.._a_GLint184_0.values.len() {
    v[_jGLint184] = (*_a_GLint184_0.values[_jGLint184]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::MultiTexCoord4ivARB(target, v) };
}

pub fn retrace_glMultiTexCoord4sARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut s: GLshort;
    s = (call.arg(1)).to_i32().unwrap();

    let mut t: GLshort;
    t = (call.arg(2)).to_i32().unwrap();

    let mut r: GLshort;
    r = (call.arg(3)).to_i32().unwrap();

    let mut q: GLshort;
    q = (call.arg(4)).to_i32().unwrap();

//not found in gl!    unsafe { gl::MultiTexCoord4sARB(target, s, t, r, q) };
}

pub fn retrace_glMultiTexCoord4svARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let v: &mut [GLshort];
    v = _allocator.alloc_array::<GLshort>(&call.arg(1));
    let _a_GLshort28_0 = (call.arg(1)).to_array();
    if let Some(_a_GLshort28_0) = _a_GLshort28_0 {
        for _jGLshort28 in 0.._a_GLshort28_0.values.len() {
    v[_jGLshort28] = (*_a_GLshort28_0.values[_jGLshort28]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::MultiTexCoord4svARB(target, v) };
}

pub fn retrace_glGenQueriesARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut n: GLsizei;
    n = (call.arg(0)).to_i32().unwrap();

    let ids: &mut [GLuint];
    ids = _allocator.alloc_array::<GLuint>(&call.arg(1));

//not found in gl!    unsafe { gl::GenQueriesARB(n, ids) };
    let _aGLuint170 = (call.arg(1)).to_array();
    if (_aGLuint170) {
        for _jGLuint170 in 0.._aGLuint170.values.len() {
    let _origResult: GLuint;
    _origResult = (_aGLuint170.values[_jGLuint170]).to_u32().unwrap();
    self._query_map[_origResult] = ids[_jGLuint170]; 
        }
    }
}

pub fn retrace_glDeleteQueriesARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut n: GLsizei;
    n = (call.arg(0)).to_i32().unwrap();

    let ids: &mut [GLuint];
    ids = _allocator.alloc_array::<GLuint>(&call.arg(1));
    let _a_GLuint171_0 = (call.arg(1)).to_array();
    if let Some(_a_GLuint171_0) = _a_GLuint171_0 {
        for _jGLuint171 in 0.._a_GLuint171_0.values.len() {
    ids[_jGLuint171] = (*_a_GLuint171_0.values[_jGLuint171]).to_u32().unwrap();
    ids[_jGLuint171] = self._query_map[ids[_jGLuint171]];
        }
    }
    let ids = ids.as_mut_ptr();

//not found in gl!    unsafe { gl::DeleteQueriesARB(n, ids) };
}

pub fn retrace_glBeginQueryARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut id: GLuint;
    id = (call.arg(1)).to_u32().unwrap();
    id = self._query_map[id];

//not found in gl!    unsafe { gl::BeginQueryARB(target, id) };
}

pub fn retrace_glEndQueryARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::EndQueryARB(target) };
}

pub fn retrace_glGetQueryObjectivARB(&mut self, call: &mut Call) {
    let _query_buffer = 0;
    if self.context.features("query_buffer_object") {
//not found in gl!        unsafe { gl::GetIntegerv(gl::QUERY_BUFFER_BINDING, &_query_buffer) };
    }
    if (_query_buffer == 0 && retrace::queryHandling == retrace::QUERY_SKIP) {
        return;
    }
'wait_for_query_result: loop {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut id: GLuint;
    id = (call.arg(0)).to_u32().unwrap();
    id = self._query_map[id];

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLint];
    let retval: GLint = 0;
    if _query_buffer != 0 {
        params = (call.arg(2)).to_pointer();
    } else {
        params = retval };

//not found in gl!    unsafe { gl::GetQueryObjectivARB(id, pname, params) };
    let _aGLint186 = (call.arg(2)).to_array();
    if (_aGLint186) {
        for _jGLint186 in 0.._aGLint186.values.len() {
        }
    }
    if _query_buffer == 0 && queryHandling != QUERY_SKIP {
        let query_result = call.arg(2).to_array().unwrap();
        let expect = query_result.values[0].to_u32().unwrap();
        if call.arg(1).to_u32().unwrap() == gl::QUERY_RESULT_AVAILABLE {
            if expect == 1 && retval == 0 {
                continue 'wait_for_query_result;
        }} else if queryHandling == QUERY_RUN_AND_CHECK_RESULT {
            let diff = (expect as i64 - retval as i64).abs(); 
            if diff > 0 as i64 {
                println!("Warning: query returned {}  but trace contained {} (tol = {})", retval, expect, retrace::queryTolerance);
            }
        }
    break 'wait_for_query_result;
    }
}
}

pub fn retrace_glGetQueryObjectuivARB(&mut self, call: &mut Call) {
    let _query_buffer = 0;
    if self.context.features("query_buffer_object") {
//not found in gl!        unsafe { gl::GetIntegerv(gl::QUERY_BUFFER_BINDING, &_query_buffer) };
    }
    if (_query_buffer == 0 && retrace::queryHandling == retrace::QUERY_SKIP) {
        return;
    }
'wait_for_query_result: loop {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut id: GLuint;
    id = (call.arg(0)).to_u32().unwrap();
    id = self._query_map[id];

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLuint];
    let retval: GLuint = 0;
    if _query_buffer != 0 {
        params = (call.arg(2)).to_pointer();
    } else {
        params = retval };

//not found in gl!    unsafe { gl::GetQueryObjectuivARB(id, pname, params) };
    let _aGLuint173 = (call.arg(2)).to_array();
    if (_aGLuint173) {
        for _jGLuint173 in 0.._aGLuint173.values.len() {
        }
    }
    if _query_buffer == 0 && queryHandling != QUERY_SKIP {
        let query_result = call.arg(2).to_array().unwrap();
        let expect = query_result.values[0].to_u32().unwrap();
        if call.arg(1).to_u32().unwrap() == gl::QUERY_RESULT_AVAILABLE {
            if expect == 1 && retval == 0 {
                continue 'wait_for_query_result;
        }} else if queryHandling == QUERY_RUN_AND_CHECK_RESULT {
            let diff = (expect as i64 - retval as i64).abs(); 
            if diff > 0 as i64 {
                println!("Warning: query returned {}  but trace contained {} (tol = {})", retval, expect, retrace::queryTolerance);
            }
        }
    break 'wait_for_query_result;
    }
}
}

pub fn retrace_glMaxShaderCompilerThreadsARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut count: GLuint;
    count = (call.arg(0)).to_u32().unwrap();

//not found in gl!    unsafe { gl::MaxShaderCompilerThreadsARB(count) };
}

pub fn retrace_glPointParameterfARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut pname: GLenum;
    pname = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut param: GLfloat;
    param = (call.arg(1)).to_f32().unwrap();

//not found in gl!    unsafe { gl::PointParameterfARB(pname, param) };
}

pub fn retrace_glPointParameterfvARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut pname: GLenum;
    pname = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLfloat];
    params = _allocator.alloc_array::<GLfloat>(&call.arg(1));
    let _a_GLfloat152_0 = (call.arg(1)).to_array();
    if let Some(_a_GLfloat152_0) = _a_GLfloat152_0 {
        for _jGLfloat152 in 0.._a_GLfloat152_0.values.len() {
    params[_jGLfloat152] = (*_a_GLfloat152_0.values[_jGLfloat152]).to_f32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::PointParameterfvARB(pname, params) };
}

pub fn retrace_glGetProgramResourceName(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut programInterface: GLenum;
    programInterface = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut index: GLuint;
    index = (call.arg(2)).to_u32().unwrap();

    let mut bufSize: GLsizei;
    bufSize = (call.arg(3)).to_i32().unwrap();

    let length: &mut [GLsizei];
    length = _allocator.alloc_array::<GLsizei>(&call.arg(4));

    let name: &mut [GLchar];

    let name_buf = vec![GLchar ;bufSize];
    name = name_buf.data();
    let traced_name = (call.arg(5)).to_string().unwrap();
    glretrace::trackResourceName(program, programInterface, index, traced_name);
    unsafe { gl::GetProgramResourceName(program, programInterface, index, bufSize, length, name) };
    let _aPGLsizei13 = (call.arg(4)).to_array();
    if (_aPGLsizei13) {
    }
}

pub fn retrace_glGetProgramResourceiv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut programInterface: GLenum;
    programInterface = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut index: GLuint;
    index = (call.arg(2)).to_u32().unwrap();

    let mut propCount: GLsizei;
    propCount = (call.arg(3)).to_i32().unwrap();

    let props: &mut [GLenum];
    props = _allocator.alloc_array::<GLenum>(&call.arg(4));
    let _a_GLenum21_0 = (call.arg(4)).to_array();
    if let Some(_a_GLenum21_0) = _a_GLenum21_0 {
        for _jGLenum21 in 0.._a_GLenum21_0.values.len() {
    props[_jGLenum21] = (*_a_GLenum21_0.values[_jGLenum21]).to_u32().unwrap().try_into().unwrap();
        }
    }
    let props = props.as_mut_ptr();

    let mut bufSize: GLsizei;
    bufSize = (call.arg(5)).to_i32().unwrap();

    let length: &mut [GLsizei];
    length = _allocator.alloc_array::<GLsizei>(&call.arg(6));

    let params: &mut [GLint];
    params = _allocator.alloc_array::<GLint>(&call.arg(7));

    glretrace::mapResourceLocation(program, programInterface, index, call.arg(4).to_array().unwrap(), call.arg(7).to_array().unwrap(), _location_map);
//not found in gl!    unsafe { gl::GetProgramResourceiv(program, programInterface, index, propCount, props, bufSize, length, params) };
    let _aPGLsizei14 = (call.arg(6)).to_array();
    if (_aPGLsizei14) {
    }
    let _aGLint188 = (call.arg(7)).to_array();
    if (_aGLint188) {
        for _jGLint188 in 0.._aGLint188.values.len() {
        }
    }
}

pub fn retrace_glGetProgramResourceLocation(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut programInterface: GLenum;
    programInterface = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let name: &mut [GLchar];
    name = (call.arg(2)).to_string().unwrap();

    let _result = unsafe { gl::GetProgramResourceLocation(program, programInterface, name) };

    let _origResult: GLint;
    _origResult = (*call.ret).to_i32().unwrap();
    self._location_map[program][_origResult] = _result; 
}

pub fn retrace_glProvokingVertex(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    unsafe { gl::ProvokingVertex(mode) };
}

pub fn retrace_glGetnPixelMapfvARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut map: GLenum;
    map = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut bufSize: GLsizei;
    bufSize = (call.arg(1)).to_i32().unwrap();

    let values: &mut [GLfloat];
    let values = (call.arg(2)).to_pointer();

    let _pack_buffer = 0;
    if self.context.features("pixel_buffer_object") {
//not found in gl!        unsafe { gl::GetIntegerv(gl::PIXEL_PACK_BUFFER_BINDING, &_pack_buffer) };
    }
     let buffer = Vec::<u8>::new();
    if _pack_buffer != 0 {
    return;
    }
//not found in gl!    unsafe { gl::GetnPixelMapfvARB(map, bufSize, values) };
    let _aGLfloat154 = (call.arg(2)).to_array();
    if (_aGLfloat154) {
        for _jGLfloat154 in 0.._aGLfloat154.values.len() {
        }
    }
}

pub fn retrace_glGetnPixelMapuivARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut map: GLenum;
    map = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut bufSize: GLsizei;
    bufSize = (call.arg(1)).to_i32().unwrap();

    let values: &mut [GLuint];
    let values = (call.arg(2)).to_pointer();

    let _pack_buffer = 0;
    if self.context.features("pixel_buffer_object") {
//not found in gl!        unsafe { gl::GetIntegerv(gl::PIXEL_PACK_BUFFER_BINDING, &_pack_buffer) };
    }
     let buffer = Vec::<u8>::new();
    if _pack_buffer != 0 {
    return;
    }
//not found in gl!    unsafe { gl::GetnPixelMapuivARB(map, bufSize, values) };
    let _aGLuint175 = (call.arg(2)).to_array();
    if (_aGLuint175) {
        for _jGLuint175 in 0.._aGLuint175.values.len() {
        }
    }
}

pub fn retrace_glGetnPixelMapusvARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut map: GLenum;
    map = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut bufSize: GLsizei;
    bufSize = (call.arg(1)).to_i32().unwrap();

    let values: &mut [GLushort];
    let values = (call.arg(2)).to_pointer();

    let _pack_buffer = 0;
    if self.context.features("pixel_buffer_object") {
//not found in gl!        unsafe { gl::GetIntegerv(gl::PIXEL_PACK_BUFFER_BINDING, &_pack_buffer) };
    }
     let buffer = Vec::<u8>::new();
    if _pack_buffer != 0 {
    return;
    }
//not found in gl!    unsafe { gl::GetnPixelMapusvARB(map, bufSize, values) };
    let _aGLushort14 = (call.arg(2)).to_array();
    if (_aGLushort14) {
        for _jGLushort14 in 0.._aGLushort14.values.len() {
        }
    }
}

pub fn retrace_glGetnPolygonStippleARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut bufSize: GLsizei;
    bufSize = (call.arg(0)).to_i32().unwrap();

    let pattern: &mut [GLubyte];
    let pattern = (call.arg(1)).to_pointer();

    let _pack_buffer = 0;
    if self.context.features("pixel_buffer_object") {
//not found in gl!        unsafe { gl::GetIntegerv(gl::PIXEL_PACK_BUFFER_BINDING, &_pack_buffer) };
    }
     let buffer = Vec::<u8>::new();
    if _pack_buffer != 0 {
    return;
    }
//not found in gl!    unsafe { gl::GetnPolygonStippleARB(bufSize, pattern) };
}

pub fn retrace_glGetnConvolutionFilterARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut format: GLenum;
    format = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut bufSize: GLsizei;
    bufSize = (call.arg(3)).to_i32().unwrap();

    let image: &mut [GLc_void];
    let image = (call.arg(4)).to_pointer();

    let _pack_buffer = 0;
    if self.context.features("pixel_buffer_object") {
//not found in gl!        unsafe { gl::GetIntegerv(gl::PIXEL_PACK_BUFFER_BINDING, &_pack_buffer) };
    }
     let buffer = Vec::<u8>::new();
    if _pack_buffer != 0 {
    return;
    }
//not found in gl!    unsafe { gl::GetnConvolutionFilterARB(target, format, _type, bufSize, image) };
}

pub fn retrace_glGetnSeparableFilterARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut format: GLenum;
    format = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut rowBufSize: GLsizei;
    rowBufSize = (call.arg(3)).to_i32().unwrap();

    let row: &mut [GLc_void];
    let row = (call.arg(4)).to_pointer();

    let mut columnBufSize: GLsizei;
    columnBufSize = (call.arg(5)).to_i32().unwrap();

    let column: &mut [GLc_void];
    let column = (call.arg(6)).to_pointer();

    let span: &mut [GLc_void];
    let span = (call.arg(7)).to_pointer();

    let _pack_buffer = 0;
    if self.context.features("pixel_buffer_object") {
//not found in gl!        unsafe { gl::GetIntegerv(gl::PIXEL_PACK_BUFFER_BINDING, &_pack_buffer) };
    }
     let buffer = Vec::<u8>::new();
    if _pack_buffer != 0 {
    return;
    }
//not found in gl!    unsafe { gl::GetnSeparableFilterARB(target, format, _type, rowBufSize, row, columnBufSize, column, span) };
}

pub fn retrace_glGetnHistogramARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut reset: GLboolean;
    reset = (call.arg(1)).to_u32().unwrap() as u8;

    let mut format: GLenum;
    format = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let mut bufSize: GLsizei;
    bufSize = (call.arg(4)).to_i32().unwrap();

    let values: &mut [GLc_void];
    let values = (call.arg(5)).to_pointer();

    let _pack_buffer = 0;
    if self.context.features("pixel_buffer_object") {
//not found in gl!        unsafe { gl::GetIntegerv(gl::PIXEL_PACK_BUFFER_BINDING, &_pack_buffer) };
    }
     let buffer = Vec::<u8>::new();
    if _pack_buffer != 0 {
    return;
    }
//not found in gl!    unsafe { gl::GetnHistogramARB(target, reset, format, _type, bufSize, values) };
}

pub fn retrace_glGetnMinmaxARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut reset: GLboolean;
    reset = (call.arg(1)).to_u32().unwrap() as u8;

    let mut format: GLenum;
    format = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let mut bufSize: GLsizei;
    bufSize = (call.arg(4)).to_i32().unwrap();

    let values: &mut [GLc_void];
    let values = (call.arg(5)).to_pointer();

    let _pack_buffer = 0;
    if self.context.features("pixel_buffer_object") {
//not found in gl!        unsafe { gl::GetIntegerv(gl::PIXEL_PACK_BUFFER_BINDING, &_pack_buffer) };
    }
     let buffer = Vec::<u8>::new();
    if _pack_buffer != 0 {
    return;
    }
//not found in gl!    unsafe { gl::GetnMinmaxARB(target, reset, format, _type, bufSize, values) };
}

pub fn retrace_glGetnTexImageARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(1)).to_i32().unwrap();

    let mut format: GLenum;
    format = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let mut bufSize: GLsizei;
    bufSize = (call.arg(4)).to_i32().unwrap();

    let img: &mut [GLc_void];
    let img = (call.arg(5)).to_pointer();

    let _pack_buffer = 0;
    if self.context.features("pixel_buffer_object") {
//not found in gl!        unsafe { gl::GetIntegerv(gl::PIXEL_PACK_BUFFER_BINDING, &_pack_buffer) };
    }
     let buffer = Vec::<u8>::new();
    if _pack_buffer != 0 {
    return;
    }
//not found in gl!    unsafe { gl::GetnTexImageARB(target, level, format, _type, bufSize, img) };
}

pub fn retrace_glReadnPixelsARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut x: GLint;
    x = (call.arg(0)).to_i32().unwrap();

    let mut y: GLint;
    y = (call.arg(1)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(2)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(3)).to_i32().unwrap();

    let mut format: GLenum;
    format = (call.arg(4)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(5)).to_u32().unwrap().try_into().unwrap();

    let mut bufSize: GLsizei;
    bufSize = (call.arg(6)).to_i32().unwrap();

    let data: &mut [GLc_void];
    let data = (call.arg(7)).to_pointer();

    let _pack_buffer = 0;
    if self.context.features("pixel_buffer_object") {
//not found in gl!        unsafe { gl::GetIntegerv(gl::PIXEL_PACK_BUFFER_BINDING, &_pack_buffer) };
    }
     let buffer = Vec::<u8>::new();
    if _pack_buffer != 0 {
    return;
    }
//not found in gl!    unsafe { gl::ReadnPixelsARB(x, y, width, height, format, _type, bufSize, data) };
}

pub fn retrace_glGetnCompressedTexImageARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut lod: GLint;
    lod = (call.arg(1)).to_i32().unwrap();

    let mut bufSize: GLsizei;
    bufSize = (call.arg(2)).to_i32().unwrap();

    let img: &mut [GLc_void];
    let img = (call.arg(3)).to_pointer();

    let _pack_buffer = 0;
    if self.context.features("pixel_buffer_object") {
//not found in gl!        unsafe { gl::GetIntegerv(gl::PIXEL_PACK_BUFFER_BINDING, &_pack_buffer) };
    }
     let buffer = Vec::<u8>::new();
    if _pack_buffer != 0 {
    return;
    }
//not found in gl!    unsafe { gl::GetnCompressedTexImageARB(target, lod, bufSize, img) };
}

pub fn retrace_glFramebufferSampleLocationsfvARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut start: GLuint;
    start = (call.arg(1)).to_u32().unwrap();

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let v: &mut [GLfloat];
    v = _allocator.alloc_array::<GLfloat>(&call.arg(3));
    let _a_GLfloat155_0 = (call.arg(3)).to_array();
    if let Some(_a_GLfloat155_0) = _a_GLfloat155_0 {
        for _jGLfloat155 in 0.._a_GLfloat155_0.values.len() {
    v[_jGLfloat155] = (*_a_GLfloat155_0.values[_jGLfloat155]).to_f32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::FramebufferSampleLocationsfvARB(target, start, count, v) };
}

pub fn retrace_glNamedFramebufferSampleLocationsfvARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut framebuffer: GLuint;
    framebuffer = (call.arg(0)).to_u32().unwrap();
    framebuffer = self._framebuffer_map[framebuffer];

    let mut start: GLuint;
    start = (call.arg(1)).to_u32().unwrap();

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let v: &mut [GLfloat];
    v = _allocator.alloc_array::<GLfloat>(&call.arg(3));
    let _a_GLfloat156_0 = (call.arg(3)).to_array();
    if let Some(_a_GLfloat156_0) = _a_GLfloat156_0 {
        for _jGLfloat156 in 0.._a_GLfloat156_0.values.len() {
    v[_jGLfloat156] = (*_a_GLfloat156_0.values[_jGLfloat156]).to_f32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::NamedFramebufferSampleLocationsfvARB(framebuffer, start, count, v) };
}

pub fn retrace_glEvaluateDepthValuesARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
//not found in gl!    unsafe { gl::EvaluateDepthValuesARB() };
}

pub fn retrace_glMinSampleShadingARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut value: GLfloat;
    value = (call.arg(0)).to_f32().unwrap();

//not found in gl!    unsafe { gl::MinSampleShadingARB(value) };
}

pub fn retrace_glGenSamplers(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut count: GLsizei;
    count = (call.arg(0)).to_i32().unwrap();

    let samplers: &mut [GLuint];
    samplers = _allocator.alloc_array::<GLuint>(&call.arg(1));

//not found in gl!    unsafe { gl::GenSamplers(count, samplers) };
    let _aGLuint177 = (call.arg(1)).to_array();
    if (_aGLuint177) {
        for _jGLuint177 in 0.._aGLuint177.values.len() {
    let _origResult: GLuint;
    _origResult = (_aGLuint177.values[_jGLuint177]).to_u32().unwrap();
    self._sampler_map[_origResult] = samplers[_jGLuint177]; 
        }
    }
}

pub fn retrace_glDeleteSamplers(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut count: GLsizei;
    count = (call.arg(0)).to_i32().unwrap();

    let samplers: &mut [GLuint];
    samplers = _allocator.alloc_array::<GLuint>(&call.arg(1));
    let _a_GLuint178_0 = (call.arg(1)).to_array();
    if let Some(_a_GLuint178_0) = _a_GLuint178_0 {
        for _jGLuint178 in 0.._a_GLuint178_0.values.len() {
    samplers[_jGLuint178] = (*_a_GLuint178_0.values[_jGLuint178]).to_u32().unwrap();
    samplers[_jGLuint178] = self._sampler_map[samplers[_jGLuint178]];
        }
    }
    let samplers = samplers.as_mut_ptr();

    unsafe { gl::DeleteSamplers(count, samplers) };
}

pub fn retrace_glBindSampler(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut unit: GLuint;
    unit = (call.arg(0)).to_u32().unwrap();

    let mut sampler: GLuint;
    sampler = (call.arg(1)).to_u32().unwrap();
    sampler = self._sampler_map[sampler];

    unsafe { gl::BindSampler(unit, sampler) };
}

pub fn retrace_glSamplerParameteri(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut sampler: GLuint;
    sampler = (call.arg(0)).to_u32().unwrap();
    sampler = self._sampler_map[sampler];

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut param: GLint;
    param = (call.arg(2)).to_i32().unwrap();

    unsafe { gl::SamplerParameteri(sampler, pname, param) };
}

pub fn retrace_glSamplerParameteriv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut sampler: GLuint;
    sampler = (call.arg(0)).to_u32().unwrap();
    sampler = self._sampler_map[sampler];

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let param: &mut [GLint];
    param = _allocator.alloc_array::<GLint>(&call.arg(2));
    let _a_GLint189_0 = (call.arg(2)).to_array();
    if let Some(_a_GLint189_0) = _a_GLint189_0 {
        for _jGLint189 in 0.._a_GLint189_0.values.len() {
    param[_jGLint189] = (*_a_GLint189_0.values[_jGLint189]).to_i32().unwrap();
        }
    }
    let param = param.as_mut_ptr();

    unsafe { gl::SamplerParameteriv(sampler, pname, param) };
}

pub fn retrace_glSamplerParameterf(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut sampler: GLuint;
    sampler = (call.arg(0)).to_u32().unwrap();
    sampler = self._sampler_map[sampler];

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut param: GLfloat;
    param = (call.arg(2)).to_f32().unwrap();

    unsafe { gl::SamplerParameterf(sampler, pname, param) };
}

pub fn retrace_glSamplerParameterfv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut sampler: GLuint;
    sampler = (call.arg(0)).to_u32().unwrap();
    sampler = self._sampler_map[sampler];

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let param: &mut [GLfloat];
    param = _allocator.alloc_array::<GLfloat>(&call.arg(2));
    let _a_GLfloat157_0 = (call.arg(2)).to_array();
    if let Some(_a_GLfloat157_0) = _a_GLfloat157_0 {
        for _jGLfloat157 in 0.._a_GLfloat157_0.values.len() {
    param[_jGLfloat157] = (*_a_GLfloat157_0.values[_jGLfloat157]).to_f32().unwrap();
        }
    }
    let param = param.as_mut_ptr();

    unsafe { gl::SamplerParameterfv(sampler, pname, param) };
}

pub fn retrace_glSamplerParameterIiv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut sampler: GLuint;
    sampler = (call.arg(0)).to_u32().unwrap();
    sampler = self._sampler_map[sampler];

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let param: &mut [GLint];
    param = _allocator.alloc_array::<GLint>(&call.arg(2));
    let _a_GLint190_0 = (call.arg(2)).to_array();
    if let Some(_a_GLint190_0) = _a_GLint190_0 {
        for _jGLint190 in 0.._a_GLint190_0.values.len() {
    param[_jGLint190] = (*_a_GLint190_0.values[_jGLint190]).to_i32().unwrap();
        }
    }
    let param = param.as_mut_ptr();

    unsafe { gl::SamplerParameterIiv(sampler, pname, param) };
}

pub fn retrace_glSamplerParameterIuiv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut sampler: GLuint;
    sampler = (call.arg(0)).to_u32().unwrap();
    sampler = self._sampler_map[sampler];

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let param: &mut [GLuint];
    param = _allocator.alloc_array::<GLuint>(&call.arg(2));
    let _a_GLuint179_0 = (call.arg(2)).to_array();
    if let Some(_a_GLuint179_0) = _a_GLuint179_0 {
        for _jGLuint179 in 0.._a_GLuint179_0.values.len() {
    param[_jGLuint179] = (*_a_GLuint179_0.values[_jGLuint179]).to_u32().unwrap();
        }
    }
    let param = param.as_mut_ptr();

    unsafe { gl::SamplerParameterIuiv(sampler, pname, param) };
}

pub fn retrace_glUseProgramStages(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut pipeline: GLuint;
    pipeline = (call.arg(0)).to_u32().unwrap();
    pipeline = self._pipeline_map[pipeline];

    let mut stages: GLbitfield;
    stages = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut program: GLuint;
    program = (call.arg(2)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    unsafe { gl::UseProgramStages(pipeline, stages, program) };
}

pub fn retrace_glActiveShaderProgram(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut pipeline: GLuint;
    pipeline = (call.arg(0)).to_u32().unwrap();
    pipeline = self._pipeline_map[pipeline];

    let mut program: GLuint;
    program = (call.arg(1)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    unsafe { gl::ActiveShaderProgram(pipeline, program) };
}

pub fn retrace_glCreateShaderProgramv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut _type: GLenum;
    _type = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let strings: &mut [GLchar];
    strings = _allocator.alloc_array::<GLchar >(&call.arg(2));
    let _a_GLchar29_0 = (call.arg(2)).to_array();
    if let Some(_a_GLchar29_0) = _a_GLchar29_0 {
        for _jGLchar29 in 0.._a_GLchar29_0.values.len() {
    strings[_jGLchar29] = (*_a_GLchar29_0.values[_jGLchar29]).to_string().unwrap();
        }
    }
    let strings = strings.as_mut_ptr();

    let _result = unsafe { gl::CreateShaderProgramv(_type, count, strings) };

        let program = _result;
        let link_status = 0;
//not found in gl!        unsafe { gl::GetProgramiv(program, gl::LINK_STATUS, &link_status) };
        if link_status == 0 {
             println!("link failed");
        }
        let info_log_length = 0;
//not found in gl!        unsafe { gl::GetProgramiv(program, gl::INFO_LOG_LENGTH, &info_log_length) };
        if info_log_length > 1 {
             let infoLog = vec![0i8; info_log_length].as_mut_ptr();
//not found in gl!             unsafe { gl::GetProgramInfoLog(program, info_log_length, std::ptr::null_mut(), infoLog) };
        }
    let _origResult: GLuint;
    _origResult = (*call.ret).to_u32().unwrap();
if supportsARBShaderObjects {
    self._handleARB_map[_origResult] = _result;
} else {
    _program_map[_origResult] = _result;
}
}

pub fn retrace_glBindProgramPipeline(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut pipeline: GLuint;
    pipeline = (call.arg(0)).to_u32().unwrap();
    pipeline = self._pipeline_map[pipeline];

    unsafe { gl::BindProgramPipeline(pipeline) };
    if (self.context) {
        self.context.currentPipeline = pipeline;
    }
}

pub fn retrace_glDeleteProgramPipelines(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut n: GLsizei;
    n = (call.arg(0)).to_i32().unwrap();

    let pipelines: &mut [GLuint];
    pipelines = _allocator.alloc_array::<GLuint>(&call.arg(1));
    let _a_GLuint180_0 = (call.arg(1)).to_array();
    if let Some(_a_GLuint180_0) = _a_GLuint180_0 {
        for _jGLuint180 in 0.._a_GLuint180_0.values.len() {
    pipelines[_jGLuint180] = (*_a_GLuint180_0.values[_jGLuint180]).to_u32().unwrap();
        }
    }
    let pipelines = pipelines.as_mut_ptr();

    unsafe { gl::DeleteProgramPipelines(n, pipelines) };
}

pub fn retrace_glGenProgramPipelines(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut n: GLsizei;
    n = (call.arg(0)).to_i32().unwrap();

    let pipelines: &mut [GLuint];
    pipelines = _allocator.alloc_array::<GLuint>(&call.arg(1));

//not found in gl!    unsafe { gl::GenProgramPipelines(n, pipelines) };
    let _aGLuint182 = (call.arg(1)).to_array();
    if (_aGLuint182) {
        for _jGLuint182 in 0.._aGLuint182.values.len() {
    let _origResult: GLuint;
    _origResult = (_aGLuint182.values[_jGLuint182]).to_u32().unwrap();
    self._pipeline_map[_origResult] = pipelines[_jGLuint182]; 
        }
    }
}

pub fn retrace_glProgramUniform1i(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut v0: GLint;
    v0 = (call.arg(2)).to_i32().unwrap();

    unsafe { gl::ProgramUniform1i(program, location, v0) };
}

pub fn retrace_glProgramUniform1iv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let value: &mut [GLint];
    value = _allocator.alloc_array::<GLint>(&call.arg(3));
    let _a_GLint191_0 = (call.arg(3)).to_array();
    if let Some(_a_GLint191_0) = _a_GLint191_0 {
        for _jGLint191 in 0.._a_GLint191_0.values.len() {
    value[_jGLint191] = (*_a_GLint191_0.values[_jGLint191]).to_i32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

    unsafe { gl::ProgramUniform1iv(program, location, count, value) };
}

pub fn retrace_glProgramUniform1f(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut v0: GLfloat;
    v0 = (call.arg(2)).to_f32().unwrap();

    unsafe { gl::ProgramUniform1f(program, location, v0) };
}

pub fn retrace_glProgramUniform1fv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let value: &mut [GLfloat];
    value = _allocator.alloc_array::<GLfloat>(&call.arg(3));
    let _a_GLfloat158_0 = (call.arg(3)).to_array();
    if let Some(_a_GLfloat158_0) = _a_GLfloat158_0 {
        for _jGLfloat158 in 0.._a_GLfloat158_0.values.len() {
    value[_jGLfloat158] = (*_a_GLfloat158_0.values[_jGLfloat158]).to_f32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

    unsafe { gl::ProgramUniform1fv(program, location, count, value) };
}

pub fn retrace_glProgramUniform1d(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut v0: GLdouble;
    v0 = (call.arg(2)).to_f64().unwrap();

    unsafe { gl::ProgramUniform1d(program, location, v0) };
}

pub fn retrace_glProgramUniform1dv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let value: &mut [GLdouble];
    value = _allocator.alloc_array::<GLdouble>(&call.arg(3));
    let _a_GLdouble73_0 = (call.arg(3)).to_array();
    if let Some(_a_GLdouble73_0) = _a_GLdouble73_0 {
        for _jGLdouble73 in 0.._a_GLdouble73_0.values.len() {
    value[_jGLdouble73] = (*_a_GLdouble73_0.values[_jGLdouble73]).to_f64().unwrap();
        }
    }
    let value = value.as_mut_ptr();

    unsafe { gl::ProgramUniform1dv(program, location, count, value) };
}

pub fn retrace_glProgramUniform1ui(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut v0: GLuint;
    v0 = (call.arg(2)).to_u32().unwrap();

    unsafe { gl::ProgramUniform1ui(program, location, v0) };
}

pub fn retrace_glProgramUniform1uiv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let value: &mut [GLuint];
    value = _allocator.alloc_array::<GLuint>(&call.arg(3));
    let _a_GLuint183_0 = (call.arg(3)).to_array();
    if let Some(_a_GLuint183_0) = _a_GLuint183_0 {
        for _jGLuint183 in 0.._a_GLuint183_0.values.len() {
    value[_jGLuint183] = (*_a_GLuint183_0.values[_jGLuint183]).to_u32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

    unsafe { gl::ProgramUniform1uiv(program, location, count, value) };
}

pub fn retrace_glProgramUniform2i(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut v0: GLint;
    v0 = (call.arg(2)).to_i32().unwrap();

    let mut v1: GLint;
    v1 = (call.arg(3)).to_i32().unwrap();

    unsafe { gl::ProgramUniform2i(program, location, v0, v1) };
}

pub fn retrace_glProgramUniform2iv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let value: &mut [GLint];
    value = _allocator.alloc_array::<GLint>(&call.arg(3));
    let _a_GLint192_0 = (call.arg(3)).to_array();
    if let Some(_a_GLint192_0) = _a_GLint192_0 {
        for _jGLint192 in 0.._a_GLint192_0.values.len() {
    value[_jGLint192] = (*_a_GLint192_0.values[_jGLint192]).to_i32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

    unsafe { gl::ProgramUniform2iv(program, location, count, value) };
}

pub fn retrace_glProgramUniform2f(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut v0: GLfloat;
    v0 = (call.arg(2)).to_f32().unwrap();

    let mut v1: GLfloat;
    v1 = (call.arg(3)).to_f32().unwrap();

    unsafe { gl::ProgramUniform2f(program, location, v0, v1) };
}

pub fn retrace_glProgramUniform2fv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let value: &mut [GLfloat];
    value = _allocator.alloc_array::<GLfloat>(&call.arg(3));
    let _a_GLfloat159_0 = (call.arg(3)).to_array();
    if let Some(_a_GLfloat159_0) = _a_GLfloat159_0 {
        for _jGLfloat159 in 0.._a_GLfloat159_0.values.len() {
    value[_jGLfloat159] = (*_a_GLfloat159_0.values[_jGLfloat159]).to_f32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

    unsafe { gl::ProgramUniform2fv(program, location, count, value) };
}

pub fn retrace_glProgramUniform2d(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut v0: GLdouble;
    v0 = (call.arg(2)).to_f64().unwrap();

    let mut v1: GLdouble;
    v1 = (call.arg(3)).to_f64().unwrap();

    unsafe { gl::ProgramUniform2d(program, location, v0, v1) };
}

pub fn retrace_glProgramUniform2dv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let value: &mut [GLdouble];
    value = _allocator.alloc_array::<GLdouble>(&call.arg(3));
    let _a_GLdouble74_0 = (call.arg(3)).to_array();
    if let Some(_a_GLdouble74_0) = _a_GLdouble74_0 {
        for _jGLdouble74 in 0.._a_GLdouble74_0.values.len() {
    value[_jGLdouble74] = (*_a_GLdouble74_0.values[_jGLdouble74]).to_f64().unwrap();
        }
    }
    let value = value.as_mut_ptr();

    unsafe { gl::ProgramUniform2dv(program, location, count, value) };
}

pub fn retrace_glProgramUniform2ui(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut v0: GLuint;
    v0 = (call.arg(2)).to_u32().unwrap();

    let mut v1: GLuint;
    v1 = (call.arg(3)).to_u32().unwrap();

    unsafe { gl::ProgramUniform2ui(program, location, v0, v1) };
}

pub fn retrace_glProgramUniform2uiv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let value: &mut [GLuint];
    value = _allocator.alloc_array::<GLuint>(&call.arg(3));
    let _a_GLuint184_0 = (call.arg(3)).to_array();
    if let Some(_a_GLuint184_0) = _a_GLuint184_0 {
        for _jGLuint184 in 0.._a_GLuint184_0.values.len() {
    value[_jGLuint184] = (*_a_GLuint184_0.values[_jGLuint184]).to_u32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

    unsafe { gl::ProgramUniform2uiv(program, location, count, value) };
}

pub fn retrace_glProgramUniform3i(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut v0: GLint;
    v0 = (call.arg(2)).to_i32().unwrap();

    let mut v1: GLint;
    v1 = (call.arg(3)).to_i32().unwrap();

    let mut v2: GLint;
    v2 = (call.arg(4)).to_i32().unwrap();

    unsafe { gl::ProgramUniform3i(program, location, v0, v1, v2) };
}

pub fn retrace_glProgramUniform3iv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let value: &mut [GLint];
    value = _allocator.alloc_array::<GLint>(&call.arg(3));
    let _a_GLint193_0 = (call.arg(3)).to_array();
    if let Some(_a_GLint193_0) = _a_GLint193_0 {
        for _jGLint193 in 0.._a_GLint193_0.values.len() {
    value[_jGLint193] = (*_a_GLint193_0.values[_jGLint193]).to_i32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

    unsafe { gl::ProgramUniform3iv(program, location, count, value) };
}

pub fn retrace_glProgramUniform3f(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut v0: GLfloat;
    v0 = (call.arg(2)).to_f32().unwrap();

    let mut v1: GLfloat;
    v1 = (call.arg(3)).to_f32().unwrap();

    let mut v2: GLfloat;
    v2 = (call.arg(4)).to_f32().unwrap();

    unsafe { gl::ProgramUniform3f(program, location, v0, v1, v2) };
}

pub fn retrace_glProgramUniform3fv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let value: &mut [GLfloat];
    value = _allocator.alloc_array::<GLfloat>(&call.arg(3));
    let _a_GLfloat160_0 = (call.arg(3)).to_array();
    if let Some(_a_GLfloat160_0) = _a_GLfloat160_0 {
        for _jGLfloat160 in 0.._a_GLfloat160_0.values.len() {
    value[_jGLfloat160] = (*_a_GLfloat160_0.values[_jGLfloat160]).to_f32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

    unsafe { gl::ProgramUniform3fv(program, location, count, value) };
}

pub fn retrace_glProgramUniform3d(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut v0: GLdouble;
    v0 = (call.arg(2)).to_f64().unwrap();

    let mut v1: GLdouble;
    v1 = (call.arg(3)).to_f64().unwrap();

    let mut v2: GLdouble;
    v2 = (call.arg(4)).to_f64().unwrap();

    unsafe { gl::ProgramUniform3d(program, location, v0, v1, v2) };
}

pub fn retrace_glProgramUniform3dv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let value: &mut [GLdouble];
    value = _allocator.alloc_array::<GLdouble>(&call.arg(3));
    let _a_GLdouble75_0 = (call.arg(3)).to_array();
    if let Some(_a_GLdouble75_0) = _a_GLdouble75_0 {
        for _jGLdouble75 in 0.._a_GLdouble75_0.values.len() {
    value[_jGLdouble75] = (*_a_GLdouble75_0.values[_jGLdouble75]).to_f64().unwrap();
        }
    }
    let value = value.as_mut_ptr();

    unsafe { gl::ProgramUniform3dv(program, location, count, value) };
}

pub fn retrace_glProgramUniform3ui(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut v0: GLuint;
    v0 = (call.arg(2)).to_u32().unwrap();

    let mut v1: GLuint;
    v1 = (call.arg(3)).to_u32().unwrap();

    let mut v2: GLuint;
    v2 = (call.arg(4)).to_u32().unwrap();

    unsafe { gl::ProgramUniform3ui(program, location, v0, v1, v2) };
}

pub fn retrace_glProgramUniform3uiv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let value: &mut [GLuint];
    value = _allocator.alloc_array::<GLuint>(&call.arg(3));
    let _a_GLuint185_0 = (call.arg(3)).to_array();
    if let Some(_a_GLuint185_0) = _a_GLuint185_0 {
        for _jGLuint185 in 0.._a_GLuint185_0.values.len() {
    value[_jGLuint185] = (*_a_GLuint185_0.values[_jGLuint185]).to_u32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

    unsafe { gl::ProgramUniform3uiv(program, location, count, value) };
}

pub fn retrace_glProgramUniform4i(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut v0: GLint;
    v0 = (call.arg(2)).to_i32().unwrap();

    let mut v1: GLint;
    v1 = (call.arg(3)).to_i32().unwrap();

    let mut v2: GLint;
    v2 = (call.arg(4)).to_i32().unwrap();

    let mut v3: GLint;
    v3 = (call.arg(5)).to_i32().unwrap();

    unsafe { gl::ProgramUniform4i(program, location, v0, v1, v2, v3) };
}

pub fn retrace_glProgramUniform4iv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let value: &mut [GLint];
    value = _allocator.alloc_array::<GLint>(&call.arg(3));
    let _a_GLint194_0 = (call.arg(3)).to_array();
    if let Some(_a_GLint194_0) = _a_GLint194_0 {
        for _jGLint194 in 0.._a_GLint194_0.values.len() {
    value[_jGLint194] = (*_a_GLint194_0.values[_jGLint194]).to_i32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

    unsafe { gl::ProgramUniform4iv(program, location, count, value) };
}

pub fn retrace_glProgramUniform4f(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut v0: GLfloat;
    v0 = (call.arg(2)).to_f32().unwrap();

    let mut v1: GLfloat;
    v1 = (call.arg(3)).to_f32().unwrap();

    let mut v2: GLfloat;
    v2 = (call.arg(4)).to_f32().unwrap();

    let mut v3: GLfloat;
    v3 = (call.arg(5)).to_f32().unwrap();

    unsafe { gl::ProgramUniform4f(program, location, v0, v1, v2, v3) };
}

pub fn retrace_glProgramUniform4fv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let value: &mut [GLfloat];
    value = _allocator.alloc_array::<GLfloat>(&call.arg(3));
    let _a_GLfloat161_0 = (call.arg(3)).to_array();
    if let Some(_a_GLfloat161_0) = _a_GLfloat161_0 {
        for _jGLfloat161 in 0.._a_GLfloat161_0.values.len() {
    value[_jGLfloat161] = (*_a_GLfloat161_0.values[_jGLfloat161]).to_f32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

    unsafe { gl::ProgramUniform4fv(program, location, count, value) };
}

pub fn retrace_glProgramUniform4d(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut v0: GLdouble;
    v0 = (call.arg(2)).to_f64().unwrap();

    let mut v1: GLdouble;
    v1 = (call.arg(3)).to_f64().unwrap();

    let mut v2: GLdouble;
    v2 = (call.arg(4)).to_f64().unwrap();

    let mut v3: GLdouble;
    v3 = (call.arg(5)).to_f64().unwrap();

    unsafe { gl::ProgramUniform4d(program, location, v0, v1, v2, v3) };
}

pub fn retrace_glProgramUniform4dv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let value: &mut [GLdouble];
    value = _allocator.alloc_array::<GLdouble>(&call.arg(3));
    let _a_GLdouble76_0 = (call.arg(3)).to_array();
    if let Some(_a_GLdouble76_0) = _a_GLdouble76_0 {
        for _jGLdouble76 in 0.._a_GLdouble76_0.values.len() {
    value[_jGLdouble76] = (*_a_GLdouble76_0.values[_jGLdouble76]).to_f64().unwrap();
        }
    }
    let value = value.as_mut_ptr();

    unsafe { gl::ProgramUniform4dv(program, location, count, value) };
}

pub fn retrace_glProgramUniform4ui(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut v0: GLuint;
    v0 = (call.arg(2)).to_u32().unwrap();

    let mut v1: GLuint;
    v1 = (call.arg(3)).to_u32().unwrap();

    let mut v2: GLuint;
    v2 = (call.arg(4)).to_u32().unwrap();

    let mut v3: GLuint;
    v3 = (call.arg(5)).to_u32().unwrap();

    unsafe { gl::ProgramUniform4ui(program, location, v0, v1, v2, v3) };
}

pub fn retrace_glProgramUniform4uiv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let value: &mut [GLuint];
    value = _allocator.alloc_array::<GLuint>(&call.arg(3));
    let _a_GLuint186_0 = (call.arg(3)).to_array();
    if let Some(_a_GLuint186_0) = _a_GLuint186_0 {
        for _jGLuint186 in 0.._a_GLuint186_0.values.len() {
    value[_jGLuint186] = (*_a_GLuint186_0.values[_jGLuint186]).to_u32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

    unsafe { gl::ProgramUniform4uiv(program, location, count, value) };
}

pub fn retrace_glProgramUniformMatrix2fv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let mut transpose: GLboolean;
    transpose = (call.arg(3)).to_u32().unwrap() as u8;

    let value: &mut [GLfloat];
    value = _allocator.alloc_array::<GLfloat>(&call.arg(4));
    let _a_GLfloat162_0 = (call.arg(4)).to_array();
    if let Some(_a_GLfloat162_0) = _a_GLfloat162_0 {
        for _jGLfloat162 in 0.._a_GLfloat162_0.values.len() {
    value[_jGLfloat162] = (*_a_GLfloat162_0.values[_jGLfloat162]).to_f32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

    unsafe { gl::ProgramUniformMatrix2fv(program, location, count, transpose, value) };
}

pub fn retrace_glProgramUniformMatrix3fv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let mut transpose: GLboolean;
    transpose = (call.arg(3)).to_u32().unwrap() as u8;

    let value: &mut [GLfloat];
    value = _allocator.alloc_array::<GLfloat>(&call.arg(4));
    let _a_GLfloat163_0 = (call.arg(4)).to_array();
    if let Some(_a_GLfloat163_0) = _a_GLfloat163_0 {
        for _jGLfloat163 in 0.._a_GLfloat163_0.values.len() {
    value[_jGLfloat163] = (*_a_GLfloat163_0.values[_jGLfloat163]).to_f32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

    unsafe { gl::ProgramUniformMatrix3fv(program, location, count, transpose, value) };
}

pub fn retrace_glProgramUniformMatrix4fv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let mut transpose: GLboolean;
    transpose = (call.arg(3)).to_u32().unwrap() as u8;

    let value: &mut [GLfloat];
    value = _allocator.alloc_array::<GLfloat>(&call.arg(4));
    let _a_GLfloat164_0 = (call.arg(4)).to_array();
    if let Some(_a_GLfloat164_0) = _a_GLfloat164_0 {
        for _jGLfloat164 in 0.._a_GLfloat164_0.values.len() {
    value[_jGLfloat164] = (*_a_GLfloat164_0.values[_jGLfloat164]).to_f32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

    unsafe { gl::ProgramUniformMatrix4fv(program, location, count, transpose, value) };
}

pub fn retrace_glProgramUniformMatrix2dv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let mut transpose: GLboolean;
    transpose = (call.arg(3)).to_u32().unwrap() as u8;

    let value: &mut [GLdouble];
    value = _allocator.alloc_array::<GLdouble>(&call.arg(4));
    let _a_GLdouble77_0 = (call.arg(4)).to_array();
    if let Some(_a_GLdouble77_0) = _a_GLdouble77_0 {
        for _jGLdouble77 in 0.._a_GLdouble77_0.values.len() {
    value[_jGLdouble77] = (*_a_GLdouble77_0.values[_jGLdouble77]).to_f64().unwrap();
        }
    }
    let value = value.as_mut_ptr();

    unsafe { gl::ProgramUniformMatrix2dv(program, location, count, transpose, value) };
}

pub fn retrace_glProgramUniformMatrix3dv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let mut transpose: GLboolean;
    transpose = (call.arg(3)).to_u32().unwrap() as u8;

    let value: &mut [GLdouble];
    value = _allocator.alloc_array::<GLdouble>(&call.arg(4));
    let _a_GLdouble78_0 = (call.arg(4)).to_array();
    if let Some(_a_GLdouble78_0) = _a_GLdouble78_0 {
        for _jGLdouble78 in 0.._a_GLdouble78_0.values.len() {
    value[_jGLdouble78] = (*_a_GLdouble78_0.values[_jGLdouble78]).to_f64().unwrap();
        }
    }
    let value = value.as_mut_ptr();

    unsafe { gl::ProgramUniformMatrix3dv(program, location, count, transpose, value) };
}

pub fn retrace_glProgramUniformMatrix4dv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let mut transpose: GLboolean;
    transpose = (call.arg(3)).to_u32().unwrap() as u8;

    let value: &mut [GLdouble];
    value = _allocator.alloc_array::<GLdouble>(&call.arg(4));
    let _a_GLdouble79_0 = (call.arg(4)).to_array();
    if let Some(_a_GLdouble79_0) = _a_GLdouble79_0 {
        for _jGLdouble79 in 0.._a_GLdouble79_0.values.len() {
    value[_jGLdouble79] = (*_a_GLdouble79_0.values[_jGLdouble79]).to_f64().unwrap();
        }
    }
    let value = value.as_mut_ptr();

    unsafe { gl::ProgramUniformMatrix4dv(program, location, count, transpose, value) };
}

pub fn retrace_glProgramUniformMatrix2x3fv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let mut transpose: GLboolean;
    transpose = (call.arg(3)).to_u32().unwrap() as u8;

    let value: &mut [GLfloat];
    value = _allocator.alloc_array::<GLfloat>(&call.arg(4));
    let _a_GLfloat165_0 = (call.arg(4)).to_array();
    if let Some(_a_GLfloat165_0) = _a_GLfloat165_0 {
        for _jGLfloat165 in 0.._a_GLfloat165_0.values.len() {
    value[_jGLfloat165] = (*_a_GLfloat165_0.values[_jGLfloat165]).to_f32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

    unsafe { gl::ProgramUniformMatrix2x3fv(program, location, count, transpose, value) };
}

pub fn retrace_glProgramUniformMatrix3x2fv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let mut transpose: GLboolean;
    transpose = (call.arg(3)).to_u32().unwrap() as u8;

    let value: &mut [GLfloat];
    value = _allocator.alloc_array::<GLfloat>(&call.arg(4));
    let _a_GLfloat166_0 = (call.arg(4)).to_array();
    if let Some(_a_GLfloat166_0) = _a_GLfloat166_0 {
        for _jGLfloat166 in 0.._a_GLfloat166_0.values.len() {
    value[_jGLfloat166] = (*_a_GLfloat166_0.values[_jGLfloat166]).to_f32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

    unsafe { gl::ProgramUniformMatrix3x2fv(program, location, count, transpose, value) };
}

pub fn retrace_glProgramUniformMatrix2x4fv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let mut transpose: GLboolean;
    transpose = (call.arg(3)).to_u32().unwrap() as u8;

    let value: &mut [GLfloat];
    value = _allocator.alloc_array::<GLfloat>(&call.arg(4));
    let _a_GLfloat167_0 = (call.arg(4)).to_array();
    if let Some(_a_GLfloat167_0) = _a_GLfloat167_0 {
        for _jGLfloat167 in 0.._a_GLfloat167_0.values.len() {
    value[_jGLfloat167] = (*_a_GLfloat167_0.values[_jGLfloat167]).to_f32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

    unsafe { gl::ProgramUniformMatrix2x4fv(program, location, count, transpose, value) };
}

pub fn retrace_glProgramUniformMatrix4x2fv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let mut transpose: GLboolean;
    transpose = (call.arg(3)).to_u32().unwrap() as u8;

    let value: &mut [GLfloat];
    value = _allocator.alloc_array::<GLfloat>(&call.arg(4));
    let _a_GLfloat168_0 = (call.arg(4)).to_array();
    if let Some(_a_GLfloat168_0) = _a_GLfloat168_0 {
        for _jGLfloat168 in 0.._a_GLfloat168_0.values.len() {
    value[_jGLfloat168] = (*_a_GLfloat168_0.values[_jGLfloat168]).to_f32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

    unsafe { gl::ProgramUniformMatrix4x2fv(program, location, count, transpose, value) };
}

pub fn retrace_glProgramUniformMatrix3x4fv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let mut transpose: GLboolean;
    transpose = (call.arg(3)).to_u32().unwrap() as u8;

    let value: &mut [GLfloat];
    value = _allocator.alloc_array::<GLfloat>(&call.arg(4));
    let _a_GLfloat169_0 = (call.arg(4)).to_array();
    if let Some(_a_GLfloat169_0) = _a_GLfloat169_0 {
        for _jGLfloat169 in 0.._a_GLfloat169_0.values.len() {
    value[_jGLfloat169] = (*_a_GLfloat169_0.values[_jGLfloat169]).to_f32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

    unsafe { gl::ProgramUniformMatrix3x4fv(program, location, count, transpose, value) };
}

pub fn retrace_glProgramUniformMatrix4x3fv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let mut transpose: GLboolean;
    transpose = (call.arg(3)).to_u32().unwrap() as u8;

    let value: &mut [GLfloat];
    value = _allocator.alloc_array::<GLfloat>(&call.arg(4));
    let _a_GLfloat170_0 = (call.arg(4)).to_array();
    if let Some(_a_GLfloat170_0) = _a_GLfloat170_0 {
        for _jGLfloat170 in 0.._a_GLfloat170_0.values.len() {
    value[_jGLfloat170] = (*_a_GLfloat170_0.values[_jGLfloat170]).to_f32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

    unsafe { gl::ProgramUniformMatrix4x3fv(program, location, count, transpose, value) };
}

pub fn retrace_glProgramUniformMatrix2x3dv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let mut transpose: GLboolean;
    transpose = (call.arg(3)).to_u32().unwrap() as u8;

    let value: &mut [GLdouble];
    value = _allocator.alloc_array::<GLdouble>(&call.arg(4));
    let _a_GLdouble80_0 = (call.arg(4)).to_array();
    if let Some(_a_GLdouble80_0) = _a_GLdouble80_0 {
        for _jGLdouble80 in 0.._a_GLdouble80_0.values.len() {
    value[_jGLdouble80] = (*_a_GLdouble80_0.values[_jGLdouble80]).to_f64().unwrap();
        }
    }
    let value = value.as_mut_ptr();

    unsafe { gl::ProgramUniformMatrix2x3dv(program, location, count, transpose, value) };
}

pub fn retrace_glProgramUniformMatrix3x2dv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let mut transpose: GLboolean;
    transpose = (call.arg(3)).to_u32().unwrap() as u8;

    let value: &mut [GLdouble];
    value = _allocator.alloc_array::<GLdouble>(&call.arg(4));
    let _a_GLdouble81_0 = (call.arg(4)).to_array();
    if let Some(_a_GLdouble81_0) = _a_GLdouble81_0 {
        for _jGLdouble81 in 0.._a_GLdouble81_0.values.len() {
    value[_jGLdouble81] = (*_a_GLdouble81_0.values[_jGLdouble81]).to_f64().unwrap();
        }
    }
    let value = value.as_mut_ptr();

    unsafe { gl::ProgramUniformMatrix3x2dv(program, location, count, transpose, value) };
}

pub fn retrace_glProgramUniformMatrix2x4dv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let mut transpose: GLboolean;
    transpose = (call.arg(3)).to_u32().unwrap() as u8;

    let value: &mut [GLdouble];
    value = _allocator.alloc_array::<GLdouble>(&call.arg(4));
    let _a_GLdouble82_0 = (call.arg(4)).to_array();
    if let Some(_a_GLdouble82_0) = _a_GLdouble82_0 {
        for _jGLdouble82 in 0.._a_GLdouble82_0.values.len() {
    value[_jGLdouble82] = (*_a_GLdouble82_0.values[_jGLdouble82]).to_f64().unwrap();
        }
    }
    let value = value.as_mut_ptr();

    unsafe { gl::ProgramUniformMatrix2x4dv(program, location, count, transpose, value) };
}

pub fn retrace_glProgramUniformMatrix4x2dv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let mut transpose: GLboolean;
    transpose = (call.arg(3)).to_u32().unwrap() as u8;

    let value: &mut [GLdouble];
    value = _allocator.alloc_array::<GLdouble>(&call.arg(4));
    let _a_GLdouble83_0 = (call.arg(4)).to_array();
    if let Some(_a_GLdouble83_0) = _a_GLdouble83_0 {
        for _jGLdouble83 in 0.._a_GLdouble83_0.values.len() {
    value[_jGLdouble83] = (*_a_GLdouble83_0.values[_jGLdouble83]).to_f64().unwrap();
        }
    }
    let value = value.as_mut_ptr();

    unsafe { gl::ProgramUniformMatrix4x2dv(program, location, count, transpose, value) };
}

pub fn retrace_glProgramUniformMatrix3x4dv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let mut transpose: GLboolean;
    transpose = (call.arg(3)).to_u32().unwrap() as u8;

    let value: &mut [GLdouble];
    value = _allocator.alloc_array::<GLdouble>(&call.arg(4));
    let _a_GLdouble84_0 = (call.arg(4)).to_array();
    if let Some(_a_GLdouble84_0) = _a_GLdouble84_0 {
        for _jGLdouble84 in 0.._a_GLdouble84_0.values.len() {
    value[_jGLdouble84] = (*_a_GLdouble84_0.values[_jGLdouble84]).to_f64().unwrap();
        }
    }
    let value = value.as_mut_ptr();

    unsafe { gl::ProgramUniformMatrix3x4dv(program, location, count, transpose, value) };
}

pub fn retrace_glProgramUniformMatrix4x3dv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let mut transpose: GLboolean;
    transpose = (call.arg(3)).to_u32().unwrap() as u8;

    let value: &mut [GLdouble];
    value = _allocator.alloc_array::<GLdouble>(&call.arg(4));
    let _a_GLdouble85_0 = (call.arg(4)).to_array();
    if let Some(_a_GLdouble85_0) = _a_GLdouble85_0 {
        for _jGLdouble85 in 0.._a_GLdouble85_0.values.len() {
    value[_jGLdouble85] = (*_a_GLdouble85_0.values[_jGLdouble85]).to_f64().unwrap();
        }
    }
    let value = value.as_mut_ptr();

    unsafe { gl::ProgramUniformMatrix4x3dv(program, location, count, transpose, value) };
}

pub fn retrace_glValidateProgramPipeline(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut pipeline: GLuint;
    pipeline = (call.arg(0)).to_u32().unwrap();
    pipeline = self._pipeline_map[pipeline];

    unsafe { gl::ValidateProgramPipeline(pipeline) };
}

pub fn retrace_glBindImageTexture(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut unit: GLuint;
    unit = (call.arg(0)).to_u32().unwrap();

    let mut texture: GLuint;
    texture = (call.arg(1)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut level: GLint;
    level = (call.arg(2)).to_i32().unwrap();

    let mut layered: GLboolean;
    layered = (call.arg(3)).to_u32().unwrap() as u8;

    let mut layer: GLint;
    layer = (call.arg(4)).to_i32().unwrap();

    let mut access: GLenum;
    access = (call.arg(5)).to_u32().unwrap().try_into().unwrap();

    let mut format: GLenum;
    format = (call.arg(6)).to_u32().unwrap().try_into().unwrap();

    unsafe { gl::BindImageTexture(unit, texture, level, layered, layer, access, format) };
}

pub fn retrace_glMemoryBarrier(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut barriers: GLbitfield;
    barriers = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    unsafe { gl::MemoryBarrier(barriers) };
}

pub fn retrace_glDeleteObjectARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut obj: GLhandleARB;
    obj = (call.arg(0)).to_u32().unwrap();
    obj = self._handleARB_map[obj];

//not found in gl!    unsafe { gl::DeleteObjectARB(obj) };
}

pub fn retrace_glDetachObjectARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut containerObj: GLhandleARB;
    containerObj = (call.arg(0)).to_u32().unwrap();
    containerObj = self._handleARB_map[containerObj];

    let mut attachedObj: GLhandleARB;
    attachedObj = (call.arg(1)).to_u32().unwrap();
    attachedObj = self._handleARB_map[attachedObj];

//not found in gl!    unsafe { gl::DetachObjectARB(containerObj, attachedObj) };
}

pub fn retrace_glCreateShaderObjectARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut shaderType: GLenum;
    shaderType = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    let _result = unsafe { gl::CreateShaderObjectARB(shaderType) };

    let _origResult: GLhandleARB;
    _origResult = (*call.ret).to_u32().unwrap();
    self._handleARB_map[_origResult] = _result; 
}

pub fn retrace_glShaderSourceARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut shaderObj: GLhandleARB;
    shaderObj = (call.arg(0)).to_u32().unwrap();
    shaderObj = self._handleARB_map[shaderObj];

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let string: &mut [GLcharARB];
    string = _allocator.alloc_array::< GLcharARB >(&call.arg(2));
    let _a_constGLcharARB2_0 = (call.arg(2)).to_array();
    if let Some(_a_constGLcharARB2_0) = _a_constGLcharARB2_0 {
        for _jconstGLcharARB2 in 0.._a_constGLcharARB2_0.values.len() {
    string[_jconstGLcharARB2] = (*_a_constGLcharARB2_0.values[_jconstGLcharARB2]).to_string().unwrap();
        }
    }
    let string = string.as_mut_ptr();

    let length: &mut [GLint];
    length = _allocator.alloc_array::<GLint>(&call.arg(3));
    let _a_GLint195_0 = (call.arg(3)).to_array();
    if let Some(_a_GLint195_0) = _a_GLint195_0 {
        for _jGLint195 in 0.._a_GLint195_0.values.len() {
    length[_jGLint195] = (*_a_GLint195_0.values[_jGLint195]).to_i32().unwrap();
        }
    }
    let length = length.as_mut_ptr();

//not found in gl!    unsafe { gl::ShaderSourceARB(shaderObj, count, string, length) };
}

pub fn retrace_glCompileShaderARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut shaderObj: GLhandleARB;
    shaderObj = (call.arg(0)).to_u32().unwrap();
    shaderObj = self._handleARB_map[shaderObj];

//not found in gl!    unsafe { gl::CompileShaderARB(shaderObj) };
        let compile_status = 0;
//not found in gl!//not found in gl!        unsafe { gl::GetObjectParameterivARB(shaderObj, gl::OBJECT_COMPILE_STATUS_ARB, &compile_status) };
        if (!compile_status) {
             retrace::warning(call) << "compilation failed\n";
        }
        let info_log_length = 0;
//not found in gl!//not found in gl!        unsafe { gl::GetObjectParameterivARB(shaderObj, gl::OBJECT_INFO_LOG_LENGTH_ARB, &info_log_length) };
        if info_log_length > 1 {
             let infoLog = vec![0i8; info_log_length].as_mut_ptr();
//not found in gl!             unsafe { gl::GetInfoLogARB(shaderObj, info_log_length, std::ptr::null_mut(), infoLog) };
        }
}

pub fn retrace_glCreateProgramObjectARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
//not found in gl!    let _result = unsafe { gl::CreateProgramObjectARB() };

    let _origResult: GLhandleARB;
    _origResult = (*call.ret).to_u32().unwrap();
    self._handleARB_map[_origResult] = _result; 
}

pub fn retrace_glAttachObjectARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut containerObj: GLhandleARB;
    containerObj = (call.arg(0)).to_u32().unwrap();
    containerObj = self._handleARB_map[containerObj];

    let mut obj: GLhandleARB;
    obj = (call.arg(1)).to_u32().unwrap();
    obj = self._handleARB_map[obj];

//not found in gl!    unsafe { gl::AttachObjectARB(containerObj, obj) };
}

pub fn retrace_glLinkProgramARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut programObj: GLhandleARB;
    programObj = (call.arg(0)).to_u32().unwrap();
    programObj = self._handleARB_map[programObj];

//not found in gl!    unsafe { gl::LinkProgramARB(programObj) };
        let link_status = 0;
//not found in gl!//not found in gl!        unsafe { gl::GetObjectParameterivARB(programObj, gl::OBJECT_LINK_STATUS_ARB, &link_status) };
        if link_status == 0 {
             println!("link failed");
        }
        let info_log_length = 0;
//not found in gl!//not found in gl!        unsafe { gl::GetObjectParameterivARB(programObj, gl::OBJECT_INFO_LOG_LENGTH_ARB, &info_log_length) };
        if info_log_length > 1 {
             let infoLog = vec![0i8; info_log_length].as_mut_ptr();
//not found in gl!             unsafe { gl::GetInfoLogARB(programObj, info_log_length, std::ptr::null_mut(), infoLog) };
        }
}

pub fn retrace_glUseProgramObjectARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut programObj: GLhandleARB;
    programObj = (call.arg(0)).to_u32().unwrap();
    programObj = self._handleARB_map[programObj];

//not found in gl!    unsafe { gl::UseProgramObjectARB(programObj) };
        self.context.currentUserProgram = call.arg(0).to_u32().unwrap();
        self.context.currentProgram = glGetHandleARB(GL_PROGRAM_OBJECT_ARB);
}

pub fn retrace_glValidateProgramARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut programObj: GLhandleARB;
    programObj = (call.arg(0)).to_u32().unwrap();
    programObj = self._handleARB_map[programObj];

//not found in gl!    unsafe { gl::ValidateProgramARB(programObj) };
}

pub fn retrace_glUniform1fARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
//not found in gl!//not found in gl!    let programObj = unsafe { gl::GetHandleARB(gl::PROGRAM_OBJECT_ARB) };
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[programObj].lookupUniformLocation(location);

    let mut v0: GLfloat;
    v0 = (call.arg(1)).to_f32().unwrap();

//not found in gl!    unsafe { gl::Uniform1fARB(location, v0) };
}

pub fn retrace_glUniform2fARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
//not found in gl!//not found in gl!    let programObj = unsafe { gl::GetHandleARB(gl::PROGRAM_OBJECT_ARB) };
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[programObj].lookupUniformLocation(location);

    let mut v0: GLfloat;
    v0 = (call.arg(1)).to_f32().unwrap();

    let mut v1: GLfloat;
    v1 = (call.arg(2)).to_f32().unwrap();

//not found in gl!    unsafe { gl::Uniform2fARB(location, v0, v1) };
}

pub fn retrace_glUniform3fARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
//not found in gl!//not found in gl!    let programObj = unsafe { gl::GetHandleARB(gl::PROGRAM_OBJECT_ARB) };
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[programObj].lookupUniformLocation(location);

    let mut v0: GLfloat;
    v0 = (call.arg(1)).to_f32().unwrap();

    let mut v1: GLfloat;
    v1 = (call.arg(2)).to_f32().unwrap();

    let mut v2: GLfloat;
    v2 = (call.arg(3)).to_f32().unwrap();

//not found in gl!    unsafe { gl::Uniform3fARB(location, v0, v1, v2) };
}

pub fn retrace_glUniform4fARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
//not found in gl!//not found in gl!    let programObj = unsafe { gl::GetHandleARB(gl::PROGRAM_OBJECT_ARB) };
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[programObj].lookupUniformLocation(location);

    let mut v0: GLfloat;
    v0 = (call.arg(1)).to_f32().unwrap();

    let mut v1: GLfloat;
    v1 = (call.arg(2)).to_f32().unwrap();

    let mut v2: GLfloat;
    v2 = (call.arg(3)).to_f32().unwrap();

    let mut v3: GLfloat;
    v3 = (call.arg(4)).to_f32().unwrap();

//not found in gl!    unsafe { gl::Uniform4fARB(location, v0, v1, v2, v3) };
}

pub fn retrace_glUniform1iARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
//not found in gl!//not found in gl!    let programObj = unsafe { gl::GetHandleARB(gl::PROGRAM_OBJECT_ARB) };
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[programObj].lookupUniformLocation(location);

    let mut v0: GLint;
    v0 = (call.arg(1)).to_i32().unwrap();

//not found in gl!    unsafe { gl::Uniform1iARB(location, v0) };
}

pub fn retrace_glUniform2iARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
//not found in gl!//not found in gl!    let programObj = unsafe { gl::GetHandleARB(gl::PROGRAM_OBJECT_ARB) };
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[programObj].lookupUniformLocation(location);

    let mut v0: GLint;
    v0 = (call.arg(1)).to_i32().unwrap();

    let mut v1: GLint;
    v1 = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::Uniform2iARB(location, v0, v1) };
}

pub fn retrace_glUniform3iARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
//not found in gl!//not found in gl!    let programObj = unsafe { gl::GetHandleARB(gl::PROGRAM_OBJECT_ARB) };
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[programObj].lookupUniformLocation(location);

    let mut v0: GLint;
    v0 = (call.arg(1)).to_i32().unwrap();

    let mut v1: GLint;
    v1 = (call.arg(2)).to_i32().unwrap();

    let mut v2: GLint;
    v2 = (call.arg(3)).to_i32().unwrap();

//not found in gl!    unsafe { gl::Uniform3iARB(location, v0, v1, v2) };
}

pub fn retrace_glUniform4iARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
//not found in gl!//not found in gl!    let programObj = unsafe { gl::GetHandleARB(gl::PROGRAM_OBJECT_ARB) };
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[5].lookupUniformLocation(location);

    let mut v0: GLint;
    v0 = (call.arg(1)).to_i32().unwrap();

    let mut v1: GLint;
    v1 = (call.arg(2)).to_i32().unwrap();

    let mut v2: GLint;
    v2 = (call.arg(3)).to_i32().unwrap();

    let mut v3: GLint;
    v3 = (call.arg(4)).to_i32().unwrap();

//not found in gl!    unsafe { gl::Uniform4iARB(location, v0, v1, v2, v3) };
}

pub fn retrace_glUniform1fvARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
//not found in gl!//not found in gl!    let programObj = unsafe { gl::GetHandleARB(gl::PROGRAM_OBJECT_ARB) };
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[programObj].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let value: &mut [GLfloat];
    value = _allocator.alloc_array::<GLfloat>(&call.arg(2));
    let _a_GLfloat171_0 = (call.arg(2)).to_array();
    if let Some(_a_GLfloat171_0) = _a_GLfloat171_0 {
        for _jGLfloat171 in 0.._a_GLfloat171_0.values.len() {
    value[_jGLfloat171] = (*_a_GLfloat171_0.values[_jGLfloat171]).to_f32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::Uniform1fvARB(location, count, value) };
}

pub fn retrace_glUniform2fvARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
//not found in gl!//not found in gl!    let programObj = unsafe { gl::GetHandleARB(gl::PROGRAM_OBJECT_ARB) };
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[programObj].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let value: &mut [GLfloat];
    value = _allocator.alloc_array::<GLfloat>(&call.arg(2));
    let _a_GLfloat172_0 = (call.arg(2)).to_array();
    if let Some(_a_GLfloat172_0) = _a_GLfloat172_0 {
        for _jGLfloat172 in 0.._a_GLfloat172_0.values.len() {
    value[_jGLfloat172] = (*_a_GLfloat172_0.values[_jGLfloat172]).to_f32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::Uniform2fvARB(location, count, value) };
}

pub fn retrace_glUniform3fvARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
//not found in gl!//not found in gl!    let programObj = unsafe { gl::GetHandleARB(gl::PROGRAM_OBJECT_ARB) };
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[programObj].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let value: &mut [GLfloat];
    value = _allocator.alloc_array::<GLfloat>(&call.arg(2));
    let _a_GLfloat173_0 = (call.arg(2)).to_array();
    if let Some(_a_GLfloat173_0) = _a_GLfloat173_0 {
        for _jGLfloat173 in 0.._a_GLfloat173_0.values.len() {
    value[_jGLfloat173] = (*_a_GLfloat173_0.values[_jGLfloat173]).to_f32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::Uniform3fvARB(location, count, value) };
}

pub fn retrace_glUniform4fvARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
//not found in gl!//not found in gl!    let programObj = unsafe { gl::GetHandleARB(gl::PROGRAM_OBJECT_ARB) };
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[programObj].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let value: &mut [GLfloat];
    value = _allocator.alloc_array::<GLfloat>(&call.arg(2));
    let _a_GLfloat174_0 = (call.arg(2)).to_array();
    if let Some(_a_GLfloat174_0) = _a_GLfloat174_0 {
        for _jGLfloat174 in 0.._a_GLfloat174_0.values.len() {
    value[_jGLfloat174] = (*_a_GLfloat174_0.values[_jGLfloat174]).to_f32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::Uniform4fvARB(location, count, value) };
}

pub fn retrace_glUniform1ivARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
//not found in gl!//not found in gl!    let programObj = unsafe { gl::GetHandleARB(gl::PROGRAM_OBJECT_ARB) };
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[programObj].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let value: &mut [GLint];
    value = _allocator.alloc_array::<GLint>(&call.arg(2));
    let _a_GLint196_0 = (call.arg(2)).to_array();
    if let Some(_a_GLint196_0) = _a_GLint196_0 {
        for _jGLint196 in 0.._a_GLint196_0.values.len() {
    value[_jGLint196] = (*_a_GLint196_0.values[_jGLint196]).to_i32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::Uniform1ivARB(location, count, value) };
}

pub fn retrace_glUniform2ivARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
//not found in gl!//not found in gl!    let programObj = unsafe { gl::GetHandleARB(gl::PROGRAM_OBJECT_ARB) };
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[programObj].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let value: &mut [GLint];
    value = _allocator.alloc_array::<GLint>(&call.arg(2));
    let _a_GLint197_0 = (call.arg(2)).to_array();
    if let Some(_a_GLint197_0) = _a_GLint197_0 {
        for _jGLint197 in 0.._a_GLint197_0.values.len() {
    value[_jGLint197] = (*_a_GLint197_0.values[_jGLint197]).to_i32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::Uniform2ivARB(location, count, value) };
}

pub fn retrace_glUniform3ivARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
//not found in gl!//not found in gl!    let programObj = unsafe { gl::GetHandleARB(gl::PROGRAM_OBJECT_ARB) };
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[programObj].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let value: &mut [GLint];
    value = _allocator.alloc_array::<GLint>(&call.arg(2));
    let _a_GLint198_0 = (call.arg(2)).to_array();
    if let Some(_a_GLint198_0) = _a_GLint198_0 {
        for _jGLint198 in 0.._a_GLint198_0.values.len() {
    value[_jGLint198] = (*_a_GLint198_0.values[_jGLint198]).to_i32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::Uniform3ivARB(location, count, value) };
}

pub fn retrace_glUniform4ivARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
//not found in gl!//not found in gl!    let programObj = unsafe { gl::GetHandleARB(gl::PROGRAM_OBJECT_ARB) };
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[programObj].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let value: &mut [GLint];
    value = _allocator.alloc_array::<GLint>(&call.arg(2));
    let _a_GLint199_0 = (call.arg(2)).to_array();
    if let Some(_a_GLint199_0) = _a_GLint199_0 {
        for _jGLint199 in 0.._a_GLint199_0.values.len() {
    value[_jGLint199] = (*_a_GLint199_0.values[_jGLint199]).to_i32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::Uniform4ivARB(location, count, value) };
}

pub fn retrace_glUniformMatrix2fvARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
//not found in gl!//not found in gl!    let programObj = unsafe { gl::GetHandleARB(gl::PROGRAM_OBJECT_ARB) };
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[programObj].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let mut transpose: GLboolean;
    transpose = (call.arg(2)).to_u32().unwrap() as u8;

    let value: &mut [GLfloat];
    value = _allocator.alloc_array::<GLfloat>(&call.arg(3));
    let _a_GLfloat175_0 = (call.arg(3)).to_array();
    if let Some(_a_GLfloat175_0) = _a_GLfloat175_0 {
        for _jGLfloat175 in 0.._a_GLfloat175_0.values.len() {
    value[_jGLfloat175] = (*_a_GLfloat175_0.values[_jGLfloat175]).to_f32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::UniformMatrix2fvARB(location, count, transpose, value) };
}

pub fn retrace_glUniformMatrix3fvARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
//not found in gl!//not found in gl!    let programObj = unsafe { gl::GetHandleARB(gl::PROGRAM_OBJECT_ARB) };
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[programObj].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let mut transpose: GLboolean;
    transpose = (call.arg(2)).to_u32().unwrap() as u8;

    let value: &mut [GLfloat];
    value = _allocator.alloc_array::<GLfloat>(&call.arg(3));
    let _a_GLfloat176_0 = (call.arg(3)).to_array();
    if let Some(_a_GLfloat176_0) = _a_GLfloat176_0 {
        for _jGLfloat176 in 0.._a_GLfloat176_0.values.len() {
    value[_jGLfloat176] = (*_a_GLfloat176_0.values[_jGLfloat176]).to_f32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::UniformMatrix3fvARB(location, count, transpose, value) };
}

pub fn retrace_glUniformMatrix4fvARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
//not found in gl!//not found in gl!    let programObj = unsafe { gl::GetHandleARB(gl::PROGRAM_OBJECT_ARB) };
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[programObj].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let mut transpose: GLboolean;
    transpose = (call.arg(2)).to_u32().unwrap() as u8;

    let value: &mut [GLfloat];
    value = _allocator.alloc_array::<GLfloat>(&call.arg(3));
    let _a_GLfloat177_0 = (call.arg(3)).to_array();
    if let Some(_a_GLfloat177_0) = _a_GLfloat177_0 {
        for _jGLfloat177 in 0.._a_GLfloat177_0.values.len() {
    value[_jGLfloat177] = (*_a_GLfloat177_0.values[_jGLfloat177]).to_f32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::UniformMatrix4fvARB(location, count, transpose, value) };
}

pub fn retrace_glGetUniformLocationARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut programObj: GLhandleARB;
    programObj = (call.arg(0)).to_u32().unwrap();
    programObj = self._handleARB_map[programObj];

    let name: &mut [GLcharARB];
    name = (call.arg(1)).to_string().unwrap();

//not found in gl!    let _result = unsafe { gl::GetUniformLocationARB(programObj, name) };

    let _origResult: GLint;
    _origResult = (*call.ret).to_i32().unwrap();
    self._location_map[programObj][_origResult] = _result; 
}

pub fn retrace_glShaderStorageBlockBinding(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut storageBlockIndex: GLuint;
    storageBlockIndex = (call.arg(1)).to_u32().unwrap();

    let mut storageBlockBinding: GLuint;
    storageBlockBinding = (call.arg(2)).to_u32().unwrap();

    unsafe { gl::ShaderStorageBlockBinding(program, storageBlockIndex, storageBlockBinding) };
}

pub fn retrace_glGetSubroutineUniformLocation(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut shadertype: GLenum;
    shadertype = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let name: &mut [GLchar];
    name = (call.arg(2)).to_string().unwrap();

    let _result = unsafe { gl::GetSubroutineUniformLocation(program, shadertype, name) };

    let _origResult: GLint;
    _origResult = (*call.ret).to_i32().unwrap();
    self._location_map[program][_origResult] = _result; 
}

pub fn retrace_glGetSubroutineIndex(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut shadertype: GLenum;
    shadertype = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let name: &mut [GLchar];
    name = (call.arg(2)).to_string().unwrap();

    let _result = unsafe { gl::GetSubroutineIndex(program, shadertype, name) };

    let _origResult: GLuint;
    _origResult = (*call.ret).to_u32().unwrap();
    self._subroutine_map[program][_origResult] = _result; 
}

pub fn retrace_glUniformSubroutinesuiv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut shadertype: GLenum;
    shadertype = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let indices: &mut [GLuint];
    let program = _getActiveProgram();
    indices = _allocator.alloc_array::<GLuint>(&call.arg(2));
    let _a_GLuint187_0 = (call.arg(2)).to_array();
    if let Some(_a_GLuint187_0) = _a_GLuint187_0 {
        for _jGLuint187 in 0.._a_GLuint187_0.values.len() {
    indices[_jGLuint187] = (*_a_GLuint187_0.values[_jGLuint187]).to_u32().unwrap();
    indices[_jGLuint187] = self._subroutine_map[program][indices[_jGLuint187]];
        }
    }
    let indices = indices.as_mut_ptr();

    unsafe { gl::UniformSubroutinesuiv(shadertype, count, indices) };
}

pub fn retrace_glNamedStringARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut _type: GLenum;
    _type = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut namelen: GLint;
    namelen = (call.arg(1)).to_i32().unwrap();

    let name: &mut [GLchar];
    name = (call.arg(2)).to_string().unwrap();

    let mut stringlen: GLint;
    stringlen = (call.arg(3)).to_i32().unwrap();

    let string: &mut [GLchar];
    string = (call.arg(4)).to_string().unwrap();

//not found in gl!    unsafe { gl::NamedStringARB(_type, namelen, name, stringlen, string) };
}

pub fn retrace_glDeleteNamedStringARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut namelen: GLint;
    namelen = (call.arg(0)).to_i32().unwrap();

    let name: &mut [GLchar];
    name = (call.arg(1)).to_string().unwrap();

//not found in gl!    unsafe { gl::DeleteNamedStringARB(namelen, name) };
}

pub fn retrace_glCompileShaderIncludeARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut shader: GLuint;
    shader = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    shader = self._handleARB_map[shader];
} else {
    shader = self._shader_map[shader];
}

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let path: &mut [GLchar];
    path = _allocator.alloc_array::< GLchar >(&call.arg(2));
    let _a_constGLchar23_0 = (call.arg(2)).to_array();
    if let Some(_a_constGLchar23_0) = _a_constGLchar23_0 {
        for _jconstGLchar23 in 0.._a_constGLchar23_0.values.len() {
    path[_jconstGLchar23] = (*_a_constGLchar23_0.values[_jconstGLchar23]).to_string().unwrap();
        }
    }
    let path = path.as_mut_ptr();

    let length: &mut [GLint];
    length = _allocator.alloc_array::<GLint>(&call.arg(3));
    let _a_GLint200_0 = (call.arg(3)).to_array();
    if let Some(_a_GLint200_0) = _a_GLint200_0 {
        for _jGLint200 in 0.._a_GLint200_0.values.len() {
    length[_jGLint200] = (*_a_GLint200_0.values[_jGLint200]).to_i32().unwrap();
        }
    }
    let length = length.as_mut_ptr();

//not found in gl!    unsafe { gl::CompileShaderIncludeARB(shader, count, path, length) };
}

pub fn retrace_glBufferPageCommitmentARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut offset: GLintptr;
    offset = (call.arg(1)).to_i32().unwrap();

    let mut size: GLsizeiptr;
    size = (call.arg(2)).to_i32().unwrap();

    let mut commit: GLboolean;
    commit = (call.arg(3)).to_u32().unwrap() as u8;

//not found in gl!    unsafe { gl::BufferPageCommitmentARB(target, offset, size, commit) };
}

pub fn retrace_glNamedBufferPageCommitmentEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut buffer: GLuint;
    buffer = (call.arg(0)).to_u32().unwrap();
    buffer = self._buffer_map[buffer];

    let mut offset: GLintptr;
    offset = (call.arg(1)).to_i32().unwrap();

    let mut size: GLsizeiptr;
    size = (call.arg(2)).to_i32().unwrap();

    let mut commit: GLboolean;
    commit = (call.arg(3)).to_u32().unwrap() as u8;

//not found in gl!    unsafe { gl::NamedBufferPageCommitmentEXT(buffer, offset, size, commit) };
}

pub fn retrace_glNamedBufferPageCommitmentARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut buffer: GLuint;
    buffer = (call.arg(0)).to_u32().unwrap();
    buffer = self._buffer_map[buffer];

    let mut offset: GLintptr;
    offset = (call.arg(1)).to_i32().unwrap();

    let mut size: GLsizeiptr;
    size = (call.arg(2)).to_i32().unwrap();

    let mut commit: GLboolean;
    commit = (call.arg(3)).to_u32().unwrap() as u8;

//not found in gl!    unsafe { gl::NamedBufferPageCommitmentARB(buffer, offset, size, commit) };
}

pub fn retrace_glTexPageCommitmentARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(1)).to_i32().unwrap();

    let mut xoffset: GLint;
    xoffset = (call.arg(2)).to_i32().unwrap();

    let mut yoffset: GLint;
    yoffset = (call.arg(3)).to_i32().unwrap();

    let mut zoffset: GLint;
    zoffset = (call.arg(4)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(5)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(6)).to_i32().unwrap();

    let mut depth: GLsizei;
    depth = (call.arg(7)).to_i32().unwrap();

    let mut resident: GLboolean;
    resident = (call.arg(8)).to_u32().unwrap() as u8;

//not found in gl!    unsafe { gl::TexPageCommitmentARB(target, level, xoffset, yoffset, zoffset, width, height, depth, resident) };
}

pub fn retrace_glFenceSync(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut condition: GLenum;
    condition = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut flags: GLbitfield;
    flags = (call.arg(1)).to_u32().unwrap();

    let _result = unsafe { gl::FenceSync(condition, flags) };

    self.context.needs_flush = true;
    let _origResult: GLsync;
    let _origResult = (*call.ret).to_pointer().unwrap() as *mut c_void;
    self._sync_map[_origResult] = _result; 
}

pub fn retrace_glDeleteSync(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut sync: GLsync;
    let sync = (call.arg(0)).to_pointer().unwrap() as *mut c_void;
    sync = self._sync_map[sync];

//not found in gl!    unsafe { gl::DeleteSync(sync) };
}

pub fn retrace_glClientWaitSync(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut sync: GLsync;
    let sync = (call.arg(0)).to_pointer().unwrap() as *mut c_void;
    sync = self._sync_map[sync];

    let mut flags: GLbitfield;
    flags = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut timeout: GLuint64;
    timeout = (call.arg(2)).to_u32().unwrap();

    _result = region::client_wait_sync(call, sync, flags, timeout);

}

pub fn retrace_glWaitSync(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut sync: GLsync;
    let sync = (call.arg(0)).to_pointer().unwrap() as *mut c_void;
    sync = self._sync_map[sync];

    let mut flags: GLbitfield;
    flags = (call.arg(1)).to_u32().unwrap();

    let mut timeout: GLuint64;
    timeout = (call.arg(2)).to_u32().unwrap();

//not found in gl!    unsafe { gl::WaitSync(sync, flags, timeout) };
}

pub fn retrace_glGetSynciv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut sync: GLsync;
    let sync = (call.arg(0)).to_pointer().unwrap() as *mut c_void;
    sync = self._sync_map[sync];

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut bufSize: GLsizei;
    bufSize = (call.arg(2)).to_i32().unwrap();

    let length: &mut [GLsizei];
    length = _allocator.alloc_array::<GLsizei>(&call.arg(3));

    let values: &mut [GLint];
    values = _allocator.alloc_array::<GLint>(&call.arg(4));

    if pname == gl::SYNC_STATUS &&
        bufSize >= 1 &&
        values != NULL &&
        call.arg(4)[0].to_i32().unwrap() == gl::SIGNALED {
        // Fence was signalled, so ensure it happened here
        region::block_on_fence(call, sync, gl::SYNC_FLUSH_COMMANDS_BIT);
    }
    let _aPGLsizei22 = (call.arg(3)).to_array();
    if (_aPGLsizei22) {
    }
    let _aGLint202 = (call.arg(4)).to_array();
    if (_aGLint202) {
        for _jGLint202 in 0.._aGLint202.values.len() {
        }
    }
}

pub fn retrace_glPatchParameteri(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut pname: GLenum;
    pname = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut value: GLint;
    value = (call.arg(1)).to_i32().unwrap();

    unsafe { gl::PatchParameteri(pname, value) };
}

pub fn retrace_glPatchParameterfv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut pname: GLenum;
    pname = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let values: &mut [GLfloat];
    values = _allocator.alloc_array::<GLfloat>(&call.arg(1));
    let _a_GLfloat178_0 = (call.arg(1)).to_array();
    if let Some(_a_GLfloat178_0) = _a_GLfloat178_0 {
        for _jGLfloat178 in 0.._a_GLfloat178_0.values.len() {
    values[_jGLfloat178] = (*_a_GLfloat178_0.values[_jGLfloat178]).to_f32().unwrap();
        }
    }
    let values = values.as_mut_ptr();

    unsafe { gl::PatchParameterfv(pname, values) };
}

pub fn retrace_glTextureBarrier(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    unsafe { gl::TextureBarrier() };
}

pub fn retrace_glTexBufferARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut internalformat: GLenum;
    internalformat = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut buffer: GLuint;
    buffer = (call.arg(2)).to_u32().unwrap();
    buffer = self._buffer_map[buffer];

//not found in gl!    unsafe { gl::TexBufferARB(target, internalformat, buffer) };
}

pub fn retrace_glTexBufferRange(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut internalformat: GLenum;
    internalformat = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut buffer: GLuint;
    buffer = (call.arg(2)).to_u32().unwrap();
    buffer = self._buffer_map[buffer];

    let mut offset: GLintptr;
    offset = (call.arg(3)).to_i32().unwrap();

    let mut size: GLsizeiptr;
    size = (call.arg(4)).to_i32().unwrap();

    unsafe { gl::TexBufferRange(target, internalformat, buffer, offset, size) };
}

pub fn retrace_glCompressedTexImage3DARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(1)).to_i32().unwrap();

    let mut internalformat: GLenum;
    internalformat = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut width: GLsizei;
    width = (call.arg(3)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(4)).to_i32().unwrap();

    let mut depth: GLsizei;
    depth = (call.arg(5)).to_i32().unwrap();

    let mut border: GLint;
    border = (call.arg(6)).to_i32().unwrap();

    let mut imageSize: GLsizei;
    imageSize = (call.arg(7)).to_i32().unwrap();

    let data: &mut [GLc_void];
    let data = (call.arg(8)).to_pointer().unwrap() as *mut c_void;

//not found in gl!    unsafe { gl::CompressedTexImage3DARB(target, level, internalformat, width, height, depth, border, imageSize, data) };
}

pub fn retrace_glCompressedTexImage2DARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(1)).to_i32().unwrap();

    let mut internalformat: GLenum;
    internalformat = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut width: GLsizei;
    width = (call.arg(3)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(4)).to_i32().unwrap();

    let mut border: GLint;
    border = (call.arg(5)).to_i32().unwrap();

    let mut imageSize: GLsizei;
    imageSize = (call.arg(6)).to_i32().unwrap();

    let data: &mut [GLc_void];
    let data = (call.arg(7)).to_pointer().unwrap() as *mut c_void;

//not found in gl!    unsafe { gl::CompressedTexImage2DARB(target, level, internalformat, width, height, border, imageSize, data) };
}

pub fn retrace_glCompressedTexImage1DARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(1)).to_i32().unwrap();

    let mut internalformat: GLenum;
    internalformat = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut width: GLsizei;
    width = (call.arg(3)).to_i32().unwrap();

    let mut border: GLint;
    border = (call.arg(4)).to_i32().unwrap();

    let mut imageSize: GLsizei;
    imageSize = (call.arg(5)).to_i32().unwrap();

    let data: &mut [GLc_void];
    let data = (call.arg(6)).to_pointer().unwrap() as *mut c_void;

//not found in gl!    unsafe { gl::CompressedTexImage1DARB(target, level, internalformat, width, border, imageSize, data) };
}

pub fn retrace_glCompressedTexSubImage3DARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(1)).to_i32().unwrap();

    let mut xoffset: GLint;
    xoffset = (call.arg(2)).to_i32().unwrap();

    let mut yoffset: GLint;
    yoffset = (call.arg(3)).to_i32().unwrap();

    let mut zoffset: GLint;
    zoffset = (call.arg(4)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(5)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(6)).to_i32().unwrap();

    let mut depth: GLsizei;
    depth = (call.arg(7)).to_i32().unwrap();

    let mut format: GLenum;
    format = (call.arg(8)).to_u32().unwrap().try_into().unwrap();

    let mut imageSize: GLsizei;
    imageSize = (call.arg(9)).to_i32().unwrap();

    let data: &mut [GLc_void];
    let data = (call.arg(10)).to_pointer().unwrap() as *mut c_void;

//not found in gl!    unsafe { gl::CompressedTexSubImage3DARB(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) };
}

pub fn retrace_glCompressedTexSubImage2DARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(1)).to_i32().unwrap();

    let mut xoffset: GLint;
    xoffset = (call.arg(2)).to_i32().unwrap();

    let mut yoffset: GLint;
    yoffset = (call.arg(3)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(4)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(5)).to_i32().unwrap();

    let mut format: GLenum;
    format = (call.arg(6)).to_u32().unwrap().try_into().unwrap();

    let mut imageSize: GLsizei;
    imageSize = (call.arg(7)).to_i32().unwrap();

    let data: &mut [GLc_void];
    let data = (call.arg(8)).to_pointer().unwrap() as *mut c_void;

//not found in gl!    unsafe { gl::CompressedTexSubImage2DARB(target, level, xoffset, yoffset, width, height, format, imageSize, data) };
}

pub fn retrace_glCompressedTexSubImage1DARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(1)).to_i32().unwrap();

    let mut xoffset: GLint;
    xoffset = (call.arg(2)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(3)).to_i32().unwrap();

    let mut format: GLenum;
    format = (call.arg(4)).to_u32().unwrap().try_into().unwrap();

    let mut imageSize: GLsizei;
    imageSize = (call.arg(5)).to_i32().unwrap();

    let data: &mut [GLc_void];
    let data = (call.arg(6)).to_pointer().unwrap() as *mut c_void;

//not found in gl!    unsafe { gl::CompressedTexSubImage1DARB(target, level, xoffset, width, format, imageSize, data) };
}

pub fn retrace_glGetCompressedTexImageARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(1)).to_i32().unwrap();

    let img: &mut [GLc_void];
    let img = (call.arg(2)).to_pointer();

    let _pack_buffer = 0;
    if self.context.features("pixel_buffer_object") {
//not found in gl!        unsafe { gl::GetIntegerv(gl::PIXEL_PACK_BUFFER_BINDING, &_pack_buffer) };
    }
     let buffer = Vec::<u8>::new();
    if _pack_buffer != 0 {
    return;
    }
//not found in gl!    unsafe { gl::GetCompressedTexImageARB(target, level, img) };
}

pub fn retrace_glTexImage2DMultisample(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut samples: GLsizei;
    samples = (call.arg(1)).to_i32().unwrap();
    let max_samples = 0;
//not found in gl!    unsafe { gl::GetIntegerv(gl::MAX_SAMPLES, &max_samples) };
    if samples > max_samples {
        samples = max_samples;
    }

    let mut internalformat: GLenum;
    internalformat = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut width: GLsizei;
    width = (call.arg(3)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(4)).to_i32().unwrap();

    let mut fixedsamplelocations: GLboolean;
    fixedsamplelocations = (call.arg(5)).to_u32().unwrap() as u8;

    unsafe { gl::TexImage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations) };
}

pub fn retrace_glTexImage3DMultisample(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut samples: GLsizei;
    samples = (call.arg(1)).to_i32().unwrap();
    let max_samples = 0;
//not found in gl!    unsafe { gl::GetIntegerv(gl::MAX_SAMPLES, &max_samples) };
    if samples > max_samples {
        samples = max_samples;
    }

    let mut internalformat: GLenum;
    internalformat = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut width: GLsizei;
    width = (call.arg(3)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(4)).to_i32().unwrap();

    let mut depth: GLsizei;
    depth = (call.arg(5)).to_i32().unwrap();

    let mut fixedsamplelocations: GLboolean;
    fixedsamplelocations = (call.arg(6)).to_u32().unwrap() as u8;

    unsafe { gl::TexImage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations) };
}

pub fn retrace_glSampleMaski(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut mask: GLbitfield;
    mask = (call.arg(1)).to_u32().unwrap();

    unsafe { gl::SampleMaski(index, mask) };
}

pub fn retrace_glTexStorage1D(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut levels: GLsizei;
    levels = (call.arg(1)).to_i32().unwrap();

    let mut internalformat: GLenum;
    internalformat = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut width: GLsizei;
    width = (call.arg(3)).to_i32().unwrap();

    unsafe { gl::TexStorage1D(target, levels, internalformat, width) };
}

pub fn retrace_glTexStorage2D(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut levels: GLsizei;
    levels = (call.arg(1)).to_i32().unwrap();

    let mut internalformat: GLenum;
    internalformat = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut width: GLsizei;
    width = (call.arg(3)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(4)).to_i32().unwrap();

    unsafe { gl::TexStorage2D(target, levels, internalformat, width, height) };
}

pub fn retrace_glTexStorage3D(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut levels: GLsizei;
    levels = (call.arg(1)).to_i32().unwrap();

    let mut internalformat: GLenum;
    internalformat = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut width: GLsizei;
    width = (call.arg(3)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(4)).to_i32().unwrap();

    let mut depth: GLsizei;
    depth = (call.arg(5)).to_i32().unwrap();

    unsafe { gl::TexStorage3D(target, levels, internalformat, width, height, depth) };
}

pub fn retrace_glTexStorageAttribs2DEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut levels: GLsizei;
    levels = (call.arg(1)).to_i32().unwrap();

    let mut internalformat: GLenum;
    internalformat = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut width: GLsizei;
    width = (call.arg(3)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(4)).to_i32().unwrap();

    let attrib_list: &mut [GLint];
    attrib_list = _allocator.alloc_array::<GLint>(&call.arg(5));
    let _a_GLint203_0 = (call.arg(5)).to_array().unwrap();
    if (_a_GLint203_0) {
        for _jGLint203 in _jGLint203.._a_GLint203_0.values.len() {
    attrib_list[_jGLint203] = (_a_GLint203_0.values[_jGLint203]).to_u32().unwrap().try_into().unwrap();
        }
    }

//not found in gl!    unsafe { gl::TexStorageAttribs2DEXT(target, levels, internalformat, width, height, attrib_list) };
}

pub fn retrace_glTexStorageAttribs3DEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut levels: GLsizei;
    levels = (call.arg(1)).to_i32().unwrap();

    let mut internalformat: GLenum;
    internalformat = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut width: GLsizei;
    width = (call.arg(3)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(4)).to_i32().unwrap();

    let mut depth: GLsizei;
    depth = (call.arg(5)).to_i32().unwrap();

    let attrib_list: &mut [GLint];
    attrib_list = _allocator.alloc_array::<GLint>(&call.arg(6));
    let _a_GLint204_0 = (call.arg(6)).to_array().unwrap();
    if (_a_GLint204_0) {
        for _jGLint204 in _jGLint204.._a_GLint204_0.values.len() {
    attrib_list[_jGLint204] = (_a_GLint204_0.values[_jGLint204]).to_u32().unwrap().try_into().unwrap();
        }
    }

//not found in gl!    unsafe { gl::TexStorageAttribs3DEXT(target, levels, internalformat, width, height, depth, attrib_list) };
}

pub fn retrace_glTexStorage2DMultisample(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut samples: GLsizei;
    samples = (call.arg(1)).to_i32().unwrap();
    let max_samples = 0;
//not found in gl!    unsafe { gl::GetIntegerv(gl::MAX_SAMPLES, &max_samples) };
    if samples > max_samples {
        samples = max_samples;
    }

    let mut internalformat: GLenum;
    internalformat = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut width: GLsizei;
    width = (call.arg(3)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(4)).to_i32().unwrap();

    let mut fixedsamplelocations: GLboolean;
    fixedsamplelocations = (call.arg(5)).to_u32().unwrap() as u8;

    unsafe { gl::TexStorage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations) };
}

pub fn retrace_glTexStorage3DMultisample(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut samples: GLsizei;
    samples = (call.arg(1)).to_i32().unwrap();
    let max_samples = 0;
//not found in gl!    unsafe { gl::GetIntegerv(gl::MAX_SAMPLES, &max_samples) };
    if samples > max_samples {
        samples = max_samples;
    }

    let mut internalformat: GLenum;
    internalformat = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut width: GLsizei;
    width = (call.arg(3)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(4)).to_i32().unwrap();

    let mut depth: GLsizei;
    depth = (call.arg(5)).to_i32().unwrap();

    let mut fixedsamplelocations: GLboolean;
    fixedsamplelocations = (call.arg(6)).to_u32().unwrap() as u8;

    unsafe { gl::TexStorage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations) };
}

pub fn retrace_glEGLImageTargetTexStorageEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut image: GLeglImageOES;
    let image = (call.arg(1)).to_pointer().unwrap() as *mut c_void;
    image = self._eglImageOES_map[image];

    let attrib_list: &mut [GLint];
    attrib_list = _allocator.alloc_array::<GLint>(&call.arg(2));
    let _a_GLint205_0 = (call.arg(2)).to_array().unwrap();
    if (_a_GLint205_0) {
        for _jGLint205 in _jGLint205.._a_GLint205_0.values.len() {
    attrib_list[_jGLint205] = (_a_GLint205_0.values[_jGLint205]).to_u32().unwrap().try_into().unwrap();
        }
    }

//not found in gl!    unsafe { gl::EGLImageTargetTexStorageEXT(target, image, attrib_list) };
}

pub fn retrace_glEGLImageTargetTextureStorageEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut image: GLeglImageOES;
    let image = (call.arg(1)).to_pointer().unwrap() as *mut c_void;
    image = self._eglImageOES_map[image];

    let attrib_list: &mut [GLint];
    attrib_list = _allocator.alloc_array::<GLint>(&call.arg(2));
    let _a_GLint206_0 = (call.arg(2)).to_array().unwrap();
    if (_a_GLint206_0) {
        for _jGLint206 in _jGLint206.._a_GLint206_0.values.len() {
    attrib_list[_jGLint206] = (_a_GLint206_0.values[_jGLint206]).to_u32().unwrap().try_into().unwrap();
        }
    }

//not found in gl!    unsafe { gl::EGLImageTargetTextureStorageEXT(texture, image, attrib_list) };
}

pub fn retrace_glTextureView(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut origtexture: GLuint;
    origtexture = (call.arg(2)).to_u32().unwrap();
    origtexture = self._texture_map[origtexture];

    let mut internalformat: GLenum;
    internalformat = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let mut minlevel: GLuint;
    minlevel = (call.arg(4)).to_u32().unwrap();

    let mut numlevels: GLuint;
    numlevels = (call.arg(5)).to_u32().unwrap();

    let mut minlayer: GLuint;
    minlayer = (call.arg(6)).to_u32().unwrap();

    let mut numlayers: GLuint;
    numlayers = (call.arg(7)).to_u32().unwrap();

    unsafe { gl::TextureView(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers) };
}

pub fn retrace_glQueryCounter(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut id: GLuint;
    id = (call.arg(0)).to_u32().unwrap();
    id = self._query_map[id];

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    unsafe { gl::QueryCounter(id, target) };
}

pub fn retrace_glGetQueryObjecti64v(&mut self, call: &mut Call) {
    let _query_buffer = 0;
    if self.context.features("query_buffer_object") {
//not found in gl!        unsafe { gl::GetIntegerv(gl::QUERY_BUFFER_BINDING, &_query_buffer) };
    }
    if (_query_buffer == 0 && retrace::queryHandling == retrace::QUERY_SKIP) {
        return;
    }
'wait_for_query_result: loop {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut id: GLuint;
    id = (call.arg(0)).to_u32().unwrap();
    id = self._query_map[id];

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLint64];
    let retval: GLint64 = 0;
    if _query_buffer != 0 {
        params = (call.arg(2)).to_pointer();
    } else {
        params = retval };

//not found in gl!    unsafe { gl::GetQueryObjecti64v(id, pname, params) };
    let _aGLint6423 = (call.arg(2)).to_array();
    if (_aGLint6423) {
        for _jGLint6423 in 0.._aGLint6423.values.len() {
        }
    }
    if _query_buffer == 0 && queryHandling != QUERY_SKIP {
        let query_result = call.arg(2).to_array().unwrap();
        let expect = query_result.values[0].to_u32().unwrap();
        if call.arg(1).to_u32().unwrap() == gl::QUERY_RESULT_AVAILABLE {
            if expect == 1 && retval == 0 {
                continue 'wait_for_query_result;
        }} else if queryHandling == QUERY_RUN_AND_CHECK_RESULT {
            let diff = (expect as i64 - retval as i64).abs(); 
            if diff > 0 as i64 {
                println!("Warning: query returned {}  but trace contained {} (tol = {})", retval, expect, retrace::queryTolerance);
            }
        }
    break 'wait_for_query_result;
    }
}
}

pub fn retrace_glGetQueryObjectui64v(&mut self, call: &mut Call) {
    let _query_buffer = 0;
    if self.context.features("query_buffer_object") {
//not found in gl!        unsafe { gl::GetIntegerv(gl::QUERY_BUFFER_BINDING, &_query_buffer) };
    }
    if (_query_buffer == 0 && retrace::queryHandling == retrace::QUERY_SKIP) {
        return;
    }
'wait_for_query_result: loop {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut id: GLuint;
    id = (call.arg(0)).to_u32().unwrap();
    id = self._query_map[id];

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLuint64];
    let retval: GLuint64 = 0;
    if _query_buffer != 0 {
        params = (call.arg(2)).to_pointer();
    } else {
        params = retval };

//not found in gl!    unsafe { gl::GetQueryObjectui64v(id, pname, params) };
    let _aGLuint6420 = (call.arg(2)).to_array();
    if (_aGLuint6420) {
        for _jGLuint6420 in 0.._aGLuint6420.values.len() {
        }
    }
    if _query_buffer == 0 && queryHandling != QUERY_SKIP {
        let query_result = call.arg(2).to_array().unwrap();
        let expect = query_result.values[0].to_u32().unwrap();
        if call.arg(1).to_u32().unwrap() == gl::QUERY_RESULT_AVAILABLE {
            if expect == 1 && retval == 0 {
                continue 'wait_for_query_result;
        }} else if queryHandling == QUERY_RUN_AND_CHECK_RESULT {
            let diff = (expect as i64 - retval as i64).abs(); 
            if diff > 0 as i64 {
                println!("Warning: query returned {}  but trace contained {} (tol = {})", retval, expect, retrace::queryTolerance);
            }
        }
    break 'wait_for_query_result;
    }
}
}

pub fn retrace_glBindTransformFeedback(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut id: GLuint;
    id = (call.arg(1)).to_u32().unwrap();
    id = self._feedback_map[id];

    unsafe { gl::BindTransformFeedback(target, id) };
}

pub fn retrace_glDeleteTransformFeedbacks(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut n: GLsizei;
    n = (call.arg(0)).to_i32().unwrap();

    let ids: &mut [GLuint];
    ids = _allocator.alloc_array::<GLuint>(&call.arg(1));
    let _a_GLuint188_0 = (call.arg(1)).to_array();
    if let Some(_a_GLuint188_0) = _a_GLuint188_0 {
        for _jGLuint188 in 0.._a_GLuint188_0.values.len() {
    ids[_jGLuint188] = (*_a_GLuint188_0.values[_jGLuint188]).to_u32().unwrap();
    ids[_jGLuint188] = self._feedback_map[ids[_jGLuint188]];
        }
    }
    let ids = ids.as_mut_ptr();

    unsafe { gl::DeleteTransformFeedbacks(n, ids) };
}

pub fn retrace_glGenTransformFeedbacks(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut n: GLsizei;
    n = (call.arg(0)).to_i32().unwrap();

    let ids: &mut [GLuint];
    ids = _allocator.alloc_array::<GLuint>(&call.arg(1));

//not found in gl!    unsafe { gl::GenTransformFeedbacks(n, ids) };
    let _aGLuint190 = (call.arg(1)).to_array();
    if (_aGLuint190) {
        for _jGLuint190 in 0.._aGLuint190.values.len() {
    let _origResult: GLuint;
    _origResult = (_aGLuint190.values[_jGLuint190]).to_u32().unwrap();
    self._feedback_map[_origResult] = ids[_jGLuint190]; 
        }
    }
}

pub fn retrace_glPauseTransformFeedback(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    unsafe { gl::PauseTransformFeedback() };
}

pub fn retrace_glResumeTransformFeedback(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    unsafe { gl::ResumeTransformFeedback() };
}

pub fn retrace_glDrawTransformFeedback(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut id: GLuint;
    id = (call.arg(1)).to_u32().unwrap();
    id = self._feedback_map[id];

    unsafe { gl::DrawTransformFeedback(mode, id) };
}

pub fn retrace_glDrawTransformFeedbackStream(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut id: GLuint;
    id = (call.arg(1)).to_u32().unwrap();
    id = self._feedback_map[id];

    let mut stream: GLuint;
    stream = (call.arg(2)).to_u32().unwrap();

    unsafe { gl::DrawTransformFeedbackStream(mode, id, stream) };
}

pub fn retrace_glBeginQueryIndexed(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut index: GLuint;
    index = (call.arg(1)).to_u32().unwrap();

    let mut id: GLuint;
    id = (call.arg(2)).to_u32().unwrap();
    id = self._feedback_map[id];

    unsafe { gl::BeginQueryIndexed(target, index, id) };
}

pub fn retrace_glEndQueryIndexed(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut index: GLuint;
    index = (call.arg(1)).to_u32().unwrap();

    unsafe { gl::EndQueryIndexed(target, index) };
}

pub fn retrace_glDrawTransformFeedbackInstanced(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut id: GLuint;
    id = (call.arg(1)).to_u32().unwrap();
    id = self._feedback_map[id];

    let mut instancecount: GLsizei;
    instancecount = (call.arg(2)).to_i32().unwrap();

    unsafe { gl::DrawTransformFeedbackInstanced(mode, id, instancecount) };
}

pub fn retrace_glDrawTransformFeedbackStreamInstanced(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut id: GLuint;
    id = (call.arg(1)).to_u32().unwrap();
    id = self._feedback_map[id];

    let mut stream: GLuint;
    stream = (call.arg(2)).to_u32().unwrap();

    let mut instancecount: GLsizei;
    instancecount = (call.arg(3)).to_i32().unwrap();

    unsafe { gl::DrawTransformFeedbackStreamInstanced(mode, id, stream, instancecount) };
}

pub fn retrace_glLoadTransposeMatrixfARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let m: &mut [GLfloat];
    m = _allocator.alloc_array::<GLfloat>(&call.arg(0));
    let _a_GLfloat179_0 = (call.arg(0)).to_array();
    if let Some(_a_GLfloat179_0) = _a_GLfloat179_0 {
        for _jGLfloat179 in 0.._a_GLfloat179_0.values.len() {
    m[_jGLfloat179] = (*_a_GLfloat179_0.values[_jGLfloat179]).to_f32().unwrap();
        }
    }
    let m = m.as_mut_ptr();

//not found in gl!    unsafe { gl::LoadTransposeMatrixfARB(m) };
}

pub fn retrace_glLoadTransposeMatrixdARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let m: &mut [GLdouble];
    m = _allocator.alloc_array::<GLdouble>(&call.arg(0));
    let _a_GLdouble86_0 = (call.arg(0)).to_array();
    if let Some(_a_GLdouble86_0) = _a_GLdouble86_0 {
        for _jGLdouble86 in 0.._a_GLdouble86_0.values.len() {
    m[_jGLdouble86] = (*_a_GLdouble86_0.values[_jGLdouble86]).to_f64().unwrap();
        }
    }
    let m = m.as_mut_ptr();

//not found in gl!    unsafe { gl::LoadTransposeMatrixdARB(m) };
}

pub fn retrace_glMultTransposeMatrixfARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let m: &mut [GLfloat];
    m = _allocator.alloc_array::<GLfloat>(&call.arg(0));
    let _a_GLfloat180_0 = (call.arg(0)).to_array();
    if let Some(_a_GLfloat180_0) = _a_GLfloat180_0 {
        for _jGLfloat180 in 0.._a_GLfloat180_0.values.len() {
    m[_jGLfloat180] = (*_a_GLfloat180_0.values[_jGLfloat180]).to_f32().unwrap();
        }
    }
    let m = m.as_mut_ptr();

//not found in gl!    unsafe { gl::MultTransposeMatrixfARB(m) };
}

pub fn retrace_glMultTransposeMatrixdARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let m: &mut [GLdouble];
    m = _allocator.alloc_array::<GLdouble>(&call.arg(0));
    let _a_GLdouble87_0 = (call.arg(0)).to_array();
    if let Some(_a_GLdouble87_0) = _a_GLdouble87_0 {
        for _jGLdouble87 in 0.._a_GLdouble87_0.values.len() {
    m[_jGLdouble87] = (*_a_GLdouble87_0.values[_jGLdouble87]).to_f64().unwrap();
        }
    }
    let m = m.as_mut_ptr();

//not found in gl!    unsafe { gl::MultTransposeMatrixdARB(m) };
}

pub fn retrace_glGetUniformBlockIndex(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let uniformBlockName: &mut [GLchar];
    uniformBlockName = (call.arg(1)).to_string().unwrap();

    let _result = unsafe { gl::GetUniformBlockIndex(program, uniformBlockName) };

    let _origResult: GLuint;
    _origResult = (*call.ret).to_u32().unwrap();
    self._uniformBlock_map[program][_origResult] = _result; 
}

pub fn retrace_glGetActiveUniformBlockName(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut uniformBlockIndex: GLuint;
    uniformBlockIndex = (call.arg(1)).to_u32().unwrap();
    uniformBlockIndex = self._uniformBlock_map[program][uniformBlockIndex];

    let mut bufSize: GLsizei;
    bufSize = (call.arg(2)).to_i32().unwrap();

    let length: &mut [GLsizei];
    length = _allocator.alloc_array::<GLsizei>(&call.arg(3));

    let uniformBlockName: &mut [GLchar];

    let name_buf = vec![GLchar ;bufSize];
    uniformBlockName = name_buf.data();
    let traced_name = (call.arg(4)).to_string().unwrap();
    glretrace::mapUniformBlockName(program, (call.arg(1)).to_i32().unwrap(), traced_name, _uniformBlock_map);
    unsafe { gl::GetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length, uniformBlockName) };
    let _aPGLsizei24 = (call.arg(3)).to_array();
    if (_aPGLsizei24) {
    }
}

pub fn retrace_glUniformBlockBinding(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut uniformBlockIndex: GLuint;
    uniformBlockIndex = (call.arg(1)).to_u32().unwrap();
    uniformBlockIndex = self._uniformBlock_map[program][uniformBlockIndex];

    let mut uniformBlockBinding: GLuint;
    uniformBlockBinding = (call.arg(2)).to_u32().unwrap();

    unsafe { gl::UniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding) };
}

pub fn retrace_glBindVertexArray(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut array: GLuint;
    array = (call.arg(0)).to_u32().unwrap();
    array = self._array_map[DUMMY_CONTEXT][array];

    unsafe { gl::BindVertexArray(array) };
}

pub fn retrace_glDeleteVertexArrays(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut n: GLsizei;
    n = (call.arg(0)).to_i32().unwrap();

    let arrays: &mut [GLuint];
    arrays = _allocator.alloc_array::<GLuint>(&call.arg(1));
    let _a_GLuint191_0 = (call.arg(1)).to_array();
    if let Some(_a_GLuint191_0) = _a_GLuint191_0 {
        for _jGLuint191 in 0.._a_GLuint191_0.values.len() {
    arrays[_jGLuint191] = (*_a_GLuint191_0.values[_jGLuint191]).to_u32().unwrap();
    arrays[_jGLuint191] = self._array_map[DUMMY_CONTEXT][arrays[_jGLuint191]];
        }
    }
    let arrays = arrays.as_mut_ptr();

    unsafe { gl::DeleteVertexArrays(n, arrays) };
}

pub fn retrace_glGenVertexArrays(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut n: GLsizei;
    n = (call.arg(0)).to_i32().unwrap();

    let arrays: &mut [GLuint];
    arrays = _allocator.alloc_array::<GLuint>(&call.arg(1));

//not found in gl!    unsafe { gl::GenVertexArrays(n, arrays) };
    let _aGLuint193 = (call.arg(1)).to_array();
    if (_aGLuint193) {
        for _jGLuint193 in 0.._aGLuint193.values.len() {
    let _origResult: GLuint;
    _origResult = (_aGLuint193.values[_jGLuint193]).to_u32().unwrap();
    self._array_map[DUMMY_CONTEXT][_origResult] = arrays[_jGLuint193]; 
        }
    }
}

pub fn retrace_glVertexAttribL1d(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut x: GLdouble;
    x = (call.arg(1)).to_f64().unwrap();

    unsafe { gl::VertexAttribL1d(index, x) };
}

pub fn retrace_glVertexAttribL2d(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut x: GLdouble;
    x = (call.arg(1)).to_f64().unwrap();

    let mut y: GLdouble;
    y = (call.arg(2)).to_f64().unwrap();

    unsafe { gl::VertexAttribL2d(index, x, y) };
}

pub fn retrace_glVertexAttribL3d(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut x: GLdouble;
    x = (call.arg(1)).to_f64().unwrap();

    let mut y: GLdouble;
    y = (call.arg(2)).to_f64().unwrap();

    let mut z: GLdouble;
    z = (call.arg(3)).to_f64().unwrap();

    unsafe { gl::VertexAttribL3d(index, x, y, z) };
}

pub fn retrace_glVertexAttribL4d(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut x: GLdouble;
    x = (call.arg(1)).to_f64().unwrap();

    let mut y: GLdouble;
    y = (call.arg(2)).to_f64().unwrap();

    let mut z: GLdouble;
    z = (call.arg(3)).to_f64().unwrap();

    let mut w: GLdouble;
    w = (call.arg(4)).to_f64().unwrap();

    unsafe { gl::VertexAttribL4d(index, x, y, z, w) };
}

pub fn retrace_glVertexAttribL1dv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLdouble];
    v = _allocator.alloc_array::<GLdouble>(&call.arg(1));
    let _a_PGLdouble8_0 = (call.arg(1)).to_array().unwrap();
    v[0] = (_a_PGLdouble8_0.values[0]).to_f64().unwrap();

//not found in gl!    unsafe { gl::VertexAttribL1dv(index, v) };
}

pub fn retrace_glVertexAttribL2dv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLdouble];
    v = _allocator.alloc_array::<GLdouble>(&call.arg(1));
    let _a_GLdouble88_0 = (call.arg(1)).to_array();
    if let Some(_a_GLdouble88_0) = _a_GLdouble88_0 {
        for _jGLdouble88 in 0.._a_GLdouble88_0.values.len() {
    v[_jGLdouble88] = (*_a_GLdouble88_0.values[_jGLdouble88]).to_f64().unwrap();
        }
    }
    let v = v.as_mut_ptr();

    unsafe { gl::VertexAttribL2dv(index, v) };
}

pub fn retrace_glVertexAttribL3dv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLdouble];
    v = _allocator.alloc_array::<GLdouble>(&call.arg(1));
    let _a_GLdouble89_0 = (call.arg(1)).to_array();
    if let Some(_a_GLdouble89_0) = _a_GLdouble89_0 {
        for _jGLdouble89 in 0.._a_GLdouble89_0.values.len() {
    v[_jGLdouble89] = (*_a_GLdouble89_0.values[_jGLdouble89]).to_f64().unwrap();
        }
    }
    let v = v.as_mut_ptr();

    unsafe { gl::VertexAttribL3dv(index, v) };
}

pub fn retrace_glVertexAttribL4dv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLdouble];
    v = _allocator.alloc_array::<GLdouble>(&call.arg(1));
    let _a_GLdouble90_0 = (call.arg(1)).to_array();
    if let Some(_a_GLdouble90_0) = _a_GLdouble90_0 {
        for _jGLdouble90 in 0.._a_GLdouble90_0.values.len() {
    v[_jGLdouble90] = (*_a_GLdouble90_0.values[_jGLdouble90]).to_f64().unwrap();
        }
    }
    let v = v.as_mut_ptr();

    unsafe { gl::VertexAttribL4dv(index, v) };
}

pub fn retrace_glVertexAttribLPointer(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut size: GLint;
    size = (call.arg(1)).to_i32().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut stride: GLsizei;
    stride = (call.arg(3)).to_i32().unwrap();

    let pointer: &mut [GLc_void];
    pointer = region::to_pointer(call.arg(4), true);

    unsafe { gl::VertexAttribLPointer(index, size, _type, stride, pointer) };
}

pub fn retrace_glBindVertexBuffer(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut bindingindex: GLuint;
    bindingindex = (call.arg(0)).to_u32().unwrap();

    let mut buffer: GLuint;
    buffer = (call.arg(1)).to_u32().unwrap();
    buffer = self._buffer_map[buffer];

    let mut offset: GLintptr;
    offset = (call.arg(2)).to_i32().unwrap();

    let mut stride: GLsizei;
    stride = (call.arg(3)).to_i32().unwrap();

    unsafe { gl::BindVertexBuffer(bindingindex, buffer, offset, stride) };
}

pub fn retrace_glVertexAttribFormat(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut attribindex: GLuint;
    attribindex = (call.arg(0)).to_u32().unwrap();

    let mut size: GLint;
    size = (call.arg(1)).to_i32().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut normalized: GLboolean;
    normalized = (call.arg(3)).to_u32().unwrap() as u8;

    let mut relativeoffset: GLuint;
    relativeoffset = (call.arg(4)).to_u32().unwrap();

    unsafe { gl::VertexAttribFormat(attribindex, size, _type, normalized, relativeoffset) };
}

pub fn retrace_glVertexAttribIFormat(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut attribindex: GLuint;
    attribindex = (call.arg(0)).to_u32().unwrap();

    let mut size: GLint;
    size = (call.arg(1)).to_i32().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut relativeoffset: GLuint;
    relativeoffset = (call.arg(3)).to_u32().unwrap();

    unsafe { gl::VertexAttribIFormat(attribindex, size, _type, relativeoffset) };
}

pub fn retrace_glVertexAttribLFormat(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut attribindex: GLuint;
    attribindex = (call.arg(0)).to_u32().unwrap();

    let mut size: GLint;
    size = (call.arg(1)).to_i32().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut relativeoffset: GLuint;
    relativeoffset = (call.arg(3)).to_u32().unwrap();

    unsafe { gl::VertexAttribLFormat(attribindex, size, _type, relativeoffset) };
}

pub fn retrace_glVertexAttribBinding(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut attribindex: GLuint;
    attribindex = (call.arg(0)).to_u32().unwrap();

    let mut bindingindex: GLuint;
    bindingindex = (call.arg(1)).to_u32().unwrap();

    unsafe { gl::VertexAttribBinding(attribindex, bindingindex) };
}

pub fn retrace_glVertexBindingDivisor(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut bindingindex: GLuint;
    bindingindex = (call.arg(0)).to_u32().unwrap();

    let mut divisor: GLuint;
    divisor = (call.arg(1)).to_u32().unwrap();

    unsafe { gl::VertexBindingDivisor(bindingindex, divisor) };
}

pub fn retrace_glWeightbvARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut size: GLint;
    size = (call.arg(0)).to_i32().unwrap();

    let weights: &mut [GLbyte];
    weights = _allocator.alloc_array::<GLbyte>(&call.arg(1));
    let _a_GLbyte8_0 = (call.arg(1)).to_array();
    if let Some(_a_GLbyte8_0) = _a_GLbyte8_0 {
        for _jGLbyte8 in 0.._a_GLbyte8_0.values.len() {
    weights[_jGLbyte8] = (*_a_GLbyte8_0.values[_jGLbyte8]).to_i32().unwrap();
        }
    }
    let weights = weights.as_mut_ptr();

//not found in gl!    unsafe { gl::WeightbvARB(size, weights) };
}

pub fn retrace_glWeightsvARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut size: GLint;
    size = (call.arg(0)).to_i32().unwrap();

    let weights: &mut [GLshort];
    weights = _allocator.alloc_array::<GLshort>(&call.arg(1));
    let _a_GLshort29_0 = (call.arg(1)).to_array();
    if let Some(_a_GLshort29_0) = _a_GLshort29_0 {
        for _jGLshort29 in 0.._a_GLshort29_0.values.len() {
    weights[_jGLshort29] = (*_a_GLshort29_0.values[_jGLshort29]).to_i32().unwrap();
        }
    }
    let weights = weights.as_mut_ptr();

//not found in gl!    unsafe { gl::WeightsvARB(size, weights) };
}

pub fn retrace_glWeightivARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut size: GLint;
    size = (call.arg(0)).to_i32().unwrap();

    let weights: &mut [GLint];
    weights = _allocator.alloc_array::<GLint>(&call.arg(1));
    let _a_GLint207_0 = (call.arg(1)).to_array();
    if let Some(_a_GLint207_0) = _a_GLint207_0 {
        for _jGLint207 in 0.._a_GLint207_0.values.len() {
    weights[_jGLint207] = (*_a_GLint207_0.values[_jGLint207]).to_i32().unwrap();
        }
    }
    let weights = weights.as_mut_ptr();

//not found in gl!    unsafe { gl::WeightivARB(size, weights) };
}

pub fn retrace_glWeightfvARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut size: GLint;
    size = (call.arg(0)).to_i32().unwrap();

    let weights: &mut [GLfloat];
    weights = _allocator.alloc_array::<GLfloat>(&call.arg(1));
    let _a_GLfloat181_0 = (call.arg(1)).to_array();
    if let Some(_a_GLfloat181_0) = _a_GLfloat181_0 {
        for _jGLfloat181 in 0.._a_GLfloat181_0.values.len() {
    weights[_jGLfloat181] = (*_a_GLfloat181_0.values[_jGLfloat181]).to_f32().unwrap();
        }
    }
    let weights = weights.as_mut_ptr();

//not found in gl!    unsafe { gl::WeightfvARB(size, weights) };
}

pub fn retrace_glWeightdvARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut size: GLint;
    size = (call.arg(0)).to_i32().unwrap();

    let weights: &mut [GLdouble];
    weights = _allocator.alloc_array::<GLdouble>(&call.arg(1));
    let _a_GLdouble91_0 = (call.arg(1)).to_array();
    if let Some(_a_GLdouble91_0) = _a_GLdouble91_0 {
        for _jGLdouble91 in 0.._a_GLdouble91_0.values.len() {
    weights[_jGLdouble91] = (*_a_GLdouble91_0.values[_jGLdouble91]).to_f64().unwrap();
        }
    }
    let weights = weights.as_mut_ptr();

//not found in gl!    unsafe { gl::WeightdvARB(size, weights) };
}

pub fn retrace_glWeightubvARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut size: GLint;
    size = (call.arg(0)).to_i32().unwrap();

    let weights: &mut [GLubyte];
    weights = _allocator.alloc_array::<GLubyte>(&call.arg(1));
    let _a_GLubyte16_0 = (call.arg(1)).to_array();
    if let Some(_a_GLubyte16_0) = _a_GLubyte16_0 {
        for _jGLubyte16 in 0.._a_GLubyte16_0.values.len() {
    weights[_jGLubyte16] = (*_a_GLubyte16_0.values[_jGLubyte16]).to_u32().unwrap();
        }
    }
    let weights = weights.as_mut_ptr();

//not found in gl!    unsafe { gl::WeightubvARB(size, weights) };
}

pub fn retrace_glWeightusvARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut size: GLint;
    size = (call.arg(0)).to_i32().unwrap();

    let weights: &mut [GLushort];
    weights = _allocator.alloc_array::<GLushort>(&call.arg(1));
    let _a_GLushort15_0 = (call.arg(1)).to_array();
    if let Some(_a_GLushort15_0) = _a_GLushort15_0 {
        for _jGLushort15 in 0.._a_GLushort15_0.values.len() {
    weights[_jGLushort15] = (*_a_GLushort15_0.values[_jGLushort15]).to_u32().unwrap();
        }
    }
    let weights = weights.as_mut_ptr();

//not found in gl!    unsafe { gl::WeightusvARB(size, weights) };
}

pub fn retrace_glWeightuivARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut size: GLint;
    size = (call.arg(0)).to_i32().unwrap();

    let weights: &mut [GLuint];
    weights = _allocator.alloc_array::<GLuint>(&call.arg(1));
    let _a_GLuint194_0 = (call.arg(1)).to_array();
    if let Some(_a_GLuint194_0) = _a_GLuint194_0 {
        for _jGLuint194 in 0.._a_GLuint194_0.values.len() {
    weights[_jGLuint194] = (*_a_GLuint194_0.values[_jGLuint194]).to_u32().unwrap();
        }
    }
    let weights = weights.as_mut_ptr();

//not found in gl!    unsafe { gl::WeightuivARB(size, weights) };
}

pub fn retrace_glWeightPointerARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut size: GLint;
    size = (call.arg(0)).to_i32().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut stride: GLsizei;
    stride = (call.arg(2)).to_i32().unwrap();

    let pointer: &mut [GLc_void];
//FIXME    memset(&pointer, 0, sizeof pointer); 

    if (1) {
    }
//not found in gl!    unsafe { gl::WeightPointerARB(size, _type, stride, pointer) };
}

pub fn retrace_glVertexBlendARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut count: GLint;
    count = (call.arg(0)).to_i32().unwrap();

//not found in gl!    unsafe { gl::VertexBlendARB(count) };
}

pub fn retrace_glBindBufferARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut buffer: GLuint;
    buffer = (call.arg(1)).to_u32().unwrap();
    buffer = self._buffer_map[buffer];

//not found in gl!    unsafe { gl::BindBufferARB(target, buffer) };
}

pub fn retrace_glDeleteBuffersARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut n: GLsizei;
    n = (call.arg(0)).to_i32().unwrap();

    let buffers: &mut [GLuint];
    buffers = _allocator.alloc_array::<GLuint>(&call.arg(1));
    let _a_GLuint195_0 = (call.arg(1)).to_array();
    if let Some(_a_GLuint195_0) = _a_GLuint195_0 {
        for _jGLuint195 in 0.._a_GLuint195_0.values.len() {
    buffers[_jGLuint195] = (*_a_GLuint195_0.values[_jGLuint195]).to_u32().unwrap();
    buffers[_jGLuint195] = self._buffer_map[buffers[_jGLuint195]];
        }
    }
    let buffers = buffers.as_mut_ptr();

    if self.context.features("ARB_direct_state_access") {
        for i in 0..n {
            let buffer = buffers[i];
            if buffer != 0 && gl::IsBuffer(buffer) {
                let ptr = ptr::null_mut() as *mut c_void;
//not found in gl!                unsafe { gl::GetNamedBufferPointerv(buffers[i], gl::BUFFER_MAP_POINTER, &ptr) };
                if ptr != ptr::null_mut() as *mut c_void {
                    retrace::delRegionByPointer(ptr);
                }
            }
        }
    }
//not found in gl!    unsafe { gl::DeleteBuffersARB(n, buffers) };
}

pub fn retrace_glGenBuffersARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut n: GLsizei;
    n = (call.arg(0)).to_i32().unwrap();

    let buffers: &mut [GLuint];
    buffers = _allocator.alloc_array::<GLuint>(&call.arg(1));

//not found in gl!    unsafe { gl::GenBuffersARB(n, buffers) };
    let _aGLuint197 = (call.arg(1)).to_array();
    if (_aGLuint197) {
        for _jGLuint197 in 0.._aGLuint197.values.len() {
    let _origResult: GLuint;
    _origResult = (_aGLuint197.values[_jGLuint197]).to_u32().unwrap();
    self._buffer_map[_origResult] = buffers[_jGLuint197]; 
        }
    }
}

pub fn retrace_glBufferDataARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut size: GLsizeiptrARB;
    size = (call.arg(1)).to_i32().unwrap();

    let data: &mut [GLc_void];
    let data = (call.arg(2)).to_pointer().unwrap() as *mut c_void;

    let mut usage: GLenum;
    usage = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::BufferDataARB(target, size, data, usage) };
}

pub fn retrace_glBufferSubDataARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut offset: GLintptrARB;
    offset = (call.arg(1)).to_i32().unwrap();

    let mut size: GLsizeiptrARB;
    size = (call.arg(2)).to_i32().unwrap();

    let data: &mut [GLc_void];
    let data = (call.arg(3)).to_pointer().unwrap() as *mut c_void;

//not found in gl!    unsafe { gl::BufferSubDataARB(target, offset, size, data) };
}

pub fn retrace_glMapBufferARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut access: GLenum;
    access = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    let _result = unsafe { gl::MapBufferARB(target, access) };

    let length = 0;
//not found in gl!//not found in gl!    unsafe { gl::GetBufferParameterivARB(target, gl::BUFFER_SIZE_ARB, &length) };
    region::add_region(call, (*call.ret).toUIntPtr(), _result, length);
}

pub fn retrace_glUnmapBufferARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

        let ptr = ptr::null_mut() as *mut c_void;
//not found in gl!//not found in gl!            unsafe { gl::GetBufferPointervARB(target, gl::BUFFER_MAP_POINTER_ARB, &ptr) };
        if (ptr) {
            retrace::delRegionByPointer(ptr);
        } else {
            retrace::warning(call) << "failed to get mapped pointer\n";
        }
//not found in gl!    let _result = unsafe { gl::UnmapBufferARB(target) };

}

pub fn retrace_glVertexAttrib1dARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut x: GLdouble;
    x = (call.arg(1)).to_f64().unwrap();

//not found in gl!    unsafe { gl::VertexAttrib1dARB(index, x) };
}

pub fn retrace_glVertexAttrib1dvARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLdouble];
    v = _allocator.alloc_array::<GLdouble>(&call.arg(1));
    let _a_PGLdouble9_0 = (call.arg(1)).to_array().unwrap();
    v[0] = (_a_PGLdouble9_0.values[0]).to_f64().unwrap();

//not found in gl!    unsafe { gl::VertexAttrib1dvARB(index, v) };
}

pub fn retrace_glVertexAttrib1fARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut x: GLfloat;
    x = (call.arg(1)).to_f32().unwrap();

//not found in gl!    unsafe { gl::VertexAttrib1fARB(index, x) };
}

pub fn retrace_glVertexAttrib1fvARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLfloat];
    v = _allocator.alloc_array::<GLfloat>(&call.arg(1));
    let _a_PGLfloat18_0 = (call.arg(1)).to_array().unwrap();
    v[0] = (_a_PGLfloat18_0.values[0]).to_f32().unwrap();

//not found in gl!    unsafe { gl::VertexAttrib1fvARB(index, v) };
}

pub fn retrace_glVertexAttrib1sARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut x: GLshort;
    x = (call.arg(1)).to_i32().unwrap();

//not found in gl!    unsafe { gl::VertexAttrib1sARB(index, x) };
}

pub fn retrace_glVertexAttrib1svARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLshort];
    v = _allocator.alloc_array::<GLshort>(&call.arg(1));
    let _a_PGLshort5_0 = (call.arg(1)).to_array().unwrap();
    v[0] = (_a_PGLshort5_0.values[0]).to_i32().unwrap();

//not found in gl!    unsafe { gl::VertexAttrib1svARB(index, v) };
}

pub fn retrace_glVertexAttrib2dARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut x: GLdouble;
    x = (call.arg(1)).to_f64().unwrap();

    let mut y: GLdouble;
    y = (call.arg(2)).to_f64().unwrap();

//not found in gl!    unsafe { gl::VertexAttrib2dARB(index, x, y) };
}

pub fn retrace_glVertexAttrib2dvARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLdouble];
    v = _allocator.alloc_array::<GLdouble>(&call.arg(1));
    let _a_GLdouble92_0 = (call.arg(1)).to_array();
    if let Some(_a_GLdouble92_0) = _a_GLdouble92_0 {
        for _jGLdouble92 in 0.._a_GLdouble92_0.values.len() {
    v[_jGLdouble92] = (*_a_GLdouble92_0.values[_jGLdouble92]).to_f64().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::VertexAttrib2dvARB(index, v) };
}

pub fn retrace_glVertexAttrib2fARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut x: GLfloat;
    x = (call.arg(1)).to_f32().unwrap();

    let mut y: GLfloat;
    y = (call.arg(2)).to_f32().unwrap();

//not found in gl!    unsafe { gl::VertexAttrib2fARB(index, x, y) };
}

pub fn retrace_glVertexAttrib2fvARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLfloat];
    v = _allocator.alloc_array::<GLfloat>(&call.arg(1));
    let _a_GLfloat182_0 = (call.arg(1)).to_array();
    if let Some(_a_GLfloat182_0) = _a_GLfloat182_0 {
        for _jGLfloat182 in 0.._a_GLfloat182_0.values.len() {
    v[_jGLfloat182] = (*_a_GLfloat182_0.values[_jGLfloat182]).to_f32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::VertexAttrib2fvARB(index, v) };
}

pub fn retrace_glVertexAttrib2sARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut x: GLshort;
    x = (call.arg(1)).to_i32().unwrap();

    let mut y: GLshort;
    y = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::VertexAttrib2sARB(index, x, y) };
}

pub fn retrace_glVertexAttrib2svARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLshort];
    v = _allocator.alloc_array::<GLshort>(&call.arg(1));
    let _a_GLshort30_0 = (call.arg(1)).to_array();
    if let Some(_a_GLshort30_0) = _a_GLshort30_0 {
        for _jGLshort30 in 0.._a_GLshort30_0.values.len() {
    v[_jGLshort30] = (*_a_GLshort30_0.values[_jGLshort30]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::VertexAttrib2svARB(index, v) };
}

pub fn retrace_glVertexAttrib3dARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut x: GLdouble;
    x = (call.arg(1)).to_f64().unwrap();

    let mut y: GLdouble;
    y = (call.arg(2)).to_f64().unwrap();

    let mut z: GLdouble;
    z = (call.arg(3)).to_f64().unwrap();

//not found in gl!    unsafe { gl::VertexAttrib3dARB(index, x, y, z) };
}

pub fn retrace_glVertexAttrib3dvARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLdouble];
    v = _allocator.alloc_array::<GLdouble>(&call.arg(1));
    let _a_GLdouble93_0 = (call.arg(1)).to_array();
    if let Some(_a_GLdouble93_0) = _a_GLdouble93_0 {
        for _jGLdouble93 in 0.._a_GLdouble93_0.values.len() {
    v[_jGLdouble93] = (*_a_GLdouble93_0.values[_jGLdouble93]).to_f64().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::VertexAttrib3dvARB(index, v) };
}

pub fn retrace_glVertexAttrib3fARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut x: GLfloat;
    x = (call.arg(1)).to_f32().unwrap();

    let mut y: GLfloat;
    y = (call.arg(2)).to_f32().unwrap();

    let mut z: GLfloat;
    z = (call.arg(3)).to_f32().unwrap();

//not found in gl!    unsafe { gl::VertexAttrib3fARB(index, x, y, z) };
}

pub fn retrace_glVertexAttrib3fvARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLfloat];
    v = _allocator.alloc_array::<GLfloat>(&call.arg(1));
    let _a_GLfloat183_0 = (call.arg(1)).to_array();
    if let Some(_a_GLfloat183_0) = _a_GLfloat183_0 {
        for _jGLfloat183 in 0.._a_GLfloat183_0.values.len() {
    v[_jGLfloat183] = (*_a_GLfloat183_0.values[_jGLfloat183]).to_f32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::VertexAttrib3fvARB(index, v) };
}

pub fn retrace_glVertexAttrib3sARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut x: GLshort;
    x = (call.arg(1)).to_i32().unwrap();

    let mut y: GLshort;
    y = (call.arg(2)).to_i32().unwrap();

    let mut z: GLshort;
    z = (call.arg(3)).to_i32().unwrap();

//not found in gl!    unsafe { gl::VertexAttrib3sARB(index, x, y, z) };
}

pub fn retrace_glVertexAttrib3svARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLshort];
    v = _allocator.alloc_array::<GLshort>(&call.arg(1));
    let _a_GLshort31_0 = (call.arg(1)).to_array();
    if let Some(_a_GLshort31_0) = _a_GLshort31_0 {
        for _jGLshort31 in 0.._a_GLshort31_0.values.len() {
    v[_jGLshort31] = (*_a_GLshort31_0.values[_jGLshort31]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::VertexAttrib3svARB(index, v) };
}

pub fn retrace_glVertexAttrib4NbvARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLbyte];
    v = _allocator.alloc_array::<GLbyte>(&call.arg(1));
    let _a_GLbyte9_0 = (call.arg(1)).to_array();
    if let Some(_a_GLbyte9_0) = _a_GLbyte9_0 {
        for _jGLbyte9 in 0.._a_GLbyte9_0.values.len() {
    v[_jGLbyte9] = (*_a_GLbyte9_0.values[_jGLbyte9]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::VertexAttrib4NbvARB(index, v) };
}

pub fn retrace_glVertexAttrib4NivARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLint];
    v = _allocator.alloc_array::<GLint>(&call.arg(1));
    let _a_GLint208_0 = (call.arg(1)).to_array();
    if let Some(_a_GLint208_0) = _a_GLint208_0 {
        for _jGLint208 in 0.._a_GLint208_0.values.len() {
    v[_jGLint208] = (*_a_GLint208_0.values[_jGLint208]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::VertexAttrib4NivARB(index, v) };
}

pub fn retrace_glVertexAttrib4NsvARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLshort];
    v = _allocator.alloc_array::<GLshort>(&call.arg(1));
    let _a_GLshort32_0 = (call.arg(1)).to_array();
    if let Some(_a_GLshort32_0) = _a_GLshort32_0 {
        for _jGLshort32 in 0.._a_GLshort32_0.values.len() {
    v[_jGLshort32] = (*_a_GLshort32_0.values[_jGLshort32]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::VertexAttrib4NsvARB(index, v) };
}

pub fn retrace_glVertexAttrib4NubARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut x: GLubyte;
    x = (call.arg(1)).to_u32().unwrap();

    let mut y: GLubyte;
    y = (call.arg(2)).to_u32().unwrap();

    let mut z: GLubyte;
    z = (call.arg(3)).to_u32().unwrap();

    let mut w: GLubyte;
    w = (call.arg(4)).to_u32().unwrap();

//not found in gl!    unsafe { gl::VertexAttrib4NubARB(index, x, y, z, w) };
}

pub fn retrace_glVertexAttrib4NubvARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLubyte];
    v = _allocator.alloc_array::<GLubyte>(&call.arg(1));
    let _a_GLubyte17_0 = (call.arg(1)).to_array();
    if let Some(_a_GLubyte17_0) = _a_GLubyte17_0 {
        for _jGLubyte17 in 0.._a_GLubyte17_0.values.len() {
    v[_jGLubyte17] = (*_a_GLubyte17_0.values[_jGLubyte17]).to_u32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::VertexAttrib4NubvARB(index, v) };
}

pub fn retrace_glVertexAttrib4NuivARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLuint];
    v = _allocator.alloc_array::<GLuint>(&call.arg(1));
    let _a_GLuint198_0 = (call.arg(1)).to_array();
    if let Some(_a_GLuint198_0) = _a_GLuint198_0 {
        for _jGLuint198 in 0.._a_GLuint198_0.values.len() {
    v[_jGLuint198] = (*_a_GLuint198_0.values[_jGLuint198]).to_u32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::VertexAttrib4NuivARB(index, v) };
}

pub fn retrace_glVertexAttrib4NusvARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLushort];
    v = _allocator.alloc_array::<GLushort>(&call.arg(1));
    let _a_GLushort16_0 = (call.arg(1)).to_array();
    if let Some(_a_GLushort16_0) = _a_GLushort16_0 {
        for _jGLushort16 in 0.._a_GLushort16_0.values.len() {
    v[_jGLushort16] = (*_a_GLushort16_0.values[_jGLushort16]).to_u32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::VertexAttrib4NusvARB(index, v) };
}

pub fn retrace_glVertexAttrib4bvARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLbyte];
    v = _allocator.alloc_array::<GLbyte>(&call.arg(1));
    let _a_GLbyte10_0 = (call.arg(1)).to_array();
    if let Some(_a_GLbyte10_0) = _a_GLbyte10_0 {
        for _jGLbyte10 in 0.._a_GLbyte10_0.values.len() {
    v[_jGLbyte10] = (*_a_GLbyte10_0.values[_jGLbyte10]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::VertexAttrib4bvARB(index, v) };
}

pub fn retrace_glVertexAttrib4dARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut x: GLdouble;
    x = (call.arg(1)).to_f64().unwrap();

    let mut y: GLdouble;
    y = (call.arg(2)).to_f64().unwrap();

    let mut z: GLdouble;
    z = (call.arg(3)).to_f64().unwrap();

    let mut w: GLdouble;
    w = (call.arg(4)).to_f64().unwrap();

//not found in gl!    unsafe { gl::VertexAttrib4dARB(index, x, y, z, w) };
}

pub fn retrace_glVertexAttrib4dvARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLdouble];
    v = _allocator.alloc_array::<GLdouble>(&call.arg(1));
    let _a_GLdouble94_0 = (call.arg(1)).to_array();
    if let Some(_a_GLdouble94_0) = _a_GLdouble94_0 {
        for _jGLdouble94 in 0.._a_GLdouble94_0.values.len() {
    v[_jGLdouble94] = (*_a_GLdouble94_0.values[_jGLdouble94]).to_f64().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::VertexAttrib4dvARB(index, v) };
}

pub fn retrace_glVertexAttrib4fARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut x: GLfloat;
    x = (call.arg(1)).to_f32().unwrap();

    let mut y: GLfloat;
    y = (call.arg(2)).to_f32().unwrap();

    let mut z: GLfloat;
    z = (call.arg(3)).to_f32().unwrap();

    let mut w: GLfloat;
    w = (call.arg(4)).to_f32().unwrap();

//not found in gl!    unsafe { gl::VertexAttrib4fARB(index, x, y, z, w) };
}

pub fn retrace_glVertexAttrib4fvARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLfloat];
    v = _allocator.alloc_array::<GLfloat>(&call.arg(1));
    let _a_GLfloat184_0 = (call.arg(1)).to_array();
    if let Some(_a_GLfloat184_0) = _a_GLfloat184_0 {
        for _jGLfloat184 in 0.._a_GLfloat184_0.values.len() {
    v[_jGLfloat184] = (*_a_GLfloat184_0.values[_jGLfloat184]).to_f32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::VertexAttrib4fvARB(index, v) };
}

pub fn retrace_glVertexAttrib4ivARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLint];
    v = _allocator.alloc_array::<GLint>(&call.arg(1));
    let _a_GLint209_0 = (call.arg(1)).to_array();
    if let Some(_a_GLint209_0) = _a_GLint209_0 {
        for _jGLint209 in 0.._a_GLint209_0.values.len() {
    v[_jGLint209] = (*_a_GLint209_0.values[_jGLint209]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::VertexAttrib4ivARB(index, v) };
}

pub fn retrace_glVertexAttrib4sARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut x: GLshort;
    x = (call.arg(1)).to_i32().unwrap();

    let mut y: GLshort;
    y = (call.arg(2)).to_i32().unwrap();

    let mut z: GLshort;
    z = (call.arg(3)).to_i32().unwrap();

    let mut w: GLshort;
    w = (call.arg(4)).to_i32().unwrap();

//not found in gl!    unsafe { gl::VertexAttrib4sARB(index, x, y, z, w) };
}

pub fn retrace_glVertexAttrib4svARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLshort];
    v = _allocator.alloc_array::<GLshort>(&call.arg(1));
    let _a_GLshort33_0 = (call.arg(1)).to_array();
    if let Some(_a_GLshort33_0) = _a_GLshort33_0 {
        for _jGLshort33 in 0.._a_GLshort33_0.values.len() {
    v[_jGLshort33] = (*_a_GLshort33_0.values[_jGLshort33]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::VertexAttrib4svARB(index, v) };
}

pub fn retrace_glVertexAttrib4ubvARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLubyte];
    v = _allocator.alloc_array::<GLubyte>(&call.arg(1));
    let _a_GLubyte18_0 = (call.arg(1)).to_array();
    if let Some(_a_GLubyte18_0) = _a_GLubyte18_0 {
        for _jGLubyte18 in 0.._a_GLubyte18_0.values.len() {
    v[_jGLubyte18] = (*_a_GLubyte18_0.values[_jGLubyte18]).to_u32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::VertexAttrib4ubvARB(index, v) };
}

pub fn retrace_glVertexAttrib4uivARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLuint];
    v = _allocator.alloc_array::<GLuint>(&call.arg(1));
    let _a_GLuint199_0 = (call.arg(1)).to_array();
    if let Some(_a_GLuint199_0) = _a_GLuint199_0 {
        for _jGLuint199 in 0.._a_GLuint199_0.values.len() {
    v[_jGLuint199] = (*_a_GLuint199_0.values[_jGLuint199]).to_u32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::VertexAttrib4uivARB(index, v) };
}

pub fn retrace_glVertexAttrib4usvARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLushort];
    v = _allocator.alloc_array::<GLushort>(&call.arg(1));
    let _a_GLushort17_0 = (call.arg(1)).to_array();
    if let Some(_a_GLushort17_0) = _a_GLushort17_0 {
        for _jGLushort17 in 0.._a_GLushort17_0.values.len() {
    v[_jGLushort17] = (*_a_GLushort17_0.values[_jGLushort17]).to_u32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::VertexAttrib4usvARB(index, v) };
}

pub fn retrace_glVertexAttribPointerARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut size: GLint;
    size = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut normalized: GLboolean;
    normalized = (call.arg(3)).to_u32().unwrap() as u8;

    let mut stride: GLsizei;
    stride = (call.arg(4)).to_i32().unwrap();

    let pointer: &mut [GLc_void];
    pointer = region::to_pointer(call.arg(5), true);

//not found in gl!    unsafe { gl::VertexAttribPointerARB(index, size, _type, normalized, stride, pointer) };
}

pub fn retrace_glEnableVertexAttribArrayARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

//not found in gl!    unsafe { gl::EnableVertexAttribArrayARB(index) };
}

pub fn retrace_glDisableVertexAttribArrayARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

//not found in gl!    unsafe { gl::DisableVertexAttribArrayARB(index) };
}

pub fn retrace_glProgramStringARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut format: GLenum;
    format = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut len: GLsizei;
    len = (call.arg(2)).to_i32().unwrap();

    let string: &mut [c_void];
    string = (call.arg(3)).to_string().unwrap();

//not found in gl!    unsafe { gl::ProgramStringARB(target, format, len, string) };
        let error_position: GLint = -1;
//not found in gl!        unsafe { gl::GetIntegerv(gl::PIXEL_PACK_BUFFER_BINDING, &error_position) };
        if error_position != -1 {
//not found in gl!            let error_string = unsafe { gl::GetString(gl::PROGRAM_ERROR_STRING_ARB) };
            println!("error in position {}: {}", error_position, error_string);
        }
}

pub fn retrace_glBindProgramARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut program: GLuint;
    program = (call.arg(1)).to_u32().unwrap();
    program = self._programARB_map[program];

//not found in gl!    unsafe { gl::BindProgramARB(target, program) };
}

pub fn retrace_glDeleteProgramsARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut n: GLsizei;
    n = (call.arg(0)).to_i32().unwrap();

    let programs: &mut [GLuint];
    programs = _allocator.alloc_array::<GLuint>(&call.arg(1));
    let _a_GLuint200_0 = (call.arg(1)).to_array();
    if let Some(_a_GLuint200_0) = _a_GLuint200_0 {
        for _jGLuint200 in 0.._a_GLuint200_0.values.len() {
    programs[_jGLuint200] = (*_a_GLuint200_0.values[_jGLuint200]).to_u32().unwrap();
    programs[_jGLuint200] = self._programARB_map[programs[_jGLuint200]];
        }
    }
    let programs = programs.as_mut_ptr();

//not found in gl!    unsafe { gl::DeleteProgramsARB(n, programs) };
}

pub fn retrace_glGenProgramsARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut n: GLsizei;
    n = (call.arg(0)).to_i32().unwrap();

    let programs: &mut [GLuint];
    programs = _allocator.alloc_array::<GLuint>(&call.arg(1));

//not found in gl!    unsafe { gl::GenProgramsARB(n, programs) };
    let _aGLuint202 = (call.arg(1)).to_array();
    if (_aGLuint202) {
        for _jGLuint202 in 0.._aGLuint202.values.len() {
    let _origResult: GLuint;
    _origResult = (_aGLuint202.values[_jGLuint202]).to_u32().unwrap();
    self._programARB_map[_origResult] = programs[_jGLuint202]; 
        }
    }
}

pub fn retrace_glProgramEnvParameter4dARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut index: GLuint;
    index = (call.arg(1)).to_u32().unwrap();

    let mut x: GLdouble;
    x = (call.arg(2)).to_f64().unwrap();

    let mut y: GLdouble;
    y = (call.arg(3)).to_f64().unwrap();

    let mut z: GLdouble;
    z = (call.arg(4)).to_f64().unwrap();

    let mut w: GLdouble;
    w = (call.arg(5)).to_f64().unwrap();

//not found in gl!    unsafe { gl::ProgramEnvParameter4dARB(target, index, x, y, z, w) };
}

pub fn retrace_glProgramEnvParameter4dvARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut index: GLuint;
    index = (call.arg(1)).to_u32().unwrap();

    let params: &mut [GLdouble];
    params = _allocator.alloc_array::<GLdouble>(&call.arg(2));
    let _a_GLdouble95_0 = (call.arg(2)).to_array();
    if let Some(_a_GLdouble95_0) = _a_GLdouble95_0 {
        for _jGLdouble95 in 0.._a_GLdouble95_0.values.len() {
    params[_jGLdouble95] = (*_a_GLdouble95_0.values[_jGLdouble95]).to_f64().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::ProgramEnvParameter4dvARB(target, index, params) };
}

pub fn retrace_glProgramEnvParameter4fARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut index: GLuint;
    index = (call.arg(1)).to_u32().unwrap();

    let mut x: GLfloat;
    x = (call.arg(2)).to_f32().unwrap();

    let mut y: GLfloat;
    y = (call.arg(3)).to_f32().unwrap();

    let mut z: GLfloat;
    z = (call.arg(4)).to_f32().unwrap();

    let mut w: GLfloat;
    w = (call.arg(5)).to_f32().unwrap();

//not found in gl!    unsafe { gl::ProgramEnvParameter4fARB(target, index, x, y, z, w) };
}

pub fn retrace_glProgramEnvParameter4fvARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut index: GLuint;
    index = (call.arg(1)).to_u32().unwrap();

    let params: &mut [GLfloat];
    params = _allocator.alloc_array::<GLfloat>(&call.arg(2));
    let _a_GLfloat185_0 = (call.arg(2)).to_array();
    if let Some(_a_GLfloat185_0) = _a_GLfloat185_0 {
        for _jGLfloat185 in 0.._a_GLfloat185_0.values.len() {
    params[_jGLfloat185] = (*_a_GLfloat185_0.values[_jGLfloat185]).to_f32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::ProgramEnvParameter4fvARB(target, index, params) };
}

pub fn retrace_glProgramLocalParameter4dARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut index: GLuint;
    index = (call.arg(1)).to_u32().unwrap();

    let mut x: GLdouble;
    x = (call.arg(2)).to_f64().unwrap();

    let mut y: GLdouble;
    y = (call.arg(3)).to_f64().unwrap();

    let mut z: GLdouble;
    z = (call.arg(4)).to_f64().unwrap();

    let mut w: GLdouble;
    w = (call.arg(5)).to_f64().unwrap();

//not found in gl!    unsafe { gl::ProgramLocalParameter4dARB(target, index, x, y, z, w) };
}

pub fn retrace_glProgramLocalParameter4dvARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut index: GLuint;
    index = (call.arg(1)).to_u32().unwrap();

    let params: &mut [GLdouble];
    params = _allocator.alloc_array::<GLdouble>(&call.arg(2));
    let _a_GLdouble96_0 = (call.arg(2)).to_array();
    if let Some(_a_GLdouble96_0) = _a_GLdouble96_0 {
        for _jGLdouble96 in 0.._a_GLdouble96_0.values.len() {
    params[_jGLdouble96] = (*_a_GLdouble96_0.values[_jGLdouble96]).to_f64().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::ProgramLocalParameter4dvARB(target, index, params) };
}

pub fn retrace_glProgramLocalParameter4fARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut index: GLuint;
    index = (call.arg(1)).to_u32().unwrap();

    let mut x: GLfloat;
    x = (call.arg(2)).to_f32().unwrap();

    let mut y: GLfloat;
    y = (call.arg(3)).to_f32().unwrap();

    let mut z: GLfloat;
    z = (call.arg(4)).to_f32().unwrap();

    let mut w: GLfloat;
    w = (call.arg(5)).to_f32().unwrap();

//not found in gl!    unsafe { gl::ProgramLocalParameter4fARB(target, index, x, y, z, w) };
}

pub fn retrace_glProgramLocalParameter4fvARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut index: GLuint;
    index = (call.arg(1)).to_u32().unwrap();

    let params: &mut [GLfloat];
    params = _allocator.alloc_array::<GLfloat>(&call.arg(2));
    let _a_GLfloat186_0 = (call.arg(2)).to_array();
    if let Some(_a_GLfloat186_0) = _a_GLfloat186_0 {
        for _jGLfloat186 in 0.._a_GLfloat186_0.values.len() {
    params[_jGLfloat186] = (*_a_GLfloat186_0.values[_jGLfloat186]).to_f32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::ProgramLocalParameter4fvARB(target, index, params) };
}

pub fn retrace_glBindAttribLocationARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut programObj: GLhandleARB;
    programObj = (call.arg(0)).to_u32().unwrap();
    programObj = self._handleARB_map[programObj];

    let mut index: GLuint;
    index = (call.arg(1)).to_u32().unwrap();

    let name: &mut [GLcharARB];
    name = (call.arg(2)).to_string().unwrap();

//not found in gl!    unsafe { gl::BindAttribLocationARB(programObj, index, name) };
}

pub fn retrace_glGetAttribLocationARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut programObj: GLhandleARB;
    programObj = (call.arg(0)).to_u32().unwrap();
    programObj = self._handleARB_map[programObj];

    let name: &mut [GLcharARB];
    name = (call.arg(1)).to_string().unwrap();

//not found in gl!    let _result = unsafe { gl::GetAttribLocationARB(programObj, name) };

    let _origResult = call.ret.to_i32().unwrap();
}

pub fn retrace_glVertexAttribP1ui(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut normalized: GLboolean;
    normalized = (call.arg(2)).to_u32().unwrap() as u8;

    let mut value: GLuint;
    value = (call.arg(3)).to_u32().unwrap();

    unsafe { gl::VertexAttribP1ui(index, _type, normalized, value) };
}

pub fn retrace_glVertexAttribP1uiv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut normalized: GLboolean;
    normalized = (call.arg(2)).to_u32().unwrap() as u8;

    let value: &mut [GLuint];
    value = _allocator.alloc_array::<GLuint>(&call.arg(3));
    let _a_PGLuint42_0 = (call.arg(3)).to_array().unwrap();
    value[0] = (_a_PGLuint42_0.values[0]).to_u32().unwrap();

//not found in gl!    unsafe { gl::VertexAttribP1uiv(index, _type, normalized, value) };
}

pub fn retrace_glVertexAttribP2ui(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut normalized: GLboolean;
    normalized = (call.arg(2)).to_u32().unwrap() as u8;

    let mut value: GLuint;
    value = (call.arg(3)).to_u32().unwrap();

    unsafe { gl::VertexAttribP2ui(index, _type, normalized, value) };
}

pub fn retrace_glVertexAttribP2uiv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut normalized: GLboolean;
    normalized = (call.arg(2)).to_u32().unwrap() as u8;

    let value: &mut [GLuint];
    value = _allocator.alloc_array::<GLuint>(&call.arg(3));
    let _a_PGLuint43_0 = (call.arg(3)).to_array().unwrap();
    value[0] = (_a_PGLuint43_0.values[0]).to_u32().unwrap();

//not found in gl!    unsafe { gl::VertexAttribP2uiv(index, _type, normalized, value) };
}

pub fn retrace_glVertexAttribP3ui(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut normalized: GLboolean;
    normalized = (call.arg(2)).to_u32().unwrap() as u8;

    let mut value: GLuint;
    value = (call.arg(3)).to_u32().unwrap();

    unsafe { gl::VertexAttribP3ui(index, _type, normalized, value) };
}

pub fn retrace_glVertexAttribP3uiv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut normalized: GLboolean;
    normalized = (call.arg(2)).to_u32().unwrap() as u8;

    let value: &mut [GLuint];
    value = _allocator.alloc_array::<GLuint>(&call.arg(3));
    let _a_PGLuint44_0 = (call.arg(3)).to_array().unwrap();
    value[0] = (_a_PGLuint44_0.values[0]).to_u32().unwrap();

//not found in gl!    unsafe { gl::VertexAttribP3uiv(index, _type, normalized, value) };
}

pub fn retrace_glVertexAttribP4ui(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut normalized: GLboolean;
    normalized = (call.arg(2)).to_u32().unwrap() as u8;

    let mut value: GLuint;
    value = (call.arg(3)).to_u32().unwrap();

    unsafe { gl::VertexAttribP4ui(index, _type, normalized, value) };
}

pub fn retrace_glVertexAttribP4uiv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut normalized: GLboolean;
    normalized = (call.arg(2)).to_u32().unwrap() as u8;

    let value: &mut [GLuint];
    value = _allocator.alloc_array::<GLuint>(&call.arg(3));
    let _a_PGLuint45_0 = (call.arg(3)).to_array().unwrap();
    value[0] = (_a_PGLuint45_0.values[0]).to_u32().unwrap();

//not found in gl!    unsafe { gl::VertexAttribP4uiv(index, _type, normalized, value) };
}

pub fn retrace_glVertexP2ui(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut _type: GLenum;
    _type = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut value: GLuint;
    value = (call.arg(1)).to_u32().unwrap();

    unsafe { gl::VertexP2ui(_type, value) };
}

pub fn retrace_glVertexP2uiv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut _type: GLenum;
    _type = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let value: &mut [GLuint];
    value = _allocator.alloc_array::<GLuint>(&call.arg(1));
    let _a_PGLuint46_0 = (call.arg(1)).to_array().unwrap();
    value[0] = (_a_PGLuint46_0.values[0]).to_u32().unwrap();

//not found in gl!    unsafe { gl::VertexP2uiv(_type, value) };
}

pub fn retrace_glVertexP3ui(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut _type: GLenum;
    _type = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut value: GLuint;
    value = (call.arg(1)).to_u32().unwrap();

    unsafe { gl::VertexP3ui(_type, value) };
}

pub fn retrace_glVertexP3uiv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut _type: GLenum;
    _type = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let value: &mut [GLuint];
    value = _allocator.alloc_array::<GLuint>(&call.arg(1));
    let _a_PGLuint47_0 = (call.arg(1)).to_array().unwrap();
    value[0] = (_a_PGLuint47_0.values[0]).to_u32().unwrap();

//not found in gl!    unsafe { gl::VertexP3uiv(_type, value) };
}

pub fn retrace_glVertexP4ui(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut _type: GLenum;
    _type = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut value: GLuint;
    value = (call.arg(1)).to_u32().unwrap();

    unsafe { gl::VertexP4ui(_type, value) };
}

pub fn retrace_glVertexP4uiv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut _type: GLenum;
    _type = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let value: &mut [GLuint];
    value = _allocator.alloc_array::<GLuint>(&call.arg(1));
    let _a_PGLuint48_0 = (call.arg(1)).to_array().unwrap();
    value[0] = (_a_PGLuint48_0.values[0]).to_u32().unwrap();

//not found in gl!    unsafe { gl::VertexP4uiv(_type, value) };
}

pub fn retrace_glTexCoordP1ui(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut _type: GLenum;
    _type = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut coords: GLuint;
    coords = (call.arg(1)).to_u32().unwrap();

    unsafe { gl::TexCoordP1ui(_type, coords) };
}

pub fn retrace_glTexCoordP1uiv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut _type: GLenum;
    _type = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let coords: &mut [GLuint];
    coords = _allocator.alloc_array::<GLuint>(&call.arg(1));
    let _a_PGLuint49_0 = (call.arg(1)).to_array().unwrap();
    coords[0] = (_a_PGLuint49_0.values[0]).to_u32().unwrap();

//not found in gl!    unsafe { gl::TexCoordP1uiv(_type, coords) };
}

pub fn retrace_glTexCoordP2ui(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut _type: GLenum;
    _type = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut coords: GLuint;
    coords = (call.arg(1)).to_u32().unwrap();

    unsafe { gl::TexCoordP2ui(_type, coords) };
}

pub fn retrace_glTexCoordP2uiv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut _type: GLenum;
    _type = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let coords: &mut [GLuint];
    coords = _allocator.alloc_array::<GLuint>(&call.arg(1));
    let _a_PGLuint50_0 = (call.arg(1)).to_array().unwrap();
    coords[0] = (_a_PGLuint50_0.values[0]).to_u32().unwrap();

//not found in gl!    unsafe { gl::TexCoordP2uiv(_type, coords) };
}

pub fn retrace_glTexCoordP3ui(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut _type: GLenum;
    _type = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut coords: GLuint;
    coords = (call.arg(1)).to_u32().unwrap();

    unsafe { gl::TexCoordP3ui(_type, coords) };
}

pub fn retrace_glTexCoordP3uiv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut _type: GLenum;
    _type = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let coords: &mut [GLuint];
    coords = _allocator.alloc_array::<GLuint>(&call.arg(1));
    let _a_PGLuint51_0 = (call.arg(1)).to_array().unwrap();
    coords[0] = (_a_PGLuint51_0.values[0]).to_u32().unwrap();

//not found in gl!    unsafe { gl::TexCoordP3uiv(_type, coords) };
}

pub fn retrace_glTexCoordP4ui(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut _type: GLenum;
    _type = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut coords: GLuint;
    coords = (call.arg(1)).to_u32().unwrap();

    unsafe { gl::TexCoordP4ui(_type, coords) };
}

pub fn retrace_glTexCoordP4uiv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut _type: GLenum;
    _type = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let coords: &mut [GLuint];
    coords = _allocator.alloc_array::<GLuint>(&call.arg(1));
    let _a_PGLuint52_0 = (call.arg(1)).to_array().unwrap();
    coords[0] = (_a_PGLuint52_0.values[0]).to_u32().unwrap();

//not found in gl!    unsafe { gl::TexCoordP4uiv(_type, coords) };
}

pub fn retrace_glMultiTexCoordP1ui(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLenum;
    texture = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut coords: GLuint;
    coords = (call.arg(2)).to_u32().unwrap();

    unsafe { gl::MultiTexCoordP1ui(texture, _type, coords) };
}

pub fn retrace_glMultiTexCoordP1uiv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLenum;
    texture = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let coords: &mut [GLuint];
    coords = _allocator.alloc_array::<GLuint>(&call.arg(2));
    let _a_PGLuint53_0 = (call.arg(2)).to_array().unwrap();
    coords[0] = (_a_PGLuint53_0.values[0]).to_u32().unwrap();

//not found in gl!    unsafe { gl::MultiTexCoordP1uiv(texture, _type, coords) };
}

pub fn retrace_glMultiTexCoordP2ui(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLenum;
    texture = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut coords: GLuint;
    coords = (call.arg(2)).to_u32().unwrap();

    unsafe { gl::MultiTexCoordP2ui(texture, _type, coords) };
}

pub fn retrace_glMultiTexCoordP2uiv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLenum;
    texture = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let coords: &mut [GLuint];
    coords = _allocator.alloc_array::<GLuint>(&call.arg(2));
    let _a_PGLuint54_0 = (call.arg(2)).to_array().unwrap();
    coords[0] = (_a_PGLuint54_0.values[0]).to_u32().unwrap();

//not found in gl!    unsafe { gl::MultiTexCoordP2uiv(texture, _type, coords) };
}

pub fn retrace_glMultiTexCoordP3ui(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLenum;
    texture = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut coords: GLuint;
    coords = (call.arg(2)).to_u32().unwrap();

    unsafe { gl::MultiTexCoordP3ui(texture, _type, coords) };
}

pub fn retrace_glMultiTexCoordP3uiv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLenum;
    texture = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let coords: &mut [GLuint];
    coords = _allocator.alloc_array::<GLuint>(&call.arg(2));
    let _a_PGLuint55_0 = (call.arg(2)).to_array().unwrap();
    coords[0] = (_a_PGLuint55_0.values[0]).to_u32().unwrap();

//not found in gl!    unsafe { gl::MultiTexCoordP3uiv(texture, _type, coords) };
}

pub fn retrace_glMultiTexCoordP4ui(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLenum;
    texture = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut coords: GLuint;
    coords = (call.arg(2)).to_u32().unwrap();

    unsafe { gl::MultiTexCoordP4ui(texture, _type, coords) };
}

pub fn retrace_glMultiTexCoordP4uiv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLenum;
    texture = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let coords: &mut [GLuint];
    coords = _allocator.alloc_array::<GLuint>(&call.arg(2));
    let _a_PGLuint56_0 = (call.arg(2)).to_array().unwrap();
    coords[0] = (_a_PGLuint56_0.values[0]).to_u32().unwrap();

//not found in gl!    unsafe { gl::MultiTexCoordP4uiv(texture, _type, coords) };
}

pub fn retrace_glNormalP3ui(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut _type: GLenum;
    _type = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut coords: GLuint;
    coords = (call.arg(1)).to_u32().unwrap();

    unsafe { gl::NormalP3ui(_type, coords) };
}

pub fn retrace_glNormalP3uiv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut _type: GLenum;
    _type = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let coords: &mut [GLuint];
    coords = _allocator.alloc_array::<GLuint>(&call.arg(1));
    let _a_PGLuint57_0 = (call.arg(1)).to_array().unwrap();
    coords[0] = (_a_PGLuint57_0.values[0]).to_u32().unwrap();

//not found in gl!    unsafe { gl::NormalP3uiv(_type, coords) };
}

pub fn retrace_glColorP3ui(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut _type: GLenum;
    _type = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut color: GLuint;
    color = (call.arg(1)).to_u32().unwrap();

    unsafe { gl::ColorP3ui(_type, color) };
}

pub fn retrace_glColorP3uiv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut _type: GLenum;
    _type = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let color: &mut [GLuint];
    color = _allocator.alloc_array::<GLuint>(&call.arg(1));
    let _a_PGLuint58_0 = (call.arg(1)).to_array().unwrap();
    color[0] = (_a_PGLuint58_0.values[0]).to_u32().unwrap();

//not found in gl!    unsafe { gl::ColorP3uiv(_type, color) };
}

pub fn retrace_glColorP4ui(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut _type: GLenum;
    _type = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut color: GLuint;
    color = (call.arg(1)).to_u32().unwrap();

    unsafe { gl::ColorP4ui(_type, color) };
}

pub fn retrace_glColorP4uiv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut _type: GLenum;
    _type = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let color: &mut [GLuint];
    color = _allocator.alloc_array::<GLuint>(&call.arg(1));
    let _a_PGLuint59_0 = (call.arg(1)).to_array().unwrap();
    color[0] = (_a_PGLuint59_0.values[0]).to_u32().unwrap();

//not found in gl!    unsafe { gl::ColorP4uiv(_type, color) };
}

pub fn retrace_glSecondaryColorP3ui(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut _type: GLenum;
    _type = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut color: GLuint;
    color = (call.arg(1)).to_u32().unwrap();

    unsafe { gl::SecondaryColorP3ui(_type, color) };
}

pub fn retrace_glSecondaryColorP3uiv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut _type: GLenum;
    _type = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let color: &mut [GLuint];
    color = _allocator.alloc_array::<GLuint>(&call.arg(1));
    let _a_PGLuint60_0 = (call.arg(1)).to_array().unwrap();
    color[0] = (_a_PGLuint60_0.values[0]).to_u32().unwrap();

//not found in gl!    unsafe { gl::SecondaryColorP3uiv(_type, color) };
}

pub fn retrace_glViewportArrayv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut first: GLuint;
    first = (call.arg(0)).to_u32().unwrap();

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let v: &mut [GLfloat];
    v = _allocator.alloc_array::<GLfloat>(&call.arg(2));
    let _a_GLfloat187_0 = (call.arg(2)).to_array();
    if let Some(_a_GLfloat187_0) = _a_GLfloat187_0 {
        for _jGLfloat187 in 0.._a_GLfloat187_0.values.len() {
    v[_jGLfloat187] = (*_a_GLfloat187_0.values[_jGLfloat187]).to_f32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

    if first == 0 && count > 0 {
        let x = v[0];
let y = v[1];
let w = v[2];
let h = v[3];
        glretrace::updateDrawable(x + w, y + h);
    }
    unsafe { gl::ViewportArrayv(first, count, v) };
}

pub fn retrace_glViewportIndexedf(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut x: GLfloat;
    x = (call.arg(1)).to_f32().unwrap();

    let mut y: GLfloat;
    y = (call.arg(2)).to_f32().unwrap();

    let mut w: GLfloat;
    w = (call.arg(3)).to_f32().unwrap();

    let mut h: GLfloat;
    h = (call.arg(4)).to_f32().unwrap();

    if index == 0 {
        glretrace::updateDrawable(x + w, y + h);
    }
    unsafe { gl::ViewportIndexedf(index, x, y, w, h) };
}

pub fn retrace_glViewportIndexedfv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLfloat];
    v = _allocator.alloc_array::<GLfloat>(&call.arg(1));
    let _a_GLfloat188_0 = (call.arg(1)).to_array();
    if let Some(_a_GLfloat188_0) = _a_GLfloat188_0 {
        for _jGLfloat188 in 0.._a_GLfloat188_0.values.len() {
    v[_jGLfloat188] = (*_a_GLfloat188_0.values[_jGLfloat188]).to_f32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

    if index == 0 {
        let x = v[0];
let y = v[1];
let w = v[2];
let h = v[3];
        glretrace::updateDrawable(x + w, y + h);
    }
    unsafe { gl::ViewportIndexedfv(index, v) };
}

pub fn retrace_glScissorArrayv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut first: GLuint;
    first = (call.arg(0)).to_u32().unwrap();

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let v: &mut [GLint];
    v = _allocator.alloc_array::<GLint>(&call.arg(2));
    let _a_GLint210_0 = (call.arg(2)).to_array();
    if let Some(_a_GLint210_0) = _a_GLint210_0 {
        for _jGLint210 in 0.._a_GLint210_0.values.len() {
    v[_jGLint210] = (*_a_GLint210_0.values[_jGLint210]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

    unsafe { gl::ScissorArrayv(first, count, v) };
}

pub fn retrace_glScissorIndexed(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut left: GLint;
    left = (call.arg(1)).to_i32().unwrap();

    let mut bottom: GLint;
    bottom = (call.arg(2)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(3)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(4)).to_i32().unwrap();

    unsafe { gl::ScissorIndexed(index, left, bottom, width, height) };
}

pub fn retrace_glScissorIndexedv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLint];
    v = _allocator.alloc_array::<GLint>(&call.arg(1));
    let _a_GLint211_0 = (call.arg(1)).to_array();
    if let Some(_a_GLint211_0) = _a_GLint211_0 {
        for _jGLint211 in 0.._a_GLint211_0.values.len() {
    v[_jGLint211] = (*_a_GLint211_0.values[_jGLint211]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

    unsafe { gl::ScissorIndexedv(index, v) };
}

pub fn retrace_glDepthRangeArrayv(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut first: GLuint;
    first = (call.arg(0)).to_u32().unwrap();

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let v: &mut [GLdouble];
    v = _allocator.alloc_array::<GLdouble>(&call.arg(2));
    let _a_GLdouble97_0 = (call.arg(2)).to_array();
    if let Some(_a_GLdouble97_0) = _a_GLdouble97_0 {
        for _jGLdouble97 in 0.._a_GLdouble97_0.values.len() {
    v[_jGLdouble97] = (*_a_GLdouble97_0.values[_jGLdouble97]).to_f64().unwrap();
        }
    }
    let v = v.as_mut_ptr();

    unsafe { gl::DepthRangeArrayv(first, count, v) };
}

pub fn retrace_glDepthRangeIndexed(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut n: GLdouble;
    n = (call.arg(1)).to_f64().unwrap();

    let mut f: GLdouble;
    f = (call.arg(2)).to_f64().unwrap();

    unsafe { gl::DepthRangeIndexed(index, n, f) };
}

pub fn retrace_glWindowPos2dARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut x: GLdouble;
    x = (call.arg(0)).to_f64().unwrap();

    let mut y: GLdouble;
    y = (call.arg(1)).to_f64().unwrap();

//not found in gl!    unsafe { gl::WindowPos2dARB(x, y) };
}

pub fn retrace_glWindowPos2dvARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLdouble];
    v = _allocator.alloc_array::<GLdouble>(&call.arg(0));
    let _a_GLdouble98_0 = (call.arg(0)).to_array();
    if let Some(_a_GLdouble98_0) = _a_GLdouble98_0 {
        for _jGLdouble98 in 0.._a_GLdouble98_0.values.len() {
    v[_jGLdouble98] = (*_a_GLdouble98_0.values[_jGLdouble98]).to_f64().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::WindowPos2dvARB(v) };
}

pub fn retrace_glWindowPos2fARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut x: GLfloat;
    x = (call.arg(0)).to_f32().unwrap();

    let mut y: GLfloat;
    y = (call.arg(1)).to_f32().unwrap();

//not found in gl!    unsafe { gl::WindowPos2fARB(x, y) };
}

pub fn retrace_glWindowPos2fvARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLfloat];
    v = _allocator.alloc_array::<GLfloat>(&call.arg(0));
    let _a_GLfloat189_0 = (call.arg(0)).to_array();
    if let Some(_a_GLfloat189_0) = _a_GLfloat189_0 {
        for _jGLfloat189 in 0.._a_GLfloat189_0.values.len() {
    v[_jGLfloat189] = (*_a_GLfloat189_0.values[_jGLfloat189]).to_f32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::WindowPos2fvARB(v) };
}

pub fn retrace_glWindowPos2iARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut x: GLint;
    x = (call.arg(0)).to_i32().unwrap();

    let mut y: GLint;
    y = (call.arg(1)).to_i32().unwrap();

//not found in gl!    unsafe { gl::WindowPos2iARB(x, y) };
}

pub fn retrace_glWindowPos2ivARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLint];
    v = _allocator.alloc_array::<GLint>(&call.arg(0));
    let _a_GLint212_0 = (call.arg(0)).to_array();
    if let Some(_a_GLint212_0) = _a_GLint212_0 {
        for _jGLint212 in 0.._a_GLint212_0.values.len() {
    v[_jGLint212] = (*_a_GLint212_0.values[_jGLint212]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::WindowPos2ivARB(v) };
}

pub fn retrace_glWindowPos2sARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut x: GLshort;
    x = (call.arg(0)).to_i32().unwrap();

    let mut y: GLshort;
    y = (call.arg(1)).to_i32().unwrap();

//not found in gl!    unsafe { gl::WindowPos2sARB(x, y) };
}

pub fn retrace_glWindowPos2svARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLshort];
    v = _allocator.alloc_array::<GLshort>(&call.arg(0));
    let _a_GLshort34_0 = (call.arg(0)).to_array();
    if let Some(_a_GLshort34_0) = _a_GLshort34_0 {
        for _jGLshort34 in 0.._a_GLshort34_0.values.len() {
    v[_jGLshort34] = (*_a_GLshort34_0.values[_jGLshort34]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::WindowPos2svARB(v) };
}

pub fn retrace_glWindowPos3dARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut x: GLdouble;
    x = (call.arg(0)).to_f64().unwrap();

    let mut y: GLdouble;
    y = (call.arg(1)).to_f64().unwrap();

    let mut z: GLdouble;
    z = (call.arg(2)).to_f64().unwrap();

//not found in gl!    unsafe { gl::WindowPos3dARB(x, y, z) };
}

pub fn retrace_glWindowPos3dvARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLdouble];
    v = _allocator.alloc_array::<GLdouble>(&call.arg(0));
    let _a_GLdouble99_0 = (call.arg(0)).to_array();
    if let Some(_a_GLdouble99_0) = _a_GLdouble99_0 {
        for _jGLdouble99 in 0.._a_GLdouble99_0.values.len() {
    v[_jGLdouble99] = (*_a_GLdouble99_0.values[_jGLdouble99]).to_f64().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::WindowPos3dvARB(v) };
}

pub fn retrace_glWindowPos3fARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut x: GLfloat;
    x = (call.arg(0)).to_f32().unwrap();

    let mut y: GLfloat;
    y = (call.arg(1)).to_f32().unwrap();

    let mut z: GLfloat;
    z = (call.arg(2)).to_f32().unwrap();

//not found in gl!    unsafe { gl::WindowPos3fARB(x, y, z) };
}

pub fn retrace_glWindowPos3fvARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLfloat];
    v = _allocator.alloc_array::<GLfloat>(&call.arg(0));
    let _a_GLfloat190_0 = (call.arg(0)).to_array();
    if let Some(_a_GLfloat190_0) = _a_GLfloat190_0 {
        for _jGLfloat190 in 0.._a_GLfloat190_0.values.len() {
    v[_jGLfloat190] = (*_a_GLfloat190_0.values[_jGLfloat190]).to_f32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::WindowPos3fvARB(v) };
}

pub fn retrace_glWindowPos3iARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut x: GLint;
    x = (call.arg(0)).to_i32().unwrap();

    let mut y: GLint;
    y = (call.arg(1)).to_i32().unwrap();

    let mut z: GLint;
    z = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::WindowPos3iARB(x, y, z) };
}

pub fn retrace_glWindowPos3ivARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLint];
    v = _allocator.alloc_array::<GLint>(&call.arg(0));
    let _a_GLint213_0 = (call.arg(0)).to_array();
    if let Some(_a_GLint213_0) = _a_GLint213_0 {
        for _jGLint213 in 0.._a_GLint213_0.values.len() {
    v[_jGLint213] = (*_a_GLint213_0.values[_jGLint213]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::WindowPos3ivARB(v) };
}

pub fn retrace_glWindowPos3sARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut x: GLshort;
    x = (call.arg(0)).to_i32().unwrap();

    let mut y: GLshort;
    y = (call.arg(1)).to_i32().unwrap();

    let mut z: GLshort;
    z = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::WindowPos3sARB(x, y, z) };
}

pub fn retrace_glWindowPos3svARB(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLshort];
    v = _allocator.alloc_array::<GLshort>(&call.arg(0));
    let _a_GLshort35_0 = (call.arg(0)).to_array();
    if let Some(_a_GLshort35_0) = _a_GLshort35_0 {
        for _jGLshort35 in 0.._a_GLshort35_0.values.len() {
    v[_jGLshort35] = (*_a_GLshort35_0.values[_jGLshort35]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::WindowPos3svARB(v) };
}

pub fn retrace_glDrawBuffersATI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut n: GLsizei;
    n = (call.arg(0)).to_i32().unwrap();

    let bufs: &mut [GLenum];
    bufs = _allocator.alloc_array::<GLenum>(&call.arg(1));
    let _a_GLenum22_0 = (call.arg(1)).to_array();
    if let Some(_a_GLenum22_0) = _a_GLenum22_0 {
        for _jGLenum22 in 0.._a_GLenum22_0.values.len() {
    bufs[_jGLenum22] = (*_a_GLenum22_0.values[_jGLenum22]).to_u32().unwrap().try_into().unwrap();
        }
    }
    let bufs = bufs.as_mut_ptr();

//not found in gl!    unsafe { gl::DrawBuffersATI(n, bufs) };
}

pub fn retrace_glElementPointerATI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut _type: GLenum;
    _type = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let pointer: &mut [GLc_void];
//FIXME    memset(&pointer, 0, sizeof pointer); 

    if (1) {
    }
//not found in gl!    unsafe { gl::ElementPointerATI(_type, pointer) };
}

pub fn retrace_glDrawElementArrayATI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

//not found in gl!    unsafe { gl::DrawElementArrayATI(mode, count) };
}

pub fn retrace_glDrawRangeElementArrayATI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut start: GLuint;
    start = (call.arg(1)).to_u32().unwrap();

    let mut end: GLuint;
    end = (call.arg(2)).to_u32().unwrap();

    let mut count: GLsizei;
    count = (call.arg(3)).to_i32().unwrap();

//not found in gl!    unsafe { gl::DrawRangeElementArrayATI(mode, start, end, count) };
}

pub fn retrace_glTexBumpParameterivATI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut pname: GLenum;
    pname = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let param: &mut [GLint];
    param = _allocator.alloc_array::<GLint>(&call.arg(1));
    let _a_GLint214_0 = (call.arg(1)).to_array();
    if let Some(_a_GLint214_0) = _a_GLint214_0 {
        for _jGLint214 in 0.._a_GLint214_0.values.len() {
    param[_jGLint214] = (*_a_GLint214_0.values[_jGLint214]).to_i32().unwrap();
        }
    }
    let param = param.as_mut_ptr();

//not found in gl!    unsafe { gl::TexBumpParameterivATI(pname, param) };
}

pub fn retrace_glTexBumpParameterfvATI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut pname: GLenum;
    pname = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let param: &mut [GLfloat];
    param = _allocator.alloc_array::<GLfloat>(&call.arg(1));
    let _a_GLfloat191_0 = (call.arg(1)).to_array();
    if let Some(_a_GLfloat191_0) = _a_GLfloat191_0 {
        for _jGLfloat191 in 0.._a_GLfloat191_0.values.len() {
    param[_jGLfloat191] = (*_a_GLfloat191_0.values[_jGLfloat191]).to_f32().unwrap();
        }
    }
    let param = param.as_mut_ptr();

//not found in gl!    unsafe { gl::TexBumpParameterfvATI(pname, param) };
}

pub fn retrace_glBlendEquationSeparateATI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut equationRGB: GLenum;
    equationRGB = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut equationAlpha: GLenum;
    equationAlpha = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::BlendEquationSeparateATI(equationRGB, equationAlpha) };
}

pub fn retrace_glGenFragmentShadersATI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut range: GLuint;
    range = (call.arg(0)).to_u32().unwrap();

//not found in gl!    let _result = unsafe { gl::GenFragmentShadersATI(range) };

    let _origResult: GLuint;
    _origResult = (*call.ret).to_u32().unwrap();
    for _hPGLuint22 in 0..range {
        _fragmentShaderATI_map[_origResult + _hPGLuint22] = _result + _hPGLuint22;
    }
}

pub fn retrace_glBindFragmentShaderATI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut id: GLuint;
    id = (call.arg(0)).to_u32().unwrap();
    id = self._fragmentShaderATI_map[id];

//not found in gl!    unsafe { gl::BindFragmentShaderATI(id) };
}

pub fn retrace_glDeleteFragmentShaderATI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut id: GLuint;
    id = (call.arg(0)).to_u32().unwrap();
    id = self._fragmentShaderATI_map[id];

//not found in gl!    unsafe { gl::DeleteFragmentShaderATI(id) };
}

pub fn retrace_glBeginFragmentShaderATI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
//not found in gl!    unsafe { gl::BeginFragmentShaderATI() };
}

pub fn retrace_glEndFragmentShaderATI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
//not found in gl!    unsafe { gl::EndFragmentShaderATI() };
}

pub fn retrace_glPassTexCoordATI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut dst: GLenum;
    dst = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut coord: GLenum;
    coord = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut swizzle: GLenum;
    swizzle = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::PassTexCoordATI(dst, coord, swizzle) };
}

pub fn retrace_glSampleMapATI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut dst: GLenum;
    dst = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut interp: GLenum;
    interp = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut swizzle: GLenum;
    swizzle = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::SampleMapATI(dst, interp, swizzle) };
}

pub fn retrace_glColorFragmentOp1ATI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut op: GLenum;
    op = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut dst: GLenum;
    dst = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut dstMask: GLuint;
    dstMask = (call.arg(2)).to_u32().unwrap();

    let mut dstMod: GLuint;
    dstMod = (call.arg(3)).to_u32().unwrap();

    let mut arg1: GLenum;
    arg1 = (call.arg(4)).to_u32().unwrap().try_into().unwrap();

    let mut arg1Rep: GLuint;
    arg1Rep = (call.arg(5)).to_u32().unwrap();

    let mut arg1Mod: GLuint;
    arg1Mod = (call.arg(6)).to_u32().unwrap();

//not found in gl!    unsafe { gl::ColorFragmentOp1ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod) };
}

pub fn retrace_glColorFragmentOp2ATI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut op: GLenum;
    op = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut dst: GLenum;
    dst = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut dstMask: GLuint;
    dstMask = (call.arg(2)).to_u32().unwrap();

    let mut dstMod: GLuint;
    dstMod = (call.arg(3)).to_u32().unwrap();

    let mut arg1: GLenum;
    arg1 = (call.arg(4)).to_u32().unwrap().try_into().unwrap();

    let mut arg1Rep: GLuint;
    arg1Rep = (call.arg(5)).to_u32().unwrap();

    let mut arg1Mod: GLuint;
    arg1Mod = (call.arg(6)).to_u32().unwrap();

    let mut arg2: GLenum;
    arg2 = (call.arg(7)).to_u32().unwrap().try_into().unwrap();

    let mut arg2Rep: GLuint;
    arg2Rep = (call.arg(8)).to_u32().unwrap();

    let mut arg2Mod: GLuint;
    arg2Mod = (call.arg(9)).to_u32().unwrap();

//not found in gl!    unsafe { gl::ColorFragmentOp2ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod) };
}

pub fn retrace_glColorFragmentOp3ATI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut op: GLenum;
    op = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut dst: GLenum;
    dst = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut dstMask: GLuint;
    dstMask = (call.arg(2)).to_u32().unwrap();

    let mut dstMod: GLuint;
    dstMod = (call.arg(3)).to_u32().unwrap();

    let mut arg1: GLenum;
    arg1 = (call.arg(4)).to_u32().unwrap().try_into().unwrap();

    let mut arg1Rep: GLuint;
    arg1Rep = (call.arg(5)).to_u32().unwrap();

    let mut arg1Mod: GLuint;
    arg1Mod = (call.arg(6)).to_u32().unwrap();

    let mut arg2: GLenum;
    arg2 = (call.arg(7)).to_u32().unwrap().try_into().unwrap();

    let mut arg2Rep: GLuint;
    arg2Rep = (call.arg(8)).to_u32().unwrap();

    let mut arg2Mod: GLuint;
    arg2Mod = (call.arg(9)).to_u32().unwrap();

    let mut arg3: GLenum;
    arg3 = (call.arg(10)).to_u32().unwrap().try_into().unwrap();

    let mut arg3Rep: GLuint;
    arg3Rep = (call.arg(11)).to_u32().unwrap();

    let mut arg3Mod: GLuint;
    arg3Mod = (call.arg(12)).to_u32().unwrap();

//not found in gl!    unsafe { gl::ColorFragmentOp3ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod) };
}

pub fn retrace_glAlphaFragmentOp1ATI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut op: GLenum;
    op = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut dst: GLenum;
    dst = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut dstMod: GLuint;
    dstMod = (call.arg(2)).to_u32().unwrap();

    let mut arg1: GLenum;
    arg1 = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let mut arg1Rep: GLuint;
    arg1Rep = (call.arg(4)).to_u32().unwrap();

    let mut arg1Mod: GLuint;
    arg1Mod = (call.arg(5)).to_u32().unwrap();

//not found in gl!    unsafe { gl::AlphaFragmentOp1ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod) };
}

pub fn retrace_glAlphaFragmentOp2ATI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut op: GLenum;
    op = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut dst: GLenum;
    dst = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut dstMod: GLuint;
    dstMod = (call.arg(2)).to_u32().unwrap();

    let mut arg1: GLenum;
    arg1 = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let mut arg1Rep: GLuint;
    arg1Rep = (call.arg(4)).to_u32().unwrap();

    let mut arg1Mod: GLuint;
    arg1Mod = (call.arg(5)).to_u32().unwrap();

    let mut arg2: GLenum;
    arg2 = (call.arg(6)).to_u32().unwrap().try_into().unwrap();

    let mut arg2Rep: GLuint;
    arg2Rep = (call.arg(7)).to_u32().unwrap();

    let mut arg2Mod: GLuint;
    arg2Mod = (call.arg(8)).to_u32().unwrap();

//not found in gl!    unsafe { gl::AlphaFragmentOp2ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod) };
}

pub fn retrace_glAlphaFragmentOp3ATI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut op: GLenum;
    op = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut dst: GLenum;
    dst = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut dstMod: GLuint;
    dstMod = (call.arg(2)).to_u32().unwrap();

    let mut arg1: GLenum;
    arg1 = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let mut arg1Rep: GLuint;
    arg1Rep = (call.arg(4)).to_u32().unwrap();

    let mut arg1Mod: GLuint;
    arg1Mod = (call.arg(5)).to_u32().unwrap();

    let mut arg2: GLenum;
    arg2 = (call.arg(6)).to_u32().unwrap().try_into().unwrap();

    let mut arg2Rep: GLuint;
    arg2Rep = (call.arg(7)).to_u32().unwrap();

    let mut arg2Mod: GLuint;
    arg2Mod = (call.arg(8)).to_u32().unwrap();

    let mut arg3: GLenum;
    arg3 = (call.arg(9)).to_u32().unwrap().try_into().unwrap();

    let mut arg3Rep: GLuint;
    arg3Rep = (call.arg(10)).to_u32().unwrap();

    let mut arg3Mod: GLuint;
    arg3Mod = (call.arg(11)).to_u32().unwrap();

//not found in gl!    unsafe { gl::AlphaFragmentOp3ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod) };
}

pub fn retrace_glSetFragmentShaderConstantATI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut dst: GLenum;
    dst = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let value: &mut [GLfloat];
    value = _allocator.alloc_array::<GLfloat>(&call.arg(1));
    let _a_GLfloat192_0 = (call.arg(1)).to_array();
    if let Some(_a_GLfloat192_0) = _a_GLfloat192_0 {
        for _jGLfloat192 in 0.._a_GLfloat192_0.values.len() {
    value[_jGLfloat192] = (*_a_GLfloat192_0.values[_jGLfloat192]).to_f32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::SetFragmentShaderConstantATI(dst, value) };
}

pub fn retrace_glMapObjectBufferATI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut buffer: GLuint;
    buffer = (call.arg(0)).to_u32().unwrap();
    buffer = self._buffer_map[buffer];

//not found in gl!    let _result = unsafe { gl::MapObjectBufferATI(buffer) };

    let length = 0;
//not found in gl!//not found in gl!    unsafe { gl::GetObjectBufferivATI(buffer, gl::OBJECT_BUFFER_SIZE_ATI, &length) };
    region::add_region(call, (*call.ret).toUIntPtr(), _result, length);
}

pub fn retrace_glUnmapObjectBufferATI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut buffer: GLuint;
    buffer = (call.arg(0)).to_u32().unwrap();
    buffer = self._buffer_map[buffer];

        let ptr = ptr::null_mut() as *mut c_void;
        if (ptr) {
            retrace::delRegionByPointer(ptr);
        } else {
            retrace::warning(call) << "failed to get mapped pointer\n";
        }
//not found in gl!    unsafe { gl::UnmapObjectBufferATI(buffer) };
}

pub fn retrace_glPNTrianglesiATI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut pname: GLenum;
    pname = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut param: GLint;
    param = (call.arg(1)).to_i32().unwrap();

//not found in gl!    unsafe { gl::PNTrianglesiATI(pname, param) };
}

pub fn retrace_glPNTrianglesfATI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut pname: GLenum;
    pname = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut param: GLfloat;
    param = (call.arg(1)).to_f32().unwrap();

//not found in gl!    unsafe { gl::PNTrianglesfATI(pname, param) };
}

pub fn retrace_glPNTrianglesiATIX(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut pname: GLenum;
    pname = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut param: GLint;
    param = (call.arg(1)).to_i32().unwrap();

//not found in gl!    unsafe { gl::PNTrianglesiATIX(pname, param) };
}

pub fn retrace_glPNTrianglesfATIX(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut pname: GLenum;
    pname = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut param: GLfloat;
    param = (call.arg(1)).to_f32().unwrap();

//not found in gl!    unsafe { gl::PNTrianglesfATIX(pname, param) };
}

pub fn retrace_glStencilOpSeparateATI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut face: GLenum;
    face = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut sfail: GLenum;
    sfail = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut dpfail: GLenum;
    dpfail = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut dppass: GLenum;
    dppass = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::StencilOpSeparateATI(face, sfail, dpfail, dppass) };
}

pub fn retrace_glStencilFuncSeparateATI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut frontfunc: GLenum;
    frontfunc = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut backfunc: GLenum;
    backfunc = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut _ref: GLint;
    _ref = (call.arg(2)).to_i32().unwrap();

    let mut mask: GLuint;
    mask = (call.arg(3)).to_u32().unwrap();

//not found in gl!    unsafe { gl::StencilFuncSeparateATI(frontfunc, backfunc, _ref, mask) };
}

pub fn retrace_glNewObjectBufferATI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut size: GLsizei;
    size = (call.arg(0)).to_i32().unwrap();

    let pointer: &mut [GLc_void];
    let pointer = (call.arg(1)).to_pointer().unwrap() as *mut c_void;

    let mut usage: GLenum;
    usage = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    let _result = unsafe { gl::NewObjectBufferATI(size, pointer, usage) };

}

pub fn retrace_glUpdateObjectBufferATI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut buffer: GLuint;
    buffer = (call.arg(0)).to_u32().unwrap();

    let mut offset: GLuint;
    offset = (call.arg(1)).to_u32().unwrap();

    let mut size: GLsizei;
    size = (call.arg(2)).to_i32().unwrap();

    let pointer: &mut [GLc_void];
    let pointer = (call.arg(3)).to_pointer().unwrap() as *mut c_void;

    let mut preserve: GLenum;
    preserve = (call.arg(4)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::UpdateObjectBufferATI(buffer, offset, size, pointer, preserve) };
}

pub fn retrace_glFreeObjectBufferATI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut buffer: GLuint;
    buffer = (call.arg(0)).to_u32().unwrap();

//not found in gl!    unsafe { gl::FreeObjectBufferATI(buffer) };
}

pub fn retrace_glArrayObjectATI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut array: GLenum;
    array = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut size: GLint;
    size = (call.arg(1)).to_i32().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut stride: GLsizei;
    stride = (call.arg(3)).to_i32().unwrap();

    let mut buffer: GLuint;
    buffer = (call.arg(4)).to_u32().unwrap();

    let mut offset: GLuint;
    offset = (call.arg(5)).to_u32().unwrap();

//not found in gl!    unsafe { gl::ArrayObjectATI(array, size, _type, stride, buffer, offset) };
}

pub fn retrace_glVariantArrayObjectATI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut id: GLuint;
    id = (call.arg(0)).to_u32().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut stride: GLsizei;
    stride = (call.arg(2)).to_i32().unwrap();

    let mut buffer: GLuint;
    buffer = (call.arg(3)).to_u32().unwrap();

    let mut offset: GLuint;
    offset = (call.arg(4)).to_u32().unwrap();

//not found in gl!    unsafe { gl::VariantArrayObjectATI(id, _type, stride, buffer, offset) };
}

pub fn retrace_glVertexAttribArrayObjectATI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut size: GLint;
    size = (call.arg(1)).to_i32().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut normalized: GLboolean;
    normalized = (call.arg(3)).to_u32().unwrap() as u8;

    let mut stride: GLsizei;
    stride = (call.arg(4)).to_i32().unwrap();

    let mut buffer: GLuint;
    buffer = (call.arg(5)).to_u32().unwrap();

    let mut offset: GLuint;
    offset = (call.arg(6)).to_u32().unwrap();

//not found in gl!    unsafe { gl::VertexAttribArrayObjectATI(index, size, _type, normalized, stride, buffer, offset) };
}

pub fn retrace_glVertexStream1sATI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut stream: GLenum;
    stream = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut x: GLshort;
    x = (call.arg(1)).to_i32().unwrap();

//not found in gl!    unsafe { gl::VertexStream1sATI(stream, x) };
}

pub fn retrace_glVertexStream1svATI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut stream: GLenum;
    stream = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let coords: &mut [GLshort];
    coords = _allocator.alloc_array::<GLshort>(&call.arg(1));
    let _a_PGLshort6_0 = (call.arg(1)).to_array().unwrap();
    coords[0] = (_a_PGLshort6_0.values[0]).to_i32().unwrap();

//not found in gl!    unsafe { gl::VertexStream1svATI(stream, coords) };
}

pub fn retrace_glVertexStream1iATI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut stream: GLenum;
    stream = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut x: GLint;
    x = (call.arg(1)).to_i32().unwrap();

//not found in gl!    unsafe { gl::VertexStream1iATI(stream, x) };
}

pub fn retrace_glVertexStream1ivATI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut stream: GLenum;
    stream = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let coords: &mut [GLint];
    coords = _allocator.alloc_array::<GLint>(&call.arg(1));
    let _a_PGLint34_0 = (call.arg(1)).to_array().unwrap();
    coords[0] = (_a_PGLint34_0.values[0]).to_i32().unwrap();

//not found in gl!    unsafe { gl::VertexStream1ivATI(stream, coords) };
}

pub fn retrace_glVertexStream1fATI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut stream: GLenum;
    stream = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut x: GLfloat;
    x = (call.arg(1)).to_f32().unwrap();

//not found in gl!    unsafe { gl::VertexStream1fATI(stream, x) };
}

pub fn retrace_glVertexStream1fvATI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut stream: GLenum;
    stream = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let coords: &mut [GLfloat];
    coords = _allocator.alloc_array::<GLfloat>(&call.arg(1));
    let _a_PGLfloat19_0 = (call.arg(1)).to_array().unwrap();
    coords[0] = (_a_PGLfloat19_0.values[0]).to_f32().unwrap();

//not found in gl!    unsafe { gl::VertexStream1fvATI(stream, coords) };
}

pub fn retrace_glVertexStream1dATI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut stream: GLenum;
    stream = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut x: GLdouble;
    x = (call.arg(1)).to_f64().unwrap();

//not found in gl!    unsafe { gl::VertexStream1dATI(stream, x) };
}

pub fn retrace_glVertexStream1dvATI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut stream: GLenum;
    stream = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let coords: &mut [GLdouble];
    coords = _allocator.alloc_array::<GLdouble>(&call.arg(1));
    let _a_PGLdouble10_0 = (call.arg(1)).to_array().unwrap();
    coords[0] = (_a_PGLdouble10_0.values[0]).to_f64().unwrap();

//not found in gl!    unsafe { gl::VertexStream1dvATI(stream, coords) };
}

pub fn retrace_glVertexStream2sATI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut stream: GLenum;
    stream = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut x: GLshort;
    x = (call.arg(1)).to_i32().unwrap();

    let mut y: GLshort;
    y = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::VertexStream2sATI(stream, x, y) };
}

pub fn retrace_glVertexStream2svATI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut stream: GLenum;
    stream = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let coords: &mut [GLshort];
    coords = _allocator.alloc_array::<GLshort>(&call.arg(1));
    let _a_GLshort36_0 = (call.arg(1)).to_array();
    if let Some(_a_GLshort36_0) = _a_GLshort36_0 {
        for _jGLshort36 in 0.._a_GLshort36_0.values.len() {
    coords[_jGLshort36] = (*_a_GLshort36_0.values[_jGLshort36]).to_i32().unwrap();
        }
    }
    let coords = coords.as_mut_ptr();

//not found in gl!    unsafe { gl::VertexStream2svATI(stream, coords) };
}

pub fn retrace_glVertexStream2iATI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut stream: GLenum;
    stream = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut x: GLint;
    x = (call.arg(1)).to_i32().unwrap();

    let mut y: GLint;
    y = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::VertexStream2iATI(stream, x, y) };
}

pub fn retrace_glVertexStream2ivATI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut stream: GLenum;
    stream = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let coords: &mut [GLint];
    coords = _allocator.alloc_array::<GLint>(&call.arg(1));
    let _a_GLint215_0 = (call.arg(1)).to_array();
    if let Some(_a_GLint215_0) = _a_GLint215_0 {
        for _jGLint215 in 0.._a_GLint215_0.values.len() {
    coords[_jGLint215] = (*_a_GLint215_0.values[_jGLint215]).to_i32().unwrap();
        }
    }
    let coords = coords.as_mut_ptr();

//not found in gl!    unsafe { gl::VertexStream2ivATI(stream, coords) };
}

pub fn retrace_glVertexStream2fATI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut stream: GLenum;
    stream = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut x: GLfloat;
    x = (call.arg(1)).to_f32().unwrap();

    let mut y: GLfloat;
    y = (call.arg(2)).to_f32().unwrap();

//not found in gl!    unsafe { gl::VertexStream2fATI(stream, x, y) };
}

pub fn retrace_glVertexStream2fvATI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut stream: GLenum;
    stream = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let coords: &mut [GLfloat];
    coords = _allocator.alloc_array::<GLfloat>(&call.arg(1));
    let _a_GLfloat193_0 = (call.arg(1)).to_array();
    if let Some(_a_GLfloat193_0) = _a_GLfloat193_0 {
        for _jGLfloat193 in 0.._a_GLfloat193_0.values.len() {
    coords[_jGLfloat193] = (*_a_GLfloat193_0.values[_jGLfloat193]).to_f32().unwrap();
        }
    }
    let coords = coords.as_mut_ptr();

//not found in gl!    unsafe { gl::VertexStream2fvATI(stream, coords) };
}

pub fn retrace_glVertexStream2dATI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut stream: GLenum;
    stream = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut x: GLdouble;
    x = (call.arg(1)).to_f64().unwrap();

    let mut y: GLdouble;
    y = (call.arg(2)).to_f64().unwrap();

//not found in gl!    unsafe { gl::VertexStream2dATI(stream, x, y) };
}

pub fn retrace_glVertexStream2dvATI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut stream: GLenum;
    stream = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let coords: &mut [GLdouble];
    coords = _allocator.alloc_array::<GLdouble>(&call.arg(1));
    let _a_GLdouble100_0 = (call.arg(1)).to_array();
    if let Some(_a_GLdouble100_0) = _a_GLdouble100_0 {
        for _jGLdouble100 in 0.._a_GLdouble100_0.values.len() {
    coords[_jGLdouble100] = (*_a_GLdouble100_0.values[_jGLdouble100]).to_f64().unwrap();
        }
    }
    let coords = coords.as_mut_ptr();

//not found in gl!    unsafe { gl::VertexStream2dvATI(stream, coords) };
}

pub fn retrace_glVertexStream3sATI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut stream: GLenum;
    stream = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut x: GLshort;
    x = (call.arg(1)).to_i32().unwrap();

    let mut y: GLshort;
    y = (call.arg(2)).to_i32().unwrap();

    let mut z: GLshort;
    z = (call.arg(3)).to_i32().unwrap();

//not found in gl!    unsafe { gl::VertexStream3sATI(stream, x, y, z) };
}

pub fn retrace_glVertexStream3svATI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut stream: GLenum;
    stream = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let coords: &mut [GLshort];
    coords = _allocator.alloc_array::<GLshort>(&call.arg(1));
    let _a_GLshort37_0 = (call.arg(1)).to_array();
    if let Some(_a_GLshort37_0) = _a_GLshort37_0 {
        for _jGLshort37 in 0.._a_GLshort37_0.values.len() {
    coords[_jGLshort37] = (*_a_GLshort37_0.values[_jGLshort37]).to_i32().unwrap();
        }
    }
    let coords = coords.as_mut_ptr();

//not found in gl!    unsafe { gl::VertexStream3svATI(stream, coords) };
}

pub fn retrace_glVertexStream3iATI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut stream: GLenum;
    stream = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut x: GLint;
    x = (call.arg(1)).to_i32().unwrap();

    let mut y: GLint;
    y = (call.arg(2)).to_i32().unwrap();

    let mut z: GLint;
    z = (call.arg(3)).to_i32().unwrap();

//not found in gl!    unsafe { gl::VertexStream3iATI(stream, x, y, z) };
}

pub fn retrace_glVertexStream3ivATI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut stream: GLenum;
    stream = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let coords: &mut [GLint];
    coords = _allocator.alloc_array::<GLint>(&call.arg(1));
    let _a_GLint216_0 = (call.arg(1)).to_array();
    if let Some(_a_GLint216_0) = _a_GLint216_0 {
        for _jGLint216 in 0.._a_GLint216_0.values.len() {
    coords[_jGLint216] = (*_a_GLint216_0.values[_jGLint216]).to_i32().unwrap();
        }
    }
    let coords = coords.as_mut_ptr();

//not found in gl!    unsafe { gl::VertexStream3ivATI(stream, coords) };
}

pub fn retrace_glVertexStream3fATI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut stream: GLenum;
    stream = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut x: GLfloat;
    x = (call.arg(1)).to_f32().unwrap();

    let mut y: GLfloat;
    y = (call.arg(2)).to_f32().unwrap();

    let mut z: GLfloat;
    z = (call.arg(3)).to_f32().unwrap();

//not found in gl!    unsafe { gl::VertexStream3fATI(stream, x, y, z) };
}

pub fn retrace_glVertexStream3fvATI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut stream: GLenum;
    stream = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let coords: &mut [GLfloat];
    coords = _allocator.alloc_array::<GLfloat>(&call.arg(1));
    let _a_GLfloat194_0 = (call.arg(1)).to_array();
    if let Some(_a_GLfloat194_0) = _a_GLfloat194_0 {
        for _jGLfloat194 in 0.._a_GLfloat194_0.values.len() {
    coords[_jGLfloat194] = (*_a_GLfloat194_0.values[_jGLfloat194]).to_f32().unwrap();
        }
    }
    let coords = coords.as_mut_ptr();

//not found in gl!    unsafe { gl::VertexStream3fvATI(stream, coords) };
}

pub fn retrace_glVertexStream3dATI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut stream: GLenum;
    stream = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut x: GLdouble;
    x = (call.arg(1)).to_f64().unwrap();

    let mut y: GLdouble;
    y = (call.arg(2)).to_f64().unwrap();

    let mut z: GLdouble;
    z = (call.arg(3)).to_f64().unwrap();

//not found in gl!    unsafe { gl::VertexStream3dATI(stream, x, y, z) };
}

pub fn retrace_glVertexStream3dvATI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut stream: GLenum;
    stream = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let coords: &mut [GLdouble];
    coords = _allocator.alloc_array::<GLdouble>(&call.arg(1));
    let _a_GLdouble101_0 = (call.arg(1)).to_array();
    if let Some(_a_GLdouble101_0) = _a_GLdouble101_0 {
        for _jGLdouble101 in 0.._a_GLdouble101_0.values.len() {
    coords[_jGLdouble101] = (*_a_GLdouble101_0.values[_jGLdouble101]).to_f64().unwrap();
        }
    }
    let coords = coords.as_mut_ptr();

//not found in gl!    unsafe { gl::VertexStream3dvATI(stream, coords) };
}

pub fn retrace_glVertexStream4sATI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut stream: GLenum;
    stream = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut x: GLshort;
    x = (call.arg(1)).to_i32().unwrap();

    let mut y: GLshort;
    y = (call.arg(2)).to_i32().unwrap();

    let mut z: GLshort;
    z = (call.arg(3)).to_i32().unwrap();

    let mut w: GLshort;
    w = (call.arg(4)).to_i32().unwrap();

//not found in gl!    unsafe { gl::VertexStream4sATI(stream, x, y, z, w) };
}

pub fn retrace_glVertexStream4svATI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut stream: GLenum;
    stream = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let coords: &mut [GLshort];
    coords = _allocator.alloc_array::<GLshort>(&call.arg(1));
    let _a_GLshort38_0 = (call.arg(1)).to_array();
    if let Some(_a_GLshort38_0) = _a_GLshort38_0 {
        for _jGLshort38 in 0.._a_GLshort38_0.values.len() {
    coords[_jGLshort38] = (*_a_GLshort38_0.values[_jGLshort38]).to_i32().unwrap();
        }
    }
    let coords = coords.as_mut_ptr();

//not found in gl!    unsafe { gl::VertexStream4svATI(stream, coords) };
}

pub fn retrace_glVertexStream4iATI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut stream: GLenum;
    stream = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut x: GLint;
    x = (call.arg(1)).to_i32().unwrap();

    let mut y: GLint;
    y = (call.arg(2)).to_i32().unwrap();

    let mut z: GLint;
    z = (call.arg(3)).to_i32().unwrap();

    let mut w: GLint;
    w = (call.arg(4)).to_i32().unwrap();

//not found in gl!    unsafe { gl::VertexStream4iATI(stream, x, y, z, w) };
}

pub fn retrace_glVertexStream4ivATI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut stream: GLenum;
    stream = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let coords: &mut [GLint];
    coords = _allocator.alloc_array::<GLint>(&call.arg(1));
    let _a_GLint217_0 = (call.arg(1)).to_array();
    if let Some(_a_GLint217_0) = _a_GLint217_0 {
        for _jGLint217 in 0.._a_GLint217_0.values.len() {
    coords[_jGLint217] = (*_a_GLint217_0.values[_jGLint217]).to_i32().unwrap();
        }
    }
    let coords = coords.as_mut_ptr();

//not found in gl!    unsafe { gl::VertexStream4ivATI(stream, coords) };
}

pub fn retrace_glVertexStream4fATI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut stream: GLenum;
    stream = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut x: GLfloat;
    x = (call.arg(1)).to_f32().unwrap();

    let mut y: GLfloat;
    y = (call.arg(2)).to_f32().unwrap();

    let mut z: GLfloat;
    z = (call.arg(3)).to_f32().unwrap();

    let mut w: GLfloat;
    w = (call.arg(4)).to_f32().unwrap();

//not found in gl!    unsafe { gl::VertexStream4fATI(stream, x, y, z, w) };
}

pub fn retrace_glVertexStream4fvATI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut stream: GLenum;
    stream = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let coords: &mut [GLfloat];
    coords = _allocator.alloc_array::<GLfloat>(&call.arg(1));
    let _a_GLfloat195_0 = (call.arg(1)).to_array();
    if let Some(_a_GLfloat195_0) = _a_GLfloat195_0 {
        for _jGLfloat195 in 0.._a_GLfloat195_0.values.len() {
    coords[_jGLfloat195] = (*_a_GLfloat195_0.values[_jGLfloat195]).to_f32().unwrap();
        }
    }
    let coords = coords.as_mut_ptr();

//not found in gl!    unsafe { gl::VertexStream4fvATI(stream, coords) };
}

pub fn retrace_glVertexStream4dATI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut stream: GLenum;
    stream = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut x: GLdouble;
    x = (call.arg(1)).to_f64().unwrap();

    let mut y: GLdouble;
    y = (call.arg(2)).to_f64().unwrap();

    let mut z: GLdouble;
    z = (call.arg(3)).to_f64().unwrap();

    let mut w: GLdouble;
    w = (call.arg(4)).to_f64().unwrap();

//not found in gl!    unsafe { gl::VertexStream4dATI(stream, x, y, z, w) };
}

pub fn retrace_glVertexStream4dvATI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut stream: GLenum;
    stream = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let coords: &mut [GLdouble];
    coords = _allocator.alloc_array::<GLdouble>(&call.arg(1));
    let _a_GLdouble102_0 = (call.arg(1)).to_array();
    if let Some(_a_GLdouble102_0) = _a_GLdouble102_0 {
        for _jGLdouble102 in 0.._a_GLdouble102_0.values.len() {
    coords[_jGLdouble102] = (*_a_GLdouble102_0.values[_jGLdouble102]).to_f64().unwrap();
        }
    }
    let coords = coords.as_mut_ptr();

//not found in gl!    unsafe { gl::VertexStream4dvATI(stream, coords) };
}

pub fn retrace_glNormalStream3bATI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut stream: GLenum;
    stream = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut nx: GLbyte;
    nx = (call.arg(1)).to_i32().unwrap();

    let mut ny: GLbyte;
    ny = (call.arg(2)).to_i32().unwrap();

    let mut nz: GLbyte;
    nz = (call.arg(3)).to_i32().unwrap();

//not found in gl!    unsafe { gl::NormalStream3bATI(stream, nx, ny, nz) };
}

pub fn retrace_glNormalStream3bvATI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut stream: GLenum;
    stream = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let coords: &mut [GLbyte];
    coords = _allocator.alloc_array::<GLbyte>(&call.arg(1));
    let _a_GLbyte11_0 = (call.arg(1)).to_array();
    if let Some(_a_GLbyte11_0) = _a_GLbyte11_0 {
        for _jGLbyte11 in 0.._a_GLbyte11_0.values.len() {
    coords[_jGLbyte11] = (*_a_GLbyte11_0.values[_jGLbyte11]).to_i32().unwrap();
        }
    }
    let coords = coords.as_mut_ptr();

//not found in gl!    unsafe { gl::NormalStream3bvATI(stream, coords) };
}

pub fn retrace_glNormalStream3sATI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut stream: GLenum;
    stream = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut nx: GLshort;
    nx = (call.arg(1)).to_i32().unwrap();

    let mut ny: GLshort;
    ny = (call.arg(2)).to_i32().unwrap();

    let mut nz: GLshort;
    nz = (call.arg(3)).to_i32().unwrap();

//not found in gl!    unsafe { gl::NormalStream3sATI(stream, nx, ny, nz) };
}

pub fn retrace_glNormalStream3svATI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut stream: GLenum;
    stream = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let coords: &mut [GLshort];
    coords = _allocator.alloc_array::<GLshort>(&call.arg(1));
    let _a_GLshort39_0 = (call.arg(1)).to_array();
    if let Some(_a_GLshort39_0) = _a_GLshort39_0 {
        for _jGLshort39 in 0.._a_GLshort39_0.values.len() {
    coords[_jGLshort39] = (*_a_GLshort39_0.values[_jGLshort39]).to_i32().unwrap();
        }
    }
    let coords = coords.as_mut_ptr();

//not found in gl!    unsafe { gl::NormalStream3svATI(stream, coords) };
}

pub fn retrace_glNormalStream3iATI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut stream: GLenum;
    stream = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut nx: GLint;
    nx = (call.arg(1)).to_i32().unwrap();

    let mut ny: GLint;
    ny = (call.arg(2)).to_i32().unwrap();

    let mut nz: GLint;
    nz = (call.arg(3)).to_i32().unwrap();

//not found in gl!    unsafe { gl::NormalStream3iATI(stream, nx, ny, nz) };
}

pub fn retrace_glNormalStream3ivATI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut stream: GLenum;
    stream = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let coords: &mut [GLint];
    coords = _allocator.alloc_array::<GLint>(&call.arg(1));
    let _a_GLint218_0 = (call.arg(1)).to_array();
    if let Some(_a_GLint218_0) = _a_GLint218_0 {
        for _jGLint218 in 0.._a_GLint218_0.values.len() {
    coords[_jGLint218] = (*_a_GLint218_0.values[_jGLint218]).to_i32().unwrap();
        }
    }
    let coords = coords.as_mut_ptr();

//not found in gl!    unsafe { gl::NormalStream3ivATI(stream, coords) };
}

pub fn retrace_glNormalStream3fATI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut stream: GLenum;
    stream = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut nx: GLfloat;
    nx = (call.arg(1)).to_f32().unwrap();

    let mut ny: GLfloat;
    ny = (call.arg(2)).to_f32().unwrap();

    let mut nz: GLfloat;
    nz = (call.arg(3)).to_f32().unwrap();

//not found in gl!    unsafe { gl::NormalStream3fATI(stream, nx, ny, nz) };
}

pub fn retrace_glNormalStream3fvATI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut stream: GLenum;
    stream = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let coords: &mut [GLfloat];
    coords = _allocator.alloc_array::<GLfloat>(&call.arg(1));
    let _a_GLfloat196_0 = (call.arg(1)).to_array();
    if let Some(_a_GLfloat196_0) = _a_GLfloat196_0 {
        for _jGLfloat196 in 0.._a_GLfloat196_0.values.len() {
    coords[_jGLfloat196] = (*_a_GLfloat196_0.values[_jGLfloat196]).to_f32().unwrap();
        }
    }
    let coords = coords.as_mut_ptr();

//not found in gl!    unsafe { gl::NormalStream3fvATI(stream, coords) };
}

pub fn retrace_glNormalStream3dATI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut stream: GLenum;
    stream = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut nx: GLdouble;
    nx = (call.arg(1)).to_f64().unwrap();

    let mut ny: GLdouble;
    ny = (call.arg(2)).to_f64().unwrap();

    let mut nz: GLdouble;
    nz = (call.arg(3)).to_f64().unwrap();

//not found in gl!    unsafe { gl::NormalStream3dATI(stream, nx, ny, nz) };
}

pub fn retrace_glNormalStream3dvATI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut stream: GLenum;
    stream = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let coords: &mut [GLdouble];
    coords = _allocator.alloc_array::<GLdouble>(&call.arg(1));
    let _a_GLdouble103_0 = (call.arg(1)).to_array();
    if let Some(_a_GLdouble103_0) = _a_GLdouble103_0 {
        for _jGLdouble103 in 0.._a_GLdouble103_0.values.len() {
    coords[_jGLdouble103] = (*_a_GLdouble103_0.values[_jGLdouble103]).to_f64().unwrap();
        }
    }
    let coords = coords.as_mut_ptr();

//not found in gl!    unsafe { gl::NormalStream3dvATI(stream, coords) };
}

pub fn retrace_glClientActiveVertexStreamATI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut stream: GLenum;
    stream = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::ClientActiveVertexStreamATI(stream) };
}

pub fn retrace_glVertexBlendEnviATI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut pname: GLenum;
    pname = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut param: GLint;
    param = (call.arg(1)).to_i32().unwrap();

//not found in gl!    unsafe { gl::VertexBlendEnviATI(pname, param) };
}

pub fn retrace_glVertexBlendEnvfATI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut pname: GLenum;
    pname = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut param: GLfloat;
    param = (call.arg(1)).to_f32().unwrap();

//not found in gl!    unsafe { gl::VertexBlendEnvfATI(pname, param) };
}

pub fn retrace_glDrawArraysInstancedBaseInstanceEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut first: GLint;
    first = (call.arg(1)).to_i32().unwrap();

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let mut instancecount: GLsizei;
    instancecount = (call.arg(3)).to_i32().unwrap();

    let mut baseinstance: GLuint;
    baseinstance = (call.arg(4)).to_u32().unwrap();

//not found in gl!    unsafe { gl::DrawArraysInstancedBaseInstanceEXT(mode, first, count, instancecount, baseinstance) };
}

pub fn retrace_glDrawElementsInstancedBaseInstanceEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let indices: &mut [GLc_void];
            indices = (call.arg(3)).to_pointer().unwrap() as *mut c_void;

    let mut instancecount: GLsizei;
    instancecount = (call.arg(4)).to_i32().unwrap();

    let mut baseinstance: GLuint;
    baseinstance = (call.arg(5)).to_u32().unwrap();

//not found in gl!    unsafe { gl::DrawElementsInstancedBaseInstanceEXT(mode, count, _type, indices, instancecount, baseinstance) };
}

pub fn retrace_glDrawElementsInstancedBaseVertexBaseInstanceEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let indices: &mut [GLc_void];
            indices = (call.arg(3)).to_pointer().unwrap() as *mut c_void;

    let mut instancecount: GLsizei;
    instancecount = (call.arg(4)).to_i32().unwrap();

    let mut basevertex: GLint;
    basevertex = (call.arg(5)).to_i32().unwrap();

    let mut baseinstance: GLuint;
    baseinstance = (call.arg(6)).to_u32().unwrap();

//not found in gl!    unsafe { gl::DrawElementsInstancedBaseVertexBaseInstanceEXT(mode, count, _type, indices, instancecount, basevertex, baseinstance) };
}

pub fn retrace_glUniformBufferEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut buffer: GLuint;
    buffer = (call.arg(2)).to_u32().unwrap();
    buffer = self._buffer_map[buffer];

//not found in gl!    unsafe { gl::UniformBufferEXT(program, location, buffer) };
}

pub fn retrace_glGetUniformBufferSizeEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

//not found in gl!    let _result = unsafe { gl::GetUniformBufferSizeEXT(program, location) };

}

pub fn retrace_glGetUniformOffsetEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

//not found in gl!    let _result = unsafe { gl::GetUniformOffsetEXT(program, location) };

}

pub fn retrace_glBlendColorEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut red: GLfloat;
    red = (call.arg(0)).to_f32().unwrap();

    let mut green: GLfloat;
    green = (call.arg(1)).to_f32().unwrap();

    let mut blue: GLfloat;
    blue = (call.arg(2)).to_f32().unwrap();

    let mut alpha: GLfloat;
    alpha = (call.arg(3)).to_f32().unwrap();

//not found in gl!    unsafe { gl::BlendColorEXT(red, green, blue, alpha) };
}

pub fn retrace_glBlendEquationSeparateEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut modeRGB: GLenum;
    modeRGB = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut modeAlpha: GLenum;
    modeAlpha = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::BlendEquationSeparateEXT(modeRGB, modeAlpha) };
}

pub fn retrace_glBindFragDataLocationIndexedEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut colorNumber: GLuint;
    colorNumber = (call.arg(1)).to_u32().unwrap();

    let mut index: GLuint;
    index = (call.arg(2)).to_u32().unwrap();

    let name: &mut [GLchar];
    name = (call.arg(3)).to_string().unwrap();

//not found in gl!    unsafe { gl::BindFragDataLocationIndexedEXT(program, colorNumber, index, name) };
}

pub fn retrace_glBindFragDataLocationEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut color: GLuint;
    color = (call.arg(1)).to_u32().unwrap();

    let name: &mut [GLchar];
    name = (call.arg(2)).to_string().unwrap();

//not found in gl!    unsafe { gl::BindFragDataLocationEXT(program, color, name) };
}

pub fn retrace_glGetProgramResourceLocationIndexEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut programInterface: GLenum;
    programInterface = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let name: &mut [GLchar];
    name = (call.arg(2)).to_string().unwrap();

//not found in gl!    let _result = unsafe { gl::GetProgramResourceLocationIndexEXT(program, programInterface, name) };

    let _origResult: GLint;
    _origResult = (*call.ret).to_i32().unwrap();
    self._location_map[program][_origResult] = _result; 
}

pub fn retrace_glGetFragDataIndexEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let name: &mut [GLchar];
    name = (call.arg(1)).to_string().unwrap();

//not found in gl!    let _result = unsafe { gl::GetFragDataIndexEXT(program, name) };

}

pub fn retrace_glBlendFuncSeparateEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut sfactorRGB: GLenum;
    sfactorRGB = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut dfactorRGB: GLenum;
    dfactorRGB = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut sfactorAlpha: GLenum;
    sfactorAlpha = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut dfactorAlpha: GLenum;
    dfactorAlpha = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::BlendFuncSeparateEXT(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha) };
}

pub fn retrace_glBlendEquationEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::BlendEquationEXT(mode) };
}

pub fn retrace_glBufferStorageEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut size: GLsizeiptr;
    size = (call.arg(1)).to_i32().unwrap();

    let data: &mut [c_void];
    let data = (call.arg(2)).to_pointer().unwrap() as *mut c_void;

    let mut flags: GLbitfield;
    flags = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::BufferStorageEXT(target, size, data, flags) };
}

pub fn retrace_glClearTexImageEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut level: GLint;
    level = (call.arg(1)).to_i32().unwrap();

    let mut format: GLenum;
    format = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let data: &mut [GLc_void];
    let data = (call.arg(4)).to_pointer().unwrap() as *mut c_void;

//not found in gl!    unsafe { gl::ClearTexImageEXT(texture, level, format, _type, data) };
}

pub fn retrace_glClearTexSubImageEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut level: GLint;
    level = (call.arg(1)).to_i32().unwrap();

    let mut xoffset: GLint;
    xoffset = (call.arg(2)).to_i32().unwrap();

    let mut yoffset: GLint;
    yoffset = (call.arg(3)).to_i32().unwrap();

    let mut zoffset: GLint;
    zoffset = (call.arg(4)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(5)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(6)).to_i32().unwrap();

    let mut depth: GLsizei;
    depth = (call.arg(7)).to_i32().unwrap();

    let mut format: GLenum;
    format = (call.arg(8)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(9)).to_u32().unwrap().try_into().unwrap();

    let data: &mut [GLc_void];
    let data = (call.arg(10)).to_pointer().unwrap() as *mut c_void;

//not found in gl!    unsafe { gl::ClearTexSubImageEXT(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, _type, data) };
}

pub fn retrace_glClipControlEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut origin: GLenum;
    origin = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut depth: GLenum;
    depth = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::ClipControlEXT(origin, depth) };
}

pub fn retrace_glColorSubTableEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut start: GLsizei;
    start = (call.arg(1)).to_i32().unwrap();

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let mut format: GLenum;
    format = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(4)).to_u32().unwrap().try_into().unwrap();

    let data: &mut [GLc_void];
    let data = (call.arg(5)).to_pointer().unwrap() as *mut c_void;

//not found in gl!    unsafe { gl::ColorSubTableEXT(target, start, count, format, _type, data) };
}

pub fn retrace_glCopyColorSubTableEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut start: GLsizei;
    start = (call.arg(1)).to_i32().unwrap();

    let mut x: GLint;
    x = (call.arg(2)).to_i32().unwrap();

    let mut y: GLint;
    y = (call.arg(3)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(4)).to_i32().unwrap();

//not found in gl!    unsafe { gl::CopyColorSubTableEXT(target, start, x, y, width) };
}

pub fn retrace_glLockArraysEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut first: GLint;
    first = (call.arg(0)).to_i32().unwrap();

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

//not found in gl!    unsafe { gl::LockArraysEXT(first, count) };
}

pub fn retrace_glUnlockArraysEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
//not found in gl!    unsafe { gl::UnlockArraysEXT() };
}

pub fn retrace_glConvolutionFilter1DEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut internalformat: GLenum;
    internalformat = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut width: GLsizei;
    width = (call.arg(2)).to_i32().unwrap();

    let mut format: GLenum;
    format = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(4)).to_u32().unwrap().try_into().unwrap();

    let image: &mut [GLc_void];
    let image = (call.arg(5)).to_pointer().unwrap() as *mut c_void;

//not found in gl!    unsafe { gl::ConvolutionFilter1DEXT(target, internalformat, width, format, _type, image) };
}

pub fn retrace_glConvolutionFilter2DEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut internalformat: GLenum;
    internalformat = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut width: GLsizei;
    width = (call.arg(2)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(3)).to_i32().unwrap();

    let mut format: GLenum;
    format = (call.arg(4)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(5)).to_u32().unwrap().try_into().unwrap();

    let image: &mut [GLc_void];
    let image = (call.arg(6)).to_pointer().unwrap() as *mut c_void;

//not found in gl!    unsafe { gl::ConvolutionFilter2DEXT(target, internalformat, width, height, format, _type, image) };
}

pub fn retrace_glConvolutionParameterfEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut params: GLfloat;
    params = (call.arg(2)).to_f32().unwrap();

//not found in gl!    unsafe { gl::ConvolutionParameterfEXT(target, pname, params) };
}

pub fn retrace_glConvolutionParameterfvEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLfloat];
    params = _allocator.alloc_array::<GLfloat>(&call.arg(2));
    let _a_GLfloat197_0 = (call.arg(2)).to_array();
    if let Some(_a_GLfloat197_0) = _a_GLfloat197_0 {
        for _jGLfloat197 in 0.._a_GLfloat197_0.values.len() {
    params[_jGLfloat197] = (*_a_GLfloat197_0.values[_jGLfloat197]).to_f32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::ConvolutionParameterfvEXT(target, pname, params) };
}

pub fn retrace_glConvolutionParameteriEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut params: GLint;
    params = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::ConvolutionParameteriEXT(target, pname, params) };
}

pub fn retrace_glConvolutionParameterivEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLint];
    params = _allocator.alloc_array::<GLint>(&call.arg(2));
    let _a_GLint219_0 = (call.arg(2)).to_array();
    if let Some(_a_GLint219_0) = _a_GLint219_0 {
        for _jGLint219 in 0.._a_GLint219_0.values.len() {
    params[_jGLint219] = (*_a_GLint219_0.values[_jGLint219]).to_i32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::ConvolutionParameterivEXT(target, pname, params) };
}

pub fn retrace_glCopyConvolutionFilter1DEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut internalformat: GLenum;
    internalformat = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut x: GLint;
    x = (call.arg(2)).to_i32().unwrap();

    let mut y: GLint;
    y = (call.arg(3)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(4)).to_i32().unwrap();

//not found in gl!    unsafe { gl::CopyConvolutionFilter1DEXT(target, internalformat, x, y, width) };
}

pub fn retrace_glCopyConvolutionFilter2DEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut internalformat: GLenum;
    internalformat = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut x: GLint;
    x = (call.arg(2)).to_i32().unwrap();

    let mut y: GLint;
    y = (call.arg(3)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(4)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(5)).to_i32().unwrap();

//not found in gl!    unsafe { gl::CopyConvolutionFilter2DEXT(target, internalformat, x, y, width, height) };
}

pub fn retrace_glGetConvolutionFilterEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut format: GLenum;
    format = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let image: &mut [GLc_void];
    let image = (call.arg(3)).to_pointer();

    let _pack_buffer = 0;
    if self.context.features("pixel_buffer_object") {
//not found in gl!        unsafe { gl::GetIntegerv(gl::PIXEL_PACK_BUFFER_BINDING, &_pack_buffer) };
    }
     let buffer = Vec::<u8>::new();
    if _pack_buffer != 0 {
    return;
    }
//not found in gl!    unsafe { gl::GetConvolutionFilterEXT(target, format, _type, image) };
}

pub fn retrace_glGetSeparableFilterEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut format: GLenum;
    format = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let row: &mut [GLc_void];
    let row = (call.arg(3)).to_pointer();

    let column: &mut [GLc_void];
    let column = (call.arg(4)).to_pointer();

    let span: &mut [GLc_void];
    let span = (call.arg(5)).to_pointer();

    let _pack_buffer = 0;
    if self.context.features("pixel_buffer_object") {
//not found in gl!        unsafe { gl::GetIntegerv(gl::PIXEL_PACK_BUFFER_BINDING, &_pack_buffer) };
    }
     let buffer = Vec::<u8>::new();
    if _pack_buffer != 0 {
    return;
    }
//not found in gl!    unsafe { gl::GetSeparableFilterEXT(target, format, _type, row, column, span) };
}

pub fn retrace_glSeparableFilter2DEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut internalformat: GLenum;
    internalformat = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut width: GLsizei;
    width = (call.arg(2)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(3)).to_i32().unwrap();

    let mut format: GLenum;
    format = (call.arg(4)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(5)).to_u32().unwrap().try_into().unwrap();

    let row: &mut [GLc_void];
    let row = (call.arg(6)).to_pointer().unwrap() as *mut c_void;

    let column: &mut [GLc_void];
    let column = (call.arg(7)).to_pointer().unwrap() as *mut c_void;

//not found in gl!    unsafe { gl::SeparableFilter2DEXT(target, internalformat, width, height, format, _type, row, column) };
}

pub fn retrace_glTangent3bEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut tx: GLbyte;
    tx = (call.arg(0)).to_i32().unwrap();

    let mut ty: GLbyte;
    ty = (call.arg(1)).to_i32().unwrap();

    let mut tz: GLbyte;
    tz = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::Tangent3bEXT(tx, ty, tz) };
}

pub fn retrace_glTangent3bvEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLbyte];
    v = _allocator.alloc_array::<GLbyte>(&call.arg(0));
    let _a_GLbyte12_0 = (call.arg(0)).to_array();
    if let Some(_a_GLbyte12_0) = _a_GLbyte12_0 {
        for _jGLbyte12 in 0.._a_GLbyte12_0.values.len() {
    v[_jGLbyte12] = (*_a_GLbyte12_0.values[_jGLbyte12]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::Tangent3bvEXT(v) };
}

pub fn retrace_glTangent3dEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut tx: GLdouble;
    tx = (call.arg(0)).to_f64().unwrap();

    let mut ty: GLdouble;
    ty = (call.arg(1)).to_f64().unwrap();

    let mut tz: GLdouble;
    tz = (call.arg(2)).to_f64().unwrap();

//not found in gl!    unsafe { gl::Tangent3dEXT(tx, ty, tz) };
}

pub fn retrace_glTangent3dvEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLdouble];
    v = _allocator.alloc_array::<GLdouble>(&call.arg(0));
    let _a_GLdouble104_0 = (call.arg(0)).to_array();
    if let Some(_a_GLdouble104_0) = _a_GLdouble104_0 {
        for _jGLdouble104 in 0.._a_GLdouble104_0.values.len() {
    v[_jGLdouble104] = (*_a_GLdouble104_0.values[_jGLdouble104]).to_f64().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::Tangent3dvEXT(v) };
}

pub fn retrace_glTangent3fEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut tx: GLfloat;
    tx = (call.arg(0)).to_f32().unwrap();

    let mut ty: GLfloat;
    ty = (call.arg(1)).to_f32().unwrap();

    let mut tz: GLfloat;
    tz = (call.arg(2)).to_f32().unwrap();

//not found in gl!    unsafe { gl::Tangent3fEXT(tx, ty, tz) };
}

pub fn retrace_glTangent3fvEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLfloat];
    v = _allocator.alloc_array::<GLfloat>(&call.arg(0));
    let _a_GLfloat198_0 = (call.arg(0)).to_array();
    if let Some(_a_GLfloat198_0) = _a_GLfloat198_0 {
        for _jGLfloat198 in 0.._a_GLfloat198_0.values.len() {
    v[_jGLfloat198] = (*_a_GLfloat198_0.values[_jGLfloat198]).to_f32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::Tangent3fvEXT(v) };
}

pub fn retrace_glTangent3iEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut tx: GLint;
    tx = (call.arg(0)).to_i32().unwrap();

    let mut ty: GLint;
    ty = (call.arg(1)).to_i32().unwrap();

    let mut tz: GLint;
    tz = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::Tangent3iEXT(tx, ty, tz) };
}

pub fn retrace_glTangent3ivEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLint];
    v = _allocator.alloc_array::<GLint>(&call.arg(0));
    let _a_GLint220_0 = (call.arg(0)).to_array();
    if let Some(_a_GLint220_0) = _a_GLint220_0 {
        for _jGLint220 in 0.._a_GLint220_0.values.len() {
    v[_jGLint220] = (*_a_GLint220_0.values[_jGLint220]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::Tangent3ivEXT(v) };
}

pub fn retrace_glTangent3sEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut tx: GLshort;
    tx = (call.arg(0)).to_i32().unwrap();

    let mut ty: GLshort;
    ty = (call.arg(1)).to_i32().unwrap();

    let mut tz: GLshort;
    tz = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::Tangent3sEXT(tx, ty, tz) };
}

pub fn retrace_glTangent3svEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLshort];
    v = _allocator.alloc_array::<GLshort>(&call.arg(0));
    let _a_GLshort40_0 = (call.arg(0)).to_array();
    if let Some(_a_GLshort40_0) = _a_GLshort40_0 {
        for _jGLshort40 in 0.._a_GLshort40_0.values.len() {
    v[_jGLshort40] = (*_a_GLshort40_0.values[_jGLshort40]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::Tangent3svEXT(v) };
}

pub fn retrace_glBinormal3bEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut bx: GLbyte;
    bx = (call.arg(0)).to_i32().unwrap();

    let mut by: GLbyte;
    by = (call.arg(1)).to_i32().unwrap();

    let mut bz: GLbyte;
    bz = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::Binormal3bEXT(bx, by, bz) };
}

pub fn retrace_glBinormal3bvEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLbyte];
    v = _allocator.alloc_array::<GLbyte>(&call.arg(0));
    let _a_GLbyte13_0 = (call.arg(0)).to_array();
    if let Some(_a_GLbyte13_0) = _a_GLbyte13_0 {
        for _jGLbyte13 in 0.._a_GLbyte13_0.values.len() {
    v[_jGLbyte13] = (*_a_GLbyte13_0.values[_jGLbyte13]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::Binormal3bvEXT(v) };
}

pub fn retrace_glBinormal3dEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut bx: GLdouble;
    bx = (call.arg(0)).to_f64().unwrap();

    let mut by: GLdouble;
    by = (call.arg(1)).to_f64().unwrap();

    let mut bz: GLdouble;
    bz = (call.arg(2)).to_f64().unwrap();

//not found in gl!    unsafe { gl::Binormal3dEXT(bx, by, bz) };
}

pub fn retrace_glBinormal3dvEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLdouble];
    v = _allocator.alloc_array::<GLdouble>(&call.arg(0));
    let _a_GLdouble105_0 = (call.arg(0)).to_array();
    if let Some(_a_GLdouble105_0) = _a_GLdouble105_0 {
        for _jGLdouble105 in 0.._a_GLdouble105_0.values.len() {
    v[_jGLdouble105] = (*_a_GLdouble105_0.values[_jGLdouble105]).to_f64().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::Binormal3dvEXT(v) };
}

pub fn retrace_glBinormal3fEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut bx: GLfloat;
    bx = (call.arg(0)).to_f32().unwrap();

    let mut by: GLfloat;
    by = (call.arg(1)).to_f32().unwrap();

    let mut bz: GLfloat;
    bz = (call.arg(2)).to_f32().unwrap();

//not found in gl!    unsafe { gl::Binormal3fEXT(bx, by, bz) };
}

pub fn retrace_glBinormal3fvEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLfloat];
    v = _allocator.alloc_array::<GLfloat>(&call.arg(0));
    let _a_GLfloat199_0 = (call.arg(0)).to_array();
    if let Some(_a_GLfloat199_0) = _a_GLfloat199_0 {
        for _jGLfloat199 in 0.._a_GLfloat199_0.values.len() {
    v[_jGLfloat199] = (*_a_GLfloat199_0.values[_jGLfloat199]).to_f32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::Binormal3fvEXT(v) };
}

pub fn retrace_glBinormal3iEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut bx: GLint;
    bx = (call.arg(0)).to_i32().unwrap();

    let mut by: GLint;
    by = (call.arg(1)).to_i32().unwrap();

    let mut bz: GLint;
    bz = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::Binormal3iEXT(bx, by, bz) };
}

pub fn retrace_glBinormal3ivEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLint];
    v = _allocator.alloc_array::<GLint>(&call.arg(0));
    let _a_GLint221_0 = (call.arg(0)).to_array();
    if let Some(_a_GLint221_0) = _a_GLint221_0 {
        for _jGLint221 in 0.._a_GLint221_0.values.len() {
    v[_jGLint221] = (*_a_GLint221_0.values[_jGLint221]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::Binormal3ivEXT(v) };
}

pub fn retrace_glBinormal3sEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut bx: GLshort;
    bx = (call.arg(0)).to_i32().unwrap();

    let mut by: GLshort;
    by = (call.arg(1)).to_i32().unwrap();

    let mut bz: GLshort;
    bz = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::Binormal3sEXT(bx, by, bz) };
}

pub fn retrace_glBinormal3svEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLshort];
    v = _allocator.alloc_array::<GLshort>(&call.arg(0));
    let _a_GLshort41_0 = (call.arg(0)).to_array();
    if let Some(_a_GLshort41_0) = _a_GLshort41_0 {
        for _jGLshort41 in 0.._a_GLshort41_0.values.len() {
    v[_jGLshort41] = (*_a_GLshort41_0.values[_jGLshort41]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::Binormal3svEXT(v) };
}

pub fn retrace_glTangentPointerEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut _type: GLenum;
    _type = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut stride: GLsizei;
    stride = (call.arg(1)).to_i32().unwrap();

    let pointer: &mut [GLc_void];
//FIXME    memset(&pointer, 0, sizeof pointer); 

    if (1) {
    }
//not found in gl!    unsafe { gl::TangentPointerEXT(_type, stride, pointer) };
}

pub fn retrace_glBinormalPointerEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut _type: GLenum;
    _type = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut stride: GLsizei;
    stride = (call.arg(1)).to_i32().unwrap();

    let pointer: &mut [GLc_void];
//FIXME    memset(&pointer, 0, sizeof pointer); 

    if (1) {
    }
//not found in gl!    unsafe { gl::BinormalPointerEXT(_type, stride, pointer) };
}

pub fn retrace_glCopyImageSubDataEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut srcName: GLuint;
    srcName = (call.arg(0)).to_u32().unwrap();
    srcName = self._texture_map[srcName];

    let mut srcTarget: GLenum;
    srcTarget = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut srcLevel: GLint;
    srcLevel = (call.arg(2)).to_i32().unwrap();

    let mut srcX: GLint;
    srcX = (call.arg(3)).to_i32().unwrap();

    let mut srcY: GLint;
    srcY = (call.arg(4)).to_i32().unwrap();

    let mut srcZ: GLint;
    srcZ = (call.arg(5)).to_i32().unwrap();

    let mut dstName: GLuint;
    dstName = (call.arg(6)).to_u32().unwrap();
    dstName = self._texture_map[dstName];

    let mut dstTarget: GLenum;
    dstTarget = (call.arg(7)).to_u32().unwrap().try_into().unwrap();

    let mut dstLevel: GLint;
    dstLevel = (call.arg(8)).to_i32().unwrap();

    let mut dstX: GLint;
    dstX = (call.arg(9)).to_i32().unwrap();

    let mut dstY: GLint;
    dstY = (call.arg(10)).to_i32().unwrap();

    let mut dstZ: GLint;
    dstZ = (call.arg(11)).to_i32().unwrap();

    let mut srcWidth: GLsizei;
    srcWidth = (call.arg(12)).to_i32().unwrap();

    let mut srcHeight: GLsizei;
    srcHeight = (call.arg(13)).to_i32().unwrap();

    let mut srcDepth: GLsizei;
    srcDepth = (call.arg(14)).to_i32().unwrap();

//not found in gl!    unsafe { gl::CopyImageSubDataEXT(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth) };
}

pub fn retrace_glCopyTexImage1DEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(1)).to_i32().unwrap();

    let mut internalformat: GLenum;
    internalformat = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut x: GLint;
    x = (call.arg(3)).to_i32().unwrap();

    let mut y: GLint;
    y = (call.arg(4)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(5)).to_i32().unwrap();

    let mut border: GLint;
    border = (call.arg(6)).to_i32().unwrap();

//not found in gl!    unsafe { gl::CopyTexImage1DEXT(target, level, internalformat, x, y, width, border) };
}

pub fn retrace_glCopyTexImage2DEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(1)).to_i32().unwrap();

    let mut internalformat: GLenum;
    internalformat = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut x: GLint;
    x = (call.arg(3)).to_i32().unwrap();

    let mut y: GLint;
    y = (call.arg(4)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(5)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(6)).to_i32().unwrap();

    let mut border: GLint;
    border = (call.arg(7)).to_i32().unwrap();

//not found in gl!    unsafe { gl::CopyTexImage2DEXT(target, level, internalformat, x, y, width, height, border) };
}

pub fn retrace_glCopyTexSubImage1DEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(1)).to_i32().unwrap();

    let mut xoffset: GLint;
    xoffset = (call.arg(2)).to_i32().unwrap();

    let mut x: GLint;
    x = (call.arg(3)).to_i32().unwrap();

    let mut y: GLint;
    y = (call.arg(4)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(5)).to_i32().unwrap();

//not found in gl!    unsafe { gl::CopyTexSubImage1DEXT(target, level, xoffset, x, y, width) };
}

pub fn retrace_glCopyTexSubImage2DEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(1)).to_i32().unwrap();

    let mut xoffset: GLint;
    xoffset = (call.arg(2)).to_i32().unwrap();

    let mut yoffset: GLint;
    yoffset = (call.arg(3)).to_i32().unwrap();

    let mut x: GLint;
    x = (call.arg(4)).to_i32().unwrap();

    let mut y: GLint;
    y = (call.arg(5)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(6)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(7)).to_i32().unwrap();

//not found in gl!    unsafe { gl::CopyTexSubImage2DEXT(target, level, xoffset, yoffset, x, y, width, height) };
}

pub fn retrace_glCopyTexSubImage3DEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(1)).to_i32().unwrap();

    let mut xoffset: GLint;
    xoffset = (call.arg(2)).to_i32().unwrap();

    let mut yoffset: GLint;
    yoffset = (call.arg(3)).to_i32().unwrap();

    let mut zoffset: GLint;
    zoffset = (call.arg(4)).to_i32().unwrap();

    let mut x: GLint;
    x = (call.arg(5)).to_i32().unwrap();

    let mut y: GLint;
    y = (call.arg(6)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(7)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(8)).to_i32().unwrap();

//not found in gl!    unsafe { gl::CopyTexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, x, y, width, height) };
}

pub fn retrace_glCullParameterdvEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut pname: GLenum;
    pname = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLdouble];
    params = _allocator.alloc_array::<GLdouble>(&call.arg(1));
    let _a_GLdouble106_0 = (call.arg(1)).to_array();
    if let Some(_a_GLdouble106_0) = _a_GLdouble106_0 {
        for _jGLdouble106 in 0.._a_GLdouble106_0.values.len() {
    params[_jGLdouble106] = (*_a_GLdouble106_0.values[_jGLdouble106]).to_f64().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::CullParameterdvEXT(pname, params) };
}

pub fn retrace_glCullParameterfvEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut pname: GLenum;
    pname = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLfloat];
    params = _allocator.alloc_array::<GLfloat>(&call.arg(1));
    let _a_GLfloat200_0 = (call.arg(1)).to_array();
    if let Some(_a_GLfloat200_0) = _a_GLfloat200_0 {
        for _jGLfloat200 in 0.._a_GLfloat200_0.values.len() {
    params[_jGLfloat200] = (*_a_GLfloat200_0.values[_jGLfloat200]).to_f32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::CullParameterfvEXT(pname, params) };
}

pub fn retrace_glLabelObjectEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut _type: GLenum;
    _type = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut object: GLuint;
    object = (call.arg(1)).to_u32().unwrap();

    let mut length: GLsizei;
    length = (call.arg(2)).to_i32().unwrap();

    let label: &mut [GLchar];
    label = (call.arg(3)).to_string().unwrap();

//not found in gl!    unsafe { gl::LabelObjectEXT(_type, object, length, label) };
}

pub fn retrace_glInsertEventMarkerEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut length: GLsizei;
    length = (call.arg(0)).to_i32().unwrap();

    let marker: &mut [GLchar];
    marker = (call.arg(1)).to_string().unwrap();

//not found in gl!    unsafe { gl::InsertEventMarkerEXT(length, marker) };
}

pub fn retrace_glPushGroupMarkerEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut length: GLsizei;
    length = (call.arg(0)).to_i32().unwrap();

    let marker: &mut [GLchar];
    marker = (call.arg(1)).to_string().unwrap();

//not found in gl!    unsafe { gl::PushGroupMarkerEXT(length, marker) };
}

pub fn retrace_glPopGroupMarkerEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
//not found in gl!    unsafe { gl::PopGroupMarkerEXT() };
}

pub fn retrace_glDepthBoundsEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut zmin: GLclampd;
    zmin = (call.arg(0)).to_f64().unwrap();

    let mut zmax: GLclampd;
    zmax = (call.arg(1)).to_f64().unwrap();

//not found in gl!    unsafe { gl::DepthBoundsEXT(zmin, zmax) };
}

pub fn retrace_glBindMultiTextureEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texunit: GLenum;
    texunit = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut texture: GLuint;
    texture = (call.arg(2)).to_u32().unwrap();
    texture = self._texture_map[texture];

//not found in gl!    unsafe { gl::BindMultiTextureEXT(texunit, target, texture) };
}

pub fn retrace_glCheckNamedFramebufferStatusEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut framebuffer: GLuint;
    framebuffer = (call.arg(0)).to_u32().unwrap();
    framebuffer = self._framebuffer_map[framebuffer];

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    let _result = unsafe { gl::CheckNamedFramebufferStatusEXT(framebuffer, target) };

    let _origResult = call.ret.to_i32().unwrap();
}

pub fn retrace_glClearNamedBufferDataEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut buffer: GLuint;
    buffer = (call.arg(0)).to_u32().unwrap();
    buffer = self._buffer_map[buffer];

    let mut internalformat: GLenum;
    internalformat = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut format: GLenum;
    format = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let data: &mut [c_void];
    let data = (call.arg(4)).to_pointer().unwrap() as *mut c_void;

//not found in gl!    unsafe { gl::ClearNamedBufferDataEXT(buffer, internalformat, format, _type, data) };
}

pub fn retrace_glClearNamedBufferSubDataEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut buffer: GLuint;
    buffer = (call.arg(0)).to_u32().unwrap();
    buffer = self._buffer_map[buffer];

    let mut internalformat: GLenum;
    internalformat = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut offset: GLsizeiptr;
    offset = (call.arg(2)).to_i32().unwrap();

    let mut size: GLsizeiptr;
    size = (call.arg(3)).to_i32().unwrap();

    let mut format: GLenum;
    format = (call.arg(4)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(5)).to_u32().unwrap().try_into().unwrap();

    let data: &mut [c_void];
    let data = (call.arg(6)).to_pointer().unwrap() as *mut c_void;

//not found in gl!    unsafe { gl::ClearNamedBufferSubDataEXT(buffer, internalformat, offset, size, format, _type, data) };
}

pub fn retrace_glClientAttribDefaultEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mask: GLbitfield;
    mask = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::ClientAttribDefaultEXT(mask) };
}

pub fn retrace_glCompressedMultiTexImage1DEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texunit: GLenum;
    texunit = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(2)).to_i32().unwrap();

    let mut internalformat: GLenum;
    internalformat = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let mut width: GLsizei;
    width = (call.arg(4)).to_i32().unwrap();

    let mut border: GLint;
    border = (call.arg(5)).to_i32().unwrap();

    let mut imageSize: GLsizei;
    imageSize = (call.arg(6)).to_i32().unwrap();

    let bits: &mut [GLc_void];
    let bits = (call.arg(7)).to_pointer().unwrap() as *mut c_void;

//not found in gl!    unsafe { gl::CompressedMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, imageSize, bits) };
}

pub fn retrace_glCompressedMultiTexImage2DEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texunit: GLenum;
    texunit = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(2)).to_i32().unwrap();

    let mut internalformat: GLenum;
    internalformat = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let mut width: GLsizei;
    width = (call.arg(4)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(5)).to_i32().unwrap();

    let mut border: GLint;
    border = (call.arg(6)).to_i32().unwrap();

    let mut imageSize: GLsizei;
    imageSize = (call.arg(7)).to_i32().unwrap();

    let bits: &mut [GLc_void];
    let bits = (call.arg(8)).to_pointer().unwrap() as *mut c_void;

//not found in gl!    unsafe { gl::CompressedMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, imageSize, bits) };
}

pub fn retrace_glCompressedMultiTexImage3DEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texunit: GLenum;
    texunit = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(2)).to_i32().unwrap();

    let mut internalformat: GLenum;
    internalformat = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let mut width: GLsizei;
    width = (call.arg(4)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(5)).to_i32().unwrap();

    let mut depth: GLsizei;
    depth = (call.arg(6)).to_i32().unwrap();

    let mut border: GLint;
    border = (call.arg(7)).to_i32().unwrap();

    let mut imageSize: GLsizei;
    imageSize = (call.arg(8)).to_i32().unwrap();

    let bits: &mut [GLc_void];
    let bits = (call.arg(9)).to_pointer().unwrap() as *mut c_void;

//not found in gl!    unsafe { gl::CompressedMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, imageSize, bits) };
}

pub fn retrace_glCompressedMultiTexSubImage1DEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texunit: GLenum;
    texunit = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(2)).to_i32().unwrap();

    let mut xoffset: GLint;
    xoffset = (call.arg(3)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(4)).to_i32().unwrap();

    let mut format: GLenum;
    format = (call.arg(5)).to_u32().unwrap().try_into().unwrap();

    let mut imageSize: GLsizei;
    imageSize = (call.arg(6)).to_i32().unwrap();

    let bits: &mut [GLc_void];
    let bits = (call.arg(7)).to_pointer().unwrap() as *mut c_void;

//not found in gl!    unsafe { gl::CompressedMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, imageSize, bits) };
}

pub fn retrace_glCompressedMultiTexSubImage2DEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texunit: GLenum;
    texunit = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(2)).to_i32().unwrap();

    let mut xoffset: GLint;
    xoffset = (call.arg(3)).to_i32().unwrap();

    let mut yoffset: GLint;
    yoffset = (call.arg(4)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(5)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(6)).to_i32().unwrap();

    let mut format: GLenum;
    format = (call.arg(7)).to_u32().unwrap().try_into().unwrap();

    let mut imageSize: GLsizei;
    imageSize = (call.arg(8)).to_i32().unwrap();

    let bits: &mut [GLc_void];
    let bits = (call.arg(9)).to_pointer().unwrap() as *mut c_void;

//not found in gl!    unsafe { gl::CompressedMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, bits) };
}

pub fn retrace_glCompressedMultiTexSubImage3DEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texunit: GLenum;
    texunit = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(2)).to_i32().unwrap();

    let mut xoffset: GLint;
    xoffset = (call.arg(3)).to_i32().unwrap();

    let mut yoffset: GLint;
    yoffset = (call.arg(4)).to_i32().unwrap();

    let mut zoffset: GLint;
    zoffset = (call.arg(5)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(6)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(7)).to_i32().unwrap();

    let mut depth: GLsizei;
    depth = (call.arg(8)).to_i32().unwrap();

    let mut format: GLenum;
    format = (call.arg(9)).to_u32().unwrap().try_into().unwrap();

    let mut imageSize: GLsizei;
    imageSize = (call.arg(10)).to_i32().unwrap();

    let bits: &mut [GLc_void];
    let bits = (call.arg(11)).to_pointer().unwrap() as *mut c_void;

//not found in gl!    unsafe { gl::CompressedMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits) };
}

pub fn retrace_glCompressedTextureImage1DEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(2)).to_i32().unwrap();

    let mut internalformat: GLenum;
    internalformat = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let mut width: GLsizei;
    width = (call.arg(4)).to_i32().unwrap();

    let mut border: GLint;
    border = (call.arg(5)).to_i32().unwrap();

    let mut imageSize: GLsizei;
    imageSize = (call.arg(6)).to_i32().unwrap();

    let bits: &mut [GLc_void];
    let bits = (call.arg(7)).to_pointer().unwrap() as *mut c_void;

//not found in gl!    unsafe { gl::CompressedTextureImage1DEXT(texture, target, level, internalformat, width, border, imageSize, bits) };
}

pub fn retrace_glCompressedTextureImage2DEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(2)).to_i32().unwrap();

    let mut internalformat: GLenum;
    internalformat = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let mut width: GLsizei;
    width = (call.arg(4)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(5)).to_i32().unwrap();

    let mut border: GLint;
    border = (call.arg(6)).to_i32().unwrap();

    let mut imageSize: GLsizei;
    imageSize = (call.arg(7)).to_i32().unwrap();

    let bits: &mut [GLc_void];
    let bits = (call.arg(8)).to_pointer().unwrap() as *mut c_void;

//not found in gl!    unsafe { gl::CompressedTextureImage2DEXT(texture, target, level, internalformat, width, height, border, imageSize, bits) };
}

pub fn retrace_glCompressedTextureImage3DEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(2)).to_i32().unwrap();

    let mut internalformat: GLenum;
    internalformat = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let mut width: GLsizei;
    width = (call.arg(4)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(5)).to_i32().unwrap();

    let mut depth: GLsizei;
    depth = (call.arg(6)).to_i32().unwrap();

    let mut border: GLint;
    border = (call.arg(7)).to_i32().unwrap();

    let mut imageSize: GLsizei;
    imageSize = (call.arg(8)).to_i32().unwrap();

    let bits: &mut [GLc_void];
    let bits = (call.arg(9)).to_pointer().unwrap() as *mut c_void;

//not found in gl!    unsafe { gl::CompressedTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, imageSize, bits) };
}

pub fn retrace_glCompressedTextureSubImage1DEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(2)).to_i32().unwrap();

    let mut xoffset: GLint;
    xoffset = (call.arg(3)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(4)).to_i32().unwrap();

    let mut format: GLenum;
    format = (call.arg(5)).to_u32().unwrap().try_into().unwrap();

    let mut imageSize: GLsizei;
    imageSize = (call.arg(6)).to_i32().unwrap();

    let bits: &mut [GLc_void];
    let bits = (call.arg(7)).to_pointer().unwrap() as *mut c_void;

//not found in gl!    unsafe { gl::CompressedTextureSubImage1DEXT(texture, target, level, xoffset, width, format, imageSize, bits) };
}

pub fn retrace_glCompressedTextureSubImage2DEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(2)).to_i32().unwrap();

    let mut xoffset: GLint;
    xoffset = (call.arg(3)).to_i32().unwrap();

    let mut yoffset: GLint;
    yoffset = (call.arg(4)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(5)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(6)).to_i32().unwrap();

    let mut format: GLenum;
    format = (call.arg(7)).to_u32().unwrap().try_into().unwrap();

    let mut imageSize: GLsizei;
    imageSize = (call.arg(8)).to_i32().unwrap();

    let bits: &mut [GLc_void];
    let bits = (call.arg(9)).to_pointer().unwrap() as *mut c_void;

//not found in gl!    unsafe { gl::CompressedTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits) };
}

pub fn retrace_glCompressedTextureSubImage3DEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(2)).to_i32().unwrap();

    let mut xoffset: GLint;
    xoffset = (call.arg(3)).to_i32().unwrap();

    let mut yoffset: GLint;
    yoffset = (call.arg(4)).to_i32().unwrap();

    let mut zoffset: GLint;
    zoffset = (call.arg(5)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(6)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(7)).to_i32().unwrap();

    let mut depth: GLsizei;
    depth = (call.arg(8)).to_i32().unwrap();

    let mut format: GLenum;
    format = (call.arg(9)).to_u32().unwrap().try_into().unwrap();

    let mut imageSize: GLsizei;
    imageSize = (call.arg(10)).to_i32().unwrap();

    let bits: &mut [GLc_void];
    let bits = (call.arg(11)).to_pointer().unwrap() as *mut c_void;

//not found in gl!    unsafe { gl::CompressedTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits) };
}

pub fn retrace_glCopyMultiTexImage1DEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texunit: GLenum;
    texunit = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(2)).to_i32().unwrap();

    let mut internalformat: GLenum;
    internalformat = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let mut x: GLint;
    x = (call.arg(4)).to_i32().unwrap();

    let mut y: GLint;
    y = (call.arg(5)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(6)).to_i32().unwrap();

    let mut border: GLint;
    border = (call.arg(7)).to_i32().unwrap();

//not found in gl!    unsafe { gl::CopyMultiTexImage1DEXT(texunit, target, level, internalformat, x, y, width, border) };
}

pub fn retrace_glCopyMultiTexImage2DEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texunit: GLenum;
    texunit = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(2)).to_i32().unwrap();

    let mut internalformat: GLenum;
    internalformat = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let mut x: GLint;
    x = (call.arg(4)).to_i32().unwrap();

    let mut y: GLint;
    y = (call.arg(5)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(6)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(7)).to_i32().unwrap();

    let mut border: GLint;
    border = (call.arg(8)).to_i32().unwrap();

//not found in gl!    unsafe { gl::CopyMultiTexImage2DEXT(texunit, target, level, internalformat, x, y, width, height, border) };
}

pub fn retrace_glCopyMultiTexSubImage1DEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texunit: GLenum;
    texunit = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(2)).to_i32().unwrap();

    let mut xoffset: GLint;
    xoffset = (call.arg(3)).to_i32().unwrap();

    let mut x: GLint;
    x = (call.arg(4)).to_i32().unwrap();

    let mut y: GLint;
    y = (call.arg(5)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(6)).to_i32().unwrap();

//not found in gl!    unsafe { gl::CopyMultiTexSubImage1DEXT(texunit, target, level, xoffset, x, y, width) };
}

pub fn retrace_glCopyMultiTexSubImage2DEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texunit: GLenum;
    texunit = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(2)).to_i32().unwrap();

    let mut xoffset: GLint;
    xoffset = (call.arg(3)).to_i32().unwrap();

    let mut yoffset: GLint;
    yoffset = (call.arg(4)).to_i32().unwrap();

    let mut x: GLint;
    x = (call.arg(5)).to_i32().unwrap();

    let mut y: GLint;
    y = (call.arg(6)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(7)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(8)).to_i32().unwrap();

//not found in gl!    unsafe { gl::CopyMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, x, y, width, height) };
}

pub fn retrace_glCopyMultiTexSubImage3DEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texunit: GLenum;
    texunit = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(2)).to_i32().unwrap();

    let mut xoffset: GLint;
    xoffset = (call.arg(3)).to_i32().unwrap();

    let mut yoffset: GLint;
    yoffset = (call.arg(4)).to_i32().unwrap();

    let mut zoffset: GLint;
    zoffset = (call.arg(5)).to_i32().unwrap();

    let mut x: GLint;
    x = (call.arg(6)).to_i32().unwrap();

    let mut y: GLint;
    y = (call.arg(7)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(8)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(9)).to_i32().unwrap();

//not found in gl!    unsafe { gl::CopyMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, x, y, width, height) };
}

pub fn retrace_glCopyTextureImage1DEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(2)).to_i32().unwrap();

    let mut internalformat: GLenum;
    internalformat = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let mut x: GLint;
    x = (call.arg(4)).to_i32().unwrap();

    let mut y: GLint;
    y = (call.arg(5)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(6)).to_i32().unwrap();

    let mut border: GLint;
    border = (call.arg(7)).to_i32().unwrap();

//not found in gl!    unsafe { gl::CopyTextureImage1DEXT(texture, target, level, internalformat, x, y, width, border) };
}

pub fn retrace_glCopyTextureImage2DEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(2)).to_i32().unwrap();

    let mut internalformat: GLenum;
    internalformat = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let mut x: GLint;
    x = (call.arg(4)).to_i32().unwrap();

    let mut y: GLint;
    y = (call.arg(5)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(6)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(7)).to_i32().unwrap();

    let mut border: GLint;
    border = (call.arg(8)).to_i32().unwrap();

//not found in gl!    unsafe { gl::CopyTextureImage2DEXT(texture, target, level, internalformat, x, y, width, height, border) };
}

pub fn retrace_glCopyTextureSubImage1DEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(2)).to_i32().unwrap();

    let mut xoffset: GLint;
    xoffset = (call.arg(3)).to_i32().unwrap();

    let mut x: GLint;
    x = (call.arg(4)).to_i32().unwrap();

    let mut y: GLint;
    y = (call.arg(5)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(6)).to_i32().unwrap();

//not found in gl!    unsafe { gl::CopyTextureSubImage1DEXT(texture, target, level, xoffset, x, y, width) };
}

pub fn retrace_glCopyTextureSubImage2DEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(2)).to_i32().unwrap();

    let mut xoffset: GLint;
    xoffset = (call.arg(3)).to_i32().unwrap();

    let mut yoffset: GLint;
    yoffset = (call.arg(4)).to_i32().unwrap();

    let mut x: GLint;
    x = (call.arg(5)).to_i32().unwrap();

    let mut y: GLint;
    y = (call.arg(6)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(7)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(8)).to_i32().unwrap();

//not found in gl!    unsafe { gl::CopyTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, x, y, width, height) };
}

pub fn retrace_glCopyTextureSubImage3DEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(2)).to_i32().unwrap();

    let mut xoffset: GLint;
    xoffset = (call.arg(3)).to_i32().unwrap();

    let mut yoffset: GLint;
    yoffset = (call.arg(4)).to_i32().unwrap();

    let mut zoffset: GLint;
    zoffset = (call.arg(5)).to_i32().unwrap();

    let mut x: GLint;
    x = (call.arg(6)).to_i32().unwrap();

    let mut y: GLint;
    y = (call.arg(7)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(8)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(9)).to_i32().unwrap();

//not found in gl!    unsafe { gl::CopyTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, x, y, width, height) };
}

pub fn retrace_glDisableClientStateIndexedEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut array: GLenum;
    array = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut index: GLuint;
    index = (call.arg(1)).to_u32().unwrap();

//not found in gl!    unsafe { gl::DisableClientStateIndexedEXT(array, index) };
}

pub fn retrace_glDisableClientStateiEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut array: GLenum;
    array = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut index: GLuint;
    index = (call.arg(1)).to_u32().unwrap();

//not found in gl!    unsafe { gl::DisableClientStateiEXT(array, index) };
}

pub fn retrace_glDisableVertexArrayAttribEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut vaobj: GLuint;
    vaobj = (call.arg(0)).to_u32().unwrap();
    vaobj = self._array_map[DUMMY_CONTEXT][vaobj];

    let mut index: GLuint;
    index = (call.arg(1)).to_u32().unwrap();

//not found in gl!    unsafe { gl::DisableVertexArrayAttribEXT(vaobj, index) };
}

pub fn retrace_glDisableVertexArrayEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut vaobj: GLuint;
    vaobj = (call.arg(0)).to_u32().unwrap();
    vaobj = self._array_map[DUMMY_CONTEXT][vaobj];

    let mut array: GLenum;
    array = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::DisableVertexArrayEXT(vaobj, array) };
}

pub fn retrace_glEnableClientStateIndexedEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut array: GLenum;
    array = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut index: GLuint;
    index = (call.arg(1)).to_u32().unwrap();

//not found in gl!    unsafe { gl::EnableClientStateIndexedEXT(array, index) };
}

pub fn retrace_glEnableClientStateiEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut array: GLenum;
    array = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut index: GLuint;
    index = (call.arg(1)).to_u32().unwrap();

//not found in gl!    unsafe { gl::EnableClientStateiEXT(array, index) };
}

pub fn retrace_glEnableVertexArrayAttribEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut vaobj: GLuint;
    vaobj = (call.arg(0)).to_u32().unwrap();
    vaobj = self._array_map[DUMMY_CONTEXT][vaobj];

    let mut index: GLuint;
    index = (call.arg(1)).to_u32().unwrap();

//not found in gl!    unsafe { gl::EnableVertexArrayAttribEXT(vaobj, index) };
}

pub fn retrace_glEnableVertexArrayEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut vaobj: GLuint;
    vaobj = (call.arg(0)).to_u32().unwrap();
    vaobj = self._array_map[DUMMY_CONTEXT][vaobj];

    let mut array: GLenum;
    array = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::EnableVertexArrayEXT(vaobj, array) };
}

pub fn retrace_glFlushMappedNamedBufferRangeEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut buffer: GLuint;
    buffer = (call.arg(0)).to_u32().unwrap();
    buffer = self._buffer_map[buffer];

    let mut offset: GLintptr;
    offset = (call.arg(1)).to_i32().unwrap();

    let mut length: GLsizeiptr;
    length = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::FlushMappedNamedBufferRangeEXT(buffer, offset, length) };
}

pub fn retrace_glFramebufferDrawBufferEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut framebuffer: GLuint;
    framebuffer = (call.arg(0)).to_u32().unwrap();
    framebuffer = self._framebuffer_map[framebuffer];

    let mut mode: GLenum;
    mode = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::FramebufferDrawBufferEXT(framebuffer, mode) };
}

pub fn retrace_glFramebufferDrawBuffersEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut framebuffer: GLuint;
    framebuffer = (call.arg(0)).to_u32().unwrap();
    framebuffer = self._framebuffer_map[framebuffer];

    let mut n: GLsizei;
    n = (call.arg(1)).to_i32().unwrap();

    let bufs: &mut [GLenum];
    bufs = _allocator.alloc_array::<GLenum>(&call.arg(2));
    let _a_GLenum23_0 = (call.arg(2)).to_array();
    if let Some(_a_GLenum23_0) = _a_GLenum23_0 {
        for _jGLenum23 in 0.._a_GLenum23_0.values.len() {
    bufs[_jGLenum23] = (*_a_GLenum23_0.values[_jGLenum23]).to_u32().unwrap().try_into().unwrap();
        }
    }
    let bufs = bufs.as_mut_ptr();

//not found in gl!    unsafe { gl::FramebufferDrawBuffersEXT(framebuffer, n, bufs) };
}

pub fn retrace_glFramebufferReadBufferEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut framebuffer: GLuint;
    framebuffer = (call.arg(0)).to_u32().unwrap();
    framebuffer = self._framebuffer_map[framebuffer];

    let mut mode: GLenum;
    mode = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::FramebufferReadBufferEXT(framebuffer, mode) };
}

pub fn retrace_glGenerateMultiTexMipmapEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texunit: GLenum;
    texunit = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::GenerateMultiTexMipmapEXT(texunit, target) };
}

pub fn retrace_glGenerateTextureMipmapEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::GenerateTextureMipmapEXT(texture, target) };
}

pub fn retrace_glGetCompressedMultiTexImageEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texunit: GLenum;
    texunit = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut lod: GLint;
    lod = (call.arg(2)).to_i32().unwrap();

    let img: &mut [GLc_void];
    let img = (call.arg(3)).to_pointer();

    let _pack_buffer = 0;
    if self.context.features("pixel_buffer_object") {
//not found in gl!        unsafe { gl::GetIntegerv(gl::PIXEL_PACK_BUFFER_BINDING, &_pack_buffer) };
    }
     let buffer = Vec::<u8>::new();
    if _pack_buffer != 0 {
    return;
    }
//not found in gl!    unsafe { gl::GetCompressedMultiTexImageEXT(texunit, target, lod, img) };
}

pub fn retrace_glGetCompressedTextureImageEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut lod: GLint;
    lod = (call.arg(2)).to_i32().unwrap();

    let img: &mut [GLc_void];
    let img = (call.arg(3)).to_pointer();

    let _pack_buffer = 0;
    if self.context.features("pixel_buffer_object") {
//not found in gl!        unsafe { gl::GetIntegerv(gl::PIXEL_PACK_BUFFER_BINDING, &_pack_buffer) };
    }
     let buffer = Vec::<u8>::new();
    if _pack_buffer != 0 {
    return;
    }
//not found in gl!    unsafe { gl::GetCompressedTextureImageEXT(texture, target, lod, img) };
}

pub fn retrace_glGetMultiTexImageEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texunit: GLenum;
    texunit = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(2)).to_i32().unwrap();

    let mut format: GLenum;
    format = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(4)).to_u32().unwrap().try_into().unwrap();

    let pixels = (call.arg(5)).to_pointer();

    let _pack_buffer = 0;
    if self.context.features("pixel_buffer_object") {
//not found in gl!        unsafe { gl::GetIntegerv(gl::PIXEL_PACK_BUFFER_BINDING, &_pack_buffer) };
    }
     let buffer = Vec::<u8>::new();
    if _pack_buffer != 0 {
    return;
    }
//not found in gl!    unsafe { gl::GetMultiTexImageEXT(texunit, target, level, format, _type, pixels) };
}

pub fn retrace_glGetTextureImageEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(2)).to_i32().unwrap();

    let mut format: GLenum;
    format = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(4)).to_u32().unwrap().try_into().unwrap();

    let pixels = (call.arg(5)).to_pointer();

    let _pack_buffer = 0;
    if self.context.features("pixel_buffer_object") {
//not found in gl!        unsafe { gl::GetIntegerv(gl::PIXEL_PACK_BUFFER_BINDING, &_pack_buffer) };
    }
     let buffer = Vec::<u8>::new();
    if _pack_buffer != 0 {
    return;
    }
//not found in gl!    unsafe { gl::GetTextureImageEXT(texture, target, level, format, _type, pixels) };
}

pub fn retrace_glMapNamedBufferEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut buffer: GLuint;
    buffer = (call.arg(0)).to_u32().unwrap();
    buffer = self._buffer_map[buffer];

    let mut access: GLenum;
    access = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    let _result = unsafe { gl::MapNamedBufferEXT(buffer, access) };

    let length = 0;
//not found in gl!    unsafe { gl::GetNamedBufferParameterivEXT(buffer, gl::BUFFER_SIZE, &length) };
    region::add_region(call, (*call.ret).toUIntPtr(), _result, length);
}

pub fn retrace_glMapNamedBufferRangeEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut buffer: GLuint;
    buffer = (call.arg(0)).to_u32().unwrap();
    buffer = self._buffer_map[buffer];

    let mut offset: GLintptr;
    offset = (call.arg(1)).to_i32().unwrap();

    let mut length: GLsizeiptr;
    length = (call.arg(2)).to_i32().unwrap();

    let mut access: GLbitfield;
    access = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    let _result = unsafe { gl::MapNamedBufferRangeEXT(buffer, offset, length, access) };

    region::add_region(call, (*call.ret).toUIntPtr(), _result, length);
}

pub fn retrace_glMatrixFrustumEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut left: GLdouble;
    left = (call.arg(1)).to_f64().unwrap();

    let mut right: GLdouble;
    right = (call.arg(2)).to_f64().unwrap();

    let mut bottom: GLdouble;
    bottom = (call.arg(3)).to_f64().unwrap();

    let mut top: GLdouble;
    top = (call.arg(4)).to_f64().unwrap();

    let mut zNear: GLdouble;
    zNear = (call.arg(5)).to_f64().unwrap();

    let mut zFar: GLdouble;
    zFar = (call.arg(6)).to_f64().unwrap();

//not found in gl!    unsafe { gl::MatrixFrustumEXT(mode, left, right, bottom, top, zNear, zFar) };
}

pub fn retrace_glMatrixLoadIdentityEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::MatrixLoadIdentityEXT(mode) };
}

pub fn retrace_glMatrixLoadTransposedEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let m: &mut [GLdouble];
    m = _allocator.alloc_array::<GLdouble>(&call.arg(1));
    let _a_GLdouble107_0 = (call.arg(1)).to_array();
    if let Some(_a_GLdouble107_0) = _a_GLdouble107_0 {
        for _jGLdouble107 in 0.._a_GLdouble107_0.values.len() {
    m[_jGLdouble107] = (*_a_GLdouble107_0.values[_jGLdouble107]).to_f64().unwrap();
        }
    }
    let m = m.as_mut_ptr();

//not found in gl!    unsafe { gl::MatrixLoadTransposedEXT(mode, m) };
}

pub fn retrace_glMatrixLoadTransposefEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let m: &mut [GLfloat];
    m = _allocator.alloc_array::<GLfloat>(&call.arg(1));
    let _a_GLfloat201_0 = (call.arg(1)).to_array();
    if let Some(_a_GLfloat201_0) = _a_GLfloat201_0 {
        for _jGLfloat201 in 0.._a_GLfloat201_0.values.len() {
    m[_jGLfloat201] = (*_a_GLfloat201_0.values[_jGLfloat201]).to_f32().unwrap();
        }
    }
    let m = m.as_mut_ptr();

//not found in gl!    unsafe { gl::MatrixLoadTransposefEXT(mode, m) };
}

pub fn retrace_glMatrixLoaddEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let m: &mut [GLdouble];
    m = _allocator.alloc_array::<GLdouble>(&call.arg(1));
    let _a_GLdouble108_0 = (call.arg(1)).to_array();
    if let Some(_a_GLdouble108_0) = _a_GLdouble108_0 {
        for _jGLdouble108 in 0.._a_GLdouble108_0.values.len() {
    m[_jGLdouble108] = (*_a_GLdouble108_0.values[_jGLdouble108]).to_f64().unwrap();
        }
    }
    let m = m.as_mut_ptr();

//not found in gl!    unsafe { gl::MatrixLoaddEXT(mode, m) };
}

pub fn retrace_glMatrixLoadfEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let m: &mut [GLfloat];
    m = _allocator.alloc_array::<GLfloat>(&call.arg(1));
    let _a_GLfloat202_0 = (call.arg(1)).to_array();
    if let Some(_a_GLfloat202_0) = _a_GLfloat202_0 {
        for _jGLfloat202 in 0.._a_GLfloat202_0.values.len() {
    m[_jGLfloat202] = (*_a_GLfloat202_0.values[_jGLfloat202]).to_f32().unwrap();
        }
    }
    let m = m.as_mut_ptr();

//not found in gl!    unsafe { gl::MatrixLoadfEXT(mode, m) };
}

pub fn retrace_glMatrixMultTransposedEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let m: &mut [GLdouble];
    m = _allocator.alloc_array::<GLdouble>(&call.arg(1));
    let _a_GLdouble109_0 = (call.arg(1)).to_array();
    if let Some(_a_GLdouble109_0) = _a_GLdouble109_0 {
        for _jGLdouble109 in 0.._a_GLdouble109_0.values.len() {
    m[_jGLdouble109] = (*_a_GLdouble109_0.values[_jGLdouble109]).to_f64().unwrap();
        }
    }
    let m = m.as_mut_ptr();

//not found in gl!    unsafe { gl::MatrixMultTransposedEXT(mode, m) };
}

pub fn retrace_glMatrixMultTransposefEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let m: &mut [GLfloat];
    m = _allocator.alloc_array::<GLfloat>(&call.arg(1));
    let _a_GLfloat203_0 = (call.arg(1)).to_array();
    if let Some(_a_GLfloat203_0) = _a_GLfloat203_0 {
        for _jGLfloat203 in 0.._a_GLfloat203_0.values.len() {
    m[_jGLfloat203] = (*_a_GLfloat203_0.values[_jGLfloat203]).to_f32().unwrap();
        }
    }
    let m = m.as_mut_ptr();

//not found in gl!    unsafe { gl::MatrixMultTransposefEXT(mode, m) };
}

pub fn retrace_glMatrixMultdEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let m: &mut [GLdouble];
    m = _allocator.alloc_array::<GLdouble>(&call.arg(1));
    let _a_GLdouble110_0 = (call.arg(1)).to_array();
    if let Some(_a_GLdouble110_0) = _a_GLdouble110_0 {
        for _jGLdouble110 in 0.._a_GLdouble110_0.values.len() {
    m[_jGLdouble110] = (*_a_GLdouble110_0.values[_jGLdouble110]).to_f64().unwrap();
        }
    }
    let m = m.as_mut_ptr();

//not found in gl!    unsafe { gl::MatrixMultdEXT(mode, m) };
}

pub fn retrace_glMatrixMultfEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let m: &mut [GLfloat];
    m = _allocator.alloc_array::<GLfloat>(&call.arg(1));
    let _a_GLfloat204_0 = (call.arg(1)).to_array();
    if let Some(_a_GLfloat204_0) = _a_GLfloat204_0 {
        for _jGLfloat204 in 0.._a_GLfloat204_0.values.len() {
    m[_jGLfloat204] = (*_a_GLfloat204_0.values[_jGLfloat204]).to_f32().unwrap();
        }
    }
    let m = m.as_mut_ptr();

//not found in gl!    unsafe { gl::MatrixMultfEXT(mode, m) };
}

pub fn retrace_glMatrixOrthoEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut left: GLdouble;
    left = (call.arg(1)).to_f64().unwrap();

    let mut right: GLdouble;
    right = (call.arg(2)).to_f64().unwrap();

    let mut bottom: GLdouble;
    bottom = (call.arg(3)).to_f64().unwrap();

    let mut top: GLdouble;
    top = (call.arg(4)).to_f64().unwrap();

    let mut zNear: GLdouble;
    zNear = (call.arg(5)).to_f64().unwrap();

    let mut zFar: GLdouble;
    zFar = (call.arg(6)).to_f64().unwrap();

//not found in gl!    unsafe { gl::MatrixOrthoEXT(mode, left, right, bottom, top, zNear, zFar) };
}

pub fn retrace_glMatrixPopEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::MatrixPopEXT(mode) };
}

pub fn retrace_glMatrixPushEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::MatrixPushEXT(mode) };
}

pub fn retrace_glMatrixRotatedEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut angle: GLdouble;
    angle = (call.arg(1)).to_f64().unwrap();

    let mut x: GLdouble;
    x = (call.arg(2)).to_f64().unwrap();

    let mut y: GLdouble;
    y = (call.arg(3)).to_f64().unwrap();

    let mut z: GLdouble;
    z = (call.arg(4)).to_f64().unwrap();

//not found in gl!    unsafe { gl::MatrixRotatedEXT(mode, angle, x, y, z) };
}

pub fn retrace_glMatrixRotatefEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut angle: GLfloat;
    angle = (call.arg(1)).to_f32().unwrap();

    let mut x: GLfloat;
    x = (call.arg(2)).to_f32().unwrap();

    let mut y: GLfloat;
    y = (call.arg(3)).to_f32().unwrap();

    let mut z: GLfloat;
    z = (call.arg(4)).to_f32().unwrap();

//not found in gl!    unsafe { gl::MatrixRotatefEXT(mode, angle, x, y, z) };
}

pub fn retrace_glMatrixScaledEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut x: GLdouble;
    x = (call.arg(1)).to_f64().unwrap();

    let mut y: GLdouble;
    y = (call.arg(2)).to_f64().unwrap();

    let mut z: GLdouble;
    z = (call.arg(3)).to_f64().unwrap();

//not found in gl!    unsafe { gl::MatrixScaledEXT(mode, x, y, z) };
}

pub fn retrace_glMatrixScalefEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut x: GLfloat;
    x = (call.arg(1)).to_f32().unwrap();

    let mut y: GLfloat;
    y = (call.arg(2)).to_f32().unwrap();

    let mut z: GLfloat;
    z = (call.arg(3)).to_f32().unwrap();

//not found in gl!    unsafe { gl::MatrixScalefEXT(mode, x, y, z) };
}

pub fn retrace_glMatrixTranslatedEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut x: GLdouble;
    x = (call.arg(1)).to_f64().unwrap();

    let mut y: GLdouble;
    y = (call.arg(2)).to_f64().unwrap();

    let mut z: GLdouble;
    z = (call.arg(3)).to_f64().unwrap();

//not found in gl!    unsafe { gl::MatrixTranslatedEXT(mode, x, y, z) };
}

pub fn retrace_glMatrixTranslatefEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut x: GLfloat;
    x = (call.arg(1)).to_f32().unwrap();

    let mut y: GLfloat;
    y = (call.arg(2)).to_f32().unwrap();

    let mut z: GLfloat;
    z = (call.arg(3)).to_f32().unwrap();

//not found in gl!    unsafe { gl::MatrixTranslatefEXT(mode, x, y, z) };
}

pub fn retrace_glMultiTexBufferEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texunit: GLenum;
    texunit = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut internalformat: GLenum;
    internalformat = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut buffer: GLuint;
    buffer = (call.arg(3)).to_u32().unwrap();
    buffer = self._buffer_map[buffer];

//not found in gl!    unsafe { gl::MultiTexBufferEXT(texunit, target, internalformat, buffer) };
}

pub fn retrace_glMultiTexCoordPointerEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texunit: GLenum;
    texunit = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut size: GLint;
    size = (call.arg(1)).to_i32().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut stride: GLsizei;
    stride = (call.arg(3)).to_i32().unwrap();

    let pointer: &mut [GLc_void];
    pointer = region::to_pointer(call.arg(4), true);

//not found in gl!    unsafe { gl::MultiTexCoordPointerEXT(texunit, size, _type, stride, pointer) };
}

pub fn retrace_glMultiTexEnvfEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texunit: GLenum;
    texunit = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut param: GLfloat;
    param = (call.arg(3)).to_f32().unwrap();

//not found in gl!    unsafe { gl::MultiTexEnvfEXT(texunit, target, pname, param) };
}

pub fn retrace_glMultiTexEnvfvEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texunit: GLenum;
    texunit = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLfloat];
    params = _allocator.alloc_array::<GLfloat>(&call.arg(3));
    let _a_GLfloat205_0 = (call.arg(3)).to_array();
    if let Some(_a_GLfloat205_0) = _a_GLfloat205_0 {
        for _jGLfloat205 in 0.._a_GLfloat205_0.values.len() {
    params[_jGLfloat205] = (*_a_GLfloat205_0.values[_jGLfloat205]).to_f32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::MultiTexEnvfvEXT(texunit, target, pname, params) };
}

pub fn retrace_glMultiTexEnviEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texunit: GLenum;
    texunit = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut param: GLint;
    param = (call.arg(3)).to_i32().unwrap();

//not found in gl!    unsafe { gl::MultiTexEnviEXT(texunit, target, pname, param) };
}

pub fn retrace_glMultiTexEnvivEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texunit: GLenum;
    texunit = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLint];
    params = _allocator.alloc_array::<GLint>(&call.arg(3));
    let _a_GLint222_0 = (call.arg(3)).to_array();
    if let Some(_a_GLint222_0) = _a_GLint222_0 {
        for _jGLint222 in 0.._a_GLint222_0.values.len() {
    params[_jGLint222] = (*_a_GLint222_0.values[_jGLint222]).to_i32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::MultiTexEnvivEXT(texunit, target, pname, params) };
}

pub fn retrace_glMultiTexGendEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texunit: GLenum;
    texunit = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut coord: GLenum;
    coord = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut param: GLdouble;
    param = (call.arg(3)).to_f64().unwrap();

//not found in gl!    unsafe { gl::MultiTexGendEXT(texunit, coord, pname, param) };
}

pub fn retrace_glMultiTexGendvEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texunit: GLenum;
    texunit = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut coord: GLenum;
    coord = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLdouble];
    params = _allocator.alloc_array::<GLdouble>(&call.arg(3));
    let _a_GLdouble111_0 = (call.arg(3)).to_array();
    if let Some(_a_GLdouble111_0) = _a_GLdouble111_0 {
        for _jGLdouble111 in 0.._a_GLdouble111_0.values.len() {
    params[_jGLdouble111] = (*_a_GLdouble111_0.values[_jGLdouble111]).to_f64().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::MultiTexGendvEXT(texunit, coord, pname, params) };
}

pub fn retrace_glMultiTexGenfEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texunit: GLenum;
    texunit = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut coord: GLenum;
    coord = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut param: GLfloat;
    param = (call.arg(3)).to_f32().unwrap();

//not found in gl!    unsafe { gl::MultiTexGenfEXT(texunit, coord, pname, param) };
}

pub fn retrace_glMultiTexGenfvEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texunit: GLenum;
    texunit = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut coord: GLenum;
    coord = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLfloat];
    params = _allocator.alloc_array::<GLfloat>(&call.arg(3));
    let _a_GLfloat206_0 = (call.arg(3)).to_array();
    if let Some(_a_GLfloat206_0) = _a_GLfloat206_0 {
        for _jGLfloat206 in 0.._a_GLfloat206_0.values.len() {
    params[_jGLfloat206] = (*_a_GLfloat206_0.values[_jGLfloat206]).to_f32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::MultiTexGenfvEXT(texunit, coord, pname, params) };
}

pub fn retrace_glMultiTexGeniEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texunit: GLenum;
    texunit = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut coord: GLenum;
    coord = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut param: GLint;
    param = (call.arg(3)).to_i32().unwrap();

//not found in gl!    unsafe { gl::MultiTexGeniEXT(texunit, coord, pname, param) };
}

pub fn retrace_glMultiTexGenivEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texunit: GLenum;
    texunit = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut coord: GLenum;
    coord = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLint];
    params = _allocator.alloc_array::<GLint>(&call.arg(3));
    let _a_GLint223_0 = (call.arg(3)).to_array();
    if let Some(_a_GLint223_0) = _a_GLint223_0 {
        for _jGLint223 in 0.._a_GLint223_0.values.len() {
    params[_jGLint223] = (*_a_GLint223_0.values[_jGLint223]).to_i32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::MultiTexGenivEXT(texunit, coord, pname, params) };
}

pub fn retrace_glMultiTexImage1DEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texunit: GLenum;
    texunit = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(2)).to_i32().unwrap();

    let mut internalformat: GLint;
    internalformat = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let mut width: GLsizei;
    width = (call.arg(4)).to_i32().unwrap();

    let mut border: GLint;
    border = (call.arg(5)).to_i32().unwrap();

    let mut format: GLenum;
    format = (call.arg(6)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(7)).to_u32().unwrap().try_into().unwrap();

    let pixels = (call.arg(8)).to_pointer().unwrap() as *mut c_void;

//not found in gl!    unsafe { gl::MultiTexImage1DEXT(texunit, target, level, internalformat, width, border, format, _type, pixels) };
}

pub fn retrace_glMultiTexImage2DEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texunit: GLenum;
    texunit = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(2)).to_i32().unwrap();

    let mut internalformat: GLint;
    internalformat = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let mut width: GLsizei;
    width = (call.arg(4)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(5)).to_i32().unwrap();

    let mut border: GLint;
    border = (call.arg(6)).to_i32().unwrap();

    let mut format: GLenum;
    format = (call.arg(7)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(8)).to_u32().unwrap().try_into().unwrap();

    let pixels = (call.arg(9)).to_pointer().unwrap() as *mut c_void;

//not found in gl!    unsafe { gl::MultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, format, _type, pixels) };
}

pub fn retrace_glMultiTexImage3DEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texunit: GLenum;
    texunit = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(2)).to_i32().unwrap();

    let mut internalformat: GLint;
    internalformat = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let mut width: GLsizei;
    width = (call.arg(4)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(5)).to_i32().unwrap();

    let mut depth: GLsizei;
    depth = (call.arg(6)).to_i32().unwrap();

    let mut border: GLint;
    border = (call.arg(7)).to_i32().unwrap();

    let mut format: GLenum;
    format = (call.arg(8)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(9)).to_u32().unwrap().try_into().unwrap();

    let pixels = (call.arg(10)).to_pointer().unwrap() as *mut c_void;

//not found in gl!    unsafe { gl::MultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, format, _type, pixels) };
}

pub fn retrace_glMultiTexParameterIivEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texunit: GLenum;
    texunit = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLint];
    params = _allocator.alloc_array::<GLint>(&call.arg(3));
    let _a_GLint224_0 = (call.arg(3)).to_array();
    if let Some(_a_GLint224_0) = _a_GLint224_0 {
        for _jGLint224 in 0.._a_GLint224_0.values.len() {
    params[_jGLint224] = (*_a_GLint224_0.values[_jGLint224]).to_i32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::MultiTexParameterIivEXT(texunit, target, pname, params) };
}

pub fn retrace_glMultiTexParameterIuivEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texunit: GLenum;
    texunit = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLuint];
    params = _allocator.alloc_array::<GLuint>(&call.arg(3));
    let _a_GLuint203_0 = (call.arg(3)).to_array();
    if let Some(_a_GLuint203_0) = _a_GLuint203_0 {
        for _jGLuint203 in 0.._a_GLuint203_0.values.len() {
    params[_jGLuint203] = (*_a_GLuint203_0.values[_jGLuint203]).to_u32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::MultiTexParameterIuivEXT(texunit, target, pname, params) };
}

pub fn retrace_glMultiTexParameterfEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texunit: GLenum;
    texunit = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut param: GLfloat;
    param = (call.arg(3)).to_f32().unwrap();

//not found in gl!    unsafe { gl::MultiTexParameterfEXT(texunit, target, pname, param) };
}

pub fn retrace_glMultiTexParameterfvEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texunit: GLenum;
    texunit = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLfloat];
    params = _allocator.alloc_array::<GLfloat>(&call.arg(3));
    let _a_GLfloat207_0 = (call.arg(3)).to_array();
    if let Some(_a_GLfloat207_0) = _a_GLfloat207_0 {
        for _jGLfloat207 in 0.._a_GLfloat207_0.values.len() {
    params[_jGLfloat207] = (*_a_GLfloat207_0.values[_jGLfloat207]).to_f32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::MultiTexParameterfvEXT(texunit, target, pname, params) };
}

pub fn retrace_glMultiTexParameteriEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texunit: GLenum;
    texunit = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut param: GLint;
    param = (call.arg(3)).to_i32().unwrap();

//not found in gl!    unsafe { gl::MultiTexParameteriEXT(texunit, target, pname, param) };
}

pub fn retrace_glMultiTexParameterivEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texunit: GLenum;
    texunit = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLint];
    params = _allocator.alloc_array::<GLint>(&call.arg(3));
    let _a_GLint225_0 = (call.arg(3)).to_array();
    if let Some(_a_GLint225_0) = _a_GLint225_0 {
        for _jGLint225 in 0.._a_GLint225_0.values.len() {
    params[_jGLint225] = (*_a_GLint225_0.values[_jGLint225]).to_i32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::MultiTexParameterivEXT(texunit, target, pname, params) };
}

pub fn retrace_glMultiTexRenderbufferEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texunit: GLenum;
    texunit = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut renderbuffer: GLuint;
    renderbuffer = (call.arg(2)).to_u32().unwrap();
    renderbuffer = self._renderbuffer_map[renderbuffer];

//not found in gl!    unsafe { gl::MultiTexRenderbufferEXT(texunit, target, renderbuffer) };
}

pub fn retrace_glMultiTexSubImage1DEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texunit: GLenum;
    texunit = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(2)).to_i32().unwrap();

    let mut xoffset: GLint;
    xoffset = (call.arg(3)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(4)).to_i32().unwrap();

    let mut format: GLenum;
    format = (call.arg(5)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(6)).to_u32().unwrap().try_into().unwrap();

    let pixels = (call.arg(7)).to_pointer().unwrap() as *mut c_void;

//not found in gl!    unsafe { gl::MultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, _type, pixels) };
}

pub fn retrace_glMultiTexSubImage2DEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texunit: GLenum;
    texunit = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(2)).to_i32().unwrap();

    let mut xoffset: GLint;
    xoffset = (call.arg(3)).to_i32().unwrap();

    let mut yoffset: GLint;
    yoffset = (call.arg(4)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(5)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(6)).to_i32().unwrap();

    let mut format: GLenum;
    format = (call.arg(7)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(8)).to_u32().unwrap().try_into().unwrap();

    let pixels = (call.arg(9)).to_pointer().unwrap() as *mut c_void;

//not found in gl!    unsafe { gl::MultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, _type, pixels) };
}

pub fn retrace_glMultiTexSubImage3DEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texunit: GLenum;
    texunit = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(2)).to_i32().unwrap();

    let mut xoffset: GLint;
    xoffset = (call.arg(3)).to_i32().unwrap();

    let mut yoffset: GLint;
    yoffset = (call.arg(4)).to_i32().unwrap();

    let mut zoffset: GLint;
    zoffset = (call.arg(5)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(6)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(7)).to_i32().unwrap();

    let mut depth: GLsizei;
    depth = (call.arg(8)).to_i32().unwrap();

    let mut format: GLenum;
    format = (call.arg(9)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(10)).to_u32().unwrap().try_into().unwrap();

    let pixels = (call.arg(11)).to_pointer().unwrap() as *mut c_void;

//not found in gl!    unsafe { gl::MultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, _type, pixels) };
}

pub fn retrace_glNamedBufferDataEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut buffer: GLuint;
    buffer = (call.arg(0)).to_u32().unwrap();
    buffer = self._buffer_map[buffer];

    let mut size: GLsizeiptr;
    size = (call.arg(1)).to_i32().unwrap();

    let data: &mut [GLc_void];
    let data = (call.arg(2)).to_pointer().unwrap() as *mut c_void;

    let mut usage: GLenum;
    usage = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::NamedBufferDataEXT(buffer, size, data, usage) };
}

pub fn retrace_glNamedBufferStorageEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut buffer: GLuint;
    buffer = (call.arg(0)).to_u32().unwrap();
    buffer = self._buffer_map[buffer];

    let mut size: GLsizeiptr;
    size = (call.arg(1)).to_i32().unwrap();

    let data: &mut [GLc_void];
    let data = (call.arg(2)).to_pointer().unwrap() as *mut c_void;

    let mut flags: GLbitfield;
    flags = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::NamedBufferStorageEXT(buffer, size, data, flags) };
}

pub fn retrace_glNamedBufferSubDataEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut buffer: GLuint;
    buffer = (call.arg(0)).to_u32().unwrap();
    buffer = self._buffer_map[buffer];

    let mut offset: GLintptr;
    offset = (call.arg(1)).to_i32().unwrap();

    let mut size: GLsizeiptr;
    size = (call.arg(2)).to_i32().unwrap();

    let data: &mut [GLc_void];
    let data = (call.arg(3)).to_pointer().unwrap() as *mut c_void;

//not found in gl!    unsafe { gl::NamedBufferSubDataEXT(buffer, offset, size, data) };
}

pub fn retrace_glNamedCopyBufferSubDataEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut readBuffer: GLuint;
    readBuffer = (call.arg(0)).to_u32().unwrap();
    readBuffer = self._buffer_map[readBuffer];

    let mut writeBuffer: GLuint;
    writeBuffer = (call.arg(1)).to_u32().unwrap();
    writeBuffer = self._buffer_map[writeBuffer];

    let mut readOffset: GLintptr;
    readOffset = (call.arg(2)).to_i32().unwrap();

    let mut writeOffset: GLintptr;
    writeOffset = (call.arg(3)).to_i32().unwrap();

    let mut size: GLsizeiptr;
    size = (call.arg(4)).to_i32().unwrap();

//not found in gl!    unsafe { gl::NamedCopyBufferSubDataEXT(readBuffer, writeBuffer, readOffset, writeOffset, size) };
}

pub fn retrace_glNamedFramebufferParameteriEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut framebuffer: GLuint;
    framebuffer = (call.arg(0)).to_u32().unwrap();
    framebuffer = self._framebuffer_map[framebuffer];

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut param: GLint;
    param = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::NamedFramebufferParameteriEXT(framebuffer, pname, param) };
}

pub fn retrace_glNamedFramebufferRenderbufferEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut framebuffer: GLuint;
    framebuffer = (call.arg(0)).to_u32().unwrap();
    framebuffer = self._framebuffer_map[framebuffer];

    let mut attachment: GLenum;
    attachment = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut renderbuffertarget: GLenum;
    renderbuffertarget = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut renderbuffer: GLuint;
    renderbuffer = (call.arg(3)).to_u32().unwrap();
    renderbuffer = self._renderbuffer_map[renderbuffer];

//not found in gl!    unsafe { gl::NamedFramebufferRenderbufferEXT(framebuffer, attachment, renderbuffertarget, renderbuffer) };
}

pub fn retrace_glNamedFramebufferTexture1DEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut framebuffer: GLuint;
    framebuffer = (call.arg(0)).to_u32().unwrap();
    framebuffer = self._framebuffer_map[framebuffer];

    let mut attachment: GLenum;
    attachment = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut textarget: GLenum;
    textarget = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut texture: GLuint;
    texture = (call.arg(3)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut level: GLint;
    level = (call.arg(4)).to_i32().unwrap();

//not found in gl!    unsafe { gl::NamedFramebufferTexture1DEXT(framebuffer, attachment, textarget, texture, level) };
}

pub fn retrace_glNamedFramebufferTexture2DEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut framebuffer: GLuint;
    framebuffer = (call.arg(0)).to_u32().unwrap();
    framebuffer = self._framebuffer_map[framebuffer];

    let mut attachment: GLenum;
    attachment = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut textarget: GLenum;
    textarget = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut texture: GLuint;
    texture = (call.arg(3)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut level: GLint;
    level = (call.arg(4)).to_i32().unwrap();

//not found in gl!    unsafe { gl::NamedFramebufferTexture2DEXT(framebuffer, attachment, textarget, texture, level) };
}

pub fn retrace_glNamedFramebufferTexture3DEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut framebuffer: GLuint;
    framebuffer = (call.arg(0)).to_u32().unwrap();
    framebuffer = self._framebuffer_map[framebuffer];

    let mut attachment: GLenum;
    attachment = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut textarget: GLenum;
    textarget = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut texture: GLuint;
    texture = (call.arg(3)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut level: GLint;
    level = (call.arg(4)).to_i32().unwrap();

    let mut zoffset: GLint;
    zoffset = (call.arg(5)).to_i32().unwrap();

//not found in gl!    unsafe { gl::NamedFramebufferTexture3DEXT(framebuffer, attachment, textarget, texture, level, zoffset) };
}

pub fn retrace_glNamedFramebufferTextureEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut framebuffer: GLuint;
    framebuffer = (call.arg(0)).to_u32().unwrap();
    framebuffer = self._framebuffer_map[framebuffer];

    let mut attachment: GLenum;
    attachment = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut texture: GLuint;
    texture = (call.arg(2)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut level: GLint;
    level = (call.arg(3)).to_i32().unwrap();

//not found in gl!    unsafe { gl::NamedFramebufferTextureEXT(framebuffer, attachment, texture, level) };
}

pub fn retrace_glNamedFramebufferTextureFaceEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut framebuffer: GLuint;
    framebuffer = (call.arg(0)).to_u32().unwrap();
    framebuffer = self._framebuffer_map[framebuffer];

    let mut attachment: GLenum;
    attachment = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut texture: GLuint;
    texture = (call.arg(2)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut level: GLint;
    level = (call.arg(3)).to_i32().unwrap();

    let mut face: GLenum;
    face = (call.arg(4)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::NamedFramebufferTextureFaceEXT(framebuffer, attachment, texture, level, face) };
}

pub fn retrace_glNamedFramebufferTextureLayerEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut framebuffer: GLuint;
    framebuffer = (call.arg(0)).to_u32().unwrap();
    framebuffer = self._framebuffer_map[framebuffer];

    let mut attachment: GLenum;
    attachment = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut texture: GLuint;
    texture = (call.arg(2)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut level: GLint;
    level = (call.arg(3)).to_i32().unwrap();

    let mut layer: GLint;
    layer = (call.arg(4)).to_i32().unwrap();

//not found in gl!    unsafe { gl::NamedFramebufferTextureLayerEXT(framebuffer, attachment, texture, level, layer) };
}

pub fn retrace_glNamedProgramLocalParameter4dEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut index: GLuint;
    index = (call.arg(2)).to_u32().unwrap();

    let mut x: GLdouble;
    x = (call.arg(3)).to_f64().unwrap();

    let mut y: GLdouble;
    y = (call.arg(4)).to_f64().unwrap();

    let mut z: GLdouble;
    z = (call.arg(5)).to_f64().unwrap();

    let mut w: GLdouble;
    w = (call.arg(6)).to_f64().unwrap();

//not found in gl!    unsafe { gl::NamedProgramLocalParameter4dEXT(program, target, index, x, y, z, w) };
}

pub fn retrace_glNamedProgramLocalParameter4dvEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut index: GLuint;
    index = (call.arg(2)).to_u32().unwrap();

    let params: &mut [GLdouble];
    params = _allocator.alloc_array::<GLdouble>(&call.arg(3));
    let _a_GLdouble112_0 = (call.arg(3)).to_array();
    if let Some(_a_GLdouble112_0) = _a_GLdouble112_0 {
        for _jGLdouble112 in 0.._a_GLdouble112_0.values.len() {
    params[_jGLdouble112] = (*_a_GLdouble112_0.values[_jGLdouble112]).to_f64().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::NamedProgramLocalParameter4dvEXT(program, target, index, params) };
}

pub fn retrace_glNamedProgramLocalParameter4fEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut index: GLuint;
    index = (call.arg(2)).to_u32().unwrap();

    let mut x: GLfloat;
    x = (call.arg(3)).to_f32().unwrap();

    let mut y: GLfloat;
    y = (call.arg(4)).to_f32().unwrap();

    let mut z: GLfloat;
    z = (call.arg(5)).to_f32().unwrap();

    let mut w: GLfloat;
    w = (call.arg(6)).to_f32().unwrap();

//not found in gl!    unsafe { gl::NamedProgramLocalParameter4fEXT(program, target, index, x, y, z, w) };
}

pub fn retrace_glNamedProgramLocalParameter4fvEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut index: GLuint;
    index = (call.arg(2)).to_u32().unwrap();

    let params: &mut [GLfloat];
    params = _allocator.alloc_array::<GLfloat>(&call.arg(3));
    let _a_GLfloat208_0 = (call.arg(3)).to_array();
    if let Some(_a_GLfloat208_0) = _a_GLfloat208_0 {
        for _jGLfloat208 in 0.._a_GLfloat208_0.values.len() {
    params[_jGLfloat208] = (*_a_GLfloat208_0.values[_jGLfloat208]).to_f32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::NamedProgramLocalParameter4fvEXT(program, target, index, params) };
}

pub fn retrace_glNamedProgramLocalParameterI4iEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut index: GLuint;
    index = (call.arg(2)).to_u32().unwrap();

    let mut x: GLint;
    x = (call.arg(3)).to_i32().unwrap();

    let mut y: GLint;
    y = (call.arg(4)).to_i32().unwrap();

    let mut z: GLint;
    z = (call.arg(5)).to_i32().unwrap();

    let mut w: GLint;
    w = (call.arg(6)).to_i32().unwrap();

//not found in gl!    unsafe { gl::NamedProgramLocalParameterI4iEXT(program, target, index, x, y, z, w) };
}

pub fn retrace_glNamedProgramLocalParameterI4ivEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut index: GLuint;
    index = (call.arg(2)).to_u32().unwrap();

    let params: &mut [GLint];
    params = _allocator.alloc_array::<GLint>(&call.arg(3));
    let _a_GLint226_0 = (call.arg(3)).to_array();
    if let Some(_a_GLint226_0) = _a_GLint226_0 {
        for _jGLint226 in 0.._a_GLint226_0.values.len() {
    params[_jGLint226] = (*_a_GLint226_0.values[_jGLint226]).to_i32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::NamedProgramLocalParameterI4ivEXT(program, target, index, params) };
}

pub fn retrace_glNamedProgramLocalParameterI4uiEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut index: GLuint;
    index = (call.arg(2)).to_u32().unwrap();

    let mut x: GLuint;
    x = (call.arg(3)).to_u32().unwrap();

    let mut y: GLuint;
    y = (call.arg(4)).to_u32().unwrap();

    let mut z: GLuint;
    z = (call.arg(5)).to_u32().unwrap();

    let mut w: GLuint;
    w = (call.arg(6)).to_u32().unwrap();

//not found in gl!    unsafe { gl::NamedProgramLocalParameterI4uiEXT(program, target, index, x, y, z, w) };
}

pub fn retrace_glNamedProgramLocalParameterI4uivEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut index: GLuint;
    index = (call.arg(2)).to_u32().unwrap();

    let params: &mut [GLuint];
    params = _allocator.alloc_array::<GLuint>(&call.arg(3));
    let _a_GLuint204_0 = (call.arg(3)).to_array();
    if let Some(_a_GLuint204_0) = _a_GLuint204_0 {
        for _jGLuint204 in 0.._a_GLuint204_0.values.len() {
    params[_jGLuint204] = (*_a_GLuint204_0.values[_jGLuint204]).to_u32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::NamedProgramLocalParameterI4uivEXT(program, target, index, params) };
}

pub fn retrace_glNamedProgramLocalParameters4fvEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut index: GLuint;
    index = (call.arg(2)).to_u32().unwrap();

    let mut count: GLsizei;
    count = (call.arg(3)).to_i32().unwrap();

    let params: &mut [GLfloat];
    params = _allocator.alloc_array::<GLfloat>(&call.arg(4));
    let _a_GLfloat209_0 = (call.arg(4)).to_array();
    if let Some(_a_GLfloat209_0) = _a_GLfloat209_0 {
        for _jGLfloat209 in 0.._a_GLfloat209_0.values.len() {
    params[_jGLfloat209] = (*_a_GLfloat209_0.values[_jGLfloat209]).to_f32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::NamedProgramLocalParameters4fvEXT(program, target, index, count, params) };
}

pub fn retrace_glNamedProgramLocalParametersI4ivEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut index: GLuint;
    index = (call.arg(2)).to_u32().unwrap();

    let mut count: GLsizei;
    count = (call.arg(3)).to_i32().unwrap();

    let params: &mut [GLint];
    params = _allocator.alloc_array::<GLint>(&call.arg(4));
    let _a_GLint227_0 = (call.arg(4)).to_array();
    if let Some(_a_GLint227_0) = _a_GLint227_0 {
        for _jGLint227 in 0.._a_GLint227_0.values.len() {
    params[_jGLint227] = (*_a_GLint227_0.values[_jGLint227]).to_i32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::NamedProgramLocalParametersI4ivEXT(program, target, index, count, params) };
}

pub fn retrace_glNamedProgramLocalParametersI4uivEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut index: GLuint;
    index = (call.arg(2)).to_u32().unwrap();

    let mut count: GLsizei;
    count = (call.arg(3)).to_i32().unwrap();

    let params: &mut [GLuint];
    params = _allocator.alloc_array::<GLuint>(&call.arg(4));
    let _a_GLuint205_0 = (call.arg(4)).to_array();
    if let Some(_a_GLuint205_0) = _a_GLuint205_0 {
        for _jGLuint205 in 0.._a_GLuint205_0.values.len() {
    params[_jGLuint205] = (*_a_GLuint205_0.values[_jGLuint205]).to_u32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::NamedProgramLocalParametersI4uivEXT(program, target, index, count, params) };
}

pub fn retrace_glNamedProgramStringEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut format: GLenum;
    format = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut len: GLsizei;
    len = (call.arg(3)).to_i32().unwrap();

    let string: &mut [GLc_void];
    string = (call.arg(4)).to_string().unwrap();

//not found in gl!    unsafe { gl::NamedProgramStringEXT(program, target, format, len, string) };
}

pub fn retrace_glNamedRenderbufferStorageEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut renderbuffer: GLuint;
    renderbuffer = (call.arg(0)).to_u32().unwrap();
    renderbuffer = self._renderbuffer_map[renderbuffer];

    let mut internalformat: GLenum;
    internalformat = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut width: GLsizei;
    width = (call.arg(2)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(3)).to_i32().unwrap();

//not found in gl!    unsafe { gl::NamedRenderbufferStorageEXT(renderbuffer, internalformat, width, height) };
}

pub fn retrace_glNamedRenderbufferStorageMultisampleCoverageEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut renderbuffer: GLuint;
    renderbuffer = (call.arg(0)).to_u32().unwrap();
    renderbuffer = self._renderbuffer_map[renderbuffer];

    let mut coverageSamples: GLsizei;
    coverageSamples = (call.arg(1)).to_i32().unwrap();

    let mut colorSamples: GLsizei;
    colorSamples = (call.arg(2)).to_i32().unwrap();

    let mut internalformat: GLenum;
    internalformat = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let mut width: GLsizei;
    width = (call.arg(4)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(5)).to_i32().unwrap();

//not found in gl!    unsafe { gl::NamedRenderbufferStorageMultisampleCoverageEXT(renderbuffer, coverageSamples, colorSamples, internalformat, width, height) };
}

pub fn retrace_glNamedRenderbufferStorageMultisampleEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut renderbuffer: GLuint;
    renderbuffer = (call.arg(0)).to_u32().unwrap();
    renderbuffer = self._renderbuffer_map[renderbuffer];

    let mut samples: GLsizei;
    samples = (call.arg(1)).to_i32().unwrap();
    let max_samples = 0;
//not found in gl!    unsafe { gl::GetIntegerv(gl::MAX_SAMPLES, &max_samples) };
    if samples > max_samples {
        samples = max_samples;
    }

    let mut internalformat: GLenum;
    internalformat = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut width: GLsizei;
    width = (call.arg(3)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(4)).to_i32().unwrap();

//not found in gl!    unsafe { gl::NamedRenderbufferStorageMultisampleEXT(renderbuffer, samples, internalformat, width, height) };
}

pub fn retrace_glProgramUniform1dEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut x: GLdouble;
    x = (call.arg(2)).to_f64().unwrap();

//not found in gl!    unsafe { gl::ProgramUniform1dEXT(program, location, x) };
}

pub fn retrace_glProgramUniform1dvEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let value: &mut [GLdouble];
    value = _allocator.alloc_array::<GLdouble>(&call.arg(3));
    let _a_GLdouble113_0 = (call.arg(3)).to_array();
    if let Some(_a_GLdouble113_0) = _a_GLdouble113_0 {
        for _jGLdouble113 in 0.._a_GLdouble113_0.values.len() {
    value[_jGLdouble113] = (*_a_GLdouble113_0.values[_jGLdouble113]).to_f64().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::ProgramUniform1dvEXT(program, location, count, value) };
}

pub fn retrace_glProgramUniform1fEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut v0: GLfloat;
    v0 = (call.arg(2)).to_f32().unwrap();

//not found in gl!    unsafe { gl::ProgramUniform1fEXT(program, location, v0) };
}

pub fn retrace_glProgramUniform1fvEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let value: &mut [GLfloat];
    value = _allocator.alloc_array::<GLfloat>(&call.arg(3));
    let _a_GLfloat210_0 = (call.arg(3)).to_array();
    if let Some(_a_GLfloat210_0) = _a_GLfloat210_0 {
        for _jGLfloat210 in 0.._a_GLfloat210_0.values.len() {
    value[_jGLfloat210] = (*_a_GLfloat210_0.values[_jGLfloat210]).to_f32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::ProgramUniform1fvEXT(program, location, count, value) };
}

pub fn retrace_glProgramUniform1iEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut v0: GLint;
    v0 = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::ProgramUniform1iEXT(program, location, v0) };
}

pub fn retrace_glProgramUniform1ivEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let value: &mut [GLint];
    value = _allocator.alloc_array::<GLint>(&call.arg(3));
    let _a_GLint228_0 = (call.arg(3)).to_array();
    if let Some(_a_GLint228_0) = _a_GLint228_0 {
        for _jGLint228 in 0.._a_GLint228_0.values.len() {
    value[_jGLint228] = (*_a_GLint228_0.values[_jGLint228]).to_i32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::ProgramUniform1ivEXT(program, location, count, value) };
}

pub fn retrace_glProgramUniform1uiEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut v0: GLuint;
    v0 = (call.arg(2)).to_u32().unwrap();

//not found in gl!    unsafe { gl::ProgramUniform1uiEXT(program, location, v0) };
}

pub fn retrace_glProgramUniform1uivEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let value: &mut [GLuint];
    value = _allocator.alloc_array::<GLuint>(&call.arg(3));
    let _a_GLuint206_0 = (call.arg(3)).to_array();
    if let Some(_a_GLuint206_0) = _a_GLuint206_0 {
        for _jGLuint206 in 0.._a_GLuint206_0.values.len() {
    value[_jGLuint206] = (*_a_GLuint206_0.values[_jGLuint206]).to_u32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::ProgramUniform1uivEXT(program, location, count, value) };
}

pub fn retrace_glProgramUniform2dEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut x: GLdouble;
    x = (call.arg(2)).to_f64().unwrap();

    let mut y: GLdouble;
    y = (call.arg(3)).to_f64().unwrap();

//not found in gl!    unsafe { gl::ProgramUniform2dEXT(program, location, x, y) };
}

pub fn retrace_glProgramUniform2dvEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let value: &mut [GLdouble];
    value = _allocator.alloc_array::<GLdouble>(&call.arg(3));
    let _a_GLdouble114_0 = (call.arg(3)).to_array();
    if let Some(_a_GLdouble114_0) = _a_GLdouble114_0 {
        for _jGLdouble114 in 0.._a_GLdouble114_0.values.len() {
    value[_jGLdouble114] = (*_a_GLdouble114_0.values[_jGLdouble114]).to_f64().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::ProgramUniform2dvEXT(program, location, count, value) };
}

pub fn retrace_glProgramUniform2fEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut v0: GLfloat;
    v0 = (call.arg(2)).to_f32().unwrap();

    let mut v1: GLfloat;
    v1 = (call.arg(3)).to_f32().unwrap();

//not found in gl!    unsafe { gl::ProgramUniform2fEXT(program, location, v0, v1) };
}

pub fn retrace_glProgramUniform2fvEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let value: &mut [GLfloat];
    value = _allocator.alloc_array::<GLfloat>(&call.arg(3));
    let _a_GLfloat211_0 = (call.arg(3)).to_array();
    if let Some(_a_GLfloat211_0) = _a_GLfloat211_0 {
        for _jGLfloat211 in 0.._a_GLfloat211_0.values.len() {
    value[_jGLfloat211] = (*_a_GLfloat211_0.values[_jGLfloat211]).to_f32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::ProgramUniform2fvEXT(program, location, count, value) };
}

pub fn retrace_glProgramUniform2iEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut v0: GLint;
    v0 = (call.arg(2)).to_i32().unwrap();

    let mut v1: GLint;
    v1 = (call.arg(3)).to_i32().unwrap();

//not found in gl!    unsafe { gl::ProgramUniform2iEXT(program, location, v0, v1) };
}

pub fn retrace_glProgramUniform2ivEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let value: &mut [GLint];
    value = _allocator.alloc_array::<GLint>(&call.arg(3));
    let _a_GLint229_0 = (call.arg(3)).to_array();
    if let Some(_a_GLint229_0) = _a_GLint229_0 {
        for _jGLint229 in 0.._a_GLint229_0.values.len() {
    value[_jGLint229] = (*_a_GLint229_0.values[_jGLint229]).to_i32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::ProgramUniform2ivEXT(program, location, count, value) };
}

pub fn retrace_glProgramUniform2uiEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut v0: GLuint;
    v0 = (call.arg(2)).to_u32().unwrap();

    let mut v1: GLuint;
    v1 = (call.arg(3)).to_u32().unwrap();

//not found in gl!    unsafe { gl::ProgramUniform2uiEXT(program, location, v0, v1) };
}

pub fn retrace_glProgramUniform2uivEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let value: &mut [GLuint];
    value = _allocator.alloc_array::<GLuint>(&call.arg(3));
    let _a_GLuint207_0 = (call.arg(3)).to_array();
    if let Some(_a_GLuint207_0) = _a_GLuint207_0 {
        for _jGLuint207 in 0.._a_GLuint207_0.values.len() {
    value[_jGLuint207] = (*_a_GLuint207_0.values[_jGLuint207]).to_u32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::ProgramUniform2uivEXT(program, location, count, value) };
}

pub fn retrace_glProgramUniform3dEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut x: GLdouble;
    x = (call.arg(2)).to_f64().unwrap();

    let mut y: GLdouble;
    y = (call.arg(3)).to_f64().unwrap();

    let mut z: GLdouble;
    z = (call.arg(4)).to_f64().unwrap();

//not found in gl!    unsafe { gl::ProgramUniform3dEXT(program, location, x, y, z) };
}

pub fn retrace_glProgramUniform3dvEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let value: &mut [GLdouble];
    value = _allocator.alloc_array::<GLdouble>(&call.arg(3));
    let _a_GLdouble115_0 = (call.arg(3)).to_array();
    if let Some(_a_GLdouble115_0) = _a_GLdouble115_0 {
        for _jGLdouble115 in 0.._a_GLdouble115_0.values.len() {
    value[_jGLdouble115] = (*_a_GLdouble115_0.values[_jGLdouble115]).to_f64().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::ProgramUniform3dvEXT(program, location, count, value) };
}

pub fn retrace_glProgramUniform3fEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut v0: GLfloat;
    v0 = (call.arg(2)).to_f32().unwrap();

    let mut v1: GLfloat;
    v1 = (call.arg(3)).to_f32().unwrap();

    let mut v2: GLfloat;
    v2 = (call.arg(4)).to_f32().unwrap();

//not found in gl!    unsafe { gl::ProgramUniform3fEXT(program, location, v0, v1, v2) };
}

pub fn retrace_glProgramUniform3fvEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let value: &mut [GLfloat];
    value = _allocator.alloc_array::<GLfloat>(&call.arg(3));
    let _a_GLfloat212_0 = (call.arg(3)).to_array();
    if let Some(_a_GLfloat212_0) = _a_GLfloat212_0 {
        for _jGLfloat212 in 0.._a_GLfloat212_0.values.len() {
    value[_jGLfloat212] = (*_a_GLfloat212_0.values[_jGLfloat212]).to_f32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::ProgramUniform3fvEXT(program, location, count, value) };
}

pub fn retrace_glProgramUniform3iEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut v0: GLint;
    v0 = (call.arg(2)).to_i32().unwrap();

    let mut v1: GLint;
    v1 = (call.arg(3)).to_i32().unwrap();

    let mut v2: GLint;
    v2 = (call.arg(4)).to_i32().unwrap();

//not found in gl!    unsafe { gl::ProgramUniform3iEXT(program, location, v0, v1, v2) };
}

pub fn retrace_glProgramUniform3ivEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let value: &mut [GLint];
    value = _allocator.alloc_array::<GLint>(&call.arg(3));
    let _a_GLint230_0 = (call.arg(3)).to_array();
    if let Some(_a_GLint230_0) = _a_GLint230_0 {
        for _jGLint230 in 0.._a_GLint230_0.values.len() {
    value[_jGLint230] = (*_a_GLint230_0.values[_jGLint230]).to_i32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::ProgramUniform3ivEXT(program, location, count, value) };
}

pub fn retrace_glProgramUniform3uiEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut v0: GLuint;
    v0 = (call.arg(2)).to_u32().unwrap();

    let mut v1: GLuint;
    v1 = (call.arg(3)).to_u32().unwrap();

    let mut v2: GLuint;
    v2 = (call.arg(4)).to_u32().unwrap();

//not found in gl!    unsafe { gl::ProgramUniform3uiEXT(program, location, v0, v1, v2) };
}

pub fn retrace_glProgramUniform3uivEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let value: &mut [GLuint];
    value = _allocator.alloc_array::<GLuint>(&call.arg(3));
    let _a_GLuint208_0 = (call.arg(3)).to_array();
    if let Some(_a_GLuint208_0) = _a_GLuint208_0 {
        for _jGLuint208 in 0.._a_GLuint208_0.values.len() {
    value[_jGLuint208] = (*_a_GLuint208_0.values[_jGLuint208]).to_u32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::ProgramUniform3uivEXT(program, location, count, value) };
}

pub fn retrace_glProgramUniform4dEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut x: GLdouble;
    x = (call.arg(2)).to_f64().unwrap();

    let mut y: GLdouble;
    y = (call.arg(3)).to_f64().unwrap();

    let mut z: GLdouble;
    z = (call.arg(4)).to_f64().unwrap();

    let mut w: GLdouble;
    w = (call.arg(5)).to_f64().unwrap();

//not found in gl!    unsafe { gl::ProgramUniform4dEXT(program, location, x, y, z, w) };
}

pub fn retrace_glProgramUniform4dvEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let value: &mut [GLdouble];
    value = _allocator.alloc_array::<GLdouble>(&call.arg(3));
    let _a_GLdouble116_0 = (call.arg(3)).to_array();
    if let Some(_a_GLdouble116_0) = _a_GLdouble116_0 {
        for _jGLdouble116 in 0.._a_GLdouble116_0.values.len() {
    value[_jGLdouble116] = (*_a_GLdouble116_0.values[_jGLdouble116]).to_f64().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::ProgramUniform4dvEXT(program, location, count, value) };
}

pub fn retrace_glProgramUniform4fEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut v0: GLfloat;
    v0 = (call.arg(2)).to_f32().unwrap();

    let mut v1: GLfloat;
    v1 = (call.arg(3)).to_f32().unwrap();

    let mut v2: GLfloat;
    v2 = (call.arg(4)).to_f32().unwrap();

    let mut v3: GLfloat;
    v3 = (call.arg(5)).to_f32().unwrap();

//not found in gl!    unsafe { gl::ProgramUniform4fEXT(program, location, v0, v1, v2, v3) };
}

pub fn retrace_glProgramUniform4fvEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let value: &mut [GLfloat];
    value = _allocator.alloc_array::<GLfloat>(&call.arg(3));
    let _a_GLfloat213_0 = (call.arg(3)).to_array();
    if let Some(_a_GLfloat213_0) = _a_GLfloat213_0 {
        for _jGLfloat213 in 0.._a_GLfloat213_0.values.len() {
    value[_jGLfloat213] = (*_a_GLfloat213_0.values[_jGLfloat213]).to_f32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::ProgramUniform4fvEXT(program, location, count, value) };
}

pub fn retrace_glProgramUniform4iEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut v0: GLint;
    v0 = (call.arg(2)).to_i32().unwrap();

    let mut v1: GLint;
    v1 = (call.arg(3)).to_i32().unwrap();

    let mut v2: GLint;
    v2 = (call.arg(4)).to_i32().unwrap();

    let mut v3: GLint;
    v3 = (call.arg(5)).to_i32().unwrap();

//not found in gl!    unsafe { gl::ProgramUniform4iEXT(program, location, v0, v1, v2, v3) };
}

pub fn retrace_glProgramUniform4ivEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let value: &mut [GLint];
    value = _allocator.alloc_array::<GLint>(&call.arg(3));
    let _a_GLint231_0 = (call.arg(3)).to_array();
    if let Some(_a_GLint231_0) = _a_GLint231_0 {
        for _jGLint231 in 0.._a_GLint231_0.values.len() {
    value[_jGLint231] = (*_a_GLint231_0.values[_jGLint231]).to_i32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::ProgramUniform4ivEXT(program, location, count, value) };
}

pub fn retrace_glProgramUniform4uiEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut v0: GLuint;
    v0 = (call.arg(2)).to_u32().unwrap();

    let mut v1: GLuint;
    v1 = (call.arg(3)).to_u32().unwrap();

    let mut v2: GLuint;
    v2 = (call.arg(4)).to_u32().unwrap();

    let mut v3: GLuint;
    v3 = (call.arg(5)).to_u32().unwrap();

//not found in gl!    unsafe { gl::ProgramUniform4uiEXT(program, location, v0, v1, v2, v3) };
}

pub fn retrace_glProgramUniform4uivEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let value: &mut [GLuint];
    value = _allocator.alloc_array::<GLuint>(&call.arg(3));
    let _a_GLuint209_0 = (call.arg(3)).to_array();
    if let Some(_a_GLuint209_0) = _a_GLuint209_0 {
        for _jGLuint209 in 0.._a_GLuint209_0.values.len() {
    value[_jGLuint209] = (*_a_GLuint209_0.values[_jGLuint209]).to_u32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::ProgramUniform4uivEXT(program, location, count, value) };
}

pub fn retrace_glProgramUniformMatrix2dvEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let mut transpose: GLboolean;
    transpose = (call.arg(3)).to_u32().unwrap() as u8;

    let value: &mut [GLdouble];
    value = _allocator.alloc_array::<GLdouble>(&call.arg(4));
    let _a_GLdouble117_0 = (call.arg(4)).to_array();
    if let Some(_a_GLdouble117_0) = _a_GLdouble117_0 {
        for _jGLdouble117 in 0.._a_GLdouble117_0.values.len() {
    value[_jGLdouble117] = (*_a_GLdouble117_0.values[_jGLdouble117]).to_f64().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::ProgramUniformMatrix2dvEXT(program, location, count, transpose, value) };
}

pub fn retrace_glProgramUniformMatrix2fvEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let mut transpose: GLboolean;
    transpose = (call.arg(3)).to_u32().unwrap() as u8;

    let value: &mut [GLfloat];
    value = _allocator.alloc_array::<GLfloat>(&call.arg(4));
    let _a_GLfloat214_0 = (call.arg(4)).to_array();
    if let Some(_a_GLfloat214_0) = _a_GLfloat214_0 {
        for _jGLfloat214 in 0.._a_GLfloat214_0.values.len() {
    value[_jGLfloat214] = (*_a_GLfloat214_0.values[_jGLfloat214]).to_f32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::ProgramUniformMatrix2fvEXT(program, location, count, transpose, value) };
}

pub fn retrace_glProgramUniformMatrix2x3dvEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let mut transpose: GLboolean;
    transpose = (call.arg(3)).to_u32().unwrap() as u8;

    let value: &mut [GLdouble];
    value = _allocator.alloc_array::<GLdouble>(&call.arg(4));
    let _a_GLdouble118_0 = (call.arg(4)).to_array();
    if let Some(_a_GLdouble118_0) = _a_GLdouble118_0 {
        for _jGLdouble118 in 0.._a_GLdouble118_0.values.len() {
    value[_jGLdouble118] = (*_a_GLdouble118_0.values[_jGLdouble118]).to_f64().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::ProgramUniformMatrix2x3dvEXT(program, location, count, transpose, value) };
}

pub fn retrace_glProgramUniformMatrix2x3fvEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let mut transpose: GLboolean;
    transpose = (call.arg(3)).to_u32().unwrap() as u8;

    let value: &mut [GLfloat];
    value = _allocator.alloc_array::<GLfloat>(&call.arg(4));
    let _a_GLfloat215_0 = (call.arg(4)).to_array();
    if let Some(_a_GLfloat215_0) = _a_GLfloat215_0 {
        for _jGLfloat215 in 0.._a_GLfloat215_0.values.len() {
    value[_jGLfloat215] = (*_a_GLfloat215_0.values[_jGLfloat215]).to_f32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::ProgramUniformMatrix2x3fvEXT(program, location, count, transpose, value) };
}

pub fn retrace_glProgramUniformMatrix2x4dvEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let mut transpose: GLboolean;
    transpose = (call.arg(3)).to_u32().unwrap() as u8;

    let value: &mut [GLdouble];
    value = _allocator.alloc_array::<GLdouble>(&call.arg(4));
    let _a_GLdouble119_0 = (call.arg(4)).to_array();
    if let Some(_a_GLdouble119_0) = _a_GLdouble119_0 {
        for _jGLdouble119 in 0.._a_GLdouble119_0.values.len() {
    value[_jGLdouble119] = (*_a_GLdouble119_0.values[_jGLdouble119]).to_f64().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::ProgramUniformMatrix2x4dvEXT(program, location, count, transpose, value) };
}

pub fn retrace_glProgramUniformMatrix2x4fvEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let mut transpose: GLboolean;
    transpose = (call.arg(3)).to_u32().unwrap() as u8;

    let value: &mut [GLfloat];
    value = _allocator.alloc_array::<GLfloat>(&call.arg(4));
    let _a_GLfloat216_0 = (call.arg(4)).to_array();
    if let Some(_a_GLfloat216_0) = _a_GLfloat216_0 {
        for _jGLfloat216 in 0.._a_GLfloat216_0.values.len() {
    value[_jGLfloat216] = (*_a_GLfloat216_0.values[_jGLfloat216]).to_f32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::ProgramUniformMatrix2x4fvEXT(program, location, count, transpose, value) };
}

pub fn retrace_glProgramUniformMatrix3dvEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let mut transpose: GLboolean;
    transpose = (call.arg(3)).to_u32().unwrap() as u8;

    let value: &mut [GLdouble];
    value = _allocator.alloc_array::<GLdouble>(&call.arg(4));
    let _a_GLdouble120_0 = (call.arg(4)).to_array();
    if let Some(_a_GLdouble120_0) = _a_GLdouble120_0 {
        for _jGLdouble120 in 0.._a_GLdouble120_0.values.len() {
    value[_jGLdouble120] = (*_a_GLdouble120_0.values[_jGLdouble120]).to_f64().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::ProgramUniformMatrix3dvEXT(program, location, count, transpose, value) };
}

pub fn retrace_glProgramUniformMatrix3fvEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let mut transpose: GLboolean;
    transpose = (call.arg(3)).to_u32().unwrap() as u8;

    let value: &mut [GLfloat];
    value = _allocator.alloc_array::<GLfloat>(&call.arg(4));
    let _a_GLfloat217_0 = (call.arg(4)).to_array();
    if let Some(_a_GLfloat217_0) = _a_GLfloat217_0 {
        for _jGLfloat217 in 0.._a_GLfloat217_0.values.len() {
    value[_jGLfloat217] = (*_a_GLfloat217_0.values[_jGLfloat217]).to_f32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::ProgramUniformMatrix3fvEXT(program, location, count, transpose, value) };
}

pub fn retrace_glProgramUniformMatrix3x2dvEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let mut transpose: GLboolean;
    transpose = (call.arg(3)).to_u32().unwrap() as u8;

    let value: &mut [GLdouble];
    value = _allocator.alloc_array::<GLdouble>(&call.arg(4));
    let _a_GLdouble121_0 = (call.arg(4)).to_array();
    if let Some(_a_GLdouble121_0) = _a_GLdouble121_0 {
        for _jGLdouble121 in 0.._a_GLdouble121_0.values.len() {
    value[_jGLdouble121] = (*_a_GLdouble121_0.values[_jGLdouble121]).to_f64().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::ProgramUniformMatrix3x2dvEXT(program, location, count, transpose, value) };
}

pub fn retrace_glProgramUniformMatrix3x2fvEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let mut transpose: GLboolean;
    transpose = (call.arg(3)).to_u32().unwrap() as u8;

    let value: &mut [GLfloat];
    value = _allocator.alloc_array::<GLfloat>(&call.arg(4));
    let _a_GLfloat218_0 = (call.arg(4)).to_array();
    if let Some(_a_GLfloat218_0) = _a_GLfloat218_0 {
        for _jGLfloat218 in 0.._a_GLfloat218_0.values.len() {
    value[_jGLfloat218] = (*_a_GLfloat218_0.values[_jGLfloat218]).to_f32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::ProgramUniformMatrix3x2fvEXT(program, location, count, transpose, value) };
}

pub fn retrace_glProgramUniformMatrix3x4dvEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let mut transpose: GLboolean;
    transpose = (call.arg(3)).to_u32().unwrap() as u8;

    let value: &mut [GLdouble];
    value = _allocator.alloc_array::<GLdouble>(&call.arg(4));
    let _a_GLdouble122_0 = (call.arg(4)).to_array();
    if let Some(_a_GLdouble122_0) = _a_GLdouble122_0 {
        for _jGLdouble122 in 0.._a_GLdouble122_0.values.len() {
    value[_jGLdouble122] = (*_a_GLdouble122_0.values[_jGLdouble122]).to_f64().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::ProgramUniformMatrix3x4dvEXT(program, location, count, transpose, value) };
}

pub fn retrace_glProgramUniformMatrix3x4fvEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let mut transpose: GLboolean;
    transpose = (call.arg(3)).to_u32().unwrap() as u8;

    let value: &mut [GLfloat];
    value = _allocator.alloc_array::<GLfloat>(&call.arg(4));
    let _a_GLfloat219_0 = (call.arg(4)).to_array();
    if let Some(_a_GLfloat219_0) = _a_GLfloat219_0 {
        for _jGLfloat219 in 0.._a_GLfloat219_0.values.len() {
    value[_jGLfloat219] = (*_a_GLfloat219_0.values[_jGLfloat219]).to_f32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::ProgramUniformMatrix3x4fvEXT(program, location, count, transpose, value) };
}

pub fn retrace_glProgramUniformMatrix4dvEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let mut transpose: GLboolean;
    transpose = (call.arg(3)).to_u32().unwrap() as u8;

    let value: &mut [GLdouble];
    value = _allocator.alloc_array::<GLdouble>(&call.arg(4));
    let _a_GLdouble123_0 = (call.arg(4)).to_array();
    if let Some(_a_GLdouble123_0) = _a_GLdouble123_0 {
        for _jGLdouble123 in 0.._a_GLdouble123_0.values.len() {
    value[_jGLdouble123] = (*_a_GLdouble123_0.values[_jGLdouble123]).to_f64().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::ProgramUniformMatrix4dvEXT(program, location, count, transpose, value) };
}

pub fn retrace_glProgramUniformMatrix4fvEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let mut transpose: GLboolean;
    transpose = (call.arg(3)).to_u32().unwrap() as u8;

    let value: &mut [GLfloat];
    value = _allocator.alloc_array::<GLfloat>(&call.arg(4));
    let _a_GLfloat220_0 = (call.arg(4)).to_array();
    if let Some(_a_GLfloat220_0) = _a_GLfloat220_0 {
        for _jGLfloat220 in 0.._a_GLfloat220_0.values.len() {
    value[_jGLfloat220] = (*_a_GLfloat220_0.values[_jGLfloat220]).to_f32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::ProgramUniformMatrix4fvEXT(program, location, count, transpose, value) };
}

pub fn retrace_glProgramUniformMatrix4x2dvEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let mut transpose: GLboolean;
    transpose = (call.arg(3)).to_u32().unwrap() as u8;

    let value: &mut [GLdouble];
    value = _allocator.alloc_array::<GLdouble>(&call.arg(4));
    let _a_GLdouble124_0 = (call.arg(4)).to_array();
    if let Some(_a_GLdouble124_0) = _a_GLdouble124_0 {
        for _jGLdouble124 in 0.._a_GLdouble124_0.values.len() {
    value[_jGLdouble124] = (*_a_GLdouble124_0.values[_jGLdouble124]).to_f64().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::ProgramUniformMatrix4x2dvEXT(program, location, count, transpose, value) };
}

pub fn retrace_glProgramUniformMatrix4x2fvEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let mut transpose: GLboolean;
    transpose = (call.arg(3)).to_u32().unwrap() as u8;

    let value: &mut [GLfloat];
    value = _allocator.alloc_array::<GLfloat>(&call.arg(4));
    let _a_GLfloat221_0 = (call.arg(4)).to_array();
    if let Some(_a_GLfloat221_0) = _a_GLfloat221_0 {
        for _jGLfloat221 in 0.._a_GLfloat221_0.values.len() {
    value[_jGLfloat221] = (*_a_GLfloat221_0.values[_jGLfloat221]).to_f32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::ProgramUniformMatrix4x2fvEXT(program, location, count, transpose, value) };
}

pub fn retrace_glProgramUniformMatrix4x3dvEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let mut transpose: GLboolean;
    transpose = (call.arg(3)).to_u32().unwrap() as u8;

    let value: &mut [GLdouble];
    value = _allocator.alloc_array::<GLdouble>(&call.arg(4));
    let _a_GLdouble125_0 = (call.arg(4)).to_array();
    if let Some(_a_GLdouble125_0) = _a_GLdouble125_0 {
        for _jGLdouble125 in 0.._a_GLdouble125_0.values.len() {
    value[_jGLdouble125] = (*_a_GLdouble125_0.values[_jGLdouble125]).to_f64().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::ProgramUniformMatrix4x3dvEXT(program, location, count, transpose, value) };
}

pub fn retrace_glProgramUniformMatrix4x3fvEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let mut transpose: GLboolean;
    transpose = (call.arg(3)).to_u32().unwrap() as u8;

    let value: &mut [GLfloat];
    value = _allocator.alloc_array::<GLfloat>(&call.arg(4));
    let _a_GLfloat222_0 = (call.arg(4)).to_array();
    if let Some(_a_GLfloat222_0) = _a_GLfloat222_0 {
        for _jGLfloat222 in 0.._a_GLfloat222_0.values.len() {
    value[_jGLfloat222] = (*_a_GLfloat222_0.values[_jGLfloat222]).to_f32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::ProgramUniformMatrix4x3fvEXT(program, location, count, transpose, value) };
}

pub fn retrace_glPushClientAttribDefaultEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mask: GLbitfield;
    mask = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::PushClientAttribDefaultEXT(mask) };
}

pub fn retrace_glTextureBufferEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut internalformat: GLenum;
    internalformat = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut buffer: GLuint;
    buffer = (call.arg(3)).to_u32().unwrap();
    buffer = self._buffer_map[buffer];

//not found in gl!    unsafe { gl::TextureBufferEXT(texture, target, internalformat, buffer) };
}

pub fn retrace_glTextureBufferRangeEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut internalformat: GLenum;
    internalformat = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut buffer: GLuint;
    buffer = (call.arg(3)).to_u32().unwrap();
    buffer = self._buffer_map[buffer];

    let mut offset: GLintptr;
    offset = (call.arg(4)).to_i32().unwrap();

    let mut size: GLsizeiptr;
    size = (call.arg(5)).to_i32().unwrap();

//not found in gl!    unsafe { gl::TextureBufferRangeEXT(texture, target, internalformat, buffer, offset, size) };
}

pub fn retrace_glTextureImage1DEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(2)).to_i32().unwrap();

    let mut internalformat: GLint;
    internalformat = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let mut width: GLsizei;
    width = (call.arg(4)).to_i32().unwrap();

    let mut border: GLint;
    border = (call.arg(5)).to_i32().unwrap();

    let mut format: GLenum;
    format = (call.arg(6)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(7)).to_u32().unwrap().try_into().unwrap();

    let pixels = (call.arg(8)).to_pointer().unwrap() as *mut c_void;

//not found in gl!    unsafe { gl::TextureImage1DEXT(texture, target, level, internalformat, width, border, format, _type, pixels) };
}

pub fn retrace_glTextureImage2DEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(2)).to_i32().unwrap();

    let mut internalformat: GLint;
    internalformat = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let mut width: GLsizei;
    width = (call.arg(4)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(5)).to_i32().unwrap();

    let mut border: GLint;
    border = (call.arg(6)).to_i32().unwrap();

    let mut format: GLenum;
    format = (call.arg(7)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(8)).to_u32().unwrap().try_into().unwrap();

    let pixels = (call.arg(9)).to_pointer().unwrap() as *mut c_void;

//not found in gl!    unsafe { gl::TextureImage2DEXT(texture, target, level, internalformat, width, height, border, format, _type, pixels) };
}

pub fn retrace_glTextureImage3DEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(2)).to_i32().unwrap();

    let mut internalformat: GLint;
    internalformat = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let mut width: GLsizei;
    width = (call.arg(4)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(5)).to_i32().unwrap();

    let mut depth: GLsizei;
    depth = (call.arg(6)).to_i32().unwrap();

    let mut border: GLint;
    border = (call.arg(7)).to_i32().unwrap();

    let mut format: GLenum;
    format = (call.arg(8)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(9)).to_u32().unwrap().try_into().unwrap();

    let pixels = (call.arg(10)).to_pointer().unwrap() as *mut c_void;

//not found in gl!    unsafe { gl::TextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, format, _type, pixels) };
}

pub fn retrace_glTexturePageCommitmentEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut level: GLint;
    level = (call.arg(1)).to_i32().unwrap();

    let mut xoffset: GLint;
    xoffset = (call.arg(2)).to_i32().unwrap();

    let mut yoffset: GLint;
    yoffset = (call.arg(3)).to_i32().unwrap();

    let mut zoffset: GLint;
    zoffset = (call.arg(4)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(5)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(6)).to_i32().unwrap();

    let mut depth: GLsizei;
    depth = (call.arg(7)).to_i32().unwrap();

    let mut commit: GLboolean;
    commit = (call.arg(8)).to_u32().unwrap() as u8;

//not found in gl!    unsafe { gl::TexturePageCommitmentEXT(texture, level, xoffset, yoffset, zoffset, width, height, depth, commit) };
}

pub fn retrace_glTextureParameterIivEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLint];
    params = _allocator.alloc_array::<GLint>(&call.arg(3));
    let _a_GLint232_0 = (call.arg(3)).to_array();
    if let Some(_a_GLint232_0) = _a_GLint232_0 {
        for _jGLint232 in 0.._a_GLint232_0.values.len() {
    params[_jGLint232] = (*_a_GLint232_0.values[_jGLint232]).to_i32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::TextureParameterIivEXT(texture, target, pname, params) };
}

pub fn retrace_glTextureParameterIuivEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLuint];
    params = _allocator.alloc_array::<GLuint>(&call.arg(3));
    let _a_GLuint210_0 = (call.arg(3)).to_array();
    if let Some(_a_GLuint210_0) = _a_GLuint210_0 {
        for _jGLuint210 in 0.._a_GLuint210_0.values.len() {
    params[_jGLuint210] = (*_a_GLuint210_0.values[_jGLuint210]).to_u32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::TextureParameterIuivEXT(texture, target, pname, params) };
}

pub fn retrace_glTextureParameterfEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut param: GLfloat;
    param = (call.arg(3)).to_f32().unwrap();

//not found in gl!    unsafe { gl::TextureParameterfEXT(texture, target, pname, param) };
}

pub fn retrace_glTextureParameterfvEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLfloat];
    params = _allocator.alloc_array::<GLfloat>(&call.arg(3));
    let _a_GLfloat223_0 = (call.arg(3)).to_array();
    if let Some(_a_GLfloat223_0) = _a_GLfloat223_0 {
        for _jGLfloat223 in 0.._a_GLfloat223_0.values.len() {
    params[_jGLfloat223] = (*_a_GLfloat223_0.values[_jGLfloat223]).to_f32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::TextureParameterfvEXT(texture, target, pname, params) };
}

pub fn retrace_glTextureParameteriEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut param: GLint;
    param = (call.arg(3)).to_i32().unwrap();

//not found in gl!    unsafe { gl::TextureParameteriEXT(texture, target, pname, param) };
}

pub fn retrace_glTextureParameterivEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLint];
    params = _allocator.alloc_array::<GLint>(&call.arg(3));
    let _a_GLint233_0 = (call.arg(3)).to_array();
    if let Some(_a_GLint233_0) = _a_GLint233_0 {
        for _jGLint233 in 0.._a_GLint233_0.values.len() {
    params[_jGLint233] = (*_a_GLint233_0.values[_jGLint233]).to_i32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::TextureParameterivEXT(texture, target, pname, params) };
}

pub fn retrace_glTextureRenderbufferEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut renderbuffer: GLuint;
    renderbuffer = (call.arg(2)).to_u32().unwrap();
    renderbuffer = self._renderbuffer_map[renderbuffer];

//not found in gl!    unsafe { gl::TextureRenderbufferEXT(texture, target, renderbuffer) };
}

pub fn retrace_glTextureStorage1DEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut levels: GLsizei;
    levels = (call.arg(2)).to_i32().unwrap();

    let mut internalformat: GLenum;
    internalformat = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let mut width: GLsizei;
    width = (call.arg(4)).to_i32().unwrap();

//not found in gl!    unsafe { gl::TextureStorage1DEXT(texture, target, levels, internalformat, width) };
}

pub fn retrace_glTextureStorage2DEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut levels: GLsizei;
    levels = (call.arg(2)).to_i32().unwrap();

    let mut internalformat: GLenum;
    internalformat = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let mut width: GLsizei;
    width = (call.arg(4)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(5)).to_i32().unwrap();

//not found in gl!    unsafe { gl::TextureStorage2DEXT(texture, target, levels, internalformat, width, height) };
}

pub fn retrace_glTextureStorage2DMultisampleEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut samples: GLsizei;
    samples = (call.arg(2)).to_i32().unwrap();
    let max_samples = 0;
//not found in gl!    unsafe { gl::GetIntegerv(gl::MAX_SAMPLES, &max_samples) };
    if samples > max_samples {
        samples = max_samples;
    }

    let mut internalformat: GLenum;
    internalformat = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let mut width: GLsizei;
    width = (call.arg(4)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(5)).to_i32().unwrap();

    let mut fixedsamplelocations: GLboolean;
    fixedsamplelocations = (call.arg(6)).to_u32().unwrap() as u8;

//not found in gl!    unsafe { gl::TextureStorage2DMultisampleEXT(texture, target, samples, internalformat, width, height, fixedsamplelocations) };
}

pub fn retrace_glTextureStorage3DEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut levels: GLsizei;
    levels = (call.arg(2)).to_i32().unwrap();

    let mut internalformat: GLenum;
    internalformat = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let mut width: GLsizei;
    width = (call.arg(4)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(5)).to_i32().unwrap();

    let mut depth: GLsizei;
    depth = (call.arg(6)).to_i32().unwrap();

//not found in gl!    unsafe { gl::TextureStorage3DEXT(texture, target, levels, internalformat, width, height, depth) };
}

pub fn retrace_glTextureStorage3DMultisampleEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut samples: GLsizei;
    samples = (call.arg(2)).to_i32().unwrap();
    let max_samples = 0;
//not found in gl!    unsafe { gl::GetIntegerv(gl::MAX_SAMPLES, &max_samples) };
    if samples > max_samples {
        samples = max_samples;
    }

    let mut internalformat: GLenum;
    internalformat = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let mut width: GLsizei;
    width = (call.arg(4)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(5)).to_i32().unwrap();

    let mut depth: GLsizei;
    depth = (call.arg(6)).to_i32().unwrap();

    let mut fixedsamplelocations: GLboolean;
    fixedsamplelocations = (call.arg(7)).to_u32().unwrap() as u8;

//not found in gl!    unsafe { gl::TextureStorage3DMultisampleEXT(texture, target, samples, internalformat, width, height, depth, fixedsamplelocations) };
}

pub fn retrace_glTextureSubImage1DEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(2)).to_i32().unwrap();

    let mut xoffset: GLint;
    xoffset = (call.arg(3)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(4)).to_i32().unwrap();

    let mut format: GLenum;
    format = (call.arg(5)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(6)).to_u32().unwrap().try_into().unwrap();

    let pixels = (call.arg(7)).to_pointer().unwrap() as *mut c_void;

//not found in gl!    unsafe { gl::TextureSubImage1DEXT(texture, target, level, xoffset, width, format, _type, pixels) };
}

pub fn retrace_glTextureSubImage2DEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(2)).to_i32().unwrap();

    let mut xoffset: GLint;
    xoffset = (call.arg(3)).to_i32().unwrap();

    let mut yoffset: GLint;
    yoffset = (call.arg(4)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(5)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(6)).to_i32().unwrap();

    let mut format: GLenum;
    format = (call.arg(7)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(8)).to_u32().unwrap().try_into().unwrap();

    let pixels = (call.arg(9)).to_pointer().unwrap() as *mut c_void;

//not found in gl!    unsafe { gl::TextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, _type, pixels) };
}

pub fn retrace_glTextureSubImage3DEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(2)).to_i32().unwrap();

    let mut xoffset: GLint;
    xoffset = (call.arg(3)).to_i32().unwrap();

    let mut yoffset: GLint;
    yoffset = (call.arg(4)).to_i32().unwrap();

    let mut zoffset: GLint;
    zoffset = (call.arg(5)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(6)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(7)).to_i32().unwrap();

    let mut depth: GLsizei;
    depth = (call.arg(8)).to_i32().unwrap();

    let mut format: GLenum;
    format = (call.arg(9)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(10)).to_u32().unwrap().try_into().unwrap();

    let pixels = (call.arg(11)).to_pointer().unwrap() as *mut c_void;

//not found in gl!    unsafe { gl::TextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, _type, pixels) };
}

pub fn retrace_glUnmapNamedBufferEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut buffer: GLuint;
    buffer = (call.arg(0)).to_u32().unwrap();
    buffer = self._buffer_map[buffer];

        let ptr = ptr::null_mut() as *mut c_void;
//not found in gl!            unsafe { gl::GetNamedBufferPointervEXT(buffer, gl::BUFFER_MAP_POINTER, &ptr) };
        if (ptr) {
            retrace::delRegionByPointer(ptr);
        } else {
            retrace::warning(call) << "failed to get mapped pointer\n";
        }
//not found in gl!    let _result = unsafe { gl::UnmapNamedBufferEXT(buffer) };

}

pub fn retrace_glVertexArrayBindVertexBufferEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut vaobj: GLuint;
    vaobj = (call.arg(0)).to_u32().unwrap();
    vaobj = self._array_map[DUMMY_CONTEXT][vaobj];

    let mut bindingindex: GLuint;
    bindingindex = (call.arg(1)).to_u32().unwrap();

    let mut buffer: GLuint;
    buffer = (call.arg(2)).to_u32().unwrap();
    buffer = self._buffer_map[buffer];

    let mut offset: GLintptr;
    offset = (call.arg(3)).to_i32().unwrap();

    let mut stride: GLsizei;
    stride = (call.arg(4)).to_i32().unwrap();

//not found in gl!    unsafe { gl::VertexArrayBindVertexBufferEXT(vaobj, bindingindex, buffer, offset, stride) };
}

pub fn retrace_glVertexArrayColorOffsetEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut vaobj: GLuint;
    vaobj = (call.arg(0)).to_u32().unwrap();
    vaobj = self._array_map[DUMMY_CONTEXT][vaobj];

    let mut buffer: GLuint;
    buffer = (call.arg(1)).to_u32().unwrap();
    buffer = self._buffer_map[buffer];

    let mut size: GLint;
    size = (call.arg(2)).to_i32().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let mut stride: GLsizei;
    stride = (call.arg(4)).to_i32().unwrap();

    let mut offset: GLintptr;
    offset = (call.arg(5)).to_i32().unwrap();

//not found in gl!    unsafe { gl::VertexArrayColorOffsetEXT(vaobj, buffer, size, _type, stride, offset) };
}

pub fn retrace_glVertexArrayEdgeFlagOffsetEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut vaobj: GLuint;
    vaobj = (call.arg(0)).to_u32().unwrap();
    vaobj = self._array_map[DUMMY_CONTEXT][vaobj];

    let mut buffer: GLuint;
    buffer = (call.arg(1)).to_u32().unwrap();
    buffer = self._buffer_map[buffer];

    let mut stride: GLsizei;
    stride = (call.arg(2)).to_i32().unwrap();

    let mut offset: GLintptr;
    offset = (call.arg(3)).to_i32().unwrap();

//not found in gl!    unsafe { gl::VertexArrayEdgeFlagOffsetEXT(vaobj, buffer, stride, offset) };
}

pub fn retrace_glVertexArrayFogCoordOffsetEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut vaobj: GLuint;
    vaobj = (call.arg(0)).to_u32().unwrap();
    vaobj = self._array_map[DUMMY_CONTEXT][vaobj];

    let mut buffer: GLuint;
    buffer = (call.arg(1)).to_u32().unwrap();
    buffer = self._buffer_map[buffer];

    let mut _type: GLenum;
    _type = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut stride: GLsizei;
    stride = (call.arg(3)).to_i32().unwrap();

    let mut offset: GLintptr;
    offset = (call.arg(4)).to_i32().unwrap();

//not found in gl!    unsafe { gl::VertexArrayFogCoordOffsetEXT(vaobj, buffer, _type, stride, offset) };
}

pub fn retrace_glVertexArrayIndexOffsetEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut vaobj: GLuint;
    vaobj = (call.arg(0)).to_u32().unwrap();
    vaobj = self._array_map[DUMMY_CONTEXT][vaobj];

    let mut buffer: GLuint;
    buffer = (call.arg(1)).to_u32().unwrap();
    buffer = self._buffer_map[buffer];

    let mut _type: GLenum;
    _type = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut stride: GLsizei;
    stride = (call.arg(3)).to_i32().unwrap();

    let mut offset: GLintptr;
    offset = (call.arg(4)).to_i32().unwrap();

//not found in gl!    unsafe { gl::VertexArrayIndexOffsetEXT(vaobj, buffer, _type, stride, offset) };
}

pub fn retrace_glVertexArrayMultiTexCoordOffsetEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut vaobj: GLuint;
    vaobj = (call.arg(0)).to_u32().unwrap();
    vaobj = self._array_map[DUMMY_CONTEXT][vaobj];

    let mut buffer: GLuint;
    buffer = (call.arg(1)).to_u32().unwrap();
    buffer = self._buffer_map[buffer];

    let mut texunit: GLenum;
    texunit = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut size: GLint;
    size = (call.arg(3)).to_i32().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(4)).to_u32().unwrap().try_into().unwrap();

    let mut stride: GLsizei;
    stride = (call.arg(5)).to_i32().unwrap();

    let mut offset: GLintptr;
    offset = (call.arg(6)).to_i32().unwrap();

//not found in gl!    unsafe { gl::VertexArrayMultiTexCoordOffsetEXT(vaobj, buffer, texunit, size, _type, stride, offset) };
}

pub fn retrace_glVertexArrayNormalOffsetEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut vaobj: GLuint;
    vaobj = (call.arg(0)).to_u32().unwrap();
    vaobj = self._array_map[DUMMY_CONTEXT][vaobj];

    let mut buffer: GLuint;
    buffer = (call.arg(1)).to_u32().unwrap();
    buffer = self._buffer_map[buffer];

    let mut _type: GLenum;
    _type = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut stride: GLsizei;
    stride = (call.arg(3)).to_i32().unwrap();

    let mut offset: GLintptr;
    offset = (call.arg(4)).to_i32().unwrap();

//not found in gl!    unsafe { gl::VertexArrayNormalOffsetEXT(vaobj, buffer, _type, stride, offset) };
}

pub fn retrace_glVertexArraySecondaryColorOffsetEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut vaobj: GLuint;
    vaobj = (call.arg(0)).to_u32().unwrap();
    vaobj = self._array_map[DUMMY_CONTEXT][vaobj];

    let mut buffer: GLuint;
    buffer = (call.arg(1)).to_u32().unwrap();
    buffer = self._buffer_map[buffer];

    let mut size: GLint;
    size = (call.arg(2)).to_i32().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let mut stride: GLsizei;
    stride = (call.arg(4)).to_i32().unwrap();

    let mut offset: GLintptr;
    offset = (call.arg(5)).to_i32().unwrap();

//not found in gl!    unsafe { gl::VertexArraySecondaryColorOffsetEXT(vaobj, buffer, size, _type, stride, offset) };
}

pub fn retrace_glVertexArrayTexCoordOffsetEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut vaobj: GLuint;
    vaobj = (call.arg(0)).to_u32().unwrap();
    vaobj = self._array_map[DUMMY_CONTEXT][vaobj];

    let mut buffer: GLuint;
    buffer = (call.arg(1)).to_u32().unwrap();
    buffer = self._buffer_map[buffer];

    let mut size: GLint;
    size = (call.arg(2)).to_i32().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let mut stride: GLsizei;
    stride = (call.arg(4)).to_i32().unwrap();

    let mut offset: GLintptr;
    offset = (call.arg(5)).to_i32().unwrap();

//not found in gl!    unsafe { gl::VertexArrayTexCoordOffsetEXT(vaobj, buffer, size, _type, stride, offset) };
}

pub fn retrace_glVertexArrayVertexAttribBindingEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut vaobj: GLuint;
    vaobj = (call.arg(0)).to_u32().unwrap();
    vaobj = self._array_map[DUMMY_CONTEXT][vaobj];

    let mut attribindex: GLuint;
    attribindex = (call.arg(1)).to_u32().unwrap();

    let mut bindingindex: GLuint;
    bindingindex = (call.arg(2)).to_u32().unwrap();

//not found in gl!    unsafe { gl::VertexArrayVertexAttribBindingEXT(vaobj, attribindex, bindingindex) };
}

pub fn retrace_glVertexArrayVertexAttribDivisorEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut vaobj: GLuint;
    vaobj = (call.arg(0)).to_u32().unwrap();
    vaobj = self._array_map[DUMMY_CONTEXT][vaobj];

    let mut index: GLuint;
    index = (call.arg(1)).to_u32().unwrap();

    let mut divisor: GLuint;
    divisor = (call.arg(2)).to_u32().unwrap();

//not found in gl!    unsafe { gl::VertexArrayVertexAttribDivisorEXT(vaobj, index, divisor) };
}

pub fn retrace_glVertexArrayVertexAttribFormatEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut vaobj: GLuint;
    vaobj = (call.arg(0)).to_u32().unwrap();
    vaobj = self._array_map[DUMMY_CONTEXT][vaobj];

    let mut attribindex: GLuint;
    attribindex = (call.arg(1)).to_u32().unwrap();

    let mut size: GLint;
    size = (call.arg(2)).to_i32().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let mut normalized: GLboolean;
    normalized = (call.arg(4)).to_u32().unwrap() as u8;

    let mut relativeoffset: GLuint;
    relativeoffset = (call.arg(5)).to_u32().unwrap();

//not found in gl!    unsafe { gl::VertexArrayVertexAttribFormatEXT(vaobj, attribindex, size, _type, normalized, relativeoffset) };
}

pub fn retrace_glVertexArrayVertexAttribIFormatEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut vaobj: GLuint;
    vaobj = (call.arg(0)).to_u32().unwrap();
    vaobj = self._array_map[DUMMY_CONTEXT][vaobj];

    let mut attribindex: GLuint;
    attribindex = (call.arg(1)).to_u32().unwrap();

    let mut size: GLint;
    size = (call.arg(2)).to_i32().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let mut relativeoffset: GLuint;
    relativeoffset = (call.arg(4)).to_u32().unwrap();

//not found in gl!    unsafe { gl::VertexArrayVertexAttribIFormatEXT(vaobj, attribindex, size, _type, relativeoffset) };
}

pub fn retrace_glVertexArrayVertexAttribIOffsetEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut vaobj: GLuint;
    vaobj = (call.arg(0)).to_u32().unwrap();
    vaobj = self._array_map[DUMMY_CONTEXT][vaobj];

    let mut buffer: GLuint;
    buffer = (call.arg(1)).to_u32().unwrap();
    buffer = self._buffer_map[buffer];

    let mut index: GLuint;
    index = (call.arg(2)).to_u32().unwrap();

    let mut size: GLint;
    size = (call.arg(3)).to_i32().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(4)).to_u32().unwrap().try_into().unwrap();

    let mut stride: GLsizei;
    stride = (call.arg(5)).to_i32().unwrap();

    let mut offset: GLintptr;
    offset = (call.arg(6)).to_i32().unwrap();

//not found in gl!    unsafe { gl::VertexArrayVertexAttribIOffsetEXT(vaobj, buffer, index, size, _type, stride, offset) };
}

pub fn retrace_glVertexArrayVertexAttribLFormatEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut vaobj: GLuint;
    vaobj = (call.arg(0)).to_u32().unwrap();
    vaobj = self._array_map[DUMMY_CONTEXT][vaobj];

    let mut attribindex: GLuint;
    attribindex = (call.arg(1)).to_u32().unwrap();

    let mut size: GLint;
    size = (call.arg(2)).to_i32().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let mut relativeoffset: GLuint;
    relativeoffset = (call.arg(4)).to_u32().unwrap();

//not found in gl!    unsafe { gl::VertexArrayVertexAttribLFormatEXT(vaobj, attribindex, size, _type, relativeoffset) };
}

pub fn retrace_glVertexArrayVertexAttribLOffsetEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut vaobj: GLuint;
    vaobj = (call.arg(0)).to_u32().unwrap();
    vaobj = self._array_map[DUMMY_CONTEXT][vaobj];

    let mut buffer: GLuint;
    buffer = (call.arg(1)).to_u32().unwrap();
    buffer = self._buffer_map[buffer];

    let mut index: GLuint;
    index = (call.arg(2)).to_u32().unwrap();

    let mut size: GLint;
    size = (call.arg(3)).to_i32().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(4)).to_u32().unwrap().try_into().unwrap();

    let mut stride: GLsizei;
    stride = (call.arg(5)).to_i32().unwrap();

    let mut offset: GLintptr;
    offset = (call.arg(6)).to_i32().unwrap();

//not found in gl!    unsafe { gl::VertexArrayVertexAttribLOffsetEXT(vaobj, buffer, index, size, _type, stride, offset) };
}

pub fn retrace_glVertexArrayVertexAttribOffsetEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut vaobj: GLuint;
    vaobj = (call.arg(0)).to_u32().unwrap();
    vaobj = self._array_map[DUMMY_CONTEXT][vaobj];

    let mut buffer: GLuint;
    buffer = (call.arg(1)).to_u32().unwrap();
    buffer = self._buffer_map[buffer];

    let mut index: GLuint;
    index = (call.arg(2)).to_u32().unwrap();

    let mut size: GLint;
    size = (call.arg(3)).to_i32().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(4)).to_u32().unwrap().try_into().unwrap();

    let mut normalized: GLboolean;
    normalized = (call.arg(5)).to_u32().unwrap() as u8;

    let mut stride: GLsizei;
    stride = (call.arg(6)).to_i32().unwrap();

    let mut offset: GLintptr;
    offset = (call.arg(7)).to_i32().unwrap();

//not found in gl!    unsafe { gl::VertexArrayVertexAttribOffsetEXT(vaobj, buffer, index, size, _type, normalized, stride, offset) };
}

pub fn retrace_glVertexArrayVertexBindingDivisorEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut vaobj: GLuint;
    vaobj = (call.arg(0)).to_u32().unwrap();
    vaobj = self._array_map[DUMMY_CONTEXT][vaobj];

    let mut bindingindex: GLuint;
    bindingindex = (call.arg(1)).to_u32().unwrap();

    let mut divisor: GLuint;
    divisor = (call.arg(2)).to_u32().unwrap();

//not found in gl!    unsafe { gl::VertexArrayVertexBindingDivisorEXT(vaobj, bindingindex, divisor) };
}

pub fn retrace_glVertexArrayVertexOffsetEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut vaobj: GLuint;
    vaobj = (call.arg(0)).to_u32().unwrap();
    vaobj = self._array_map[DUMMY_CONTEXT][vaobj];

    let mut buffer: GLuint;
    buffer = (call.arg(1)).to_u32().unwrap();
    buffer = self._buffer_map[buffer];

    let mut size: GLint;
    size = (call.arg(2)).to_i32().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let mut stride: GLsizei;
    stride = (call.arg(4)).to_i32().unwrap();

    let mut offset: GLintptr;
    offset = (call.arg(5)).to_i32().unwrap();

//not found in gl!    unsafe { gl::VertexArrayVertexOffsetEXT(vaobj, buffer, size, _type, stride, offset) };
}

pub fn retrace_glDiscardFramebufferEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut numAttachments: GLsizei;
    numAttachments = (call.arg(1)).to_i32().unwrap();

    let attachments: &mut [GLenum];
    attachments = _allocator.alloc_array::<GLenum>(&call.arg(2));
    let _a_GLenum24_0 = (call.arg(2)).to_array();
    if let Some(_a_GLenum24_0) = _a_GLenum24_0 {
        for _jGLenum24 in 0.._a_GLenum24_0.values.len() {
    attachments[_jGLenum24] = (*_a_GLenum24_0.values[_jGLenum24]).to_u32().unwrap().try_into().unwrap();
        }
    }
    let attachments = attachments.as_mut_ptr();

//not found in gl!    unsafe { gl::DiscardFramebufferEXT(target, numAttachments, attachments) };
}

pub fn retrace_glGenQueriesEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut n: GLsizei;
    n = (call.arg(0)).to_i32().unwrap();

    let ids: &mut [GLuint];
    ids = _allocator.alloc_array::<GLuint>(&call.arg(1));

//not found in gl!    unsafe { gl::GenQueriesEXT(n, ids) };
    let _aGLuint212 = (call.arg(1)).to_array();
    if (_aGLuint212) {
        for _jGLuint212 in 0.._aGLuint212.values.len() {
    let _origResult: GLuint;
    _origResult = (_aGLuint212.values[_jGLuint212]).to_u32().unwrap();
    self._query_map[_origResult] = ids[_jGLuint212]; 
        }
    }
}

pub fn retrace_glDeleteQueriesEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut n: GLsizei;
    n = (call.arg(0)).to_i32().unwrap();

    let ids: &mut [GLuint];
    ids = _allocator.alloc_array::<GLuint>(&call.arg(1));
    let _a_GLuint213_0 = (call.arg(1)).to_array();
    if let Some(_a_GLuint213_0) = _a_GLuint213_0 {
        for _jGLuint213 in 0.._a_GLuint213_0.values.len() {
    ids[_jGLuint213] = (*_a_GLuint213_0.values[_jGLuint213]).to_u32().unwrap();
    ids[_jGLuint213] = self._query_map[ids[_jGLuint213]];
        }
    }
    let ids = ids.as_mut_ptr();

//not found in gl!    unsafe { gl::DeleteQueriesEXT(n, ids) };
}

pub fn retrace_glBeginQueryEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut id: GLuint;
    id = (call.arg(1)).to_u32().unwrap();
    id = self._query_map[id];

//not found in gl!    unsafe { gl::BeginQueryEXT(target, id) };
}

pub fn retrace_glEndQueryEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::EndQueryEXT(target) };
}

pub fn retrace_glQueryCounterEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut id: GLuint;
    id = (call.arg(0)).to_u32().unwrap();
    id = self._query_map[id];

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::QueryCounterEXT(id, target) };
}

pub fn retrace_glGetQueryObjectivEXT(&mut self, call: &mut Call) {
    let _query_buffer = 0;
    if self.context.features("query_buffer_object") {
//not found in gl!        unsafe { gl::GetIntegerv(gl::QUERY_BUFFER_BINDING, &_query_buffer) };
    }
    if (_query_buffer == 0 && retrace::queryHandling == retrace::QUERY_SKIP) {
        return;
    }
'wait_for_query_result: loop {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut id: GLuint;
    id = (call.arg(0)).to_u32().unwrap();
    id = self._query_map[id];

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLint];
    let retval: GLint = 0;
    if _query_buffer != 0 {
        params = (call.arg(2)).to_pointer();
    } else {
        params = retval };

//not found in gl!    unsafe { gl::GetQueryObjectivEXT(id, pname, params) };
    let _aGLint235 = (call.arg(2)).to_array();
    if (_aGLint235) {
        for _jGLint235 in 0.._aGLint235.values.len() {
        }
    }
    if _query_buffer == 0 && queryHandling != QUERY_SKIP {
        let query_result = call.arg(2).to_array().unwrap();
        let expect = query_result.values[0].to_u32().unwrap();
        if call.arg(1).to_u32().unwrap() == gl::QUERY_RESULT_AVAILABLE {
            if expect == 1 && retval == 0 {
                continue 'wait_for_query_result;
        }} else if queryHandling == QUERY_RUN_AND_CHECK_RESULT {
            let diff = (expect as i64 - retval as i64).abs(); 
            if diff > 0 as i64 {
                println!("Warning: query returned {}  but trace contained {} (tol = {})", retval, expect, retrace::queryTolerance);
            }
        }
    break 'wait_for_query_result;
    }
}
}

pub fn retrace_glGetQueryObjectuivEXT(&mut self, call: &mut Call) {
    let _query_buffer = 0;
    if self.context.features("query_buffer_object") {
//not found in gl!        unsafe { gl::GetIntegerv(gl::QUERY_BUFFER_BINDING, &_query_buffer) };
    }
    if (_query_buffer == 0 && retrace::queryHandling == retrace::QUERY_SKIP) {
        return;
    }
'wait_for_query_result: loop {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut id: GLuint;
    id = (call.arg(0)).to_u32().unwrap();
    id = self._query_map[id];

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLuint];
    let retval: GLuint = 0;
    if _query_buffer != 0 {
        params = (call.arg(2)).to_pointer();
    } else {
        params = retval };

//not found in gl!    unsafe { gl::GetQueryObjectuivEXT(id, pname, params) };
    let _aGLuint215 = (call.arg(2)).to_array();
    if (_aGLuint215) {
        for _jGLuint215 in 0.._aGLuint215.values.len() {
        }
    }
    if _query_buffer == 0 && queryHandling != QUERY_SKIP {
        let query_result = call.arg(2).to_array().unwrap();
        let expect = query_result.values[0].to_u32().unwrap();
        if call.arg(1).to_u32().unwrap() == gl::QUERY_RESULT_AVAILABLE {
            if expect == 1 && retval == 0 {
                continue 'wait_for_query_result;
        }} else if queryHandling == QUERY_RUN_AND_CHECK_RESULT {
            let diff = (expect as i64 - retval as i64).abs(); 
            if diff > 0 as i64 {
                println!("Warning: query returned {}  but trace contained {} (tol = {})", retval, expect, retrace::queryTolerance);
            }
        }
    break 'wait_for_query_result;
    }
}
}

pub fn retrace_glGetQueryObjecti64vEXT(&mut self, call: &mut Call) {
    let _query_buffer = 0;
    if self.context.features("query_buffer_object") {
//not found in gl!        unsafe { gl::GetIntegerv(gl::QUERY_BUFFER_BINDING, &_query_buffer) };
    }
    if (_query_buffer == 0 && retrace::queryHandling == retrace::QUERY_SKIP) {
        return;
    }
'wait_for_query_result: loop {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut id: GLuint;
    id = (call.arg(0)).to_u32().unwrap();
    id = self._query_map[id];

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLint64];
    let retval: GLint64 = 0;
    if _query_buffer != 0 {
        params = (call.arg(2)).to_pointer();
    } else {
        params = retval };

//not found in gl!    unsafe { gl::GetQueryObjecti64vEXT(id, pname, params) };
    let _aGLint6425 = (call.arg(2)).to_array();
    if (_aGLint6425) {
        for _jGLint6425 in 0.._aGLint6425.values.len() {
        }
    }
    if _query_buffer == 0 && queryHandling != QUERY_SKIP {
        let query_result = call.arg(2).to_array().unwrap();
        let expect = query_result.values[0].to_u32().unwrap();
        if call.arg(1).to_u32().unwrap() == gl::QUERY_RESULT_AVAILABLE {
            if expect == 1 && retval == 0 {
                continue 'wait_for_query_result;
        }} else if queryHandling == QUERY_RUN_AND_CHECK_RESULT {
            let diff = (expect as i64 - retval as i64).abs(); 
            if diff > 0 as i64 {
                println!("Warning: query returned {}  but trace contained {} (tol = {})", retval, expect, retrace::queryTolerance);
            }
        }
    break 'wait_for_query_result;
    }
}
}

pub fn retrace_glGetQueryObjectui64vEXT(&mut self, call: &mut Call) {
    let _query_buffer = 0;
    if self.context.features("query_buffer_object") {
//not found in gl!        unsafe { gl::GetIntegerv(gl::QUERY_BUFFER_BINDING, &_query_buffer) };
    }
    if (_query_buffer == 0 && retrace::queryHandling == retrace::QUERY_SKIP) {
        return;
    }
'wait_for_query_result: loop {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut id: GLuint;
    id = (call.arg(0)).to_u32().unwrap();
    id = self._query_map[id];

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLuint64];
    let retval: GLuint64 = 0;
    if _query_buffer != 0 {
        params = (call.arg(2)).to_pointer();
    } else {
        params = retval };

//not found in gl!    unsafe { gl::GetQueryObjectui64vEXT(id, pname, params) };
    let _aGLuint6422 = (call.arg(2)).to_array();
    if (_aGLuint6422) {
        for _jGLuint6422 in 0.._aGLuint6422.values.len() {
        }
    }
    if _query_buffer == 0 && queryHandling != QUERY_SKIP {
        let query_result = call.arg(2).to_array().unwrap();
        let expect = query_result.values[0].to_u32().unwrap();
        if call.arg(1).to_u32().unwrap() == gl::QUERY_RESULT_AVAILABLE {
            if expect == 1 && retval == 0 {
                continue 'wait_for_query_result;
        }} else if queryHandling == QUERY_RUN_AND_CHECK_RESULT {
            let diff = (expect as i64 - retval as i64).abs(); 
            if diff > 0 as i64 {
                println!("Warning: query returned {}  but trace contained {} (tol = {})", retval, expect, retrace::queryTolerance);
            }
        }
    break 'wait_for_query_result;
    }
}
}

pub fn retrace_glDrawBuffersEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut n: GLsizei;
    n = (call.arg(0)).to_i32().unwrap();

    let bufs: &mut [GLenum];
    bufs = _allocator.alloc_array::<GLenum>(&call.arg(1));
    let _a_GLenum25_0 = (call.arg(1)).to_array();
    if let Some(_a_GLenum25_0) = _a_GLenum25_0 {
        for _jGLenum25 in 0.._a_GLenum25_0.values.len() {
    bufs[_jGLenum25] = (*_a_GLenum25_0.values[_jGLenum25]).to_u32().unwrap().try_into().unwrap();
        }
    }
    let bufs = bufs.as_mut_ptr();

//not found in gl!    unsafe { gl::DrawBuffersEXT(n, bufs) };
}

pub fn retrace_glColorMaskIndexedEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut r: GLboolean;
    r = (call.arg(1)).to_u32().unwrap() as u8;

    let mut g: GLboolean;
    g = (call.arg(2)).to_u32().unwrap() as u8;

    let mut b: GLboolean;
    b = (call.arg(3)).to_u32().unwrap() as u8;

    let mut a: GLboolean;
    a = (call.arg(4)).to_u32().unwrap() as u8;

//not found in gl!    unsafe { gl::ColorMaskIndexedEXT(index, r, g, b, a) };
}

pub fn retrace_glEnableIndexedEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut index: GLuint;
    index = (call.arg(1)).to_u32().unwrap();

//not found in gl!    unsafe { gl::EnableIndexedEXT(target, index) };
}

pub fn retrace_glDisableIndexedEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut index: GLuint;
    index = (call.arg(1)).to_u32().unwrap();

//not found in gl!    unsafe { gl::DisableIndexedEXT(target, index) };
}

pub fn retrace_glEnableiEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut index: GLuint;
    index = (call.arg(1)).to_u32().unwrap();

//not found in gl!    unsafe { gl::EnableiEXT(target, index) };
}

pub fn retrace_glDisableiEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut index: GLuint;
    index = (call.arg(1)).to_u32().unwrap();

//not found in gl!    unsafe { gl::DisableiEXT(target, index) };
}

pub fn retrace_glBlendEquationiEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut buf: GLuint;
    buf = (call.arg(0)).to_u32().unwrap();

    let mut mode: GLenum;
    mode = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::BlendEquationiEXT(buf, mode) };
}

pub fn retrace_glBlendEquationSeparateiEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut buf: GLuint;
    buf = (call.arg(0)).to_u32().unwrap();

    let mut modeRGB: GLenum;
    modeRGB = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut modeAlpha: GLenum;
    modeAlpha = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::BlendEquationSeparateiEXT(buf, modeRGB, modeAlpha) };
}

pub fn retrace_glBlendFunciEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut buf: GLuint;
    buf = (call.arg(0)).to_u32().unwrap();

    let mut src: GLenum;
    src = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut dst: GLenum;
    dst = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::BlendFunciEXT(buf, src, dst) };
}

pub fn retrace_glBlendFuncSeparateiEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut buf: GLuint;
    buf = (call.arg(0)).to_u32().unwrap();

    let mut srcRGB: GLenum;
    srcRGB = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut dstRGB: GLenum;
    dstRGB = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut srcAlpha: GLenum;
    srcAlpha = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let mut dstAlpha: GLenum;
    dstAlpha = (call.arg(4)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::BlendFuncSeparateiEXT(buf, srcRGB, dstRGB, srcAlpha, dstAlpha) };
}

pub fn retrace_glColorMaskiEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut r: GLboolean;
    r = (call.arg(1)).to_u32().unwrap() as u8;

    let mut g: GLboolean;
    g = (call.arg(2)).to_u32().unwrap() as u8;

    let mut b: GLboolean;
    b = (call.arg(3)).to_u32().unwrap() as u8;

    let mut a: GLboolean;
    a = (call.arg(4)).to_u32().unwrap() as u8;

//not found in gl!    unsafe { gl::ColorMaskiEXT(index, r, g, b, a) };
}

pub fn retrace_glDrawElementsBaseVertexEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let indices: &mut [GLc_void];
            indices = (call.arg(3)).to_pointer().unwrap() as *mut c_void;

    let mut basevertex: GLint;
    basevertex = (call.arg(4)).to_i32().unwrap();

//not found in gl!    unsafe { gl::DrawElementsBaseVertexEXT(mode, count, _type, indices, basevertex) };
}

pub fn retrace_glDrawRangeElementsBaseVertexEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut start: GLuint;
    start = (call.arg(1)).to_u32().unwrap();

    let mut end: GLuint;
    end = (call.arg(2)).to_u32().unwrap();

    let mut count: GLsizei;
    count = (call.arg(3)).to_i32().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(4)).to_u32().unwrap().try_into().unwrap();

    let indices: &mut [GLc_void];
            indices = (call.arg(5)).to_pointer().unwrap() as *mut c_void;

    let mut basevertex: GLint;
    basevertex = (call.arg(6)).to_i32().unwrap();

//not found in gl!    unsafe { gl::DrawRangeElementsBaseVertexEXT(mode, start, end, count, _type, indices, basevertex) };
}

pub fn retrace_glDrawElementsInstancedBaseVertexEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let indices: &mut [GLc_void];
            indices = (call.arg(3)).to_pointer().unwrap() as *mut c_void;

    let mut instancecount: GLsizei;
    instancecount = (call.arg(4)).to_i32().unwrap();

    let mut basevertex: GLint;
    basevertex = (call.arg(5)).to_i32().unwrap();

//not found in gl!    unsafe { gl::DrawElementsInstancedBaseVertexEXT(mode, count, _type, indices, instancecount, basevertex) };
}

pub fn retrace_glMultiDrawElementsBaseVertexEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let count: &mut [GLsizei];
    count = _allocator.alloc_array::<GLsizei>(&call.arg(1));
    let _a_GLsizei12_0 = (call.arg(1)).to_array();
    if let Some(_a_GLsizei12_0) = _a_GLsizei12_0 {
        for _jGLsizei12 in 0.._a_GLsizei12_0.values.len() {
    count[_jGLsizei12] = (*_a_GLsizei12_0.values[_jGLsizei12]).to_i32().unwrap();
        }
    }
    let count = count.as_mut_ptr();

    let mut _type: GLenum;
    _type = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let indices: &mut [GLc_void];
    indices = _allocator.alloc_array::< GLvoid >(&call.arg(3));
    let _a_constGLvoid245_0 = (call.arg(3)).to_array();
    if let Some(_a_constGLvoid245_0) = _a_constGLvoid245_0 {
        for _jconstGLvoid245 in 0.._a_constGLvoid245_0.values.len() {
            indices[_jconstGLvoid245] = (*_a_constGLvoid245_0.values[_jconstGLvoid245]).to_pointer().unwrap() as *mut c_void;
        }
    }
    let indices = indices.as_mut_ptr();

    let mut drawcount: GLsizei;
    drawcount = (call.arg(4)).to_i32().unwrap();

    let basevertex: &mut [GLint];
    basevertex = _allocator.alloc_array::<GLint>(&call.arg(5));
    let _a_GLint236_0 = (call.arg(5)).to_array();
    if let Some(_a_GLint236_0) = _a_GLint236_0 {
        for _jGLint236 in 0.._a_GLint236_0.values.len() {
    basevertex[_jGLint236] = (*_a_GLint236_0.values[_jGLint236]).to_i32().unwrap();
        }
    }
    let basevertex = basevertex.as_mut_ptr();

//not found in gl!    unsafe { gl::MultiDrawElementsBaseVertexEXT(mode, count, _type, indices, drawcount, basevertex) };
}

pub fn retrace_glDrawArraysInstancedEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut first: GLint;
    first = (call.arg(1)).to_i32().unwrap();

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let mut instancecount: GLsizei;
    instancecount = (call.arg(3)).to_i32().unwrap();

//not found in gl!    unsafe { gl::DrawArraysInstancedEXT(mode, first, count, instancecount) };
}

pub fn retrace_glDrawElementsInstancedEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let indices: &mut [GLc_void];
            indices = (call.arg(3)).to_pointer().unwrap() as *mut c_void;

    let mut instancecount: GLsizei;
    instancecount = (call.arg(4)).to_i32().unwrap();

//not found in gl!    unsafe { gl::DrawElementsInstancedEXT(mode, count, _type, indices, instancecount) };
}

pub fn retrace_glDrawRangeElementsEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut start: GLuint;
    start = (call.arg(1)).to_u32().unwrap();

    let mut end: GLuint;
    end = (call.arg(2)).to_u32().unwrap();

    let mut count: GLsizei;
    count = (call.arg(3)).to_i32().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(4)).to_u32().unwrap().try_into().unwrap();

    let indices: &mut [GLc_void];
            indices = (call.arg(5)).to_pointer().unwrap() as *mut c_void;

//not found in gl!    unsafe { gl::DrawRangeElementsEXT(mode, start, end, count, _type, indices) };
}

pub fn retrace_glFogCoordfEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut coord: GLfloat;
    coord = (call.arg(0)).to_f32().unwrap();

//not found in gl!    unsafe { gl::FogCoordfEXT(coord) };
}

pub fn retrace_glFogCoordfvEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let coord: &mut [GLfloat];
    coord = _allocator.alloc_array::<GLfloat>(&call.arg(0));
    let _a_PGLfloat20_0 = (call.arg(0)).to_array().unwrap();
    coord[0] = (_a_PGLfloat20_0.values[0]).to_f32().unwrap();

//not found in gl!    unsafe { gl::FogCoordfvEXT(coord) };
}

pub fn retrace_glFogCoorddEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut coord: GLdouble;
    coord = (call.arg(0)).to_f64().unwrap();

//not found in gl!    unsafe { gl::FogCoorddEXT(coord) };
}

pub fn retrace_glFogCoorddvEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let coord: &mut [GLdouble];
    coord = _allocator.alloc_array::<GLdouble>(&call.arg(0));
    let _a_PGLdouble11_0 = (call.arg(0)).to_array().unwrap();
    coord[0] = (_a_PGLdouble11_0.values[0]).to_f64().unwrap();

//not found in gl!    unsafe { gl::FogCoorddvEXT(coord) };
}

pub fn retrace_glFogCoordPointerEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut _type: GLenum;
    _type = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut stride: GLsizei;
    stride = (call.arg(1)).to_i32().unwrap();

    let pointer: &mut [GLc_void];
    pointer = region::to_pointer(call.arg(2), true);

//not found in gl!    unsafe { gl::FogCoordPointerEXT(_type, stride, pointer) };
}

pub fn retrace_glBlitFramebufferEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut srcX0: GLint;
    srcX0 = (call.arg(0)).to_i32().unwrap();

    let mut srcY0: GLint;
    srcY0 = (call.arg(1)).to_i32().unwrap();

    let mut srcX1: GLint;
    srcX1 = (call.arg(2)).to_i32().unwrap();

    let mut srcY1: GLint;
    srcY1 = (call.arg(3)).to_i32().unwrap();

    let mut dstX0: GLint;
    dstX0 = (call.arg(4)).to_i32().unwrap();

    let mut dstY0: GLint;
    dstY0 = (call.arg(5)).to_i32().unwrap();

    let mut dstX1: GLint;
    dstX1 = (call.arg(6)).to_i32().unwrap();

    let mut dstY1: GLint;
    dstY1 = (call.arg(7)).to_i32().unwrap();

    let mut mask: GLbitfield;
    mask = (call.arg(8)).to_u32().unwrap().try_into().unwrap();

    let mut filter: GLenum;
    filter = (call.arg(9)).to_u32().unwrap().try_into().unwrap();

    glretrace::updateDrawable(std::max(dstX0, dstX1), std::max(dstY0, dstY1));
//not found in gl!    unsafe { gl::BlitFramebufferEXT(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) };
}

pub fn retrace_glRenderbufferStorageMultisampleEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut samples: GLsizei;
    samples = (call.arg(1)).to_i32().unwrap();
    let max_samples = 0;
//not found in gl!    unsafe { gl::GetIntegerv(gl::MAX_SAMPLES, &max_samples) };
    if samples > max_samples {
        samples = max_samples;
    }

    let mut internalformat: GLenum;
    internalformat = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut width: GLsizei;
    width = (call.arg(3)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(4)).to_i32().unwrap();

//not found in gl!    unsafe { gl::RenderbufferStorageMultisampleEXT(target, samples, internalformat, width, height) };
}

pub fn retrace_glBindRenderbufferEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut renderbuffer: GLuint;
    renderbuffer = (call.arg(1)).to_u32().unwrap();
    renderbuffer = self._renderbuffer_map[renderbuffer];

//not found in gl!    unsafe { gl::BindRenderbufferEXT(target, renderbuffer) };
}

pub fn retrace_glDeleteRenderbuffersEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut n: GLsizei;
    n = (call.arg(0)).to_i32().unwrap();

    let renderbuffers: &mut [GLuint];
    renderbuffers = _allocator.alloc_array::<GLuint>(&call.arg(1));
    let _a_GLuint216_0 = (call.arg(1)).to_array();
    if let Some(_a_GLuint216_0) = _a_GLuint216_0 {
        for _jGLuint216 in 0.._a_GLuint216_0.values.len() {
    renderbuffers[_jGLuint216] = (*_a_GLuint216_0.values[_jGLuint216]).to_u32().unwrap();
    renderbuffers[_jGLuint216] = self._renderbuffer_map[renderbuffers[_jGLuint216]];
        }
    }
    let renderbuffers = renderbuffers.as_mut_ptr();

//not found in gl!    unsafe { gl::DeleteRenderbuffersEXT(n, renderbuffers) };
}

pub fn retrace_glGenRenderbuffersEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut n: GLsizei;
    n = (call.arg(0)).to_i32().unwrap();

    let renderbuffers: &mut [GLuint];
    renderbuffers = _allocator.alloc_array::<GLuint>(&call.arg(1));

//not found in gl!    unsafe { gl::GenRenderbuffersEXT(n, renderbuffers) };
    let _aGLuint218 = (call.arg(1)).to_array();
    if (_aGLuint218) {
        for _jGLuint218 in 0.._aGLuint218.values.len() {
    let _origResult: GLuint;
    _origResult = (_aGLuint218.values[_jGLuint218]).to_u32().unwrap();
    self._renderbuffer_map[_origResult] = renderbuffers[_jGLuint218]; 
        }
    }
}

pub fn retrace_glRenderbufferStorageEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut internalformat: GLenum;
    internalformat = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut width: GLsizei;
    width = (call.arg(2)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(3)).to_i32().unwrap();

//not found in gl!    unsafe { gl::RenderbufferStorageEXT(target, internalformat, width, height) };
}

pub fn retrace_glBindFramebufferEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut framebuffer: GLuint;
    framebuffer = (call.arg(1)).to_u32().unwrap();
    framebuffer = self._framebuffer_map[framebuffer];

//not found in gl!    unsafe { gl::BindFramebufferEXT(target, framebuffer) };
}

pub fn retrace_glDeleteFramebuffersEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut n: GLsizei;
    n = (call.arg(0)).to_i32().unwrap();

    let framebuffers: &mut [GLuint];
    framebuffers = _allocator.alloc_array::<GLuint>(&call.arg(1));
    let _a_GLuint219_0 = (call.arg(1)).to_array();
    if let Some(_a_GLuint219_0) = _a_GLuint219_0 {
        for _jGLuint219 in 0.._a_GLuint219_0.values.len() {
    framebuffers[_jGLuint219] = (*_a_GLuint219_0.values[_jGLuint219]).to_u32().unwrap();
    framebuffers[_jGLuint219] = self._framebuffer_map[framebuffers[_jGLuint219]];
        }
    }
    let framebuffers = framebuffers.as_mut_ptr();

//not found in gl!    unsafe { gl::DeleteFramebuffersEXT(n, framebuffers) };
}

pub fn retrace_glGenFramebuffersEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut n: GLsizei;
    n = (call.arg(0)).to_i32().unwrap();

    let framebuffers: &mut [GLuint];
    framebuffers = _allocator.alloc_array::<GLuint>(&call.arg(1));

//not found in gl!    unsafe { gl::GenFramebuffersEXT(n, framebuffers) };
    let _aGLuint221 = (call.arg(1)).to_array();
    if (_aGLuint221) {
        for _jGLuint221 in 0.._aGLuint221.values.len() {
    let _origResult: GLuint;
    _origResult = (_aGLuint221.values[_jGLuint221]).to_u32().unwrap();
    self._framebuffer_map[_origResult] = framebuffers[_jGLuint221]; 
        }
    }
}

pub fn retrace_glCheckFramebufferStatusEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    let _result = unsafe { gl::CheckFramebufferStatusEXT(target) };

    let _origResult = call.ret.to_i32().unwrap();
}

pub fn retrace_glFramebufferTexture1DEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut attachment: GLenum;
    attachment = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut textarget: GLenum;
    textarget = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut texture: GLuint;
    texture = (call.arg(3)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut level: GLint;
    level = (call.arg(4)).to_i32().unwrap();

//not found in gl!    unsafe { gl::FramebufferTexture1DEXT(target, attachment, textarget, texture, level) };
}

pub fn retrace_glFramebufferTexture2DEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut attachment: GLenum;
    attachment = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut textarget: GLenum;
    textarget = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut texture: GLuint;
    texture = (call.arg(3)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut level: GLint;
    level = (call.arg(4)).to_i32().unwrap();

//not found in gl!    unsafe { gl::FramebufferTexture2DEXT(target, attachment, textarget, texture, level) };
}

pub fn retrace_glFramebufferTexture3DEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut attachment: GLenum;
    attachment = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut textarget: GLenum;
    textarget = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut texture: GLuint;
    texture = (call.arg(3)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut level: GLint;
    level = (call.arg(4)).to_i32().unwrap();

    let mut zoffset: GLint;
    zoffset = (call.arg(5)).to_i32().unwrap();

//not found in gl!    unsafe { gl::FramebufferTexture3DEXT(target, attachment, textarget, texture, level, zoffset) };
}

pub fn retrace_glFramebufferRenderbufferEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut attachment: GLenum;
    attachment = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut renderbuffertarget: GLenum;
    renderbuffertarget = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut renderbuffer: GLuint;
    renderbuffer = (call.arg(3)).to_u32().unwrap();
    renderbuffer = self._renderbuffer_map[renderbuffer];

//not found in gl!    unsafe { gl::FramebufferRenderbufferEXT(target, attachment, renderbuffertarget, renderbuffer) };
}

pub fn retrace_glGenerateMipmapEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::GenerateMipmapEXT(target) };
}

pub fn retrace_glFramebufferTextureEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut attachment: GLenum;
    attachment = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut texture: GLuint;
    texture = (call.arg(2)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut level: GLint;
    level = (call.arg(3)).to_i32().unwrap();

//not found in gl!    unsafe { gl::FramebufferTextureEXT(target, attachment, texture, level) };
}

pub fn retrace_glProgramParameteriEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut value: GLint;
    value = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::ProgramParameteriEXT(program, pname, value) };
}

pub fn retrace_glProgramEnvParameters4fvEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut index: GLuint;
    index = (call.arg(1)).to_u32().unwrap();

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let params: &mut [GLfloat];
    params = _allocator.alloc_array::<GLfloat>(&call.arg(3));
    let _a_GLfloat224_0 = (call.arg(3)).to_array();
    if let Some(_a_GLfloat224_0) = _a_GLfloat224_0 {
        for _jGLfloat224 in 0.._a_GLfloat224_0.values.len() {
    params[_jGLfloat224] = (*_a_GLfloat224_0.values[_jGLfloat224]).to_f32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::ProgramEnvParameters4fvEXT(target, index, count, params) };
}

pub fn retrace_glProgramLocalParameters4fvEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut index: GLuint;
    index = (call.arg(1)).to_u32().unwrap();

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let params: &mut [GLfloat];
    params = _allocator.alloc_array::<GLfloat>(&call.arg(3));
    let _a_GLfloat225_0 = (call.arg(3)).to_array();
    if let Some(_a_GLfloat225_0) = _a_GLfloat225_0 {
        for _jGLfloat225 in 0.._a_GLfloat225_0.values.len() {
    params[_jGLfloat225] = (*_a_GLfloat225_0.values[_jGLfloat225]).to_f32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::ProgramLocalParameters4fvEXT(target, index, count, params) };
}

pub fn retrace_glUniform1uiEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut v0: GLuint;
    v0 = (call.arg(1)).to_u32().unwrap();

//not found in gl!    unsafe { gl::Uniform1uiEXT(location, v0) };
}

pub fn retrace_glUniform2uiEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut v0: GLuint;
    v0 = (call.arg(1)).to_u32().unwrap();

    let mut v1: GLuint;
    v1 = (call.arg(2)).to_u32().unwrap();

//not found in gl!    unsafe { gl::Uniform2uiEXT(location, v0, v1) };
}

pub fn retrace_glUniform3uiEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut v0: GLuint;
    v0 = (call.arg(1)).to_u32().unwrap();

    let mut v1: GLuint;
    v1 = (call.arg(2)).to_u32().unwrap();

    let mut v2: GLuint;
    v2 = (call.arg(3)).to_u32().unwrap();

//not found in gl!    unsafe { gl::Uniform3uiEXT(location, v0, v1, v2) };
}

pub fn retrace_glUniform4uiEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut v0: GLuint;
    v0 = (call.arg(1)).to_u32().unwrap();

    let mut v1: GLuint;
    v1 = (call.arg(2)).to_u32().unwrap();

    let mut v2: GLuint;
    v2 = (call.arg(3)).to_u32().unwrap();

    let mut v3: GLuint;
    v3 = (call.arg(4)).to_u32().unwrap();

//not found in gl!    unsafe { gl::Uniform4uiEXT(location, v0, v1, v2, v3) };
}

pub fn retrace_glUniform1uivEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let value: &mut [GLuint];
    value = _allocator.alloc_array::<GLuint>(&call.arg(2));
    let _a_GLuint222_0 = (call.arg(2)).to_array();
    if let Some(_a_GLuint222_0) = _a_GLuint222_0 {
        for _jGLuint222 in 0.._a_GLuint222_0.values.len() {
    value[_jGLuint222] = (*_a_GLuint222_0.values[_jGLuint222]).to_u32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::Uniform1uivEXT(location, count, value) };
}

pub fn retrace_glUniform2uivEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let value: &mut [GLuint];
    value = _allocator.alloc_array::<GLuint>(&call.arg(2));
    let _a_GLuint223_0 = (call.arg(2)).to_array();
    if let Some(_a_GLuint223_0) = _a_GLuint223_0 {
        for _jGLuint223 in 0.._a_GLuint223_0.values.len() {
    value[_jGLuint223] = (*_a_GLuint223_0.values[_jGLuint223]).to_u32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::Uniform2uivEXT(location, count, value) };
}

pub fn retrace_glUniform3uivEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let value: &mut [GLuint];
    value = _allocator.alloc_array::<GLuint>(&call.arg(2));
    let _a_GLuint224_0 = (call.arg(2)).to_array();
    if let Some(_a_GLuint224_0) = _a_GLuint224_0 {
        for _jGLuint224 in 0.._a_GLuint224_0.values.len() {
    value[_jGLuint224] = (*_a_GLuint224_0.values[_jGLuint224]).to_u32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::Uniform3uivEXT(location, count, value) };
}

pub fn retrace_glUniform4uivEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let value: &mut [GLuint];
    value = _allocator.alloc_array::<GLuint>(&call.arg(2));
    let _a_GLuint225_0 = (call.arg(2)).to_array();
    if let Some(_a_GLuint225_0) = _a_GLuint225_0 {
        for _jGLuint225 in 0.._a_GLuint225_0.values.len() {
    value[_jGLuint225] = (*_a_GLuint225_0.values[_jGLuint225]).to_u32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::Uniform4uivEXT(location, count, value) };
}

pub fn retrace_glGetHistogramEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut reset: GLboolean;
    reset = (call.arg(1)).to_u32().unwrap() as u8;

    let mut format: GLenum;
    format = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let values: &mut [GLc_void];
    let values = (call.arg(4)).to_pointer();

    let _pack_buffer = 0;
    if self.context.features("pixel_buffer_object") {
//not found in gl!        unsafe { gl::GetIntegerv(gl::PIXEL_PACK_BUFFER_BINDING, &_pack_buffer) };
    }
     let buffer = Vec::<u8>::new();
    if _pack_buffer != 0 {
    return;
    }
//not found in gl!    unsafe { gl::GetHistogramEXT(target, reset, format, _type, values) };
}

pub fn retrace_glGetHistogramParameterivEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLint];
    params = _allocator.alloc_array::<GLint>(&call.arg(2));

//not found in gl!    unsafe { gl::GetHistogramParameterivEXT(target, pname, params) };
    let _aGLint238 = (call.arg(2)).to_array();
    if (_aGLint238) {
        for _jGLint238 in 0.._aGLint238.values.len() {
        }
    }
}

pub fn retrace_glGetMinmaxEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut reset: GLboolean;
    reset = (call.arg(1)).to_u32().unwrap() as u8;

    let mut format: GLenum;
    format = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let values: &mut [GLc_void];
    let values = (call.arg(4)).to_pointer();

    let _pack_buffer = 0;
    if self.context.features("pixel_buffer_object") {
//not found in gl!        unsafe { gl::GetIntegerv(gl::PIXEL_PACK_BUFFER_BINDING, &_pack_buffer) };
    }
     let buffer = Vec::<u8>::new();
    if _pack_buffer != 0 {
    return;
    }
//not found in gl!    unsafe { gl::GetMinmaxEXT(target, reset, format, _type, values) };
}

pub fn retrace_glHistogramEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut width: GLsizei;
    width = (call.arg(1)).to_i32().unwrap();

    let mut internalformat: GLenum;
    internalformat = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut sink: GLboolean;
    sink = (call.arg(3)).to_u32().unwrap() as u8;

//not found in gl!    unsafe { gl::HistogramEXT(target, width, internalformat, sink) };
}

pub fn retrace_glMinmaxEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut internalformat: GLenum;
    internalformat = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut sink: GLboolean;
    sink = (call.arg(2)).to_u32().unwrap() as u8;

//not found in gl!    unsafe { gl::MinmaxEXT(target, internalformat, sink) };
}

pub fn retrace_glResetHistogramEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::ResetHistogramEXT(target) };
}

pub fn retrace_glResetMinmaxEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::ResetMinmaxEXT(target) };
}

pub fn retrace_glIndexFuncEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut func: GLenum;
    func = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut _ref: GLclampf;
    _ref = (call.arg(1)).to_f32().unwrap();

//not found in gl!    unsafe { gl::IndexFuncEXT(func, _ref) };
}

pub fn retrace_glIndexMaterialEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut face: GLenum;
    face = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut mode: GLenum;
    mode = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::IndexMaterialEXT(face, mode) };
}

pub fn retrace_glVertexAttribDivisorEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut divisor: GLuint;
    divisor = (call.arg(1)).to_u32().unwrap();

//not found in gl!    unsafe { gl::VertexAttribDivisorEXT(index, divisor) };
}

pub fn retrace_glApplyTextureEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::ApplyTextureEXT(mode) };
}

pub fn retrace_glTextureLightEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut pname: GLenum;
    pname = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::TextureLightEXT(pname) };
}

pub fn retrace_glTextureMaterialEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut face: GLenum;
    face = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut mode: GLenum;
    mode = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::TextureMaterialEXT(face, mode) };
}

pub fn retrace_glMapBufferRangeEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut offset: GLintptr;
    offset = (call.arg(1)).to_i32().unwrap();

    let mut length: GLsizeiptr;
    length = (call.arg(2)).to_i32().unwrap();

    let mut access: GLbitfield;
    access = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    let _result = unsafe { gl::MapBufferRangeEXT(target, offset, length, access) };

    region::add_region(call, (*call.ret).toUIntPtr(), _result, length);
}

pub fn retrace_glFlushMappedBufferRangeEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut offset: GLintptr;
    offset = (call.arg(1)).to_i32().unwrap();

    let mut length: GLsizeiptr;
    length = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::FlushMappedBufferRangeEXT(target, offset, length) };
}

pub fn retrace_glMultiDrawArraysEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let first: &mut [GLint];
    first = _allocator.alloc_array::<GLint>(&call.arg(1));
    let _a_GLint239_0 = (call.arg(1)).to_array();
    if let Some(_a_GLint239_0) = _a_GLint239_0 {
        for _jGLint239 in 0.._a_GLint239_0.values.len() {
    first[_jGLint239] = (*_a_GLint239_0.values[_jGLint239]).to_i32().unwrap();
        }
    }
    let first = first.as_mut_ptr();

    let count: &mut [GLsizei];
    count = _allocator.alloc_array::<GLsizei>(&call.arg(2));
    let _a_GLsizei13_0 = (call.arg(2)).to_array();
    if let Some(_a_GLsizei13_0) = _a_GLsizei13_0 {
        for _jGLsizei13 in 0.._a_GLsizei13_0.values.len() {
    count[_jGLsizei13] = (*_a_GLsizei13_0.values[_jGLsizei13]).to_i32().unwrap();
        }
    }
    let count = count.as_mut_ptr();

    let mut drawcount: GLsizei;
    drawcount = (call.arg(3)).to_i32().unwrap();

//not found in gl!    unsafe { gl::MultiDrawArraysEXT(mode, first, count, drawcount) };
}

pub fn retrace_glMultiDrawElementsEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let count: &mut [GLsizei];
    count = _allocator.alloc_array::<GLsizei>(&call.arg(1));
    let _a_GLsizei14_0 = (call.arg(1)).to_array();
    if let Some(_a_GLsizei14_0) = _a_GLsizei14_0 {
        for _jGLsizei14 in 0.._a_GLsizei14_0.values.len() {
    count[_jGLsizei14] = (*_a_GLsizei14_0.values[_jGLsizei14]).to_i32().unwrap();
        }
    }
    let count = count.as_mut_ptr();

    let mut _type: GLenum;
    _type = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let indices: &mut [GLc_void];
    indices = _allocator.alloc_array::< GLvoid >(&call.arg(3));
    let _a_constGLvoid248_0 = (call.arg(3)).to_array();
    if let Some(_a_constGLvoid248_0) = _a_constGLvoid248_0 {
        for _jconstGLvoid248 in 0.._a_constGLvoid248_0.values.len() {
            indices[_jconstGLvoid248] = (*_a_constGLvoid248_0.values[_jconstGLvoid248]).to_pointer().unwrap() as *mut c_void;
        }
    }
    let indices = indices.as_mut_ptr();

    let mut drawcount: GLsizei;
    drawcount = (call.arg(4)).to_i32().unwrap();

//not found in gl!    unsafe { gl::MultiDrawElementsEXT(mode, count, _type, indices, drawcount) };
}

pub fn retrace_glMultiDrawArraysIndirectEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let indirect: &mut [GLc_void];
    indirect = region::to_pointer(call.arg(1));

    let mut drawcount: GLsizei;
    drawcount = (call.arg(2)).to_i32().unwrap();

    let mut stride: GLsizei;
    stride = (call.arg(3)).to_i32().unwrap();

//not found in gl!    unsafe { gl::MultiDrawArraysIndirectEXT(mode, indirect, drawcount, stride) };
}

pub fn retrace_glMultiDrawElementsIndirectEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let indirect: &mut [GLc_void];
    indirect = region::to_pointer(call.arg(2));

    let mut drawcount: GLsizei;
    drawcount = (call.arg(3)).to_i32().unwrap();

    let mut stride: GLsizei;
    stride = (call.arg(4)).to_i32().unwrap();

//not found in gl!    unsafe { gl::MultiDrawElementsIndirectEXT(mode, _type, indirect, drawcount, stride) };
}

pub fn retrace_glSampleMaskEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut value: GLclampf;
    value = (call.arg(0)).to_f32().unwrap();

    let mut invert: GLboolean;
    invert = (call.arg(1)).to_u32().unwrap() as u8;

//not found in gl!    unsafe { gl::SampleMaskEXT(value, invert) };
}

pub fn retrace_glSamplePatternEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut pattern: GLenum;
    pattern = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::SamplePatternEXT(pattern) };
}

pub fn retrace_glFramebufferTexture2DMultisampleEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut attachment: GLenum;
    attachment = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut textarget: GLenum;
    textarget = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut texture: GLuint;
    texture = (call.arg(3)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut level: GLint;
    level = (call.arg(4)).to_i32().unwrap();

    let mut samples: GLsizei;
    samples = (call.arg(5)).to_i32().unwrap();
    let max_samples = 0;
//not found in gl!    unsafe { gl::GetIntegerv(gl::MAX_SAMPLES, &max_samples) };
    if samples > max_samples {
        samples = max_samples;
    }

//not found in gl!    unsafe { gl::FramebufferTexture2DMultisampleEXT(target, attachment, textarget, texture, level, samples) };
}

pub fn retrace_glReadBufferIndexedEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut src: GLenum;
    src = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut index: GLint;
    index = (call.arg(1)).to_i32().unwrap();

//not found in gl!    unsafe { gl::ReadBufferIndexedEXT(src, index) };
}

pub fn retrace_glDrawBuffersIndexedEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut n: GLint;
    n = (call.arg(0)).to_i32().unwrap();

    let location: &mut [GLenum];
    location = _allocator.alloc_array::<GLenum>(&call.arg(1));
    let _a_GLenum26_0 = (call.arg(1)).to_array();
    if let Some(_a_GLenum26_0) = _a_GLenum26_0 {
        for _jGLenum26 in 0.._a_GLenum26_0.values.len() {
    location[_jGLenum26] = (*_a_GLenum26_0.values[_jGLenum26]).to_u32().unwrap().try_into().unwrap();
        }
    }
    let location = location.as_mut_ptr();

    let indices: &mut [GLint];
    indices = _allocator.alloc_array::<GLint>(&call.arg(2));
    let _a_GLint240_0 = (call.arg(2)).to_array();
    if let Some(_a_GLint240_0) = _a_GLint240_0 {
        for _jGLint240 in 0.._a_GLint240_0.values.len() {
    indices[_jGLint240] = (*_a_GLint240_0.values[_jGLint240]).to_i32().unwrap();
        }
    }
    let indices = indices.as_mut_ptr();

//not found in gl!    unsafe { gl::DrawBuffersIndexedEXT(n, location, indices) };
}

pub fn retrace_glColorTableEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut internalformat: GLenum;
    internalformat = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut width: GLsizei;
    width = (call.arg(2)).to_i32().unwrap();

    let mut format: GLenum;
    format = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(4)).to_u32().unwrap().try_into().unwrap();

    let table: &mut [GLc_void];
    let table = (call.arg(5)).to_pointer().unwrap() as *mut c_void;

//not found in gl!    unsafe { gl::ColorTableEXT(target, internalformat, width, format, _type, table) };
}

pub fn retrace_glPixelTransformParameteriEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut param: GLint;
    param = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::PixelTransformParameteriEXT(target, pname, param) };
}

pub fn retrace_glPixelTransformParameterfEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut param: GLfloat;
    param = (call.arg(2)).to_f32().unwrap();

//not found in gl!    unsafe { gl::PixelTransformParameterfEXT(target, pname, param) };
}

pub fn retrace_glPixelTransformParameterivEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLint];
    params = _allocator.alloc_array::<GLint>(&call.arg(2));
    let _a_GLint241_0 = (call.arg(2)).to_array();
    if let Some(_a_GLint241_0) = _a_GLint241_0 {
        for _jGLint241 in 0.._a_GLint241_0.values.len() {
    params[_jGLint241] = (*_a_GLint241_0.values[_jGLint241]).to_i32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::PixelTransformParameterivEXT(target, pname, params) };
}

pub fn retrace_glPixelTransformParameterfvEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLfloat];
    params = _allocator.alloc_array::<GLfloat>(&call.arg(2));
    let _a_GLfloat226_0 = (call.arg(2)).to_array();
    if let Some(_a_GLfloat226_0) = _a_GLfloat226_0 {
        for _jGLfloat226 in 0.._a_GLfloat226_0.values.len() {
    params[_jGLfloat226] = (*_a_GLfloat226_0.values[_jGLfloat226]).to_f32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::PixelTransformParameterfvEXT(target, pname, params) };
}

pub fn retrace_glPointParameterfEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut pname: GLenum;
    pname = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut param: GLfloat;
    param = (call.arg(1)).to_f32().unwrap();

//not found in gl!    unsafe { gl::PointParameterfEXT(pname, param) };
}

pub fn retrace_glPointParameterfvEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut pname: GLenum;
    pname = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLfloat];
    params = _allocator.alloc_array::<GLfloat>(&call.arg(1));
    let _a_GLfloat227_0 = (call.arg(1)).to_array();
    if let Some(_a_GLfloat227_0) = _a_GLfloat227_0 {
        for _jGLfloat227 in 0.._a_GLfloat227_0.values.len() {
    params[_jGLfloat227] = (*_a_GLfloat227_0.values[_jGLfloat227]).to_f32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::PointParameterfvEXT(pname, params) };
}

pub fn retrace_glPolygonOffsetEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut factor: GLfloat;
    factor = (call.arg(0)).to_f32().unwrap();

    let mut bias: GLfloat;
    bias = (call.arg(1)).to_f32().unwrap();

//not found in gl!    unsafe { gl::PolygonOffsetEXT(factor, bias) };
}

pub fn retrace_glPolygonOffsetClampEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut factor: GLfloat;
    factor = (call.arg(0)).to_f32().unwrap();

    let mut units: GLfloat;
    units = (call.arg(1)).to_f32().unwrap();

    let mut clamp: GLfloat;
    clamp = (call.arg(2)).to_f32().unwrap();

//not found in gl!    unsafe { gl::PolygonOffsetClampEXT(factor, units, clamp) };
}

pub fn retrace_glPrimitiveBoundingBoxEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut minX: GLfloat;
    minX = (call.arg(0)).to_f32().unwrap();

    let mut minY: GLfloat;
    minY = (call.arg(1)).to_f32().unwrap();

    let mut minZ: GLfloat;
    minZ = (call.arg(2)).to_f32().unwrap();

    let mut minW: GLfloat;
    minW = (call.arg(3)).to_f32().unwrap();

    let mut maxX: GLfloat;
    maxX = (call.arg(4)).to_f32().unwrap();

    let mut maxY: GLfloat;
    maxY = (call.arg(5)).to_f32().unwrap();

    let mut maxZ: GLfloat;
    maxZ = (call.arg(6)).to_f32().unwrap();

    let mut maxW: GLfloat;
    maxW = (call.arg(7)).to_f32().unwrap();

//not found in gl!    unsafe { gl::PrimitiveBoundingBoxEXT(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW) };
}

pub fn retrace_glProvokingVertexEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::ProvokingVertexEXT(mode) };
}

pub fn retrace_glRasterSamplesEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut samples: GLuint;
    samples = (call.arg(0)).to_u32().unwrap();
    let max_samples = 0;
//not found in gl!//not found in gl!    unsafe { gl::GetIntegerv(gl::MAX_RASTER_SAMPLES_EXT, &max_samples) };
    if samples > max_samples {
        samples = max_samples;
    }

    let mut fixedsamplelocations: GLboolean;
    fixedsamplelocations = (call.arg(1)).to_u32().unwrap() as u8;

//not found in gl!    unsafe { gl::RasterSamplesEXT(samples, fixedsamplelocations) };
}

pub fn retrace_glReadnPixelsEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut x: GLint;
    x = (call.arg(0)).to_i32().unwrap();

    let mut y: GLint;
    y = (call.arg(1)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(2)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(3)).to_i32().unwrap();

    let mut format: GLenum;
    format = (call.arg(4)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(5)).to_u32().unwrap().try_into().unwrap();

    let mut bufSize: GLsizei;
    bufSize = (call.arg(6)).to_i32().unwrap();

    let data: &mut [GLc_void];
    let data = (call.arg(7)).to_pointer();

    let _pack_buffer = 0;
    if self.context.features("pixel_buffer_object") {
//not found in gl!        unsafe { gl::GetIntegerv(gl::PIXEL_PACK_BUFFER_BINDING, &_pack_buffer) };
    }
     let buffer = Vec::<u8>::new();
    if _pack_buffer != 0 {
    return;
    }
//not found in gl!    unsafe { gl::ReadnPixelsEXT(x, y, width, height, format, _type, bufSize, data) };
}

pub fn retrace_glSecondaryColor3bEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut red: GLbyte;
    red = (call.arg(0)).to_i32().unwrap();

    let mut green: GLbyte;
    green = (call.arg(1)).to_i32().unwrap();

    let mut blue: GLbyte;
    blue = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::SecondaryColor3bEXT(red, green, blue) };
}

pub fn retrace_glSecondaryColor3bvEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLbyte];
    v = _allocator.alloc_array::<GLbyte>(&call.arg(0));
    let _a_GLbyte14_0 = (call.arg(0)).to_array();
    if let Some(_a_GLbyte14_0) = _a_GLbyte14_0 {
        for _jGLbyte14 in 0.._a_GLbyte14_0.values.len() {
    v[_jGLbyte14] = (*_a_GLbyte14_0.values[_jGLbyte14]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::SecondaryColor3bvEXT(v) };
}

pub fn retrace_glSecondaryColor3dEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut red: GLdouble;
    red = (call.arg(0)).to_f64().unwrap();

    let mut green: GLdouble;
    green = (call.arg(1)).to_f64().unwrap();

    let mut blue: GLdouble;
    blue = (call.arg(2)).to_f64().unwrap();

//not found in gl!    unsafe { gl::SecondaryColor3dEXT(red, green, blue) };
}

pub fn retrace_glSecondaryColor3dvEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLdouble];
    v = _allocator.alloc_array::<GLdouble>(&call.arg(0));
    let _a_GLdouble126_0 = (call.arg(0)).to_array();
    if let Some(_a_GLdouble126_0) = _a_GLdouble126_0 {
        for _jGLdouble126 in 0.._a_GLdouble126_0.values.len() {
    v[_jGLdouble126] = (*_a_GLdouble126_0.values[_jGLdouble126]).to_f64().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::SecondaryColor3dvEXT(v) };
}

pub fn retrace_glSecondaryColor3fEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut red: GLfloat;
    red = (call.arg(0)).to_f32().unwrap();

    let mut green: GLfloat;
    green = (call.arg(1)).to_f32().unwrap();

    let mut blue: GLfloat;
    blue = (call.arg(2)).to_f32().unwrap();

//not found in gl!    unsafe { gl::SecondaryColor3fEXT(red, green, blue) };
}

pub fn retrace_glSecondaryColor3fvEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLfloat];
    v = _allocator.alloc_array::<GLfloat>(&call.arg(0));
    let _a_GLfloat228_0 = (call.arg(0)).to_array();
    if let Some(_a_GLfloat228_0) = _a_GLfloat228_0 {
        for _jGLfloat228 in 0.._a_GLfloat228_0.values.len() {
    v[_jGLfloat228] = (*_a_GLfloat228_0.values[_jGLfloat228]).to_f32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::SecondaryColor3fvEXT(v) };
}

pub fn retrace_glSecondaryColor3iEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut red: GLint;
    red = (call.arg(0)).to_i32().unwrap();

    let mut green: GLint;
    green = (call.arg(1)).to_i32().unwrap();

    let mut blue: GLint;
    blue = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::SecondaryColor3iEXT(red, green, blue) };
}

pub fn retrace_glSecondaryColor3ivEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLint];
    v = _allocator.alloc_array::<GLint>(&call.arg(0));
    let _a_GLint242_0 = (call.arg(0)).to_array();
    if let Some(_a_GLint242_0) = _a_GLint242_0 {
        for _jGLint242 in 0.._a_GLint242_0.values.len() {
    v[_jGLint242] = (*_a_GLint242_0.values[_jGLint242]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::SecondaryColor3ivEXT(v) };
}

pub fn retrace_glSecondaryColor3sEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut red: GLshort;
    red = (call.arg(0)).to_i32().unwrap();

    let mut green: GLshort;
    green = (call.arg(1)).to_i32().unwrap();

    let mut blue: GLshort;
    blue = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::SecondaryColor3sEXT(red, green, blue) };
}

pub fn retrace_glSecondaryColor3svEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLshort];
    v = _allocator.alloc_array::<GLshort>(&call.arg(0));
    let _a_GLshort42_0 = (call.arg(0)).to_array();
    if let Some(_a_GLshort42_0) = _a_GLshort42_0 {
        for _jGLshort42 in 0.._a_GLshort42_0.values.len() {
    v[_jGLshort42] = (*_a_GLshort42_0.values[_jGLshort42]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::SecondaryColor3svEXT(v) };
}

pub fn retrace_glSecondaryColor3ubEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut red: GLubyte;
    red = (call.arg(0)).to_u32().unwrap();

    let mut green: GLubyte;
    green = (call.arg(1)).to_u32().unwrap();

    let mut blue: GLubyte;
    blue = (call.arg(2)).to_u32().unwrap();

//not found in gl!    unsafe { gl::SecondaryColor3ubEXT(red, green, blue) };
}

pub fn retrace_glSecondaryColor3ubvEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLubyte];
    v = _allocator.alloc_array::<GLubyte>(&call.arg(0));
    let _a_GLubyte19_0 = (call.arg(0)).to_array();
    if let Some(_a_GLubyte19_0) = _a_GLubyte19_0 {
        for _jGLubyte19 in 0.._a_GLubyte19_0.values.len() {
    v[_jGLubyte19] = (*_a_GLubyte19_0.values[_jGLubyte19]).to_u32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::SecondaryColor3ubvEXT(v) };
}

pub fn retrace_glSecondaryColor3uiEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut red: GLuint;
    red = (call.arg(0)).to_u32().unwrap();

    let mut green: GLuint;
    green = (call.arg(1)).to_u32().unwrap();

    let mut blue: GLuint;
    blue = (call.arg(2)).to_u32().unwrap();

//not found in gl!    unsafe { gl::SecondaryColor3uiEXT(red, green, blue) };
}

pub fn retrace_glSecondaryColor3uivEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLuint];
    v = _allocator.alloc_array::<GLuint>(&call.arg(0));
    let _a_GLuint226_0 = (call.arg(0)).to_array();
    if let Some(_a_GLuint226_0) = _a_GLuint226_0 {
        for _jGLuint226 in 0.._a_GLuint226_0.values.len() {
    v[_jGLuint226] = (*_a_GLuint226_0.values[_jGLuint226]).to_u32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::SecondaryColor3uivEXT(v) };
}

pub fn retrace_glSecondaryColor3usEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut red: GLushort;
    red = (call.arg(0)).to_u32().unwrap();

    let mut green: GLushort;
    green = (call.arg(1)).to_u32().unwrap();

    let mut blue: GLushort;
    blue = (call.arg(2)).to_u32().unwrap();

//not found in gl!    unsafe { gl::SecondaryColor3usEXT(red, green, blue) };
}

pub fn retrace_glSecondaryColor3usvEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLushort];
    v = _allocator.alloc_array::<GLushort>(&call.arg(0));
    let _a_GLushort18_0 = (call.arg(0)).to_array();
    if let Some(_a_GLushort18_0) = _a_GLushort18_0 {
        for _jGLushort18 in 0.._a_GLushort18_0.values.len() {
    v[_jGLushort18] = (*_a_GLushort18_0.values[_jGLushort18]).to_u32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::SecondaryColor3usvEXT(v) };
}

pub fn retrace_glSecondaryColorPointerEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut size: GLint;
    size = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut stride: GLsizei;
    stride = (call.arg(2)).to_i32().unwrap();

    let pointer: &mut [GLc_void];
    pointer = region::to_pointer(call.arg(3), true);

//not found in gl!    unsafe { gl::SecondaryColorPointerEXT(size, _type, stride, pointer) };
}

pub fn retrace_glUseShaderProgramEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut _type: GLenum;
    _type = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut program: GLuint;
    program = (call.arg(1)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

//not found in gl!    unsafe { gl::UseShaderProgramEXT(_type, program) };
}

pub fn retrace_glActiveProgramEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

//not found in gl!    unsafe { gl::ActiveProgramEXT(program) };
}

pub fn retrace_glCreateShaderProgramEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut _type: GLenum;
    _type = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let string: &mut [GLchar];
    string = (call.arg(1)).to_string().unwrap();

//not found in gl!    let _result = unsafe { gl::CreateShaderProgramEXT(_type, string) };

        let program = _result;
        let link_status = 0;
//not found in gl!        unsafe { gl::GetProgramiv(program, gl::LINK_STATUS, &link_status) };
        if link_status == 0 {
             println!("link failed");
        }
        let info_log_length = 0;
//not found in gl!        unsafe { gl::GetProgramiv(program, gl::INFO_LOG_LENGTH, &info_log_length) };
        if info_log_length > 1 {
             let infoLog = vec![0i8; info_log_length].as_mut_ptr();
//not found in gl!             unsafe { gl::GetProgramInfoLog(program, info_log_length, std::ptr::null_mut(), infoLog) };
        }
    let _origResult: GLuint;
    _origResult = (*call.ret).to_u32().unwrap();
if supportsARBShaderObjects {
    self._handleARB_map[_origResult] = _result;
} else {
    _program_map[_origResult] = _result;
}
}

pub fn retrace_glActiveShaderProgramEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut pipeline: GLuint;
    pipeline = (call.arg(0)).to_u32().unwrap();
    pipeline = self._pipeline_map[pipeline];

    let mut program: GLuint;
    program = (call.arg(1)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

//not found in gl!    unsafe { gl::ActiveShaderProgramEXT(pipeline, program) };
}

pub fn retrace_glBindProgramPipelineEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut pipeline: GLuint;
    pipeline = (call.arg(0)).to_u32().unwrap();
    pipeline = self._pipeline_map[pipeline];

//not found in gl!    unsafe { gl::BindProgramPipelineEXT(pipeline) };
    if (self.context) {
        self.context.currentPipeline = pipeline;
    }
}

pub fn retrace_glCreateShaderProgramvEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut _type: GLenum;
    _type = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let strings: &mut [GLchar];
    strings = _allocator.alloc_array::<GLchar >(&call.arg(2));
    let _a_constGLchar13_0 = (call.arg(2)).to_array();
    if let Some(_a_constGLchar13_0) = _a_constGLchar13_0 {
        for _jconstGLchar13 in 0.._a_constGLchar13_0.values.len() {
    strings[_jconstGLchar13] = (*_a_constGLchar13_0.values[_jconstGLchar13]).to_string().unwrap();
        }
    }
    let strings = strings.as_mut_ptr();

//not found in gl!    let _result = unsafe { gl::CreateShaderProgramvEXT(_type, count, strings) };

        let program = _result;
        let link_status = 0;
//not found in gl!        unsafe { gl::GetProgramiv(program, gl::LINK_STATUS, &link_status) };
        if link_status == 0 {
             println!("link failed");
        }
        let info_log_length = 0;
//not found in gl!        unsafe { gl::GetProgramiv(program, gl::INFO_LOG_LENGTH, &info_log_length) };
        if info_log_length > 1 {
             let infoLog = vec![0i8; info_log_length].as_mut_ptr();
//not found in gl!             unsafe { gl::GetProgramInfoLog(program, info_log_length, std::ptr::null_mut(), infoLog) };
        }
    let _origResult: GLuint;
    _origResult = (*call.ret).to_u32().unwrap();
if supportsARBShaderObjects {
    self._handleARB_map[_origResult] = _result;
} else {
    _program_map[_origResult] = _result;
}
}

pub fn retrace_glDeleteProgramPipelinesEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut n: GLsizei;
    n = (call.arg(0)).to_i32().unwrap();

    let pipelines: &mut [GLuint];
    pipelines = _allocator.alloc_array::<GLuint>(&call.arg(1));
    let _a_GLuint227_0 = (call.arg(1)).to_array();
    if let Some(_a_GLuint227_0) = _a_GLuint227_0 {
        for _jGLuint227 in 0.._a_GLuint227_0.values.len() {
    pipelines[_jGLuint227] = (*_a_GLuint227_0.values[_jGLuint227]).to_u32().unwrap();
        }
    }
    let pipelines = pipelines.as_mut_ptr();

//not found in gl!    unsafe { gl::DeleteProgramPipelinesEXT(n, pipelines) };
}

pub fn retrace_glGenProgramPipelinesEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut n: GLsizei;
    n = (call.arg(0)).to_i32().unwrap();

    let pipelines: &mut [GLuint];
    pipelines = _allocator.alloc_array::<GLuint>(&call.arg(1));

//not found in gl!    unsafe { gl::GenProgramPipelinesEXT(n, pipelines) };
    let _aGLuint229 = (call.arg(1)).to_array();
    if (_aGLuint229) {
        for _jGLuint229 in 0.._aGLuint229.values.len() {
    let _origResult: GLuint;
    _origResult = (_aGLuint229.values[_jGLuint229]).to_u32().unwrap();
    self._pipeline_map[_origResult] = pipelines[_jGLuint229]; 
        }
    }
}

pub fn retrace_glUseProgramStagesEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut pipeline: GLuint;
    pipeline = (call.arg(0)).to_u32().unwrap();
    pipeline = self._pipeline_map[pipeline];

    let mut stages: GLbitfield;
    stages = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut program: GLuint;
    program = (call.arg(2)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

//not found in gl!    unsafe { gl::UseProgramStagesEXT(pipeline, stages, program) };
}

pub fn retrace_glValidateProgramPipelineEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut pipeline: GLuint;
    pipeline = (call.arg(0)).to_u32().unwrap();
    pipeline = self._pipeline_map[pipeline];

//not found in gl!    unsafe { gl::ValidateProgramPipelineEXT(pipeline) };
}

pub fn retrace_glBindImageTextureEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut texture: GLuint;
    texture = (call.arg(1)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut level: GLint;
    level = (call.arg(2)).to_i32().unwrap();

    let mut layered: GLboolean;
    layered = (call.arg(3)).to_u32().unwrap() as u8;

    let mut layer: GLint;
    layer = (call.arg(4)).to_i32().unwrap();

    let mut access: GLenum;
    access = (call.arg(5)).to_u32().unwrap().try_into().unwrap();

    let mut format: GLint;
    format = (call.arg(6)).to_i32().unwrap();

//not found in gl!    unsafe { gl::BindImageTextureEXT(index, texture, level, layered, layer, access, format) };
}

pub fn retrace_glMemoryBarrierEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut barriers: GLbitfield;
    barriers = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::MemoryBarrierEXT(barriers) };
}

pub fn retrace_glFramebufferPixelLocalStorageSizeEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLuint;
    target = (call.arg(0)).to_u32().unwrap();
    target = self._framebuffer_map[target];

    let mut size: GLsizei;
    size = (call.arg(1)).to_i32().unwrap();

//not found in gl!    unsafe { gl::FramebufferPixelLocalStorageSizeEXT(target, size) };
}

pub fn retrace_glClearPixelLocalStorageuiEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut offset: GLsizei;
    offset = (call.arg(0)).to_i32().unwrap();

    let mut n: GLsizei;
    n = (call.arg(1)).to_i32().unwrap();

    let values: &mut [GLuint];
    values = _allocator.alloc_array::<GLuint>(&call.arg(2));
    let _a_GLuint230_0 = (call.arg(2)).to_array();
    if let Some(_a_GLuint230_0) = _a_GLuint230_0 {
        for _jGLuint230 in 0.._a_GLuint230_0.values.len() {
    values[_jGLuint230] = (*_a_GLuint230_0.values[_jGLuint230]).to_u32().unwrap();
        }
    }
    let values = values.as_mut_ptr();

//not found in gl!    unsafe { gl::ClearPixelLocalStorageuiEXT(offset, n, values) };
}

pub fn retrace_glTexPageCommitmentEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(1)).to_i32().unwrap();

    let mut xoffset: GLint;
    xoffset = (call.arg(2)).to_i32().unwrap();

    let mut yoffset: GLint;
    yoffset = (call.arg(3)).to_i32().unwrap();

    let mut zoffset: GLint;
    zoffset = (call.arg(4)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(5)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(6)).to_i32().unwrap();

    let mut depth: GLsizei;
    depth = (call.arg(7)).to_i32().unwrap();

    let mut commit: GLboolean;
    commit = (call.arg(8)).to_u32().unwrap() as u8;

//not found in gl!    unsafe { gl::TexPageCommitmentEXT(target, level, xoffset, yoffset, zoffset, width, height, depth, commit) };
}

pub fn retrace_glStencilClearTagEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut stencilTagBits: GLsizei;
    stencilTagBits = (call.arg(0)).to_i32().unwrap();

    let mut stencilClearTag: GLuint;
    stencilClearTag = (call.arg(1)).to_u32().unwrap();

//not found in gl!    unsafe { gl::StencilClearTagEXT(stencilTagBits, stencilClearTag) };
}

pub fn retrace_glActiveStencilFaceEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut face: GLenum;
    face = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::ActiveStencilFaceEXT(face) };
}

pub fn retrace_glTexSubImage1DEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(1)).to_i32().unwrap();

    let mut xoffset: GLint;
    xoffset = (call.arg(2)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(3)).to_i32().unwrap();

    let mut format: GLenum;
    format = (call.arg(4)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(5)).to_u32().unwrap().try_into().unwrap();

    let pixels = (call.arg(6)).to_pointer().unwrap() as *mut c_void;

//not found in gl!    unsafe { gl::TexSubImage1DEXT(target, level, xoffset, width, format, _type, pixels) };
}

pub fn retrace_glTexSubImage2DEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(1)).to_i32().unwrap();

    let mut xoffset: GLint;
    xoffset = (call.arg(2)).to_i32().unwrap();

    let mut yoffset: GLint;
    yoffset = (call.arg(3)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(4)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(5)).to_i32().unwrap();

    let mut format: GLenum;
    format = (call.arg(6)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(7)).to_u32().unwrap().try_into().unwrap();

    let pixels = (call.arg(8)).to_pointer().unwrap() as *mut c_void;

//not found in gl!    unsafe { gl::TexSubImage2DEXT(target, level, xoffset, yoffset, width, height, format, _type, pixels) };
}

pub fn retrace_glPatchParameteriEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut pname: GLenum;
    pname = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut value: GLint;
    value = (call.arg(1)).to_i32().unwrap();

//not found in gl!    unsafe { gl::PatchParameteriEXT(pname, value) };
}

pub fn retrace_glTexImage3DEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(1)).to_i32().unwrap();

    let mut internalformat: GLenum;
    internalformat = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut width: GLsizei;
    width = (call.arg(3)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(4)).to_i32().unwrap();

    let mut depth: GLsizei;
    depth = (call.arg(5)).to_i32().unwrap();

    let mut border: GLint;
    border = (call.arg(6)).to_i32().unwrap();

    let mut format: GLenum;
    format = (call.arg(7)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(8)).to_u32().unwrap().try_into().unwrap();

    let pixels = (call.arg(9)).to_pointer().unwrap() as *mut c_void;

//not found in gl!    unsafe { gl::TexImage3DEXT(target, level, internalformat, width, height, depth, border, format, _type, pixels) };
}

pub fn retrace_glTexSubImage3DEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(1)).to_i32().unwrap();

    let mut xoffset: GLint;
    xoffset = (call.arg(2)).to_i32().unwrap();

    let mut yoffset: GLint;
    yoffset = (call.arg(3)).to_i32().unwrap();

    let mut zoffset: GLint;
    zoffset = (call.arg(4)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(5)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(6)).to_i32().unwrap();

    let mut depth: GLsizei;
    depth = (call.arg(7)).to_i32().unwrap();

    let mut format: GLenum;
    format = (call.arg(8)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(9)).to_u32().unwrap().try_into().unwrap();

    let pixels = (call.arg(10)).to_pointer().unwrap() as *mut c_void;

//not found in gl!    unsafe { gl::TexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, width, height, depth, format, _type, pixels) };
}

pub fn retrace_glFramebufferTextureLayerEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut attachment: GLenum;
    attachment = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut texture: GLuint;
    texture = (call.arg(2)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut level: GLint;
    level = (call.arg(3)).to_i32().unwrap();

    let mut layer: GLint;
    layer = (call.arg(4)).to_i32().unwrap();

//not found in gl!    unsafe { gl::FramebufferTextureLayerEXT(target, attachment, texture, level, layer) };
}

pub fn retrace_glTexParameterIivEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLint];
    params = _allocator.alloc_array::<GLint>(&call.arg(2));
    let _a_GLint243_0 = (call.arg(2)).to_array();
    if let Some(_a_GLint243_0) = _a_GLint243_0 {
        for _jGLint243 in 0.._a_GLint243_0.values.len() {
    params[_jGLint243] = (*_a_GLint243_0.values[_jGLint243]).to_i32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::TexParameterIivEXT(target, pname, params) };
}

pub fn retrace_glTexParameterIuivEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLuint];
    params = _allocator.alloc_array::<GLuint>(&call.arg(2));
    let _a_GLuint231_0 = (call.arg(2)).to_array();
    if let Some(_a_GLuint231_0) = _a_GLuint231_0 {
        for _jGLuint231 in 0.._a_GLuint231_0.values.len() {
    params[_jGLuint231] = (*_a_GLuint231_0.values[_jGLuint231]).to_u32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::TexParameterIuivEXT(target, pname, params) };
}

pub fn retrace_glSamplerParameterIivEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut sampler: GLuint;
    sampler = (call.arg(0)).to_u32().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let param: &mut [GLint];
    param = _allocator.alloc_array::<GLint>(&call.arg(2));
    let _a_GLint244_0 = (call.arg(2)).to_array();
    if let Some(_a_GLint244_0) = _a_GLint244_0 {
        for _jGLint244 in 0.._a_GLint244_0.values.len() {
    param[_jGLint244] = (*_a_GLint244_0.values[_jGLint244]).to_i32().unwrap();
        }
    }
    let param = param.as_mut_ptr();

//not found in gl!    unsafe { gl::SamplerParameterIivEXT(sampler, pname, param) };
}

pub fn retrace_glSamplerParameterIuivEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut sampler: GLuint;
    sampler = (call.arg(0)).to_u32().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let param: &mut [GLuint];
    param = _allocator.alloc_array::<GLuint>(&call.arg(2));
    let _a_GLuint232_0 = (call.arg(2)).to_array();
    if let Some(_a_GLuint232_0) = _a_GLuint232_0 {
        for _jGLuint232 in 0.._a_GLuint232_0.values.len() {
    param[_jGLuint232] = (*_a_GLuint232_0.values[_jGLuint232]).to_u32().unwrap();
        }
    }
    let param = param.as_mut_ptr();

//not found in gl!    unsafe { gl::SamplerParameterIuivEXT(sampler, pname, param) };
}

pub fn retrace_glTexBufferEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut internalformat: GLenum;
    internalformat = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut buffer: GLuint;
    buffer = (call.arg(2)).to_u32().unwrap();
    buffer = self._buffer_map[buffer];

//not found in gl!    unsafe { gl::TexBufferEXT(target, internalformat, buffer) };
}

pub fn retrace_glTexBufferRangeEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut internalformat: GLenum;
    internalformat = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut buffer: GLuint;
    buffer = (call.arg(2)).to_u32().unwrap();
    buffer = self._buffer_map[buffer];

    let mut offset: GLintptr;
    offset = (call.arg(3)).to_i32().unwrap();

    let mut size: GLsizeiptr;
    size = (call.arg(4)).to_i32().unwrap();

//not found in gl!    unsafe { gl::TexBufferRangeEXT(target, internalformat, buffer, offset, size) };
}

pub fn retrace_glClearColorIiEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut red: GLint;
    red = (call.arg(0)).to_i32().unwrap();

    let mut green: GLint;
    green = (call.arg(1)).to_i32().unwrap();

    let mut blue: GLint;
    blue = (call.arg(2)).to_i32().unwrap();

    let mut alpha: GLint;
    alpha = (call.arg(3)).to_i32().unwrap();

//not found in gl!    unsafe { gl::ClearColorIiEXT(red, green, blue, alpha) };
}

pub fn retrace_glClearColorIuiEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut red: GLuint;
    red = (call.arg(0)).to_u32().unwrap();

    let mut green: GLuint;
    green = (call.arg(1)).to_u32().unwrap();

    let mut blue: GLuint;
    blue = (call.arg(2)).to_u32().unwrap();

    let mut alpha: GLuint;
    alpha = (call.arg(3)).to_u32().unwrap();

//not found in gl!    unsafe { gl::ClearColorIuiEXT(red, green, blue, alpha) };
}

pub fn retrace_glBindTextureEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut texture: GLuint;
    texture = (call.arg(1)).to_u32().unwrap();
    texture = self._texture_map[texture];

//not found in gl!    unsafe { gl::BindTextureEXT(target, texture) };
}

pub fn retrace_glDeleteTexturesEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut n: GLsizei;
    n = (call.arg(0)).to_i32().unwrap();

    let textures: &mut [GLuint];
    textures = _allocator.alloc_array::<GLuint>(&call.arg(1));
    let _a_GLuint233_0 = (call.arg(1)).to_array();
    if let Some(_a_GLuint233_0) = _a_GLuint233_0 {
        for _jGLuint233 in 0.._a_GLuint233_0.values.len() {
    textures[_jGLuint233] = (*_a_GLuint233_0.values[_jGLuint233]).to_u32().unwrap();
    textures[_jGLuint233] = self._texture_map[textures[_jGLuint233]];
        }
    }
    let textures = textures.as_mut_ptr();

//not found in gl!    unsafe { gl::DeleteTexturesEXT(n, textures) };
}

pub fn retrace_glGenTexturesEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut n: GLsizei;
    n = (call.arg(0)).to_i32().unwrap();

    let textures: &mut [GLuint];
    textures = _allocator.alloc_array::<GLuint>(&call.arg(1));

//not found in gl!    unsafe { gl::GenTexturesEXT(n, textures) };
    let _aGLuint235 = (call.arg(1)).to_array();
    if (_aGLuint235) {
        for _jGLuint235 in 0.._aGLuint235.values.len() {
    let _origResult: GLuint;
    _origResult = (_aGLuint235.values[_jGLuint235]).to_u32().unwrap();
    self._texture_map[_origResult] = textures[_jGLuint235]; 
        }
    }
}

pub fn retrace_glPrioritizeTexturesEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut n: GLsizei;
    n = (call.arg(0)).to_i32().unwrap();

    let textures: &mut [GLuint];
    textures = _allocator.alloc_array::<GLuint>(&call.arg(1));
    let _a_GLuint236_0 = (call.arg(1)).to_array();
    if let Some(_a_GLuint236_0) = _a_GLuint236_0 {
        for _jGLuint236 in 0.._a_GLuint236_0.values.len() {
    textures[_jGLuint236] = (*_a_GLuint236_0.values[_jGLuint236]).to_u32().unwrap();
    textures[_jGLuint236] = self._texture_map[textures[_jGLuint236]];
        }
    }
    let textures = textures.as_mut_ptr();

    let priorities: &mut [GLclampf];
    priorities = _allocator.alloc_array::<GLclampf>(&call.arg(2));
    let _a_GLclampf2_0 = (call.arg(2)).to_array();
    if let Some(_a_GLclampf2_0) = _a_GLclampf2_0 {
        for _jGLclampf2 in 0.._a_GLclampf2_0.values.len() {
    priorities[_jGLclampf2] = (*_a_GLclampf2_0.values[_jGLclampf2]).to_f32().unwrap();
        }
    }
    let priorities = priorities.as_mut_ptr();

//not found in gl!    unsafe { gl::PrioritizeTexturesEXT(n, textures, priorities) };
}

pub fn retrace_glTextureNormalEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::TextureNormalEXT(mode) };
}

pub fn retrace_glTexStorage1DEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut levels: GLsizei;
    levels = (call.arg(1)).to_i32().unwrap();

    let mut internalformat: GLenum;
    internalformat = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut width: GLsizei;
    width = (call.arg(3)).to_i32().unwrap();

//not found in gl!    unsafe { gl::TexStorage1DEXT(target, levels, internalformat, width) };
}

pub fn retrace_glTexStorage2DEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut levels: GLsizei;
    levels = (call.arg(1)).to_i32().unwrap();

    let mut internalformat: GLenum;
    internalformat = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut width: GLsizei;
    width = (call.arg(3)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(4)).to_i32().unwrap();

//not found in gl!    unsafe { gl::TexStorage2DEXT(target, levels, internalformat, width, height) };
}

pub fn retrace_glTexStorage3DEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut levels: GLsizei;
    levels = (call.arg(1)).to_i32().unwrap();

    let mut internalformat: GLenum;
    internalformat = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut width: GLsizei;
    width = (call.arg(3)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(4)).to_i32().unwrap();

    let mut depth: GLsizei;
    depth = (call.arg(5)).to_i32().unwrap();

//not found in gl!    unsafe { gl::TexStorage3DEXT(target, levels, internalformat, width, height, depth) };
}

pub fn retrace_glTextureViewEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut origtexture: GLuint;
    origtexture = (call.arg(2)).to_u32().unwrap();
    origtexture = self._texture_map[origtexture];

    let mut internalformat: GLenum;
    internalformat = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let mut minlevel: GLuint;
    minlevel = (call.arg(4)).to_u32().unwrap();

    let mut numlevels: GLuint;
    numlevels = (call.arg(5)).to_u32().unwrap();

    let mut minlayer: GLuint;
    minlayer = (call.arg(6)).to_u32().unwrap();

    let mut numlayers: GLuint;
    numlayers = (call.arg(7)).to_u32().unwrap();

//not found in gl!    unsafe { gl::TextureViewEXT(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers) };
}

pub fn retrace_glBeginTransformFeedbackEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut primitiveMode: GLenum;
    primitiveMode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::BeginTransformFeedbackEXT(primitiveMode) };
}

pub fn retrace_glEndTransformFeedbackEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
//not found in gl!    unsafe { gl::EndTransformFeedbackEXT() };
}

pub fn retrace_glBindBufferRangeEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut index: GLuint;
    index = (call.arg(1)).to_u32().unwrap();

    let mut buffer: GLuint;
    buffer = (call.arg(2)).to_u32().unwrap();
    buffer = self._buffer_map[buffer];

    let mut offset: GLintptr;
    offset = (call.arg(3)).to_i32().unwrap();

    let mut size: GLsizeiptr;
    size = (call.arg(4)).to_i32().unwrap();

//not found in gl!    unsafe { gl::BindBufferRangeEXT(target, index, buffer, offset, size) };
}

pub fn retrace_glBindBufferOffsetEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut index: GLuint;
    index = (call.arg(1)).to_u32().unwrap();

    let mut buffer: GLuint;
    buffer = (call.arg(2)).to_u32().unwrap();
    buffer = self._buffer_map[buffer];

    let mut offset: GLintptr;
    offset = (call.arg(3)).to_i32().unwrap();

//not found in gl!    unsafe { gl::BindBufferOffsetEXT(target, index, buffer, offset) };
}

pub fn retrace_glBindBufferBaseEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut index: GLuint;
    index = (call.arg(1)).to_u32().unwrap();

    let mut buffer: GLuint;
    buffer = (call.arg(2)).to_u32().unwrap();
    buffer = self._buffer_map[buffer];

//not found in gl!    unsafe { gl::BindBufferBaseEXT(target, index, buffer) };
}

pub fn retrace_glTransformFeedbackVaryingsEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let varyings: &mut [GLchar];
    varyings = _allocator.alloc_array::<GLchar >(&call.arg(2));
    let _a_GLchar30_0 = (call.arg(2)).to_array();
    if let Some(_a_GLchar30_0) = _a_GLchar30_0 {
        for _jGLchar30 in 0.._a_GLchar30_0.values.len() {
    varyings[_jGLchar30] = (*_a_GLchar30_0.values[_jGLchar30]).to_string().unwrap();
        }
    }
    let varyings = varyings.as_mut_ptr();

    let mut bufferMode: GLenum;
    bufferMode = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::TransformFeedbackVaryingsEXT(program, count, varyings, bufferMode) };
}

pub fn retrace_glArrayElementEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut i: GLint;
    i = (call.arg(0)).to_i32().unwrap();

//not found in gl!    unsafe { gl::ArrayElementEXT(i) };
}

pub fn retrace_glColorPointerEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut size: GLint;
    size = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut stride: GLsizei;
    stride = (call.arg(2)).to_i32().unwrap();

    let mut count: GLsizei;
    count = (call.arg(3)).to_i32().unwrap();

    let pointer: &mut [GLc_void];
    pointer = region::to_pointer(call.arg(4), true);

//not found in gl!    unsafe { gl::ColorPointerEXT(size, _type, stride, count, pointer) };
}

pub fn retrace_glDrawArraysEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut first: GLint;
    first = (call.arg(1)).to_i32().unwrap();

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::DrawArraysEXT(mode, first, count) };
}

pub fn retrace_glEdgeFlagPointerEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut stride: GLsizei;
    stride = (call.arg(0)).to_i32().unwrap();

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let pointer: &mut [GLboolean];
    pointer = region::to_pointer(call.arg(2), true);

//not found in gl!    unsafe { gl::EdgeFlagPointerEXT(stride, count, pointer) };
}

pub fn retrace_glIndexPointerEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut _type: GLenum;
    _type = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut stride: GLsizei;
    stride = (call.arg(1)).to_i32().unwrap();

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let pointer: &mut [GLc_void];
    pointer = region::to_pointer(call.arg(3), true);

//not found in gl!    unsafe { gl::IndexPointerEXT(_type, stride, count, pointer) };
}

pub fn retrace_glNormalPointerEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut _type: GLenum;
    _type = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut stride: GLsizei;
    stride = (call.arg(1)).to_i32().unwrap();

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let pointer: &mut [GLc_void];
    pointer = region::to_pointer(call.arg(3), true);

//not found in gl!    unsafe { gl::NormalPointerEXT(_type, stride, count, pointer) };
}

pub fn retrace_glTexCoordPointerEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut size: GLint;
    size = (call.arg(0)).to_i32().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut stride: GLsizei;
    stride = (call.arg(2)).to_i32().unwrap();

    let mut count: GLsizei;
    count = (call.arg(3)).to_i32().unwrap();

    let pointer: &mut [GLc_void];
    pointer = region::to_pointer(call.arg(4), true);

//not found in gl!    unsafe { gl::TexCoordPointerEXT(size, _type, stride, count, pointer) };
}

pub fn retrace_glVertexPointerEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut size: GLint;
    size = (call.arg(0)).to_i32().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut stride: GLsizei;
    stride = (call.arg(2)).to_i32().unwrap();

    let mut count: GLsizei;
    count = (call.arg(3)).to_i32().unwrap();

    let pointer: &mut [GLc_void];
    pointer = region::to_pointer(call.arg(4), true);

//not found in gl!    unsafe { gl::VertexPointerEXT(size, _type, stride, count, pointer) };
}

pub fn retrace_glVertexAttribL1dEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut x: GLdouble;
    x = (call.arg(1)).to_f64().unwrap();

//not found in gl!    unsafe { gl::VertexAttribL1dEXT(index, x) };
}

pub fn retrace_glVertexAttribL2dEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut x: GLdouble;
    x = (call.arg(1)).to_f64().unwrap();

    let mut y: GLdouble;
    y = (call.arg(2)).to_f64().unwrap();

//not found in gl!    unsafe { gl::VertexAttribL2dEXT(index, x, y) };
}

pub fn retrace_glVertexAttribL3dEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut x: GLdouble;
    x = (call.arg(1)).to_f64().unwrap();

    let mut y: GLdouble;
    y = (call.arg(2)).to_f64().unwrap();

    let mut z: GLdouble;
    z = (call.arg(3)).to_f64().unwrap();

//not found in gl!    unsafe { gl::VertexAttribL3dEXT(index, x, y, z) };
}

pub fn retrace_glVertexAttribL4dEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut x: GLdouble;
    x = (call.arg(1)).to_f64().unwrap();

    let mut y: GLdouble;
    y = (call.arg(2)).to_f64().unwrap();

    let mut z: GLdouble;
    z = (call.arg(3)).to_f64().unwrap();

    let mut w: GLdouble;
    w = (call.arg(4)).to_f64().unwrap();

//not found in gl!    unsafe { gl::VertexAttribL4dEXT(index, x, y, z, w) };
}

pub fn retrace_glVertexAttribL1dvEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLdouble];
    v = _allocator.alloc_array::<GLdouble>(&call.arg(1));
    let _a_PGLdouble12_0 = (call.arg(1)).to_array().unwrap();
    v[0] = (_a_PGLdouble12_0.values[0]).to_f64().unwrap();

//not found in gl!    unsafe { gl::VertexAttribL1dvEXT(index, v) };
}

pub fn retrace_glVertexAttribL2dvEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLdouble];
    v = _allocator.alloc_array::<GLdouble>(&call.arg(1));
    let _a_GLdouble127_0 = (call.arg(1)).to_array();
    if let Some(_a_GLdouble127_0) = _a_GLdouble127_0 {
        for _jGLdouble127 in 0.._a_GLdouble127_0.values.len() {
    v[_jGLdouble127] = (*_a_GLdouble127_0.values[_jGLdouble127]).to_f64().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::VertexAttribL2dvEXT(index, v) };
}

pub fn retrace_glVertexAttribL3dvEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLdouble];
    v = _allocator.alloc_array::<GLdouble>(&call.arg(1));
    let _a_GLdouble128_0 = (call.arg(1)).to_array();
    if let Some(_a_GLdouble128_0) = _a_GLdouble128_0 {
        for _jGLdouble128 in 0.._a_GLdouble128_0.values.len() {
    v[_jGLdouble128] = (*_a_GLdouble128_0.values[_jGLdouble128]).to_f64().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::VertexAttribL3dvEXT(index, v) };
}

pub fn retrace_glVertexAttribL4dvEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLdouble];
    v = _allocator.alloc_array::<GLdouble>(&call.arg(1));
    let _a_GLdouble129_0 = (call.arg(1)).to_array();
    if let Some(_a_GLdouble129_0) = _a_GLdouble129_0 {
        for _jGLdouble129 in 0.._a_GLdouble129_0.values.len() {
    v[_jGLdouble129] = (*_a_GLdouble129_0.values[_jGLdouble129]).to_f64().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::VertexAttribL4dvEXT(index, v) };
}

pub fn retrace_glVertexAttribLPointerEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut size: GLint;
    size = (call.arg(1)).to_i32().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut stride: GLsizei;
    stride = (call.arg(3)).to_i32().unwrap();

    let pointer: &mut [GLc_void];
    pointer = region::to_pointer(call.arg(4), true);

//not found in gl!    unsafe { gl::VertexAttribLPointerEXT(index, size, _type, stride, pointer) };
}

pub fn retrace_glBeginVertexShaderEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
//not found in gl!    unsafe { gl::BeginVertexShaderEXT() };
}

pub fn retrace_glEndVertexShaderEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
//not found in gl!    unsafe { gl::EndVertexShaderEXT() };
}

pub fn retrace_glBindVertexShaderEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut id: GLuint;
    id = (call.arg(0)).to_u32().unwrap();

//not found in gl!    unsafe { gl::BindVertexShaderEXT(id) };
}

pub fn retrace_glGenVertexShadersEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut range: GLuint;
    range = (call.arg(0)).to_u32().unwrap();

//not found in gl!    let _result = unsafe { gl::GenVertexShadersEXT(range) };

}

pub fn retrace_glDeleteVertexShaderEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut id: GLuint;
    id = (call.arg(0)).to_u32().unwrap();

//not found in gl!    unsafe { gl::DeleteVertexShaderEXT(id) };
}

pub fn retrace_glShaderOp1EXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut op: GLenum;
    op = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut res: GLuint;
    res = (call.arg(1)).to_u32().unwrap();

    let mut arg1: GLuint;
    arg1 = (call.arg(2)).to_u32().unwrap();

//not found in gl!    unsafe { gl::ShaderOp1EXT(op, res, arg1) };
}

pub fn retrace_glShaderOp2EXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut op: GLenum;
    op = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut res: GLuint;
    res = (call.arg(1)).to_u32().unwrap();

    let mut arg1: GLuint;
    arg1 = (call.arg(2)).to_u32().unwrap();

    let mut arg2: GLuint;
    arg2 = (call.arg(3)).to_u32().unwrap();

//not found in gl!    unsafe { gl::ShaderOp2EXT(op, res, arg1, arg2) };
}

pub fn retrace_glShaderOp3EXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut op: GLenum;
    op = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut res: GLuint;
    res = (call.arg(1)).to_u32().unwrap();

    let mut arg1: GLuint;
    arg1 = (call.arg(2)).to_u32().unwrap();

    let mut arg2: GLuint;
    arg2 = (call.arg(3)).to_u32().unwrap();

    let mut arg3: GLuint;
    arg3 = (call.arg(4)).to_u32().unwrap();

//not found in gl!    unsafe { gl::ShaderOp3EXT(op, res, arg1, arg2, arg3) };
}

pub fn retrace_glSwizzleEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut res: GLuint;
    res = (call.arg(0)).to_u32().unwrap();

    let mut _in: GLuint;
    _in = (call.arg(1)).to_u32().unwrap();

    let mut outX: GLenum;
    outX = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut outY: GLenum;
    outY = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let mut outZ: GLenum;
    outZ = (call.arg(4)).to_u32().unwrap().try_into().unwrap();

    let mut outW: GLenum;
    outW = (call.arg(5)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::SwizzleEXT(res, _in, outX, outY, outZ, outW) };
}

pub fn retrace_glWriteMaskEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut res: GLuint;
    res = (call.arg(0)).to_u32().unwrap();

    let mut _in: GLuint;
    _in = (call.arg(1)).to_u32().unwrap();

    let mut outX: GLenum;
    outX = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut outY: GLenum;
    outY = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let mut outZ: GLenum;
    outZ = (call.arg(4)).to_u32().unwrap().try_into().unwrap();

    let mut outW: GLenum;
    outW = (call.arg(5)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::WriteMaskEXT(res, _in, outX, outY, outZ, outW) };
}

pub fn retrace_glInsertComponentEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut res: GLuint;
    res = (call.arg(0)).to_u32().unwrap();

    let mut src: GLuint;
    src = (call.arg(1)).to_u32().unwrap();

    let mut num: GLuint;
    num = (call.arg(2)).to_u32().unwrap();

//not found in gl!    unsafe { gl::InsertComponentEXT(res, src, num) };
}

pub fn retrace_glExtractComponentEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut res: GLuint;
    res = (call.arg(0)).to_u32().unwrap();

    let mut src: GLuint;
    src = (call.arg(1)).to_u32().unwrap();

    let mut num: GLuint;
    num = (call.arg(2)).to_u32().unwrap();

//not found in gl!    unsafe { gl::ExtractComponentEXT(res, src, num) };
}

pub fn retrace_glGenSymbolsEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut datatype: GLenum;
    datatype = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut storagetype: GLenum;
    storagetype = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut range: GLenum;
    range = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut components: GLuint;
    components = (call.arg(3)).to_u32().unwrap();

//not found in gl!    let _result = unsafe { gl::GenSymbolsEXT(datatype, storagetype, range, components) };

}

pub fn retrace_glSetInvariantEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut id: GLuint;
    id = (call.arg(0)).to_u32().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let addr: &mut [GLc_void];
//FIXME    memset(&addr, 0, sizeof addr); 

    if (1) {
    }
//not found in gl!    unsafe { gl::SetInvariantEXT(id, _type, addr) };
}

pub fn retrace_glSetLocalConstantEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut id: GLuint;
    id = (call.arg(0)).to_u32().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let addr: &mut [GLc_void];
//FIXME    memset(&addr, 0, sizeof addr); 

    if (1) {
    }
//not found in gl!    unsafe { gl::SetLocalConstantEXT(id, _type, addr) };
}

pub fn retrace_glVariantbvEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut id: GLuint;
    id = (call.arg(0)).to_u32().unwrap();

    let addr: &mut [GLbyte];
//FIXME    memset(&addr, 0, sizeof addr); 

    if (1) {
    }
//not found in gl!    unsafe { gl::VariantbvEXT(id, addr) };
}

pub fn retrace_glVariantsvEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut id: GLuint;
    id = (call.arg(0)).to_u32().unwrap();

    let addr: &mut [GLshort];
//FIXME    memset(&addr, 0, sizeof addr); 

    if (1) {
    }
//not found in gl!    unsafe { gl::VariantsvEXT(id, addr) };
}

pub fn retrace_glVariantivEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut id: GLuint;
    id = (call.arg(0)).to_u32().unwrap();

    let addr: &mut [GLint];
//FIXME    memset(&addr, 0, sizeof addr); 

    if (1) {
    }
//not found in gl!    unsafe { gl::VariantivEXT(id, addr) };
}

pub fn retrace_glVariantfvEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut id: GLuint;
    id = (call.arg(0)).to_u32().unwrap();

    let addr: &mut [GLfloat];
//FIXME    memset(&addr, 0, sizeof addr); 

    if (1) {
    }
//not found in gl!    unsafe { gl::VariantfvEXT(id, addr) };
}

pub fn retrace_glVariantdvEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut id: GLuint;
    id = (call.arg(0)).to_u32().unwrap();

    let addr: &mut [GLdouble];
//FIXME    memset(&addr, 0, sizeof addr); 

    if (1) {
    }
//not found in gl!    unsafe { gl::VariantdvEXT(id, addr) };
}

pub fn retrace_glVariantubvEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut id: GLuint;
    id = (call.arg(0)).to_u32().unwrap();

    let addr: &mut [GLubyte];
//FIXME    memset(&addr, 0, sizeof addr); 

    if (1) {
    }
//not found in gl!    unsafe { gl::VariantubvEXT(id, addr) };
}

pub fn retrace_glVariantusvEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut id: GLuint;
    id = (call.arg(0)).to_u32().unwrap();

    let addr: &mut [GLushort];
//FIXME    memset(&addr, 0, sizeof addr); 

    if (1) {
    }
//not found in gl!    unsafe { gl::VariantusvEXT(id, addr) };
}

pub fn retrace_glVariantuivEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut id: GLuint;
    id = (call.arg(0)).to_u32().unwrap();

    let addr: &mut [GLuint];
//FIXME    memset(&addr, 0, sizeof addr); 

    if (1) {
    }
//not found in gl!    unsafe { gl::VariantuivEXT(id, addr) };
}

pub fn retrace_glVariantPointerEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut id: GLuint;
    id = (call.arg(0)).to_u32().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut stride: GLuint;
    stride = (call.arg(2)).to_u32().unwrap();

    let addr: &mut [GLc_void];
//FIXME    memset(&addr, 0, sizeof addr); 

    if (1) {
    }
//not found in gl!    unsafe { gl::VariantPointerEXT(id, _type, stride, addr) };
}

pub fn retrace_glEnableVariantClientStateEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut id: GLuint;
    id = (call.arg(0)).to_u32().unwrap();

//not found in gl!    unsafe { gl::EnableVariantClientStateEXT(id) };
}

pub fn retrace_glDisableVariantClientStateEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut id: GLuint;
    id = (call.arg(0)).to_u32().unwrap();

//not found in gl!    unsafe { gl::DisableVariantClientStateEXT(id) };
}

pub fn retrace_glBindLightParameterEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut light: GLenum;
    light = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut value: GLenum;
    value = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    let _result = unsafe { gl::BindLightParameterEXT(light, value) };

}

pub fn retrace_glBindMaterialParameterEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut face: GLenum;
    face = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut value: GLenum;
    value = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    let _result = unsafe { gl::BindMaterialParameterEXT(face, value) };

}

pub fn retrace_glBindTexGenParameterEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut unit: GLenum;
    unit = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut coord: GLenum;
    coord = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut value: GLenum;
    value = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    let _result = unsafe { gl::BindTexGenParameterEXT(unit, coord, value) };

}

pub fn retrace_glBindTextureUnitParameterEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut unit: GLenum;
    unit = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut value: GLenum;
    value = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    let _result = unsafe { gl::BindTextureUnitParameterEXT(unit, value) };

}

pub fn retrace_glBindParameterEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut value: GLenum;
    value = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    let _result = unsafe { gl::BindParameterEXT(value) };

}

pub fn retrace_glVertexWeightfEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut weight: GLfloat;
    weight = (call.arg(0)).to_f32().unwrap();

//not found in gl!    unsafe { gl::VertexWeightfEXT(weight) };
}

pub fn retrace_glVertexWeightfvEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let weight: &mut [GLfloat];
    weight = _allocator.alloc_array::<GLfloat>(&call.arg(0));
    let _a_PGLfloat21_0 = (call.arg(0)).to_array().unwrap();
    weight[0] = (_a_PGLfloat21_0.values[0]).to_f32().unwrap();

//not found in gl!    unsafe { gl::VertexWeightfvEXT(weight) };
}

pub fn retrace_glVertexWeightPointerEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut size: GLsizei;
    size = (call.arg(0)).to_i32().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut stride: GLsizei;
    stride = (call.arg(2)).to_i32().unwrap();

    let pointer: &mut [GLc_void];
//FIXME    memset(&pointer, 0, sizeof pointer); 

    if (1) {
    }
//not found in gl!    unsafe { gl::VertexWeightPointerEXT(size, _type, stride, pointer) };
}

pub fn retrace_glImportSyncEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut external_sync_type: GLenum;
    external_sync_type = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut external_sync: GLintptr;
    external_sync = (call.arg(1)).to_i32().unwrap();

    let mut flags: GLbitfield;
    flags = (call.arg(2)).to_u32().unwrap();

//not found in gl!    let _result = unsafe { gl::ImportSyncEXT(external_sync_type, external_sync, flags) };

    let _origResult: GLsync;
    let _origResult = (*call.ret).to_pointer().unwrap() as *mut c_void;
    self._sync_map[_origResult] = _result; 
}

pub fn retrace_glFrameTerminatorGREMEDY(&mut self, call: &mut Call) {
    region::frame_complete(call);
}

pub fn retrace_glStringMarkerGREMEDY(&mut self, call: &mut Call) {
}

pub fn retrace_glImageTransformParameteriHP(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut param: GLint;
    param = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::ImageTransformParameteriHP(target, pname, param) };
}

pub fn retrace_glImageTransformParameterfHP(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut param: GLfloat;
    param = (call.arg(2)).to_f32().unwrap();

//not found in gl!    unsafe { gl::ImageTransformParameterfHP(target, pname, param) };
}

pub fn retrace_glImageTransformParameterivHP(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLint];
    params = _allocator.alloc_array::<GLint>(&call.arg(2));
    let _a_GLint245_0 = (call.arg(2)).to_array();
    if let Some(_a_GLint245_0) = _a_GLint245_0 {
        for _jGLint245 in 0.._a_GLint245_0.values.len() {
    params[_jGLint245] = (*_a_GLint245_0.values[_jGLint245]).to_i32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::ImageTransformParameterivHP(target, pname, params) };
}

pub fn retrace_glImageTransformParameterfvHP(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLfloat];
    params = _allocator.alloc_array::<GLfloat>(&call.arg(2));
    let _a_GLfloat229_0 = (call.arg(2)).to_array();
    if let Some(_a_GLfloat229_0) = _a_GLfloat229_0 {
        for _jGLfloat229 in 0.._a_GLfloat229_0.values.len() {
    params[_jGLfloat229] = (*_a_GLfloat229_0.values[_jGLfloat229]).to_f32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::ImageTransformParameterfvHP(target, pname, params) };
}

pub fn retrace_glMultiModeDrawArraysIBM(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mode: &mut [GLenum];
    mode = _allocator.alloc_array::<GLenum>(&call.arg(0));
    let _a_GLenum27_0 = (call.arg(0)).to_array();
    if let Some(_a_GLenum27_0) = _a_GLenum27_0 {
        for _jGLenum27 in 0.._a_GLenum27_0.values.len() {
    mode[_jGLenum27] = (*_a_GLenum27_0.values[_jGLenum27]).to_u32().unwrap().try_into().unwrap();
        }
    }
    let mode = mode.as_mut_ptr();

    let first: &mut [GLint];
    first = _allocator.alloc_array::<GLint>(&call.arg(1));
    let _a_GLint246_0 = (call.arg(1)).to_array();
    if let Some(_a_GLint246_0) = _a_GLint246_0 {
        for _jGLint246 in 0.._a_GLint246_0.values.len() {
    first[_jGLint246] = (*_a_GLint246_0.values[_jGLint246]).to_i32().unwrap();
        }
    }
    let first = first.as_mut_ptr();

    let count: &mut [GLsizei];
    count = _allocator.alloc_array::<GLsizei>(&call.arg(2));
    let _a_GLsizei15_0 = (call.arg(2)).to_array();
    if let Some(_a_GLsizei15_0) = _a_GLsizei15_0 {
        for _jGLsizei15 in 0.._a_GLsizei15_0.values.len() {
    count[_jGLsizei15] = (*_a_GLsizei15_0.values[_jGLsizei15]).to_i32().unwrap();
        }
    }
    let count = count.as_mut_ptr();

    let mut drawcount: GLsizei;
    drawcount = (call.arg(3)).to_i32().unwrap();

    let mut modestride: GLint;
    modestride = (call.arg(4)).to_i32().unwrap();

//not found in gl!    unsafe { gl::MultiModeDrawArraysIBM(mode, first, count, drawcount, modestride) };
}

pub fn retrace_glMultiModeDrawElementsIBM(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mode: &mut [GLenum];
    mode = _allocator.alloc_array::<GLenum>(&call.arg(0));
    let _a_GLenum28_0 = (call.arg(0)).to_array();
    if let Some(_a_GLenum28_0) = _a_GLenum28_0 {
        for _jGLenum28 in 0.._a_GLenum28_0.values.len() {
    mode[_jGLenum28] = (*_a_GLenum28_0.values[_jGLenum28]).to_u32().unwrap().try_into().unwrap();
        }
    }
    let mode = mode.as_mut_ptr();

    let count: &mut [GLsizei];
    count = _allocator.alloc_array::<GLsizei>(&call.arg(1));
    let _a_GLsizei16_0 = (call.arg(1)).to_array();
    if let Some(_a_GLsizei16_0) = _a_GLsizei16_0 {
        for _jGLsizei16 in 0.._a_GLsizei16_0.values.len() {
    count[_jGLsizei16] = (*_a_GLsizei16_0.values[_jGLsizei16]).to_i32().unwrap();
        }
    }
    let count = count.as_mut_ptr();

    let mut _type: GLenum;
    _type = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let indices: &mut [GLc_void];
    indices = _allocator.alloc_array::< GLvoid >(&call.arg(3));
    let _a_constGLvoid249_0 = (call.arg(3)).to_array();
    if let Some(_a_constGLvoid249_0) = _a_constGLvoid249_0 {
        for _jconstGLvoid249 in 0.._a_constGLvoid249_0.values.len() {
            indices[_jconstGLvoid249] = (*_a_constGLvoid249_0.values[_jconstGLvoid249]).to_pointer().unwrap() as *mut c_void;
        }
    }
    let indices = indices.as_mut_ptr();

    let mut drawcount: GLsizei;
    drawcount = (call.arg(4)).to_i32().unwrap();

    let mut modestride: GLint;
    modestride = (call.arg(5)).to_i32().unwrap();

//not found in gl!    unsafe { gl::MultiModeDrawElementsIBM(mode, count, _type, indices, drawcount, modestride) };
}

pub fn retrace_glColorPointerListIBM(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut size: GLint;
    size = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut stride: GLint;
    stride = (call.arg(2)).to_i32().unwrap();

    let pointer: &mut [GLc_void];
//FIXME    memset(&pointer, 0, sizeof pointer); 

    let mut ptrstride: GLint;
    ptrstride = (call.arg(4)).to_i32().unwrap();

    if (1) {
    }
//not found in gl!    unsafe { gl::ColorPointerListIBM(size, _type, stride, pointer, ptrstride) };
}

pub fn retrace_glSecondaryColorPointerListIBM(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut size: GLint;
    size = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut stride: GLint;
    stride = (call.arg(2)).to_i32().unwrap();

    let pointer: &mut [GLc_void];
//FIXME    memset(&pointer, 0, sizeof pointer); 

    let mut ptrstride: GLint;
    ptrstride = (call.arg(4)).to_i32().unwrap();

    if (1) {
    }
//not found in gl!    unsafe { gl::SecondaryColorPointerListIBM(size, _type, stride, pointer, ptrstride) };
}

pub fn retrace_glEdgeFlagPointerListIBM(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut stride: GLint;
    stride = (call.arg(0)).to_i32().unwrap();

    let pointer: &mut [GLboolean];
//FIXME    memset(&pointer, 0, sizeof pointer); 

    let mut ptrstride: GLint;
    ptrstride = (call.arg(2)).to_i32().unwrap();

    if (1) {
    }
//not found in gl!    unsafe { gl::EdgeFlagPointerListIBM(stride, pointer, ptrstride) };
}

pub fn retrace_glFogCoordPointerListIBM(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut _type: GLenum;
    _type = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut stride: GLint;
    stride = (call.arg(1)).to_i32().unwrap();

    let pointer: &mut [GLc_void];
//FIXME    memset(&pointer, 0, sizeof pointer); 

    let mut ptrstride: GLint;
    ptrstride = (call.arg(3)).to_i32().unwrap();

    if (1) {
    }
//not found in gl!    unsafe { gl::FogCoordPointerListIBM(_type, stride, pointer, ptrstride) };
}

pub fn retrace_glIndexPointerListIBM(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut _type: GLenum;
    _type = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut stride: GLint;
    stride = (call.arg(1)).to_i32().unwrap();

    let pointer: &mut [GLc_void];
//FIXME    memset(&pointer, 0, sizeof pointer); 

    let mut ptrstride: GLint;
    ptrstride = (call.arg(3)).to_i32().unwrap();

    if (1) {
    }
//not found in gl!    unsafe { gl::IndexPointerListIBM(_type, stride, pointer, ptrstride) };
}

pub fn retrace_glNormalPointerListIBM(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut _type: GLenum;
    _type = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut stride: GLint;
    stride = (call.arg(1)).to_i32().unwrap();

    let pointer: &mut [GLc_void];
//FIXME    memset(&pointer, 0, sizeof pointer); 

    let mut ptrstride: GLint;
    ptrstride = (call.arg(3)).to_i32().unwrap();

    if (1) {
    }
//not found in gl!    unsafe { gl::NormalPointerListIBM(_type, stride, pointer, ptrstride) };
}

pub fn retrace_glTexCoordPointerListIBM(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut size: GLint;
    size = (call.arg(0)).to_i32().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut stride: GLint;
    stride = (call.arg(2)).to_i32().unwrap();

    let pointer: &mut [GLc_void];
//FIXME    memset(&pointer, 0, sizeof pointer); 

    let mut ptrstride: GLint;
    ptrstride = (call.arg(4)).to_i32().unwrap();

    if (1) {
    }
//not found in gl!    unsafe { gl::TexCoordPointerListIBM(size, _type, stride, pointer, ptrstride) };
}

pub fn retrace_glVertexPointerListIBM(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut size: GLint;
    size = (call.arg(0)).to_i32().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut stride: GLint;
    stride = (call.arg(2)).to_i32().unwrap();

    let pointer: &mut [GLc_void];
//FIXME    memset(&pointer, 0, sizeof pointer); 

    let mut ptrstride: GLint;
    ptrstride = (call.arg(4)).to_i32().unwrap();

    if (1) {
    }
//not found in gl!    unsafe { gl::VertexPointerListIBM(size, _type, stride, pointer, ptrstride) };
}

pub fn retrace_glRenderbufferStorageMultisampleIMG(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut samples: GLsizei;
    samples = (call.arg(1)).to_i32().unwrap();
    let max_samples = 0;
//not found in gl!    unsafe { gl::GetIntegerv(gl::MAX_SAMPLES, &max_samples) };
    if samples > max_samples {
        samples = max_samples;
    }

    let mut internalformat: GLenum;
    internalformat = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut width: GLsizei;
    width = (call.arg(3)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(4)).to_i32().unwrap();

//not found in gl!    unsafe { gl::RenderbufferStorageMultisampleIMG(target, samples, internalformat, width, height) };
}

pub fn retrace_glFramebufferTexture2DMultisampleIMG(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut attachment: GLenum;
    attachment = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut textarget: GLenum;
    textarget = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut texture: GLuint;
    texture = (call.arg(3)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut level: GLint;
    level = (call.arg(4)).to_i32().unwrap();

    let mut samples: GLsizei;
    samples = (call.arg(5)).to_i32().unwrap();
    let max_samples = 0;
//not found in gl!    unsafe { gl::GetIntegerv(gl::MAX_SAMPLES, &max_samples) };
    if samples > max_samples {
        samples = max_samples;
    }

//not found in gl!    unsafe { gl::FramebufferTexture2DMultisampleIMG(target, attachment, textarget, texture, level, samples) };
}

pub fn retrace_glBlendFuncSeparateINGR(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut sfactorRGB: GLenum;
    sfactorRGB = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut dfactorRGB: GLenum;
    dfactorRGB = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut sfactorAlpha: GLenum;
    sfactorAlpha = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut dfactorAlpha: GLenum;
    dfactorAlpha = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::BlendFuncSeparateINGR(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha) };
}

pub fn retrace_glSyncTextureINTEL(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

//not found in gl!    unsafe { gl::SyncTextureINTEL(texture) };
}

pub fn retrace_glUnmapTexture2DINTEL(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut level: GLint;
    level = (call.arg(1)).to_i32().unwrap();

//not found in gl!    unsafe { gl::UnmapTexture2DINTEL(texture, level) };
}

pub fn retrace_glMapTexture2DINTEL(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut level: GLint;
    level = (call.arg(1)).to_i32().unwrap();

    let mut access: GLbitfield;
    access = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let stride: &mut [GLint];
    stride = _allocator.alloc_array::<GLint>(&call.arg(3));

    let layout: &mut [GLenum];
    layout = _allocator.alloc_array::<GLenum>(&call.arg(4));

//not found in gl!    let _result = unsafe { gl::MapTexture2DINTEL(texture, level, access, stride, layout) };

    let _aPGLint23 = (call.arg(3)).to_array();
    if (_aPGLint23) {
    }
    let _aPGLenum8 = (call.arg(4)).to_array();
    if (_aPGLenum8) {
    }
}

pub fn retrace_glVertexPointervINTEL(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut size: GLint;
    size = (call.arg(0)).to_i32().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let pointer: &mut [GLc_void];
//FIXME    memset(&pointer, 0, sizeof pointer); 

    if (1) {
    }
//not found in gl!    unsafe { gl::VertexPointervINTEL(size, _type, pointer) };
}

pub fn retrace_glNormalPointervINTEL(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut _type: GLenum;
    _type = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let pointer: &mut [GLc_void];
//FIXME    memset(&pointer, 0, sizeof pointer); 

    if (1) {
    }
//not found in gl!    unsafe { gl::NormalPointervINTEL(_type, pointer) };
}

pub fn retrace_glColorPointervINTEL(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut size: GLint;
    size = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let pointer: &mut [GLc_void];
//FIXME    memset(&pointer, 0, sizeof pointer); 

    if (1) {
    }
//not found in gl!    unsafe { gl::ColorPointervINTEL(size, _type, pointer) };
}

pub fn retrace_glTexCoordPointervINTEL(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut size: GLint;
    size = (call.arg(0)).to_i32().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let pointer: &mut [GLc_void];
//FIXME    memset(&pointer, 0, sizeof pointer); 

    if (1) {
    }
//not found in gl!    unsafe { gl::TexCoordPointervINTEL(size, _type, pointer) };
}

pub fn retrace_glBlendBarrierKHR(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
//not found in gl!    unsafe { gl::BlendBarrierKHR() };
}

pub fn retrace_glDebugMessageControl(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut source: GLenum;
    source = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut severity: GLenum;
    severity = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut count: GLsizei;
    count = (call.arg(3)).to_i32().unwrap();

    let ids: &mut [GLuint];
    ids = _allocator.alloc_array::<GLuint>(&call.arg(4));
    let _a_GLuint237_0 = (call.arg(4)).to_array();
    if let Some(_a_GLuint237_0) = _a_GLuint237_0 {
        for _jGLuint237 in 0.._a_GLuint237_0.values.len() {
    ids[_jGLuint237] = (*_a_GLuint237_0.values[_jGLuint237]).to_u32().unwrap();
        }
    }
    let ids = ids.as_mut_ptr();

    let mut enabled: GLboolean;
    enabled = (call.arg(5)).to_u32().unwrap() as u8;

    unsafe { gl::DebugMessageControl(source, _type, severity, count, ids, enabled) };
}

pub fn retrace_glDebugMessageInsert(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut source: GLenum;
    source = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut id: GLuint;
    id = (call.arg(2)).to_u32().unwrap();

    let mut severity: GLenum;
    severity = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let mut length: GLsizei;
    length = (call.arg(4)).to_i32().unwrap();

    let buf: &mut [GLchar];
    buf = (call.arg(5)).to_string().unwrap();

    unsafe { gl::DebugMessageInsert(source, _type, id, severity, length, buf) };
}

pub fn retrace_glPushDebugGroup(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut source: GLenum;
    source = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut id: GLuint;
    id = (call.arg(1)).to_u32().unwrap();

    let mut length: GLsizei;
    length = (call.arg(2)).to_i32().unwrap();

    let message: &mut [GLchar];
    message = (call.arg(3)).to_string().unwrap();

    unsafe { gl::PushDebugGroup(source, id, length, message) };
}

pub fn retrace_glPopDebugGroup(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    unsafe { gl::PopDebugGroup() };
}

pub fn retrace_glObjectLabel(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut identifier: GLenum;
    identifier = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut name: GLuint;
    name = (call.arg(1)).to_u32().unwrap();

    let mut length: GLsizei;
    length = (call.arg(2)).to_i32().unwrap();

    let label: &mut [GLchar];
    label = (call.arg(3)).to_string().unwrap();

    unsafe { gl::ObjectLabel(identifier, name, length, label) };
}

pub fn retrace_glObjectPtrLabel(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let ptr: &mut [c_void];
//FIXME    memset(&ptr, 0, sizeof ptr); 

    let mut length: GLsizei;
    length = (call.arg(1)).to_i32().unwrap();

    let label: &mut [GLchar];
    label = (call.arg(2)).to_string().unwrap();

    if (1) {
    }
    unsafe { gl::ObjectPtrLabel(ptr, length, label) };
}

pub fn retrace_glDebugMessageControlKHR(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut source: GLenum;
    source = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut severity: GLenum;
    severity = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut count: GLsizei;
    count = (call.arg(3)).to_i32().unwrap();

    let ids: &mut [GLuint];
    ids = _allocator.alloc_array::<GLuint>(&call.arg(4));
    let _a_GLuint238_0 = (call.arg(4)).to_array();
    if let Some(_a_GLuint238_0) = _a_GLuint238_0 {
        for _jGLuint238 in 0.._a_GLuint238_0.values.len() {
    ids[_jGLuint238] = (*_a_GLuint238_0.values[_jGLuint238]).to_u32().unwrap();
        }
    }
    let ids = ids.as_mut_ptr();

    let mut enabled: GLboolean;
    enabled = (call.arg(5)).to_u32().unwrap() as u8;

//not found in gl!    unsafe { gl::DebugMessageControlKHR(source, _type, severity, count, ids, enabled) };
}

pub fn retrace_glDebugMessageInsertKHR(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut source: GLenum;
    source = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut id: GLuint;
    id = (call.arg(2)).to_u32().unwrap();

    let mut severity: GLenum;
    severity = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let mut length: GLsizei;
    length = (call.arg(4)).to_i32().unwrap();

    let buf: &mut [GLchar];
    buf = (call.arg(5)).to_string().unwrap();

//not found in gl!    unsafe { gl::DebugMessageInsertKHR(source, _type, id, severity, length, buf) };
}

pub fn retrace_glPushDebugGroupKHR(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut source: GLenum;
    source = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut id: GLuint;
    id = (call.arg(1)).to_u32().unwrap();

    let mut length: GLsizei;
    length = (call.arg(2)).to_i32().unwrap();

    let message: &mut [GLchar];
    message = (call.arg(3)).to_string().unwrap();

//not found in gl!    unsafe { gl::PushDebugGroupKHR(source, id, length, message) };
}

pub fn retrace_glPopDebugGroupKHR(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
//not found in gl!    unsafe { gl::PopDebugGroupKHR() };
}

pub fn retrace_glObjectLabelKHR(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut identifier: GLenum;
    identifier = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut name: GLuint;
    name = (call.arg(1)).to_u32().unwrap();

    let mut length: GLsizei;
    length = (call.arg(2)).to_i32().unwrap();

    let label: &mut [GLchar];
    label = (call.arg(3)).to_string().unwrap();

//not found in gl!    unsafe { gl::ObjectLabelKHR(identifier, name, length, label) };
}

pub fn retrace_glObjectPtrLabelKHR(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let ptr: &mut [c_void];
//FIXME    memset(&ptr, 0, sizeof ptr); 

    let mut length: GLsizei;
    length = (call.arg(1)).to_i32().unwrap();

    let label: &mut [GLchar];
    label = (call.arg(2)).to_string().unwrap();

    if (1) {
    }
//not found in gl!    unsafe { gl::ObjectPtrLabelKHR(ptr, length, label) };
}

pub fn retrace_glReadnPixels(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut x: GLint;
    x = (call.arg(0)).to_i32().unwrap();

    let mut y: GLint;
    y = (call.arg(1)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(2)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(3)).to_i32().unwrap();

    let mut format: GLenum;
    format = (call.arg(4)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(5)).to_u32().unwrap().try_into().unwrap();

    let mut bufSize: GLsizei;
    bufSize = (call.arg(6)).to_i32().unwrap();

    let data: &mut [GLc_void];
    let data = (call.arg(7)).to_pointer();

    let _pack_buffer = 0;
    if self.context.features("pixel_buffer_object") {
//not found in gl!        unsafe { gl::GetIntegerv(gl::PIXEL_PACK_BUFFER_BINDING, &_pack_buffer) };
    }
     let buffer = Vec::<u8>::new();
    if _pack_buffer != 0 {
     buffer.resize(call.arg(6).to_i32().unwrap(), 0);
    }
    data = buffer.data();
//not found in gl!    unsafe { gl::ReadnPixels(x, y, width, height, format, _type, bufSize, data) };
}

pub fn retrace_glReadnPixelsKHR(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut x: GLint;
    x = (call.arg(0)).to_i32().unwrap();

    let mut y: GLint;
    y = (call.arg(1)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(2)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(3)).to_i32().unwrap();

    let mut format: GLenum;
    format = (call.arg(4)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(5)).to_u32().unwrap().try_into().unwrap();

    let mut bufSize: GLsizei;
    bufSize = (call.arg(6)).to_i32().unwrap();

    let data: &mut [GLc_void];
    let data = (call.arg(7)).to_pointer();

    let _pack_buffer = 0;
    if self.context.features("pixel_buffer_object") {
//not found in gl!        unsafe { gl::GetIntegerv(gl::PIXEL_PACK_BUFFER_BINDING, &_pack_buffer) };
    }
     let buffer = Vec::<u8>::new();
    if _pack_buffer != 0 {
    return;
    }
//not found in gl!    unsafe { gl::ReadnPixelsKHR(x, y, width, height, format, _type, bufSize, data) };
}

pub fn retrace_glNewBufferRegion(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut _type: GLenum;
    _type = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    let _result = unsafe { gl::NewBufferRegion(_type) };

    let _origResult: GLuint;
    _origResult = (*call.ret).to_u32().unwrap();
    self._region_map[_origResult] = _result; 
}

pub fn retrace_glDeleteBufferRegion(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut region: GLuint;
    region = (call.arg(0)).to_u32().unwrap();
    region = self._region_map[region];

//not found in gl!    unsafe { gl::DeleteBufferRegion(region) };
}

pub fn retrace_glReadBufferRegion(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut region: GLuint;
    region = (call.arg(0)).to_u32().unwrap();
    region = self._region_map[region];

    let mut x: GLint;
    x = (call.arg(1)).to_i32().unwrap();

    let mut y: GLint;
    y = (call.arg(2)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(3)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(4)).to_i32().unwrap();

//not found in gl!    unsafe { gl::ReadBufferRegion(region, x, y, width, height) };
}

pub fn retrace_glDrawBufferRegion(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut region: GLuint;
    region = (call.arg(0)).to_u32().unwrap();
    region = self._region_map[region];

    let mut x: GLint;
    x = (call.arg(1)).to_i32().unwrap();

    let mut y: GLint;
    y = (call.arg(2)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(3)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(4)).to_i32().unwrap();

    let mut xDest: GLint;
    xDest = (call.arg(5)).to_i32().unwrap();

    let mut yDest: GLint;
    yDest = (call.arg(6)).to_i32().unwrap();

//not found in gl!    unsafe { gl::DrawBufferRegion(region, x, y, width, height, xDest, yDest) };
}

pub fn retrace_glResizeBuffersMESA(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
//not found in gl!    unsafe { gl::ResizeBuffersMESA() };
}

pub fn retrace_glWindowPos2dMESA(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut x: GLdouble;
    x = (call.arg(0)).to_f64().unwrap();

    let mut y: GLdouble;
    y = (call.arg(1)).to_f64().unwrap();

//not found in gl!    unsafe { gl::WindowPos2dMESA(x, y) };
}

pub fn retrace_glWindowPos2dvMESA(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLdouble];
    v = _allocator.alloc_array::<GLdouble>(&call.arg(0));
    let _a_GLdouble130_0 = (call.arg(0)).to_array();
    if let Some(_a_GLdouble130_0) = _a_GLdouble130_0 {
        for _jGLdouble130 in 0.._a_GLdouble130_0.values.len() {
    v[_jGLdouble130] = (*_a_GLdouble130_0.values[_jGLdouble130]).to_f64().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::WindowPos2dvMESA(v) };
}

pub fn retrace_glWindowPos2fMESA(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut x: GLfloat;
    x = (call.arg(0)).to_f32().unwrap();

    let mut y: GLfloat;
    y = (call.arg(1)).to_f32().unwrap();

//not found in gl!    unsafe { gl::WindowPos2fMESA(x, y) };
}

pub fn retrace_glWindowPos2fvMESA(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLfloat];
    v = _allocator.alloc_array::<GLfloat>(&call.arg(0));
    let _a_GLfloat230_0 = (call.arg(0)).to_array();
    if let Some(_a_GLfloat230_0) = _a_GLfloat230_0 {
        for _jGLfloat230 in 0.._a_GLfloat230_0.values.len() {
    v[_jGLfloat230] = (*_a_GLfloat230_0.values[_jGLfloat230]).to_f32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::WindowPos2fvMESA(v) };
}

pub fn retrace_glWindowPos2iMESA(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut x: GLint;
    x = (call.arg(0)).to_i32().unwrap();

    let mut y: GLint;
    y = (call.arg(1)).to_i32().unwrap();

//not found in gl!    unsafe { gl::WindowPos2iMESA(x, y) };
}

pub fn retrace_glWindowPos2ivMESA(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLint];
    v = _allocator.alloc_array::<GLint>(&call.arg(0));
    let _a_GLint247_0 = (call.arg(0)).to_array();
    if let Some(_a_GLint247_0) = _a_GLint247_0 {
        for _jGLint247 in 0.._a_GLint247_0.values.len() {
    v[_jGLint247] = (*_a_GLint247_0.values[_jGLint247]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::WindowPos2ivMESA(v) };
}

pub fn retrace_glWindowPos2sMESA(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut x: GLshort;
    x = (call.arg(0)).to_i32().unwrap();

    let mut y: GLshort;
    y = (call.arg(1)).to_i32().unwrap();

//not found in gl!    unsafe { gl::WindowPos2sMESA(x, y) };
}

pub fn retrace_glWindowPos2svMESA(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLshort];
    v = _allocator.alloc_array::<GLshort>(&call.arg(0));
    let _a_GLshort43_0 = (call.arg(0)).to_array();
    if let Some(_a_GLshort43_0) = _a_GLshort43_0 {
        for _jGLshort43 in 0.._a_GLshort43_0.values.len() {
    v[_jGLshort43] = (*_a_GLshort43_0.values[_jGLshort43]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::WindowPos2svMESA(v) };
}

pub fn retrace_glWindowPos3dMESA(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut x: GLdouble;
    x = (call.arg(0)).to_f64().unwrap();

    let mut y: GLdouble;
    y = (call.arg(1)).to_f64().unwrap();

    let mut z: GLdouble;
    z = (call.arg(2)).to_f64().unwrap();

//not found in gl!    unsafe { gl::WindowPos3dMESA(x, y, z) };
}

pub fn retrace_glWindowPos3dvMESA(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLdouble];
    v = _allocator.alloc_array::<GLdouble>(&call.arg(0));
    let _a_GLdouble131_0 = (call.arg(0)).to_array();
    if let Some(_a_GLdouble131_0) = _a_GLdouble131_0 {
        for _jGLdouble131 in 0.._a_GLdouble131_0.values.len() {
    v[_jGLdouble131] = (*_a_GLdouble131_0.values[_jGLdouble131]).to_f64().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::WindowPos3dvMESA(v) };
}

pub fn retrace_glWindowPos3fMESA(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut x: GLfloat;
    x = (call.arg(0)).to_f32().unwrap();

    let mut y: GLfloat;
    y = (call.arg(1)).to_f32().unwrap();

    let mut z: GLfloat;
    z = (call.arg(2)).to_f32().unwrap();

//not found in gl!    unsafe { gl::WindowPos3fMESA(x, y, z) };
}

pub fn retrace_glWindowPos3fvMESA(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLfloat];
    v = _allocator.alloc_array::<GLfloat>(&call.arg(0));
    let _a_GLfloat231_0 = (call.arg(0)).to_array();
    if let Some(_a_GLfloat231_0) = _a_GLfloat231_0 {
        for _jGLfloat231 in 0.._a_GLfloat231_0.values.len() {
    v[_jGLfloat231] = (*_a_GLfloat231_0.values[_jGLfloat231]).to_f32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::WindowPos3fvMESA(v) };
}

pub fn retrace_glWindowPos3iMESA(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut x: GLint;
    x = (call.arg(0)).to_i32().unwrap();

    let mut y: GLint;
    y = (call.arg(1)).to_i32().unwrap();

    let mut z: GLint;
    z = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::WindowPos3iMESA(x, y, z) };
}

pub fn retrace_glWindowPos3ivMESA(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLint];
    v = _allocator.alloc_array::<GLint>(&call.arg(0));
    let _a_GLint248_0 = (call.arg(0)).to_array();
    if let Some(_a_GLint248_0) = _a_GLint248_0 {
        for _jGLint248 in 0.._a_GLint248_0.values.len() {
    v[_jGLint248] = (*_a_GLint248_0.values[_jGLint248]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::WindowPos3ivMESA(v) };
}

pub fn retrace_glWindowPos3sMESA(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut x: GLshort;
    x = (call.arg(0)).to_i32().unwrap();

    let mut y: GLshort;
    y = (call.arg(1)).to_i32().unwrap();

    let mut z: GLshort;
    z = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::WindowPos3sMESA(x, y, z) };
}

pub fn retrace_glWindowPos3svMESA(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLshort];
    v = _allocator.alloc_array::<GLshort>(&call.arg(0));
    let _a_GLshort44_0 = (call.arg(0)).to_array();
    if let Some(_a_GLshort44_0) = _a_GLshort44_0 {
        for _jGLshort44 in 0.._a_GLshort44_0.values.len() {
    v[_jGLshort44] = (*_a_GLshort44_0.values[_jGLshort44]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::WindowPos3svMESA(v) };
}

pub fn retrace_glWindowPos4dMESA(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut x: GLdouble;
    x = (call.arg(0)).to_f64().unwrap();

    let mut y: GLdouble;
    y = (call.arg(1)).to_f64().unwrap();

    let mut z: GLdouble;
    z = (call.arg(2)).to_f64().unwrap();

    let mut w: GLdouble;
    w = (call.arg(3)).to_f64().unwrap();

//not found in gl!    unsafe { gl::WindowPos4dMESA(x, y, z, w) };
}

pub fn retrace_glWindowPos4dvMESA(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLdouble];
    v = _allocator.alloc_array::<GLdouble>(&call.arg(0));
    let _a_GLdouble132_0 = (call.arg(0)).to_array();
    if let Some(_a_GLdouble132_0) = _a_GLdouble132_0 {
        for _jGLdouble132 in 0.._a_GLdouble132_0.values.len() {
    v[_jGLdouble132] = (*_a_GLdouble132_0.values[_jGLdouble132]).to_f64().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::WindowPos4dvMESA(v) };
}

pub fn retrace_glWindowPos4fMESA(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut x: GLfloat;
    x = (call.arg(0)).to_f32().unwrap();

    let mut y: GLfloat;
    y = (call.arg(1)).to_f32().unwrap();

    let mut z: GLfloat;
    z = (call.arg(2)).to_f32().unwrap();

    let mut w: GLfloat;
    w = (call.arg(3)).to_f32().unwrap();

//not found in gl!    unsafe { gl::WindowPos4fMESA(x, y, z, w) };
}

pub fn retrace_glWindowPos4fvMESA(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLfloat];
    v = _allocator.alloc_array::<GLfloat>(&call.arg(0));
    let _a_GLfloat232_0 = (call.arg(0)).to_array();
    if let Some(_a_GLfloat232_0) = _a_GLfloat232_0 {
        for _jGLfloat232 in 0.._a_GLfloat232_0.values.len() {
    v[_jGLfloat232] = (*_a_GLfloat232_0.values[_jGLfloat232]).to_f32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::WindowPos4fvMESA(v) };
}

pub fn retrace_glWindowPos4iMESA(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut x: GLint;
    x = (call.arg(0)).to_i32().unwrap();

    let mut y: GLint;
    y = (call.arg(1)).to_i32().unwrap();

    let mut z: GLint;
    z = (call.arg(2)).to_i32().unwrap();

    let mut w: GLint;
    w = (call.arg(3)).to_i32().unwrap();

//not found in gl!    unsafe { gl::WindowPos4iMESA(x, y, z, w) };
}

pub fn retrace_glWindowPos4ivMESA(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLint];
    v = _allocator.alloc_array::<GLint>(&call.arg(0));
    let _a_GLint249_0 = (call.arg(0)).to_array();
    if let Some(_a_GLint249_0) = _a_GLint249_0 {
        for _jGLint249 in 0.._a_GLint249_0.values.len() {
    v[_jGLint249] = (*_a_GLint249_0.values[_jGLint249]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::WindowPos4ivMESA(v) };
}

pub fn retrace_glWindowPos4sMESA(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut x: GLshort;
    x = (call.arg(0)).to_i32().unwrap();

    let mut y: GLshort;
    y = (call.arg(1)).to_i32().unwrap();

    let mut z: GLshort;
    z = (call.arg(2)).to_i32().unwrap();

    let mut w: GLshort;
    w = (call.arg(3)).to_i32().unwrap();

//not found in gl!    unsafe { gl::WindowPos4sMESA(x, y, z, w) };
}

pub fn retrace_glWindowPos4svMESA(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLshort];
    v = _allocator.alloc_array::<GLshort>(&call.arg(0));
    let _a_GLshort45_0 = (call.arg(0)).to_array();
    if let Some(_a_GLshort45_0) = _a_GLshort45_0 {
        for _jGLshort45 in 0.._a_GLshort45_0.values.len() {
    v[_jGLshort45] = (*_a_GLshort45_0.values[_jGLshort45]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::WindowPos4svMESA(v) };
}

pub fn retrace_glBeginConditionalRenderNVX(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut id: GLuint;
    id = (call.arg(0)).to_u32().unwrap();
    id = self._query_map[id];

//not found in gl!    unsafe { gl::BeginConditionalRenderNVX(id) };
}

pub fn retrace_glEndConditionalRenderNVX(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
//not found in gl!    unsafe { gl::EndConditionalRenderNVX() };
}

pub fn retrace_glMultiDrawArraysIndirectBindlessNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let indirect: &mut [GLc_void];
    indirect = region::to_pointer(call.arg(1));

    let mut drawCount: GLsizei;
    drawCount = (call.arg(2)).to_i32().unwrap();

    let mut stride: GLsizei;
    stride = (call.arg(3)).to_i32().unwrap();

    let mut vertexBufferCount: GLint;
    vertexBufferCount = (call.arg(4)).to_i32().unwrap();

//not found in gl!    unsafe { gl::MultiDrawArraysIndirectBindlessNV(mode, indirect, drawCount, stride, vertexBufferCount) };
}

pub fn retrace_glMultiDrawElementsIndirectBindlessNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let indirect: &mut [GLc_void];
    indirect = region::to_pointer(call.arg(2));

    let mut drawCount: GLsizei;
    drawCount = (call.arg(3)).to_i32().unwrap();

    let mut stride: GLsizei;
    stride = (call.arg(4)).to_i32().unwrap();

    let mut vertexBufferCount: GLint;
    vertexBufferCount = (call.arg(5)).to_i32().unwrap();

//not found in gl!    unsafe { gl::MultiDrawElementsIndirectBindlessNV(mode, _type, indirect, drawCount, stride, vertexBufferCount) };
}

pub fn retrace_glGetTextureHandleNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

//not found in gl!    let _result = unsafe { gl::GetTextureHandleNV(texture) };

    let _origResult: GLuint64;
    _origResult = (*call.ret).to_u32().unwrap();
    self._textureHandle_map[_origResult] = _result; 
}

pub fn retrace_glGetTextureSamplerHandleNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut sampler: GLuint;
    sampler = (call.arg(1)).to_u32().unwrap();
    sampler = self._sampler_map[sampler];

//not found in gl!    let _result = unsafe { gl::GetTextureSamplerHandleNV(texture, sampler) };

    let _origResult: GLuint64;
    _origResult = (*call.ret).to_u32().unwrap();
    self._textureHandle_map[_origResult] = _result; 
}

pub fn retrace_glMakeTextureHandleResidentNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut handle: GLuint64;
    handle = (call.arg(0)).to_u32().unwrap();
    handle = self._textureHandle_map[handle];

//not found in gl!    unsafe { gl::MakeTextureHandleResidentNV(handle) };
}

pub fn retrace_glMakeTextureHandleNonResidentNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut handle: GLuint64;
    handle = (call.arg(0)).to_u32().unwrap();
    handle = self._textureHandle_map[handle];

//not found in gl!    unsafe { gl::MakeTextureHandleNonResidentNV(handle) };
}

pub fn retrace_glGetImageHandleNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut level: GLint;
    level = (call.arg(1)).to_i32().unwrap();

    let mut layered: GLboolean;
    layered = (call.arg(2)).to_u32().unwrap() as u8;

    let mut layer: GLint;
    layer = (call.arg(3)).to_i32().unwrap();

    let mut format: GLenum;
    format = (call.arg(4)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    let _result = unsafe { gl::GetImageHandleNV(texture, level, layered, layer, format) };

    let _origResult: GLuint64;
    _origResult = (*call.ret).to_u32().unwrap();
    self._imageHandle_map[_origResult] = _result; 
}

pub fn retrace_glMakeImageHandleResidentNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut handle: GLuint64;
    handle = (call.arg(0)).to_u32().unwrap();
    handle = self._imageHandle_map[handle];

    let mut access: GLenum;
    access = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::MakeImageHandleResidentNV(handle, access) };
}

pub fn retrace_glMakeImageHandleNonResidentNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut handle: GLuint64;
    handle = (call.arg(0)).to_u32().unwrap();
    handle = self._imageHandle_map[handle];

//not found in gl!    unsafe { gl::MakeImageHandleNonResidentNV(handle) };
}

pub fn retrace_glUniformHandleui64NV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut value: GLuint64;
    value = (call.arg(1)).to_u32().unwrap();

//not found in gl!    unsafe { gl::UniformHandleui64NV(location, value) };
}

pub fn retrace_glUniformHandleui64vNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let value: &mut [GLuint64];
    value = _allocator.alloc_array::<GLuint64>(&call.arg(2));
    let _a_GLuint6423_0 = (call.arg(2)).to_array();
    if let Some(_a_GLuint6423_0) = _a_GLuint6423_0 {
        for _jGLuint6423 in 0.._a_GLuint6423_0.values.len() {
    value[_jGLuint6423] = (*_a_GLuint6423_0.values[_jGLuint6423]).to_u32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::UniformHandleui64vNV(location, count, value) };
}

pub fn retrace_glProgramUniformHandleui64NV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut value: GLuint64;
    value = (call.arg(2)).to_u32().unwrap();

//not found in gl!    unsafe { gl::ProgramUniformHandleui64NV(program, location, value) };
}

pub fn retrace_glProgramUniformHandleui64vNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let values: &mut [GLuint64];
    values = _allocator.alloc_array::<GLuint64>(&call.arg(3));
    let _a_GLuint6424_0 = (call.arg(3)).to_array();
    if let Some(_a_GLuint6424_0) = _a_GLuint6424_0 {
        for _jGLuint6424 in 0.._a_GLuint6424_0.values.len() {
    values[_jGLuint6424] = (*_a_GLuint6424_0.values[_jGLuint6424]).to_u32().unwrap();
        }
    }
    let values = values.as_mut_ptr();

//not found in gl!    unsafe { gl::ProgramUniformHandleui64vNV(program, location, count, values) };
}

pub fn retrace_glBlendParameteriNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut pname: GLenum;
    pname = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut value: GLint;
    value = (call.arg(1)).to_i32().unwrap();

//not found in gl!    unsafe { gl::BlendParameteriNV(pname, value) };
}

pub fn retrace_glBlendBarrierNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
//not found in gl!    unsafe { gl::BlendBarrierNV() };
}

pub fn retrace_glBeginConditionalRenderNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut id: GLuint;
    id = (call.arg(0)).to_u32().unwrap();
    id = self._query_map[id];

    let mut mode: GLenum;
    mode = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::BeginConditionalRenderNV(id, mode) };
}

pub fn retrace_glEndConditionalRenderNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
//not found in gl!    unsafe { gl::EndConditionalRenderNV() };
}

pub fn retrace_glCopyImageSubDataNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut srcName: GLuint;
    srcName = (call.arg(0)).to_u32().unwrap();
    srcName = self._texture_map[srcName];

    let mut srcTarget: GLenum;
    srcTarget = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut srcLevel: GLint;
    srcLevel = (call.arg(2)).to_i32().unwrap();

    let mut srcX: GLint;
    srcX = (call.arg(3)).to_i32().unwrap();

    let mut srcY: GLint;
    srcY = (call.arg(4)).to_i32().unwrap();

    let mut srcZ: GLint;
    srcZ = (call.arg(5)).to_i32().unwrap();

    let mut dstName: GLuint;
    dstName = (call.arg(6)).to_u32().unwrap();
    dstName = self._texture_map[dstName];

    let mut dstTarget: GLenum;
    dstTarget = (call.arg(7)).to_u32().unwrap().try_into().unwrap();

    let mut dstLevel: GLint;
    dstLevel = (call.arg(8)).to_i32().unwrap();

    let mut dstX: GLint;
    dstX = (call.arg(9)).to_i32().unwrap();

    let mut dstY: GLint;
    dstY = (call.arg(10)).to_i32().unwrap();

    let mut dstZ: GLint;
    dstZ = (call.arg(11)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(12)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(13)).to_i32().unwrap();

    let mut depth: GLsizei;
    depth = (call.arg(14)).to_i32().unwrap();

//not found in gl!    unsafe { gl::CopyImageSubDataNV(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth) };
}

pub fn retrace_glCoverageMaskNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mask: GLboolean;
    mask = (call.arg(0)).to_u32().unwrap() as u8;

//not found in gl!    unsafe { gl::CoverageMaskNV(mask) };
}

pub fn retrace_glCoverageOperationNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut operation: GLenum;
    operation = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::CoverageOperationNV(operation) };
}

pub fn retrace_glDepthRangedNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut zNear: GLdouble;
    zNear = (call.arg(0)).to_f64().unwrap();

    let mut zFar: GLdouble;
    zFar = (call.arg(1)).to_f64().unwrap();

//not found in gl!    unsafe { gl::DepthRangedNV(zNear, zFar) };
}

pub fn retrace_glClearDepthdNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut depth: GLdouble;
    depth = (call.arg(0)).to_f64().unwrap();

//not found in gl!    unsafe { gl::ClearDepthdNV(depth) };
}

pub fn retrace_glDepthBoundsdNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut zmin: GLdouble;
    zmin = (call.arg(0)).to_f64().unwrap();

    let mut zmax: GLdouble;
    zmax = (call.arg(1)).to_f64().unwrap();

//not found in gl!    unsafe { gl::DepthBoundsdNV(zmin, zmax) };
}

pub fn retrace_glDrawBuffersNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut n: GLsizei;
    n = (call.arg(0)).to_i32().unwrap();

    let bufs: &mut [GLenum];
    bufs = _allocator.alloc_array::<GLenum>(&call.arg(1));
    let _a_GLenum29_0 = (call.arg(1)).to_array();
    if let Some(_a_GLenum29_0) = _a_GLenum29_0 {
        for _jGLenum29 in 0.._a_GLenum29_0.values.len() {
    bufs[_jGLenum29] = (*_a_GLenum29_0.values[_jGLenum29]).to_u32().unwrap().try_into().unwrap();
        }
    }
    let bufs = bufs.as_mut_ptr();

//not found in gl!    unsafe { gl::DrawBuffersNV(n, bufs) };
}

pub fn retrace_glDrawTextureNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut sampler: GLuint;
    sampler = (call.arg(1)).to_u32().unwrap();
    sampler = self._sampler_map[sampler];

    let mut x0: GLfloat;
    x0 = (call.arg(2)).to_f32().unwrap();

    let mut y0: GLfloat;
    y0 = (call.arg(3)).to_f32().unwrap();

    let mut x1: GLfloat;
    x1 = (call.arg(4)).to_f32().unwrap();

    let mut y1: GLfloat;
    y1 = (call.arg(5)).to_f32().unwrap();

    let mut z: GLfloat;
    z = (call.arg(6)).to_f32().unwrap();

    let mut s0: GLfloat;
    s0 = (call.arg(7)).to_f32().unwrap();

    let mut t0: GLfloat;
    t0 = (call.arg(8)).to_f32().unwrap();

    let mut s1: GLfloat;
    s1 = (call.arg(9)).to_f32().unwrap();

    let mut t1: GLfloat;
    t1 = (call.arg(10)).to_f32().unwrap();

//not found in gl!    unsafe { gl::DrawTextureNV(texture, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1) };
}

pub fn retrace_glMapControlPointsNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut index: GLuint;
    index = (call.arg(1)).to_u32().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut ustride: GLsizei;
    ustride = (call.arg(3)).to_i32().unwrap();

    let mut vstride: GLsizei;
    vstride = (call.arg(4)).to_i32().unwrap();

    let mut uorder: GLint;
    uorder = (call.arg(5)).to_i32().unwrap();

    let mut vorder: GLint;
    vorder = (call.arg(6)).to_i32().unwrap();

    let mut packed: GLboolean;
    packed = (call.arg(7)).to_u32().unwrap() as u8;

    let points: &mut [GLc_void];
//FIXME    memset(&points, 0, sizeof points); 

    if (1) {
    }
//not found in gl!    unsafe { gl::MapControlPointsNV(target, index, _type, ustride, vstride, uorder, vorder, packed, points) };
}

pub fn retrace_glMapParameterivNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLint];
//FIXME    memset(&params, 0, sizeof params); 

    if (1) {
    }
//not found in gl!    unsafe { gl::MapParameterivNV(target, pname, params) };
}

pub fn retrace_glMapParameterfvNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLfloat];
//FIXME    memset(&params, 0, sizeof params); 

    if (1) {
    }
//not found in gl!    unsafe { gl::MapParameterfvNV(target, pname, params) };
}

pub fn retrace_glEvalMapsNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut mode: GLenum;
    mode = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::EvalMapsNV(target, mode) };
}

pub fn retrace_glSampleMaskIndexedNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut mask: GLbitfield;
    mask = (call.arg(1)).to_u32().unwrap();

//not found in gl!    unsafe { gl::SampleMaskIndexedNV(index, mask) };
}

pub fn retrace_glTexRenderbufferNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut renderbuffer: GLuint;
    renderbuffer = (call.arg(1)).to_u32().unwrap();
    renderbuffer = self._renderbuffer_map[renderbuffer];

//not found in gl!    unsafe { gl::TexRenderbufferNV(target, renderbuffer) };
}

pub fn retrace_glDeleteFencesNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut n: GLsizei;
    n = (call.arg(0)).to_i32().unwrap();

    let fences: &mut [GLuint];
    fences = _allocator.alloc_array::<GLuint>(&call.arg(1));
    let _a_GLuint239_0 = (call.arg(1)).to_array();
    if let Some(_a_GLuint239_0) = _a_GLuint239_0 {
        for _jGLuint239 in 0.._a_GLuint239_0.values.len() {
    fences[_jGLuint239] = (*_a_GLuint239_0.values[_jGLuint239]).to_u32().unwrap();
    fences[_jGLuint239] = self._fence_map[fences[_jGLuint239]];
        }
    }
    let fences = fences.as_mut_ptr();

//not found in gl!    unsafe { gl::DeleteFencesNV(n, fences) };
}

pub fn retrace_glGenFencesNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut n: GLsizei;
    n = (call.arg(0)).to_i32().unwrap();

    let fences: &mut [GLuint];
    fences = _allocator.alloc_array::<GLuint>(&call.arg(1));

//not found in gl!    unsafe { gl::GenFencesNV(n, fences) };
    let _aGLuint241 = (call.arg(1)).to_array();
    if (_aGLuint241) {
        for _jGLuint241 in 0.._aGLuint241.values.len() {
    let _origResult: GLuint;
    _origResult = (_aGLuint241.values[_jGLuint241]).to_u32().unwrap();
    self._fence_map[_origResult] = fences[_jGLuint241]; 
        }
    }
}

pub fn retrace_glTestFenceNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut fence: GLuint;
    fence = (call.arg(0)).to_u32().unwrap();
    fence = self._fence_map[fence];

//not found in gl!    let _result = unsafe { gl::TestFenceNV(fence) };

}

pub fn retrace_glFinishFenceNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut fence: GLuint;
    fence = (call.arg(0)).to_u32().unwrap();
    fence = self._fence_map[fence];

//not found in gl!    unsafe { gl::FinishFenceNV(fence) };
}

pub fn retrace_glSetFenceNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut fence: GLuint;
    fence = (call.arg(0)).to_u32().unwrap();
    fence = self._fence_map[fence];

    let mut condition: GLenum;
    condition = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::SetFenceNV(fence, condition) };
}

pub fn retrace_glProgramNamedParameter4fNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut id: GLuint;
    id = (call.arg(0)).to_u32().unwrap();
    id = self._programARB_map[id];

    let mut len: GLsizei;
    len = (call.arg(1)).to_i32().unwrap();

    let name: &mut [GLubyte];
    name = (call.arg(2)).to_string().unwrap();

    let mut x: GLfloat;
    x = (call.arg(3)).to_f32().unwrap();

    let mut y: GLfloat;
    y = (call.arg(4)).to_f32().unwrap();

    let mut z: GLfloat;
    z = (call.arg(5)).to_f32().unwrap();

    let mut w: GLfloat;
    w = (call.arg(6)).to_f32().unwrap();

//not found in gl!    unsafe { gl::ProgramNamedParameter4fNV(id, len, name, x, y, z, w) };
}

pub fn retrace_glProgramNamedParameter4dNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut id: GLuint;
    id = (call.arg(0)).to_u32().unwrap();
    id = self._programARB_map[id];

    let mut len: GLsizei;
    len = (call.arg(1)).to_i32().unwrap();

    let name: &mut [GLubyte];
    name = (call.arg(2)).to_string().unwrap();

    let mut x: GLdouble;
    x = (call.arg(3)).to_f64().unwrap();

    let mut y: GLdouble;
    y = (call.arg(4)).to_f64().unwrap();

    let mut z: GLdouble;
    z = (call.arg(5)).to_f64().unwrap();

    let mut w: GLdouble;
    w = (call.arg(6)).to_f64().unwrap();

//not found in gl!    unsafe { gl::ProgramNamedParameter4dNV(id, len, name, x, y, z, w) };
}

pub fn retrace_glProgramNamedParameter4fvNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut id: GLuint;
    id = (call.arg(0)).to_u32().unwrap();
    id = self._programARB_map[id];

    let mut len: GLsizei;
    len = (call.arg(1)).to_i32().unwrap();

    let name: &mut [GLubyte];
    name = (call.arg(2)).to_string().unwrap();

    let v: &mut [GLfloat];
    v = _allocator.alloc_array::<GLfloat>(&call.arg(3));
    let _a_GLfloat233_0 = (call.arg(3)).to_array();
    if let Some(_a_GLfloat233_0) = _a_GLfloat233_0 {
        for _jGLfloat233 in 0.._a_GLfloat233_0.values.len() {
    v[_jGLfloat233] = (*_a_GLfloat233_0.values[_jGLfloat233]).to_f32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::ProgramNamedParameter4fvNV(id, len, name, v) };
}

pub fn retrace_glProgramNamedParameter4dvNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut id: GLuint;
    id = (call.arg(0)).to_u32().unwrap();
    id = self._programARB_map[id];

    let mut len: GLsizei;
    len = (call.arg(1)).to_i32().unwrap();

    let name: &mut [GLubyte];
    name = (call.arg(2)).to_string().unwrap();

    let v: &mut [GLdouble];
    v = _allocator.alloc_array::<GLdouble>(&call.arg(3));
    let _a_GLdouble133_0 = (call.arg(3)).to_array();
    if let Some(_a_GLdouble133_0) = _a_GLdouble133_0 {
        for _jGLdouble133 in 0.._a_GLdouble133_0.values.len() {
    v[_jGLdouble133] = (*_a_GLdouble133_0.values[_jGLdouble133]).to_f64().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::ProgramNamedParameter4dvNV(id, len, name, v) };
}

pub fn retrace_glBlitFramebufferNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut srcX0: GLint;
    srcX0 = (call.arg(0)).to_i32().unwrap();

    let mut srcY0: GLint;
    srcY0 = (call.arg(1)).to_i32().unwrap();

    let mut srcX1: GLint;
    srcX1 = (call.arg(2)).to_i32().unwrap();

    let mut srcY1: GLint;
    srcY1 = (call.arg(3)).to_i32().unwrap();

    let mut dstX0: GLint;
    dstX0 = (call.arg(4)).to_i32().unwrap();

    let mut dstY0: GLint;
    dstY0 = (call.arg(5)).to_i32().unwrap();

    let mut dstX1: GLint;
    dstX1 = (call.arg(6)).to_i32().unwrap();

    let mut dstY1: GLint;
    dstY1 = (call.arg(7)).to_i32().unwrap();

    let mut mask: GLbitfield;
    mask = (call.arg(8)).to_u32().unwrap().try_into().unwrap();

    let mut filter: GLenum;
    filter = (call.arg(9)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::BlitFramebufferNV(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) };
}

pub fn retrace_glCoverageModulationTableNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut n: GLsizei;
    n = (call.arg(0)).to_i32().unwrap();

    let v: &mut [GLfloat];
    v = _allocator.alloc_array::<GLfloat>(&call.arg(1));
    let _a_GLfloat234_0 = (call.arg(1)).to_array();
    if let Some(_a_GLfloat234_0) = _a_GLfloat234_0 {
        for _jGLfloat234 in 0.._a_GLfloat234_0.values.len() {
    v[_jGLfloat234] = (*_a_GLfloat234_0.values[_jGLfloat234]).to_f32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::CoverageModulationTableNV(n, v) };
}

pub fn retrace_glCoverageModulationNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut components: GLenum;
    components = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::CoverageModulationNV(components) };
}

pub fn retrace_glRenderbufferStorageMultisampleCoverageNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut coverageSamples: GLsizei;
    coverageSamples = (call.arg(1)).to_i32().unwrap();

    let mut colorSamples: GLsizei;
    colorSamples = (call.arg(2)).to_i32().unwrap();

    let mut internalformat: GLenum;
    internalformat = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let mut width: GLsizei;
    width = (call.arg(4)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(5)).to_i32().unwrap();

//not found in gl!    unsafe { gl::RenderbufferStorageMultisampleCoverageNV(target, coverageSamples, colorSamples, internalformat, width, height) };
}

pub fn retrace_glProgramVertexLimitNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut limit: GLint;
    limit = (call.arg(1)).to_i32().unwrap();

//not found in gl!    unsafe { gl::ProgramVertexLimitNV(target, limit) };
}

pub fn retrace_glFramebufferTextureFaceEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut attachment: GLenum;
    attachment = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut texture: GLuint;
    texture = (call.arg(2)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut level: GLint;
    level = (call.arg(3)).to_i32().unwrap();

    let mut face: GLenum;
    face = (call.arg(4)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::FramebufferTextureFaceEXT(target, attachment, texture, level, face) };
}

pub fn retrace_glProgramLocalParameterI4iNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut index: GLuint;
    index = (call.arg(1)).to_u32().unwrap();

    let mut x: GLint;
    x = (call.arg(2)).to_i32().unwrap();

    let mut y: GLint;
    y = (call.arg(3)).to_i32().unwrap();

    let mut z: GLint;
    z = (call.arg(4)).to_i32().unwrap();

    let mut w: GLint;
    w = (call.arg(5)).to_i32().unwrap();

//not found in gl!    unsafe { gl::ProgramLocalParameterI4iNV(target, index, x, y, z, w) };
}

pub fn retrace_glProgramLocalParameterI4ivNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut index: GLuint;
    index = (call.arg(1)).to_u32().unwrap();

    let params: &mut [GLint];
    params = _allocator.alloc_array::<GLint>(&call.arg(2));
    let _a_GLint250_0 = (call.arg(2)).to_array();
    if let Some(_a_GLint250_0) = _a_GLint250_0 {
        for _jGLint250 in 0.._a_GLint250_0.values.len() {
    params[_jGLint250] = (*_a_GLint250_0.values[_jGLint250]).to_i32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::ProgramLocalParameterI4ivNV(target, index, params) };
}

pub fn retrace_glProgramLocalParametersI4ivNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut index: GLuint;
    index = (call.arg(1)).to_u32().unwrap();

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let params: &mut [GLint];
    params = _allocator.alloc_array::<GLint>(&call.arg(3));
    let _a_GLint251_0 = (call.arg(3)).to_array();
    if let Some(_a_GLint251_0) = _a_GLint251_0 {
        for _jGLint251 in 0.._a_GLint251_0.values.len() {
    params[_jGLint251] = (*_a_GLint251_0.values[_jGLint251]).to_i32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::ProgramLocalParametersI4ivNV(target, index, count, params) };
}

pub fn retrace_glProgramLocalParameterI4uiNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut index: GLuint;
    index = (call.arg(1)).to_u32().unwrap();

    let mut x: GLuint;
    x = (call.arg(2)).to_u32().unwrap();

    let mut y: GLuint;
    y = (call.arg(3)).to_u32().unwrap();

    let mut z: GLuint;
    z = (call.arg(4)).to_u32().unwrap();

    let mut w: GLuint;
    w = (call.arg(5)).to_u32().unwrap();

//not found in gl!    unsafe { gl::ProgramLocalParameterI4uiNV(target, index, x, y, z, w) };
}

pub fn retrace_glProgramLocalParameterI4uivNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut index: GLuint;
    index = (call.arg(1)).to_u32().unwrap();

    let params: &mut [GLuint];
    params = _allocator.alloc_array::<GLuint>(&call.arg(2));
    let _a_GLuint242_0 = (call.arg(2)).to_array();
    if let Some(_a_GLuint242_0) = _a_GLuint242_0 {
        for _jGLuint242 in 0.._a_GLuint242_0.values.len() {
    params[_jGLuint242] = (*_a_GLuint242_0.values[_jGLuint242]).to_u32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::ProgramLocalParameterI4uivNV(target, index, params) };
}

pub fn retrace_glProgramLocalParametersI4uivNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut index: GLuint;
    index = (call.arg(1)).to_u32().unwrap();

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let params: &mut [GLuint];
    params = _allocator.alloc_array::<GLuint>(&call.arg(3));
    let _a_GLuint243_0 = (call.arg(3)).to_array();
    if let Some(_a_GLuint243_0) = _a_GLuint243_0 {
        for _jGLuint243 in 0.._a_GLuint243_0.values.len() {
    params[_jGLuint243] = (*_a_GLuint243_0.values[_jGLuint243]).to_u32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::ProgramLocalParametersI4uivNV(target, index, count, params) };
}

pub fn retrace_glProgramEnvParameterI4iNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut index: GLuint;
    index = (call.arg(1)).to_u32().unwrap();

    let mut x: GLint;
    x = (call.arg(2)).to_i32().unwrap();

    let mut y: GLint;
    y = (call.arg(3)).to_i32().unwrap();

    let mut z: GLint;
    z = (call.arg(4)).to_i32().unwrap();

    let mut w: GLint;
    w = (call.arg(5)).to_i32().unwrap();

//not found in gl!    unsafe { gl::ProgramEnvParameterI4iNV(target, index, x, y, z, w) };
}

pub fn retrace_glProgramEnvParameterI4ivNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut index: GLuint;
    index = (call.arg(1)).to_u32().unwrap();

    let params: &mut [GLint];
    params = _allocator.alloc_array::<GLint>(&call.arg(2));
    let _a_GLint252_0 = (call.arg(2)).to_array();
    if let Some(_a_GLint252_0) = _a_GLint252_0 {
        for _jGLint252 in 0.._a_GLint252_0.values.len() {
    params[_jGLint252] = (*_a_GLint252_0.values[_jGLint252]).to_i32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::ProgramEnvParameterI4ivNV(target, index, params) };
}

pub fn retrace_glProgramEnvParametersI4ivNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut index: GLuint;
    index = (call.arg(1)).to_u32().unwrap();

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let params: &mut [GLint];
    params = _allocator.alloc_array::<GLint>(&call.arg(3));
    let _a_GLint253_0 = (call.arg(3)).to_array();
    if let Some(_a_GLint253_0) = _a_GLint253_0 {
        for _jGLint253 in 0.._a_GLint253_0.values.len() {
    params[_jGLint253] = (*_a_GLint253_0.values[_jGLint253]).to_i32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::ProgramEnvParametersI4ivNV(target, index, count, params) };
}

pub fn retrace_glProgramEnvParameterI4uiNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut index: GLuint;
    index = (call.arg(1)).to_u32().unwrap();

    let mut x: GLuint;
    x = (call.arg(2)).to_u32().unwrap();

    let mut y: GLuint;
    y = (call.arg(3)).to_u32().unwrap();

    let mut z: GLuint;
    z = (call.arg(4)).to_u32().unwrap();

    let mut w: GLuint;
    w = (call.arg(5)).to_u32().unwrap();

//not found in gl!    unsafe { gl::ProgramEnvParameterI4uiNV(target, index, x, y, z, w) };
}

pub fn retrace_glProgramEnvParameterI4uivNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut index: GLuint;
    index = (call.arg(1)).to_u32().unwrap();

    let params: &mut [GLuint];
    params = _allocator.alloc_array::<GLuint>(&call.arg(2));
    let _a_GLuint244_0 = (call.arg(2)).to_array();
    if let Some(_a_GLuint244_0) = _a_GLuint244_0 {
        for _jGLuint244 in 0.._a_GLuint244_0.values.len() {
    params[_jGLuint244] = (*_a_GLuint244_0.values[_jGLuint244]).to_u32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::ProgramEnvParameterI4uivNV(target, index, params) };
}

pub fn retrace_glProgramEnvParametersI4uivNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut index: GLuint;
    index = (call.arg(1)).to_u32().unwrap();

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let params: &mut [GLuint];
    params = _allocator.alloc_array::<GLuint>(&call.arg(3));
    let _a_GLuint245_0 = (call.arg(3)).to_array();
    if let Some(_a_GLuint245_0) = _a_GLuint245_0 {
        for _jGLuint245 in 0.._a_GLuint245_0.values.len() {
    params[_jGLuint245] = (*_a_GLuint245_0.values[_jGLuint245]).to_u32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::ProgramEnvParametersI4uivNV(target, index, count, params) };
}

pub fn retrace_glProgramSubroutineParametersuivNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let params: &mut [GLuint];
    params = _allocator.alloc_array::<GLuint>(&call.arg(2));
    let _a_GLuint246_0 = (call.arg(2)).to_array();
    if let Some(_a_GLuint246_0) = _a_GLuint246_0 {
        for _jGLuint246 in 0.._a_GLuint246_0.values.len() {
    params[_jGLuint246] = (*_a_GLuint246_0.values[_jGLuint246]).to_u32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::ProgramSubroutineParametersuivNV(target, count, params) };
}

pub fn retrace_glUniform1i64NV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut x: GLint64EXT;
    x = (call.arg(1)).to_i32().unwrap();

//not found in gl!    unsafe { gl::Uniform1i64NV(location, x) };
}

pub fn retrace_glUniform2i64NV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut x: GLint64EXT;
    x = (call.arg(1)).to_i32().unwrap();

    let mut y: GLint64EXT;
    y = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::Uniform2i64NV(location, x, y) };
}

pub fn retrace_glUniform3i64NV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut x: GLint64EXT;
    x = (call.arg(1)).to_i32().unwrap();

    let mut y: GLint64EXT;
    y = (call.arg(2)).to_i32().unwrap();

    let mut z: GLint64EXT;
    z = (call.arg(3)).to_i32().unwrap();

//not found in gl!    unsafe { gl::Uniform3i64NV(location, x, y, z) };
}

pub fn retrace_glUniform4i64NV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut x: GLint64EXT;
    x = (call.arg(1)).to_i32().unwrap();

    let mut y: GLint64EXT;
    y = (call.arg(2)).to_i32().unwrap();

    let mut z: GLint64EXT;
    z = (call.arg(3)).to_i32().unwrap();

    let mut w: GLint64EXT;
    w = (call.arg(4)).to_i32().unwrap();

//not found in gl!    unsafe { gl::Uniform4i64NV(location, x, y, z, w) };
}

pub fn retrace_glUniform1i64vNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let value: &mut [GLint64EXT];
    value = _allocator.alloc_array::<GLint64EXT>(&call.arg(2));
    let _a_GLint64EXT4_0 = (call.arg(2)).to_array();
    if let Some(_a_GLint64EXT4_0) = _a_GLint64EXT4_0 {
        for _jGLint64EXT4 in 0.._a_GLint64EXT4_0.values.len() {
    value[_jGLint64EXT4] = (*_a_GLint64EXT4_0.values[_jGLint64EXT4]).to_i32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::Uniform1i64vNV(location, count, value) };
}

pub fn retrace_glUniform2i64vNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let value: &mut [GLint64EXT];
    value = _allocator.alloc_array::<GLint64EXT>(&call.arg(2));
    let _a_GLint64EXT5_0 = (call.arg(2)).to_array();
    if let Some(_a_GLint64EXT5_0) = _a_GLint64EXT5_0 {
        for _jGLint64EXT5 in 0.._a_GLint64EXT5_0.values.len() {
    value[_jGLint64EXT5] = (*_a_GLint64EXT5_0.values[_jGLint64EXT5]).to_i32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::Uniform2i64vNV(location, count, value) };
}

pub fn retrace_glUniform3i64vNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let value: &mut [GLint64EXT];
    value = _allocator.alloc_array::<GLint64EXT>(&call.arg(2));
    let _a_GLint64EXT6_0 = (call.arg(2)).to_array();
    if let Some(_a_GLint64EXT6_0) = _a_GLint64EXT6_0 {
        for _jGLint64EXT6 in 0.._a_GLint64EXT6_0.values.len() {
    value[_jGLint64EXT6] = (*_a_GLint64EXT6_0.values[_jGLint64EXT6]).to_i32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::Uniform3i64vNV(location, count, value) };
}

pub fn retrace_glUniform4i64vNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let value: &mut [GLint64EXT];
    value = _allocator.alloc_array::<GLint64EXT>(&call.arg(2));
    let _a_GLint64EXT7_0 = (call.arg(2)).to_array();
    if let Some(_a_GLint64EXT7_0) = _a_GLint64EXT7_0 {
        for _jGLint64EXT7 in 0.._a_GLint64EXT7_0.values.len() {
    value[_jGLint64EXT7] = (*_a_GLint64EXT7_0.values[_jGLint64EXT7]).to_i32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::Uniform4i64vNV(location, count, value) };
}

pub fn retrace_glUniform1ui64NV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut x: GLuint64EXT;
    x = (call.arg(1)).to_u32().unwrap();

//not found in gl!    unsafe { gl::Uniform1ui64NV(location, x) };
}

pub fn retrace_glUniform2ui64NV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut x: GLuint64EXT;
    x = (call.arg(1)).to_u32().unwrap();

    let mut y: GLuint64EXT;
    y = (call.arg(2)).to_u32().unwrap();

//not found in gl!    unsafe { gl::Uniform2ui64NV(location, x, y) };
}

pub fn retrace_glUniform3ui64NV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut x: GLuint64EXT;
    x = (call.arg(1)).to_u32().unwrap();

    let mut y: GLuint64EXT;
    y = (call.arg(2)).to_u32().unwrap();

    let mut z: GLuint64EXT;
    z = (call.arg(3)).to_u32().unwrap();

//not found in gl!    unsafe { gl::Uniform3ui64NV(location, x, y, z) };
}

pub fn retrace_glUniform4ui64NV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut x: GLuint64EXT;
    x = (call.arg(1)).to_u32().unwrap();

    let mut y: GLuint64EXT;
    y = (call.arg(2)).to_u32().unwrap();

    let mut z: GLuint64EXT;
    z = (call.arg(3)).to_u32().unwrap();

    let mut w: GLuint64EXT;
    w = (call.arg(4)).to_u32().unwrap();

//not found in gl!    unsafe { gl::Uniform4ui64NV(location, x, y, z, w) };
}

pub fn retrace_glUniform1ui64vNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let value: &mut [GLuint64EXT];
    value = _allocator.alloc_array::<GLuint64EXT>(&call.arg(2));
    let _a_GLuint64EXT8_0 = (call.arg(2)).to_array();
    if let Some(_a_GLuint64EXT8_0) = _a_GLuint64EXT8_0 {
        for _jGLuint64EXT8 in 0.._a_GLuint64EXT8_0.values.len() {
    value[_jGLuint64EXT8] = (*_a_GLuint64EXT8_0.values[_jGLuint64EXT8]).to_u32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::Uniform1ui64vNV(location, count, value) };
}

pub fn retrace_glUniform2ui64vNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let value: &mut [GLuint64EXT];
    value = _allocator.alloc_array::<GLuint64EXT>(&call.arg(2));
    let _a_GLuint64EXT9_0 = (call.arg(2)).to_array();
    if let Some(_a_GLuint64EXT9_0) = _a_GLuint64EXT9_0 {
        for _jGLuint64EXT9 in 0.._a_GLuint64EXT9_0.values.len() {
    value[_jGLuint64EXT9] = (*_a_GLuint64EXT9_0.values[_jGLuint64EXT9]).to_u32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::Uniform2ui64vNV(location, count, value) };
}

pub fn retrace_glUniform3ui64vNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let value: &mut [GLuint64EXT];
    value = _allocator.alloc_array::<GLuint64EXT>(&call.arg(2));
    let _a_GLuint64EXT10_0 = (call.arg(2)).to_array();
    if let Some(_a_GLuint64EXT10_0) = _a_GLuint64EXT10_0 {
        for _jGLuint64EXT10 in 0.._a_GLuint64EXT10_0.values.len() {
    value[_jGLuint64EXT10] = (*_a_GLuint64EXT10_0.values[_jGLuint64EXT10]).to_u32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::Uniform3ui64vNV(location, count, value) };
}

pub fn retrace_glUniform4ui64vNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let value: &mut [GLuint64EXT];
    value = _allocator.alloc_array::<GLuint64EXT>(&call.arg(2));
    let _a_GLuint64EXT11_0 = (call.arg(2)).to_array();
    if let Some(_a_GLuint64EXT11_0) = _a_GLuint64EXT11_0 {
        for _jGLuint64EXT11 in 0.._a_GLuint64EXT11_0.values.len() {
    value[_jGLuint64EXT11] = (*_a_GLuint64EXT11_0.values[_jGLuint64EXT11]).to_u32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::Uniform4ui64vNV(location, count, value) };
}

pub fn retrace_glProgramUniform1i64NV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut x: GLint64EXT;
    x = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::ProgramUniform1i64NV(program, location, x) };
}

pub fn retrace_glProgramUniform2i64NV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut x: GLint64EXT;
    x = (call.arg(2)).to_i32().unwrap();

    let mut y: GLint64EXT;
    y = (call.arg(3)).to_i32().unwrap();

//not found in gl!    unsafe { gl::ProgramUniform2i64NV(program, location, x, y) };
}

pub fn retrace_glProgramUniform3i64NV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut x: GLint64EXT;
    x = (call.arg(2)).to_i32().unwrap();

    let mut y: GLint64EXT;
    y = (call.arg(3)).to_i32().unwrap();

    let mut z: GLint64EXT;
    z = (call.arg(4)).to_i32().unwrap();

//not found in gl!    unsafe { gl::ProgramUniform3i64NV(program, location, x, y, z) };
}

pub fn retrace_glProgramUniform4i64NV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut x: GLint64EXT;
    x = (call.arg(2)).to_i32().unwrap();

    let mut y: GLint64EXT;
    y = (call.arg(3)).to_i32().unwrap();

    let mut z: GLint64EXT;
    z = (call.arg(4)).to_i32().unwrap();

    let mut w: GLint64EXT;
    w = (call.arg(5)).to_i32().unwrap();

//not found in gl!    unsafe { gl::ProgramUniform4i64NV(program, location, x, y, z, w) };
}

pub fn retrace_glProgramUniform1i64vNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let value: &mut [GLint64EXT];
    value = _allocator.alloc_array::<GLint64EXT>(&call.arg(3));
    let _a_GLint64EXT8_0 = (call.arg(3)).to_array();
    if let Some(_a_GLint64EXT8_0) = _a_GLint64EXT8_0 {
        for _jGLint64EXT8 in 0.._a_GLint64EXT8_0.values.len() {
    value[_jGLint64EXT8] = (*_a_GLint64EXT8_0.values[_jGLint64EXT8]).to_i32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::ProgramUniform1i64vNV(program, location, count, value) };
}

pub fn retrace_glProgramUniform2i64vNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let value: &mut [GLint64EXT];
    value = _allocator.alloc_array::<GLint64EXT>(&call.arg(3));
    let _a_GLint64EXT9_0 = (call.arg(3)).to_array();
    if let Some(_a_GLint64EXT9_0) = _a_GLint64EXT9_0 {
        for _jGLint64EXT9 in 0.._a_GLint64EXT9_0.values.len() {
    value[_jGLint64EXT9] = (*_a_GLint64EXT9_0.values[_jGLint64EXT9]).to_i32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::ProgramUniform2i64vNV(program, location, count, value) };
}

pub fn retrace_glProgramUniform3i64vNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let value: &mut [GLint64EXT];
    value = _allocator.alloc_array::<GLint64EXT>(&call.arg(3));
    let _a_GLint64EXT10_0 = (call.arg(3)).to_array();
    if let Some(_a_GLint64EXT10_0) = _a_GLint64EXT10_0 {
        for _jGLint64EXT10 in 0.._a_GLint64EXT10_0.values.len() {
    value[_jGLint64EXT10] = (*_a_GLint64EXT10_0.values[_jGLint64EXT10]).to_i32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::ProgramUniform3i64vNV(program, location, count, value) };
}

pub fn retrace_glProgramUniform4i64vNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let value: &mut [GLint64EXT];
    value = _allocator.alloc_array::<GLint64EXT>(&call.arg(3));
    let _a_GLint64EXT11_0 = (call.arg(3)).to_array();
    if let Some(_a_GLint64EXT11_0) = _a_GLint64EXT11_0 {
        for _jGLint64EXT11 in 0.._a_GLint64EXT11_0.values.len() {
    value[_jGLint64EXT11] = (*_a_GLint64EXT11_0.values[_jGLint64EXT11]).to_i32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::ProgramUniform4i64vNV(program, location, count, value) };
}

pub fn retrace_glProgramUniform1ui64NV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut x: GLuint64EXT;
    x = (call.arg(2)).to_u32().unwrap();

//not found in gl!    unsafe { gl::ProgramUniform1ui64NV(program, location, x) };
}

pub fn retrace_glProgramUniform2ui64NV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut x: GLuint64EXT;
    x = (call.arg(2)).to_u32().unwrap();

    let mut y: GLuint64EXT;
    y = (call.arg(3)).to_u32().unwrap();

//not found in gl!    unsafe { gl::ProgramUniform2ui64NV(program, location, x, y) };
}

pub fn retrace_glProgramUniform3ui64NV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut x: GLuint64EXT;
    x = (call.arg(2)).to_u32().unwrap();

    let mut y: GLuint64EXT;
    y = (call.arg(3)).to_u32().unwrap();

    let mut z: GLuint64EXT;
    z = (call.arg(4)).to_u32().unwrap();

//not found in gl!    unsafe { gl::ProgramUniform3ui64NV(program, location, x, y, z) };
}

pub fn retrace_glProgramUniform4ui64NV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut x: GLuint64EXT;
    x = (call.arg(2)).to_u32().unwrap();

    let mut y: GLuint64EXT;
    y = (call.arg(3)).to_u32().unwrap();

    let mut z: GLuint64EXT;
    z = (call.arg(4)).to_u32().unwrap();

    let mut w: GLuint64EXT;
    w = (call.arg(5)).to_u32().unwrap();

//not found in gl!    unsafe { gl::ProgramUniform4ui64NV(program, location, x, y, z, w) };
}

pub fn retrace_glProgramUniform1ui64vNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let value: &mut [GLuint64EXT];
    value = _allocator.alloc_array::<GLuint64EXT>(&call.arg(3));
    let _a_GLuint64EXT12_0 = (call.arg(3)).to_array();
    if let Some(_a_GLuint64EXT12_0) = _a_GLuint64EXT12_0 {
        for _jGLuint64EXT12 in 0.._a_GLuint64EXT12_0.values.len() {
    value[_jGLuint64EXT12] = (*_a_GLuint64EXT12_0.values[_jGLuint64EXT12]).to_u32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::ProgramUniform1ui64vNV(program, location, count, value) };
}

pub fn retrace_glProgramUniform2ui64vNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let value: &mut [GLuint64EXT];
    value = _allocator.alloc_array::<GLuint64EXT>(&call.arg(3));
    let _a_GLuint64EXT13_0 = (call.arg(3)).to_array();
    if let Some(_a_GLuint64EXT13_0) = _a_GLuint64EXT13_0 {
        for _jGLuint64EXT13 in 0.._a_GLuint64EXT13_0.values.len() {
    value[_jGLuint64EXT13] = (*_a_GLuint64EXT13_0.values[_jGLuint64EXT13]).to_u32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::ProgramUniform2ui64vNV(program, location, count, value) };
}

pub fn retrace_glProgramUniform3ui64vNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let value: &mut [GLuint64EXT];
    value = _allocator.alloc_array::<GLuint64EXT>(&call.arg(3));
    let _a_GLuint64EXT14_0 = (call.arg(3)).to_array();
    if let Some(_a_GLuint64EXT14_0) = _a_GLuint64EXT14_0 {
        for _jGLuint64EXT14 in 0.._a_GLuint64EXT14_0.values.len() {
    value[_jGLuint64EXT14] = (*_a_GLuint64EXT14_0.values[_jGLuint64EXT14]).to_u32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::ProgramUniform3ui64vNV(program, location, count, value) };
}

pub fn retrace_glProgramUniform4ui64vNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let value: &mut [GLuint64EXT];
    value = _allocator.alloc_array::<GLuint64EXT>(&call.arg(3));
    let _a_GLuint64EXT15_0 = (call.arg(3)).to_array();
    if let Some(_a_GLuint64EXT15_0) = _a_GLuint64EXT15_0 {
        for _jGLuint64EXT15 in 0.._a_GLuint64EXT15_0.values.len() {
    value[_jGLuint64EXT15] = (*_a_GLuint64EXT15_0.values[_jGLuint64EXT15]).to_u32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::ProgramUniform4ui64vNV(program, location, count, value) };
}

pub fn retrace_glVertex2hNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut x: GLhalfNV;
    x = (call.arg(0)).to_u32().unwrap();

    let mut y: GLhalfNV;
    y = (call.arg(1)).to_u32().unwrap();

//not found in gl!    unsafe { gl::Vertex2hNV(x, y) };
}

pub fn retrace_glVertex2hvNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLhalfNV];
    v = _allocator.alloc_array::<GLhalfNV>(&call.arg(0));
    let _a_GLhalfNV1_0 = (call.arg(0)).to_array();
    if let Some(_a_GLhalfNV1_0) = _a_GLhalfNV1_0 {
        for _jGLhalfNV1 in 0.._a_GLhalfNV1_0.values.len() {
    v[_jGLhalfNV1] = (*_a_GLhalfNV1_0.values[_jGLhalfNV1]).to_u32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::Vertex2hvNV(v) };
}

pub fn retrace_glVertex3hNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut x: GLhalfNV;
    x = (call.arg(0)).to_u32().unwrap();

    let mut y: GLhalfNV;
    y = (call.arg(1)).to_u32().unwrap();

    let mut z: GLhalfNV;
    z = (call.arg(2)).to_u32().unwrap();

//not found in gl!    unsafe { gl::Vertex3hNV(x, y, z) };
}

pub fn retrace_glVertex3hvNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLhalfNV];
    v = _allocator.alloc_array::<GLhalfNV>(&call.arg(0));
    let _a_GLhalfNV2_0 = (call.arg(0)).to_array();
    if let Some(_a_GLhalfNV2_0) = _a_GLhalfNV2_0 {
        for _jGLhalfNV2 in 0.._a_GLhalfNV2_0.values.len() {
    v[_jGLhalfNV2] = (*_a_GLhalfNV2_0.values[_jGLhalfNV2]).to_u32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::Vertex3hvNV(v) };
}

pub fn retrace_glVertex4hNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut x: GLhalfNV;
    x = (call.arg(0)).to_u32().unwrap();

    let mut y: GLhalfNV;
    y = (call.arg(1)).to_u32().unwrap();

    let mut z: GLhalfNV;
    z = (call.arg(2)).to_u32().unwrap();

    let mut w: GLhalfNV;
    w = (call.arg(3)).to_u32().unwrap();

//not found in gl!    unsafe { gl::Vertex4hNV(x, y, z, w) };
}

pub fn retrace_glVertex4hvNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLhalfNV];
    v = _allocator.alloc_array::<GLhalfNV>(&call.arg(0));
    let _a_GLhalfNV3_0 = (call.arg(0)).to_array();
    if let Some(_a_GLhalfNV3_0) = _a_GLhalfNV3_0 {
        for _jGLhalfNV3 in 0.._a_GLhalfNV3_0.values.len() {
    v[_jGLhalfNV3] = (*_a_GLhalfNV3_0.values[_jGLhalfNV3]).to_u32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::Vertex4hvNV(v) };
}

pub fn retrace_glNormal3hNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut nx: GLhalfNV;
    nx = (call.arg(0)).to_u32().unwrap();

    let mut ny: GLhalfNV;
    ny = (call.arg(1)).to_u32().unwrap();

    let mut nz: GLhalfNV;
    nz = (call.arg(2)).to_u32().unwrap();

//not found in gl!    unsafe { gl::Normal3hNV(nx, ny, nz) };
}

pub fn retrace_glNormal3hvNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLhalfNV];
    v = _allocator.alloc_array::<GLhalfNV>(&call.arg(0));
    let _a_GLhalfNV4_0 = (call.arg(0)).to_array();
    if let Some(_a_GLhalfNV4_0) = _a_GLhalfNV4_0 {
        for _jGLhalfNV4 in 0.._a_GLhalfNV4_0.values.len() {
    v[_jGLhalfNV4] = (*_a_GLhalfNV4_0.values[_jGLhalfNV4]).to_u32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::Normal3hvNV(v) };
}

pub fn retrace_glColor3hNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut red: GLhalfNV;
    red = (call.arg(0)).to_u32().unwrap();

    let mut green: GLhalfNV;
    green = (call.arg(1)).to_u32().unwrap();

    let mut blue: GLhalfNV;
    blue = (call.arg(2)).to_u32().unwrap();

//not found in gl!    unsafe { gl::Color3hNV(red, green, blue) };
}

pub fn retrace_glColor3hvNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLhalfNV];
    v = _allocator.alloc_array::<GLhalfNV>(&call.arg(0));
    let _a_GLhalfNV5_0 = (call.arg(0)).to_array();
    if let Some(_a_GLhalfNV5_0) = _a_GLhalfNV5_0 {
        for _jGLhalfNV5 in 0.._a_GLhalfNV5_0.values.len() {
    v[_jGLhalfNV5] = (*_a_GLhalfNV5_0.values[_jGLhalfNV5]).to_u32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::Color3hvNV(v) };
}

pub fn retrace_glColor4hNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut red: GLhalfNV;
    red = (call.arg(0)).to_u32().unwrap();

    let mut green: GLhalfNV;
    green = (call.arg(1)).to_u32().unwrap();

    let mut blue: GLhalfNV;
    blue = (call.arg(2)).to_u32().unwrap();

    let mut alpha: GLhalfNV;
    alpha = (call.arg(3)).to_u32().unwrap();

//not found in gl!    unsafe { gl::Color4hNV(red, green, blue, alpha) };
}

pub fn retrace_glColor4hvNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLhalfNV];
    v = _allocator.alloc_array::<GLhalfNV>(&call.arg(0));
    let _a_GLhalfNV6_0 = (call.arg(0)).to_array();
    if let Some(_a_GLhalfNV6_0) = _a_GLhalfNV6_0 {
        for _jGLhalfNV6 in 0.._a_GLhalfNV6_0.values.len() {
    v[_jGLhalfNV6] = (*_a_GLhalfNV6_0.values[_jGLhalfNV6]).to_u32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::Color4hvNV(v) };
}

pub fn retrace_glTexCoord1hNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut s: GLhalfNV;
    s = (call.arg(0)).to_u32().unwrap();

//not found in gl!    unsafe { gl::TexCoord1hNV(s) };
}

pub fn retrace_glTexCoord1hvNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLhalfNV];
    v = _allocator.alloc_array::<GLhalfNV>(&call.arg(0));
    let _a_PGLhalfNV_0 = (call.arg(0)).to_array().unwrap();
    v[0] = (_a_PGLhalfNV_0.values[0]).to_u32().unwrap();

//not found in gl!    unsafe { gl::TexCoord1hvNV(v) };
}

pub fn retrace_glTexCoord2hNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut s: GLhalfNV;
    s = (call.arg(0)).to_u32().unwrap();

    let mut t: GLhalfNV;
    t = (call.arg(1)).to_u32().unwrap();

//not found in gl!    unsafe { gl::TexCoord2hNV(s, t) };
}

pub fn retrace_glTexCoord2hvNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLhalfNV];
    v = _allocator.alloc_array::<GLhalfNV>(&call.arg(0));
    let _a_GLhalfNV7_0 = (call.arg(0)).to_array();
    if let Some(_a_GLhalfNV7_0) = _a_GLhalfNV7_0 {
        for _jGLhalfNV7 in 0.._a_GLhalfNV7_0.values.len() {
    v[_jGLhalfNV7] = (*_a_GLhalfNV7_0.values[_jGLhalfNV7]).to_u32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::TexCoord2hvNV(v) };
}

pub fn retrace_glTexCoord3hNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut s: GLhalfNV;
    s = (call.arg(0)).to_u32().unwrap();

    let mut t: GLhalfNV;
    t = (call.arg(1)).to_u32().unwrap();

    let mut r: GLhalfNV;
    r = (call.arg(2)).to_u32().unwrap();

//not found in gl!    unsafe { gl::TexCoord3hNV(s, t, r) };
}

pub fn retrace_glTexCoord3hvNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLhalfNV];
    v = _allocator.alloc_array::<GLhalfNV>(&call.arg(0));
    let _a_GLhalfNV8_0 = (call.arg(0)).to_array();
    if let Some(_a_GLhalfNV8_0) = _a_GLhalfNV8_0 {
        for _jGLhalfNV8 in 0.._a_GLhalfNV8_0.values.len() {
    v[_jGLhalfNV8] = (*_a_GLhalfNV8_0.values[_jGLhalfNV8]).to_u32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::TexCoord3hvNV(v) };
}

pub fn retrace_glTexCoord4hNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut s: GLhalfNV;
    s = (call.arg(0)).to_u32().unwrap();

    let mut t: GLhalfNV;
    t = (call.arg(1)).to_u32().unwrap();

    let mut r: GLhalfNV;
    r = (call.arg(2)).to_u32().unwrap();

    let mut q: GLhalfNV;
    q = (call.arg(3)).to_u32().unwrap();

//not found in gl!    unsafe { gl::TexCoord4hNV(s, t, r, q) };
}

pub fn retrace_glTexCoord4hvNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLhalfNV];
    v = _allocator.alloc_array::<GLhalfNV>(&call.arg(0));
    let _a_GLhalfNV9_0 = (call.arg(0)).to_array();
    if let Some(_a_GLhalfNV9_0) = _a_GLhalfNV9_0 {
        for _jGLhalfNV9 in 0.._a_GLhalfNV9_0.values.len() {
    v[_jGLhalfNV9] = (*_a_GLhalfNV9_0.values[_jGLhalfNV9]).to_u32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::TexCoord4hvNV(v) };
}

pub fn retrace_glMultiTexCoord1hNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut s: GLhalfNV;
    s = (call.arg(1)).to_u32().unwrap();

//not found in gl!    unsafe { gl::MultiTexCoord1hNV(target, s) };
}

pub fn retrace_glMultiTexCoord1hvNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let v: &mut [GLhalfNV];
    v = _allocator.alloc_array::<GLhalfNV>(&call.arg(1));
    let _a_PGLhalfNV1_0 = (call.arg(1)).to_array().unwrap();
    v[0] = (_a_PGLhalfNV1_0.values[0]).to_u32().unwrap();

//not found in gl!    unsafe { gl::MultiTexCoord1hvNV(target, v) };
}

pub fn retrace_glMultiTexCoord2hNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut s: GLhalfNV;
    s = (call.arg(1)).to_u32().unwrap();

    let mut t: GLhalfNV;
    t = (call.arg(2)).to_u32().unwrap();

//not found in gl!    unsafe { gl::MultiTexCoord2hNV(target, s, t) };
}

pub fn retrace_glMultiTexCoord2hvNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let v: &mut [GLhalfNV];
    v = _allocator.alloc_array::<GLhalfNV>(&call.arg(1));
    let _a_GLhalfNV10_0 = (call.arg(1)).to_array();
    if let Some(_a_GLhalfNV10_0) = _a_GLhalfNV10_0 {
        for _jGLhalfNV10 in 0.._a_GLhalfNV10_0.values.len() {
    v[_jGLhalfNV10] = (*_a_GLhalfNV10_0.values[_jGLhalfNV10]).to_u32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::MultiTexCoord2hvNV(target, v) };
}

pub fn retrace_glMultiTexCoord3hNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut s: GLhalfNV;
    s = (call.arg(1)).to_u32().unwrap();

    let mut t: GLhalfNV;
    t = (call.arg(2)).to_u32().unwrap();

    let mut r: GLhalfNV;
    r = (call.arg(3)).to_u32().unwrap();

//not found in gl!    unsafe { gl::MultiTexCoord3hNV(target, s, t, r) };
}

pub fn retrace_glMultiTexCoord3hvNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let v: &mut [GLhalfNV];
    v = _allocator.alloc_array::<GLhalfNV>(&call.arg(1));
    let _a_GLhalfNV11_0 = (call.arg(1)).to_array();
    if let Some(_a_GLhalfNV11_0) = _a_GLhalfNV11_0 {
        for _jGLhalfNV11 in 0.._a_GLhalfNV11_0.values.len() {
    v[_jGLhalfNV11] = (*_a_GLhalfNV11_0.values[_jGLhalfNV11]).to_u32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::MultiTexCoord3hvNV(target, v) };
}

pub fn retrace_glMultiTexCoord4hNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut s: GLhalfNV;
    s = (call.arg(1)).to_u32().unwrap();

    let mut t: GLhalfNV;
    t = (call.arg(2)).to_u32().unwrap();

    let mut r: GLhalfNV;
    r = (call.arg(3)).to_u32().unwrap();

    let mut q: GLhalfNV;
    q = (call.arg(4)).to_u32().unwrap();

//not found in gl!    unsafe { gl::MultiTexCoord4hNV(target, s, t, r, q) };
}

pub fn retrace_glMultiTexCoord4hvNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let v: &mut [GLhalfNV];
    v = _allocator.alloc_array::<GLhalfNV>(&call.arg(1));
    let _a_GLhalfNV12_0 = (call.arg(1)).to_array();
    if let Some(_a_GLhalfNV12_0) = _a_GLhalfNV12_0 {
        for _jGLhalfNV12 in 0.._a_GLhalfNV12_0.values.len() {
    v[_jGLhalfNV12] = (*_a_GLhalfNV12_0.values[_jGLhalfNV12]).to_u32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::MultiTexCoord4hvNV(target, v) };
}

pub fn retrace_glFogCoordhNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut fog: GLhalfNV;
    fog = (call.arg(0)).to_u32().unwrap();

//not found in gl!    unsafe { gl::FogCoordhNV(fog) };
}

pub fn retrace_glFogCoordhvNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let fog: &mut [GLhalfNV];
    fog = _allocator.alloc_array::<GLhalfNV>(&call.arg(0));
    let _a_PGLhalfNV2_0 = (call.arg(0)).to_array().unwrap();
    fog[0] = (_a_PGLhalfNV2_0.values[0]).to_u32().unwrap();

//not found in gl!    unsafe { gl::FogCoordhvNV(fog) };
}

pub fn retrace_glSecondaryColor3hNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut red: GLhalfNV;
    red = (call.arg(0)).to_u32().unwrap();

    let mut green: GLhalfNV;
    green = (call.arg(1)).to_u32().unwrap();

    let mut blue: GLhalfNV;
    blue = (call.arg(2)).to_u32().unwrap();

//not found in gl!    unsafe { gl::SecondaryColor3hNV(red, green, blue) };
}

pub fn retrace_glSecondaryColor3hvNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let v: &mut [GLhalfNV];
    v = _allocator.alloc_array::<GLhalfNV>(&call.arg(0));
    let _a_GLhalfNV13_0 = (call.arg(0)).to_array();
    if let Some(_a_GLhalfNV13_0) = _a_GLhalfNV13_0 {
        for _jGLhalfNV13 in 0.._a_GLhalfNV13_0.values.len() {
    v[_jGLhalfNV13] = (*_a_GLhalfNV13_0.values[_jGLhalfNV13]).to_u32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::SecondaryColor3hvNV(v) };
}

pub fn retrace_glVertexWeighthNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut weight: GLhalfNV;
    weight = (call.arg(0)).to_u32().unwrap();

//not found in gl!    unsafe { gl::VertexWeighthNV(weight) };
}

pub fn retrace_glVertexWeighthvNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let weight: &mut [GLhalfNV];
    weight = _allocator.alloc_array::<GLhalfNV>(&call.arg(0));
    let _a_PGLhalfNV3_0 = (call.arg(0)).to_array().unwrap();
    weight[0] = (_a_PGLhalfNV3_0.values[0]).to_u32().unwrap();

//not found in gl!    unsafe { gl::VertexWeighthvNV(weight) };
}

pub fn retrace_glVertexAttrib1hNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut x: GLhalfNV;
    x = (call.arg(1)).to_u32().unwrap();

//not found in gl!    unsafe { gl::VertexAttrib1hNV(index, x) };
}

pub fn retrace_glVertexAttrib1hvNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLhalfNV];
    v = _allocator.alloc_array::<GLhalfNV>(&call.arg(1));
    let _a_PGLhalfNV4_0 = (call.arg(1)).to_array().unwrap();
    v[0] = (_a_PGLhalfNV4_0.values[0]).to_u32().unwrap();

//not found in gl!    unsafe { gl::VertexAttrib1hvNV(index, v) };
}

pub fn retrace_glVertexAttrib2hNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut x: GLhalfNV;
    x = (call.arg(1)).to_u32().unwrap();

    let mut y: GLhalfNV;
    y = (call.arg(2)).to_u32().unwrap();

//not found in gl!    unsafe { gl::VertexAttrib2hNV(index, x, y) };
}

pub fn retrace_glVertexAttrib2hvNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLhalfNV];
    v = _allocator.alloc_array::<GLhalfNV>(&call.arg(1));
    let _a_GLhalfNV14_0 = (call.arg(1)).to_array();
    if let Some(_a_GLhalfNV14_0) = _a_GLhalfNV14_0 {
        for _jGLhalfNV14 in 0.._a_GLhalfNV14_0.values.len() {
    v[_jGLhalfNV14] = (*_a_GLhalfNV14_0.values[_jGLhalfNV14]).to_u32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::VertexAttrib2hvNV(index, v) };
}

pub fn retrace_glVertexAttrib3hNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut x: GLhalfNV;
    x = (call.arg(1)).to_u32().unwrap();

    let mut y: GLhalfNV;
    y = (call.arg(2)).to_u32().unwrap();

    let mut z: GLhalfNV;
    z = (call.arg(3)).to_u32().unwrap();

//not found in gl!    unsafe { gl::VertexAttrib3hNV(index, x, y, z) };
}

pub fn retrace_glVertexAttrib3hvNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLhalfNV];
    v = _allocator.alloc_array::<GLhalfNV>(&call.arg(1));
    let _a_GLhalfNV15_0 = (call.arg(1)).to_array();
    if let Some(_a_GLhalfNV15_0) = _a_GLhalfNV15_0 {
        for _jGLhalfNV15 in 0.._a_GLhalfNV15_0.values.len() {
    v[_jGLhalfNV15] = (*_a_GLhalfNV15_0.values[_jGLhalfNV15]).to_u32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::VertexAttrib3hvNV(index, v) };
}

pub fn retrace_glVertexAttrib4hNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut x: GLhalfNV;
    x = (call.arg(1)).to_u32().unwrap();

    let mut y: GLhalfNV;
    y = (call.arg(2)).to_u32().unwrap();

    let mut z: GLhalfNV;
    z = (call.arg(3)).to_u32().unwrap();

    let mut w: GLhalfNV;
    w = (call.arg(4)).to_u32().unwrap();

//not found in gl!    unsafe { gl::VertexAttrib4hNV(index, x, y, z, w) };
}

pub fn retrace_glVertexAttrib4hvNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLhalfNV];
    v = _allocator.alloc_array::<GLhalfNV>(&call.arg(1));
    let _a_GLhalfNV16_0 = (call.arg(1)).to_array();
    if let Some(_a_GLhalfNV16_0) = _a_GLhalfNV16_0 {
        for _jGLhalfNV16 in 0.._a_GLhalfNV16_0.values.len() {
    v[_jGLhalfNV16] = (*_a_GLhalfNV16_0.values[_jGLhalfNV16]).to_u32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::VertexAttrib4hvNV(index, v) };
}

pub fn retrace_glVertexAttribs1hvNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut n: GLsizei;
    n = (call.arg(1)).to_i32().unwrap();

    let v: &mut [GLhalfNV];
    v = _allocator.alloc_array::<GLhalfNV>(&call.arg(2));
    let _a_GLhalfNV17_0 = (call.arg(2)).to_array();
    if let Some(_a_GLhalfNV17_0) = _a_GLhalfNV17_0 {
        for _jGLhalfNV17 in 0.._a_GLhalfNV17_0.values.len() {
    v[_jGLhalfNV17] = (*_a_GLhalfNV17_0.values[_jGLhalfNV17]).to_u32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::VertexAttribs1hvNV(index, n, v) };
}

pub fn retrace_glVertexAttribs2hvNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut n: GLsizei;
    n = (call.arg(1)).to_i32().unwrap();

    let v: &mut [GLhalfNV];
    v = _allocator.alloc_array::<GLhalfNV>(&call.arg(2));
    let _a_GLhalfNV18_0 = (call.arg(2)).to_array();
    if let Some(_a_GLhalfNV18_0) = _a_GLhalfNV18_0 {
        for _jGLhalfNV18 in 0.._a_GLhalfNV18_0.values.len() {
    v[_jGLhalfNV18] = (*_a_GLhalfNV18_0.values[_jGLhalfNV18]).to_u32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::VertexAttribs2hvNV(index, n, v) };
}

pub fn retrace_glVertexAttribs3hvNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut n: GLsizei;
    n = (call.arg(1)).to_i32().unwrap();

    let v: &mut [GLhalfNV];
    v = _allocator.alloc_array::<GLhalfNV>(&call.arg(2));
    let _a_GLhalfNV19_0 = (call.arg(2)).to_array();
    if let Some(_a_GLhalfNV19_0) = _a_GLhalfNV19_0 {
        for _jGLhalfNV19 in 0.._a_GLhalfNV19_0.values.len() {
    v[_jGLhalfNV19] = (*_a_GLhalfNV19_0.values[_jGLhalfNV19]).to_u32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::VertexAttribs3hvNV(index, n, v) };
}

pub fn retrace_glVertexAttribs4hvNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut n: GLsizei;
    n = (call.arg(1)).to_i32().unwrap();

    let v: &mut [GLhalfNV];
    v = _allocator.alloc_array::<GLhalfNV>(&call.arg(2));
    let _a_GLhalfNV20_0 = (call.arg(2)).to_array();
    if let Some(_a_GLhalfNV20_0) = _a_GLhalfNV20_0 {
        for _jGLhalfNV20 in 0.._a_GLhalfNV20_0.values.len() {
    v[_jGLhalfNV20] = (*_a_GLhalfNV20_0.values[_jGLhalfNV20]).to_u32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::VertexAttribs4hvNV(index, n, v) };
}

pub fn retrace_glGenOcclusionQueriesNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut n: GLsizei;
    n = (call.arg(0)).to_i32().unwrap();

    let ids: &mut [GLuint];
    ids = _allocator.alloc_array::<GLuint>(&call.arg(1));

//not found in gl!    unsafe { gl::GenOcclusionQueriesNV(n, ids) };
    let _aGLuint248 = (call.arg(1)).to_array();
    if (_aGLuint248) {
        for _jGLuint248 in 0.._aGLuint248.values.len() {
    let _origResult: GLuint;
    _origResult = (_aGLuint248.values[_jGLuint248]).to_u32().unwrap();
    self._query_map[_origResult] = ids[_jGLuint248]; 
        }
    }
}

pub fn retrace_glDeleteOcclusionQueriesNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut n: GLsizei;
    n = (call.arg(0)).to_i32().unwrap();

    let ids: &mut [GLuint];
    ids = _allocator.alloc_array::<GLuint>(&call.arg(1));
    let _a_GLuint249_0 = (call.arg(1)).to_array();
    if let Some(_a_GLuint249_0) = _a_GLuint249_0 {
        for _jGLuint249 in 0.._a_GLuint249_0.values.len() {
    ids[_jGLuint249] = (*_a_GLuint249_0.values[_jGLuint249]).to_u32().unwrap();
    ids[_jGLuint249] = self._query_map[ids[_jGLuint249]];
        }
    }
    let ids = ids.as_mut_ptr();

//not found in gl!    unsafe { gl::DeleteOcclusionQueriesNV(n, ids) };
}

pub fn retrace_glBeginOcclusionQueryNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut id: GLuint;
    id = (call.arg(0)).to_u32().unwrap();
    id = self._query_map[id];

//not found in gl!    unsafe { gl::BeginOcclusionQueryNV(id) };
}

pub fn retrace_glEndOcclusionQueryNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
//not found in gl!    unsafe { gl::EndOcclusionQueryNV() };
}

pub fn retrace_glProgramBufferParametersfvNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut buffer: GLuint;
    buffer = (call.arg(1)).to_u32().unwrap();
    buffer = self._buffer_map[buffer];

    let mut index: GLuint;
    index = (call.arg(2)).to_u32().unwrap();

    let mut count: GLsizei;
    count = (call.arg(3)).to_i32().unwrap();

    let params: &mut [GLfloat];
    params = _allocator.alloc_array::<GLfloat>(&call.arg(4));
    let _a_GLfloat235_0 = (call.arg(4)).to_array();
    if let Some(_a_GLfloat235_0) = _a_GLfloat235_0 {
        for _jGLfloat235 in 0.._a_GLfloat235_0.values.len() {
    params[_jGLfloat235] = (*_a_GLfloat235_0.values[_jGLfloat235]).to_f32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::ProgramBufferParametersfvNV(target, buffer, index, count, params) };
}

pub fn retrace_glProgramBufferParametersIivNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut buffer: GLuint;
    buffer = (call.arg(1)).to_u32().unwrap();
    buffer = self._buffer_map[buffer];

    let mut index: GLuint;
    index = (call.arg(2)).to_u32().unwrap();

    let mut count: GLsizei;
    count = (call.arg(3)).to_i32().unwrap();

    let params: &mut [GLint];
    params = _allocator.alloc_array::<GLint>(&call.arg(4));
    let _a_GLint254_0 = (call.arg(4)).to_array();
    if let Some(_a_GLint254_0) = _a_GLint254_0 {
        for _jGLint254 in 0.._a_GLint254_0.values.len() {
    params[_jGLint254] = (*_a_GLint254_0.values[_jGLint254]).to_i32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::ProgramBufferParametersIivNV(target, buffer, index, count, params) };
}

pub fn retrace_glProgramBufferParametersIuivNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut buffer: GLuint;
    buffer = (call.arg(1)).to_u32().unwrap();
    buffer = self._buffer_map[buffer];

    let mut index: GLuint;
    index = (call.arg(2)).to_u32().unwrap();

    let mut count: GLsizei;
    count = (call.arg(3)).to_i32().unwrap();

    let params: &mut [GLuint];
    params = _allocator.alloc_array::<GLuint>(&call.arg(4));
    let _a_GLuint250_0 = (call.arg(4)).to_array();
    if let Some(_a_GLuint250_0) = _a_GLuint250_0 {
        for _jGLuint250 in 0.._a_GLuint250_0.values.len() {
    params[_jGLuint250] = (*_a_GLuint250_0.values[_jGLuint250]).to_u32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::ProgramBufferParametersIuivNV(target, buffer, index, count, params) };
}

pub fn retrace_glGenPathsNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut range: GLsizei;
    range = (call.arg(0)).to_i32().unwrap();

//not found in gl!    let _result = unsafe { gl::GenPathsNV(range) };

}

pub fn retrace_glDeletePathsNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut path: GLuint;
    path = (call.arg(0)).to_u32().unwrap();

    let mut range: GLsizei;
    range = (call.arg(1)).to_i32().unwrap();

//not found in gl!    unsafe { gl::DeletePathsNV(path, range) };
}

pub fn retrace_glIsPathNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut path: GLuint;
    path = (call.arg(0)).to_u32().unwrap();

//not found in gl!    let _result = unsafe { gl::IsPathNV(path) };

}

pub fn retrace_glPathCommandsNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut path: GLuint;
    path = (call.arg(0)).to_u32().unwrap();

    let mut numCommands: GLsizei;
    numCommands = (call.arg(1)).to_i32().unwrap();

    let commands: &mut [GLubyte];
    commands = _allocator.alloc_array::<GLubyte>(&call.arg(2));
    let _a_GLubyte20_0 = (call.arg(2)).to_array();
    if let Some(_a_GLubyte20_0) = _a_GLubyte20_0 {
        for _jGLubyte20 in 0.._a_GLubyte20_0.values.len() {
    commands[_jGLubyte20] = (*_a_GLubyte20_0.values[_jGLubyte20]).to_u32().unwrap();
        }
    }
    let commands = commands.as_mut_ptr();

    let mut numCoords: GLsizei;
    numCoords = (call.arg(3)).to_i32().unwrap();

    let mut coordType: GLenum;
    coordType = (call.arg(4)).to_u32().unwrap().try_into().unwrap();

    let coords: &mut [GLc_void];
    let coords = (call.arg(5)).to_pointer().unwrap() as *mut c_void;

//not found in gl!    unsafe { gl::PathCommandsNV(path, numCommands, commands, numCoords, coordType, coords) };
}

pub fn retrace_glPathCoordsNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut path: GLuint;
    path = (call.arg(0)).to_u32().unwrap();

    let mut numCoords: GLsizei;
    numCoords = (call.arg(1)).to_i32().unwrap();

    let mut coordType: GLenum;
    coordType = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let coords: &mut [GLc_void];
    let coords = (call.arg(3)).to_pointer().unwrap() as *mut c_void;

//not found in gl!    unsafe { gl::PathCoordsNV(path, numCoords, coordType, coords) };
}

pub fn retrace_glPathSubCommandsNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut path: GLuint;
    path = (call.arg(0)).to_u32().unwrap();

    let mut commandStart: GLsizei;
    commandStart = (call.arg(1)).to_i32().unwrap();

    let mut commandsToDelete: GLsizei;
    commandsToDelete = (call.arg(2)).to_i32().unwrap();

    let mut numCommands: GLsizei;
    numCommands = (call.arg(3)).to_i32().unwrap();

    let commands: &mut [GLubyte];
    commands = _allocator.alloc_array::<GLubyte>(&call.arg(4));
    let _a_GLubyte21_0 = (call.arg(4)).to_array();
    if let Some(_a_GLubyte21_0) = _a_GLubyte21_0 {
        for _jGLubyte21 in 0.._a_GLubyte21_0.values.len() {
    commands[_jGLubyte21] = (*_a_GLubyte21_0.values[_jGLubyte21]).to_u32().unwrap();
        }
    }
    let commands = commands.as_mut_ptr();

    let mut numCoords: GLsizei;
    numCoords = (call.arg(5)).to_i32().unwrap();

    let mut coordType: GLenum;
    coordType = (call.arg(6)).to_u32().unwrap().try_into().unwrap();

    let coords: &mut [GLc_void];
    let coords = (call.arg(7)).to_pointer().unwrap() as *mut c_void;

//not found in gl!    unsafe { gl::PathSubCommandsNV(path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, coords) };
}

pub fn retrace_glPathSubCoordsNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut path: GLuint;
    path = (call.arg(0)).to_u32().unwrap();

    let mut coordStart: GLsizei;
    coordStart = (call.arg(1)).to_i32().unwrap();

    let mut numCoords: GLsizei;
    numCoords = (call.arg(2)).to_i32().unwrap();

    let mut coordType: GLenum;
    coordType = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let coords: &mut [GLc_void];
    let coords = (call.arg(4)).to_pointer().unwrap() as *mut c_void;

//not found in gl!    unsafe { gl::PathSubCoordsNV(path, coordStart, numCoords, coordType, coords) };
}

pub fn retrace_glPathStringNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut path: GLuint;
    path = (call.arg(0)).to_u32().unwrap();

    let mut format: GLenum;
    format = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut length: GLsizei;
    length = (call.arg(2)).to_i32().unwrap();

    let pathString: &mut [GLc_void];
    let pathString = (call.arg(3)).to_pointer().unwrap() as *mut c_void;

//not found in gl!    unsafe { gl::PathStringNV(path, format, length, pathString) };
}

pub fn retrace_glPathGlyphsNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut firstPathName: GLuint;
    firstPathName = (call.arg(0)).to_u32().unwrap();

    let mut fontTarget: GLenum;
    fontTarget = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let fontName: &mut [GLc_void];
    let fontName = (call.arg(2)).to_pointer().unwrap() as *mut c_void;

    let mut fontStyle: GLbitfield;
    fontStyle = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let mut numGlyphs: GLsizei;
    numGlyphs = (call.arg(4)).to_i32().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(5)).to_u32().unwrap().try_into().unwrap();

    let charcodes: &mut [GLc_void];
    let charcodes = (call.arg(6)).to_pointer().unwrap() as *mut c_void;

    let mut handleMissingGlyphs: GLenum;
    handleMissingGlyphs = (call.arg(7)).to_u32().unwrap().try_into().unwrap();

    let mut pathParameterTemplate: GLuint;
    pathParameterTemplate = (call.arg(8)).to_u32().unwrap();

    let mut emScale: GLfloat;
    emScale = (call.arg(9)).to_f32().unwrap();

//not found in gl!    unsafe { gl::PathGlyphsNV(firstPathName, fontTarget, fontName, fontStyle, numGlyphs, _type, charcodes, handleMissingGlyphs, pathParameterTemplate, emScale) };
}

pub fn retrace_glPathGlyphRangeNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut firstPathName: GLuint;
    firstPathName = (call.arg(0)).to_u32().unwrap();

    let mut fontTarget: GLenum;
    fontTarget = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let fontName: &mut [GLc_void];
    let fontName = (call.arg(2)).to_pointer().unwrap() as *mut c_void;

    let mut fontStyle: GLbitfield;
    fontStyle = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let mut firstGlyph: GLuint;
    firstGlyph = (call.arg(4)).to_u32().unwrap();

    let mut numGlyphs: GLsizei;
    numGlyphs = (call.arg(5)).to_i32().unwrap();

    let mut handleMissingGlyphs: GLenum;
    handleMissingGlyphs = (call.arg(6)).to_u32().unwrap().try_into().unwrap();

    let mut pathParameterTemplate: GLuint;
    pathParameterTemplate = (call.arg(7)).to_u32().unwrap();

    let mut emScale: GLfloat;
    emScale = (call.arg(8)).to_f32().unwrap();

//not found in gl!    unsafe { gl::PathGlyphRangeNV(firstPathName, fontTarget, fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale) };
}

pub fn retrace_glWeightPathsNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut resultPath: GLuint;
    resultPath = (call.arg(0)).to_u32().unwrap();

    let mut numPaths: GLsizei;
    numPaths = (call.arg(1)).to_i32().unwrap();

    let paths: &mut [GLuint];
    paths = _allocator.alloc_array::<GLuint>(&call.arg(2));
    let _a_GLuint251_0 = (call.arg(2)).to_array();
    if let Some(_a_GLuint251_0) = _a_GLuint251_0 {
        for _jGLuint251 in 0.._a_GLuint251_0.values.len() {
    paths[_jGLuint251] = (*_a_GLuint251_0.values[_jGLuint251]).to_u32().unwrap();
        }
    }
    let paths = paths.as_mut_ptr();

    let weights: &mut [GLfloat];
    weights = _allocator.alloc_array::<GLfloat>(&call.arg(3));
    let _a_GLfloat236_0 = (call.arg(3)).to_array();
    if let Some(_a_GLfloat236_0) = _a_GLfloat236_0 {
        for _jGLfloat236 in 0.._a_GLfloat236_0.values.len() {
    weights[_jGLfloat236] = (*_a_GLfloat236_0.values[_jGLfloat236]).to_f32().unwrap();
        }
    }
    let weights = weights.as_mut_ptr();

//not found in gl!    unsafe { gl::WeightPathsNV(resultPath, numPaths, paths, weights) };
}

pub fn retrace_glCopyPathNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut resultPath: GLuint;
    resultPath = (call.arg(0)).to_u32().unwrap();

    let mut srcPath: GLuint;
    srcPath = (call.arg(1)).to_u32().unwrap();

//not found in gl!    unsafe { gl::CopyPathNV(resultPath, srcPath) };
}

pub fn retrace_glInterpolatePathsNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut resultPath: GLuint;
    resultPath = (call.arg(0)).to_u32().unwrap();

    let mut pathA: GLuint;
    pathA = (call.arg(1)).to_u32().unwrap();

    let mut pathB: GLuint;
    pathB = (call.arg(2)).to_u32().unwrap();

    let mut weight: GLfloat;
    weight = (call.arg(3)).to_f32().unwrap();

//not found in gl!    unsafe { gl::InterpolatePathsNV(resultPath, pathA, pathB, weight) };
}

pub fn retrace_glTransformPathNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut resultPath: GLuint;
    resultPath = (call.arg(0)).to_u32().unwrap();

    let mut srcPath: GLuint;
    srcPath = (call.arg(1)).to_u32().unwrap();

    let mut transformType: GLenum;
    transformType = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let transformValues: &mut [GLfloat];
    transformValues = _allocator.alloc_array::<GLfloat>(&call.arg(3));
    let _a_GLfloat237_0 = (call.arg(3)).to_array();
    if let Some(_a_GLfloat237_0) = _a_GLfloat237_0 {
        for _jGLfloat237 in 0.._a_GLfloat237_0.values.len() {
    transformValues[_jGLfloat237] = (*_a_GLfloat237_0.values[_jGLfloat237]).to_f32().unwrap();
        }
    }
    let transformValues = transformValues.as_mut_ptr();

//not found in gl!    unsafe { gl::TransformPathNV(resultPath, srcPath, transformType, transformValues) };
}

pub fn retrace_glPathParameterivNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut path: GLuint;
    path = (call.arg(0)).to_u32().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let value: &mut [GLint];
    value = _allocator.alloc_array::<GLint>(&call.arg(2));
    let _a_GLint255_0 = (call.arg(2)).to_array();
    if let Some(_a_GLint255_0) = _a_GLint255_0 {
        for _jGLint255 in 0.._a_GLint255_0.values.len() {
    value[_jGLint255] = (*_a_GLint255_0.values[_jGLint255]).to_i32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::PathParameterivNV(path, pname, value) };
}

pub fn retrace_glPathParameteriNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut path: GLuint;
    path = (call.arg(0)).to_u32().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut value: GLint;
    value = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::PathParameteriNV(path, pname, value) };
}

pub fn retrace_glPathParameterfvNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut path: GLuint;
    path = (call.arg(0)).to_u32().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let value: &mut [GLfloat];
    value = _allocator.alloc_array::<GLfloat>(&call.arg(2));
    let _a_GLfloat238_0 = (call.arg(2)).to_array();
    if let Some(_a_GLfloat238_0) = _a_GLfloat238_0 {
        for _jGLfloat238 in 0.._a_GLfloat238_0.values.len() {
    value[_jGLfloat238] = (*_a_GLfloat238_0.values[_jGLfloat238]).to_f32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::PathParameterfvNV(path, pname, value) };
}

pub fn retrace_glPathParameterfNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut path: GLuint;
    path = (call.arg(0)).to_u32().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut value: GLfloat;
    value = (call.arg(2)).to_f32().unwrap();

//not found in gl!    unsafe { gl::PathParameterfNV(path, pname, value) };
}

pub fn retrace_glPathDashArrayNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut path: GLuint;
    path = (call.arg(0)).to_u32().unwrap();

    let mut dashCount: GLsizei;
    dashCount = (call.arg(1)).to_i32().unwrap();

    let dashArray: &mut [GLfloat];
    dashArray = _allocator.alloc_array::<GLfloat>(&call.arg(2));
    let _a_GLfloat239_0 = (call.arg(2)).to_array();
    if let Some(_a_GLfloat239_0) = _a_GLfloat239_0 {
        for _jGLfloat239 in 0.._a_GLfloat239_0.values.len() {
    dashArray[_jGLfloat239] = (*_a_GLfloat239_0.values[_jGLfloat239]).to_f32().unwrap();
        }
    }
    let dashArray = dashArray.as_mut_ptr();

//not found in gl!    unsafe { gl::PathDashArrayNV(path, dashCount, dashArray) };
}

pub fn retrace_glPathStencilFuncNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut func: GLenum;
    func = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut _ref: GLint;
    _ref = (call.arg(1)).to_i32().unwrap();

    let mut mask: GLuint;
    mask = (call.arg(2)).to_u32().unwrap();

//not found in gl!    unsafe { gl::PathStencilFuncNV(func, _ref, mask) };
}

pub fn retrace_glPathStencilDepthOffsetNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut factor: GLfloat;
    factor = (call.arg(0)).to_f32().unwrap();

    let mut units: GLfloat;
    units = (call.arg(1)).to_f32().unwrap();

//not found in gl!    unsafe { gl::PathStencilDepthOffsetNV(factor, units) };
}

pub fn retrace_glStencilFillPathNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut path: GLuint;
    path = (call.arg(0)).to_u32().unwrap();

    let mut fillMode: GLenum;
    fillMode = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut mask: GLuint;
    mask = (call.arg(2)).to_u32().unwrap();

//not found in gl!    unsafe { gl::StencilFillPathNV(path, fillMode, mask) };
}

pub fn retrace_glStencilStrokePathNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut path: GLuint;
    path = (call.arg(0)).to_u32().unwrap();

    let mut reference: GLint;
    reference = (call.arg(1)).to_i32().unwrap();

    let mut mask: GLuint;
    mask = (call.arg(2)).to_u32().unwrap();

//not found in gl!    unsafe { gl::StencilStrokePathNV(path, reference, mask) };
}

pub fn retrace_glStencilFillPathInstancedNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut numPaths: GLsizei;
    numPaths = (call.arg(0)).to_i32().unwrap();

    let mut pathNameType: GLenum;
    pathNameType = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let paths: &mut [GLc_void];
    let paths = (call.arg(2)).to_pointer().unwrap() as *mut c_void;

    let mut pathBase: GLuint;
    pathBase = (call.arg(3)).to_u32().unwrap();

    let mut fillMode: GLenum;
    fillMode = (call.arg(4)).to_u32().unwrap().try_into().unwrap();

    let mut mask: GLuint;
    mask = (call.arg(5)).to_u32().unwrap();

    let mut transformType: GLenum;
    transformType = (call.arg(6)).to_u32().unwrap().try_into().unwrap();

    let transformValues: &mut [GLfloat];
    transformValues = _allocator.alloc_array::<GLfloat>(&call.arg(7));
    let _a_GLfloat240_0 = (call.arg(7)).to_array();
    if let Some(_a_GLfloat240_0) = _a_GLfloat240_0 {
        for _jGLfloat240 in 0.._a_GLfloat240_0.values.len() {
    transformValues[_jGLfloat240] = (*_a_GLfloat240_0.values[_jGLfloat240]).to_f32().unwrap();
        }
    }
    let transformValues = transformValues.as_mut_ptr();

//not found in gl!    unsafe { gl::StencilFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues) };
}

pub fn retrace_glStencilStrokePathInstancedNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut numPaths: GLsizei;
    numPaths = (call.arg(0)).to_i32().unwrap();

    let mut pathNameType: GLenum;
    pathNameType = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let paths: &mut [GLc_void];
    let paths = (call.arg(2)).to_pointer().unwrap() as *mut c_void;

    let mut pathBase: GLuint;
    pathBase = (call.arg(3)).to_u32().unwrap();

    let mut reference: GLint;
    reference = (call.arg(4)).to_i32().unwrap();

    let mut mask: GLuint;
    mask = (call.arg(5)).to_u32().unwrap();

    let mut transformType: GLenum;
    transformType = (call.arg(6)).to_u32().unwrap().try_into().unwrap();

    let transformValues: &mut [GLfloat];
    transformValues = _allocator.alloc_array::<GLfloat>(&call.arg(7));
    let _a_GLfloat241_0 = (call.arg(7)).to_array();
    if let Some(_a_GLfloat241_0) = _a_GLfloat241_0 {
        for _jGLfloat241 in 0.._a_GLfloat241_0.values.len() {
    transformValues[_jGLfloat241] = (*_a_GLfloat241_0.values[_jGLfloat241]).to_f32().unwrap();
        }
    }
    let transformValues = transformValues.as_mut_ptr();

//not found in gl!    unsafe { gl::StencilStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues) };
}

pub fn retrace_glPathCoverDepthFuncNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut func: GLenum;
    func = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::PathCoverDepthFuncNV(func) };
}

pub fn retrace_glPathColorGenNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut color: GLenum;
    color = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut genMode: GLenum;
    genMode = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut colorFormat: GLenum;
    colorFormat = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let coeffs: &mut [GLfloat];
    coeffs = _allocator.alloc_array::<GLfloat>(&call.arg(3));
    let _a_GLfloat242_0 = (call.arg(3)).to_array();
    if let Some(_a_GLfloat242_0) = _a_GLfloat242_0 {
        for _jGLfloat242 in 0.._a_GLfloat242_0.values.len() {
    coeffs[_jGLfloat242] = (*_a_GLfloat242_0.values[_jGLfloat242]).to_f32().unwrap();
        }
    }
    let coeffs = coeffs.as_mut_ptr();

//not found in gl!    unsafe { gl::PathColorGenNV(color, genMode, colorFormat, coeffs) };
}

pub fn retrace_glPathTexGenNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texCoordSet: GLenum;
    texCoordSet = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut genMode: GLenum;
    genMode = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut components: GLint;
    components = (call.arg(2)).to_i32().unwrap();

    let coeffs: &mut [GLfloat];
    coeffs = _allocator.alloc_array::<GLfloat>(&call.arg(3));
    let _a_GLfloat243_0 = (call.arg(3)).to_array();
    if let Some(_a_GLfloat243_0) = _a_GLfloat243_0 {
        for _jGLfloat243 in 0.._a_GLfloat243_0.values.len() {
    coeffs[_jGLfloat243] = (*_a_GLfloat243_0.values[_jGLfloat243]).to_f32().unwrap();
        }
    }
    let coeffs = coeffs.as_mut_ptr();

//not found in gl!    unsafe { gl::PathTexGenNV(texCoordSet, genMode, components, coeffs) };
}

pub fn retrace_glPathFogGenNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut genMode: GLenum;
    genMode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::PathFogGenNV(genMode) };
}

pub fn retrace_glCoverFillPathNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut path: GLuint;
    path = (call.arg(0)).to_u32().unwrap();

    let mut coverMode: GLenum;
    coverMode = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::CoverFillPathNV(path, coverMode) };
}

pub fn retrace_glCoverStrokePathNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut path: GLuint;
    path = (call.arg(0)).to_u32().unwrap();

    let mut coverMode: GLenum;
    coverMode = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::CoverStrokePathNV(path, coverMode) };
}

pub fn retrace_glCoverFillPathInstancedNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut numPaths: GLsizei;
    numPaths = (call.arg(0)).to_i32().unwrap();

    let mut pathNameType: GLenum;
    pathNameType = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let paths: &mut [GLc_void];
    let paths = (call.arg(2)).to_pointer().unwrap() as *mut c_void;

    let mut pathBase: GLuint;
    pathBase = (call.arg(3)).to_u32().unwrap();

    let mut coverMode: GLenum;
    coverMode = (call.arg(4)).to_u32().unwrap().try_into().unwrap();

    let mut transformType: GLenum;
    transformType = (call.arg(5)).to_u32().unwrap().try_into().unwrap();

    let transformValues: &mut [GLfloat];
    transformValues = _allocator.alloc_array::<GLfloat>(&call.arg(6));
    let _a_GLfloat244_0 = (call.arg(6)).to_array();
    if let Some(_a_GLfloat244_0) = _a_GLfloat244_0 {
        for _jGLfloat244 in 0.._a_GLfloat244_0.values.len() {
    transformValues[_jGLfloat244] = (*_a_GLfloat244_0.values[_jGLfloat244]).to_f32().unwrap();
        }
    }
    let transformValues = transformValues.as_mut_ptr();

//not found in gl!    unsafe { gl::CoverFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues) };
}

pub fn retrace_glCoverStrokePathInstancedNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut numPaths: GLsizei;
    numPaths = (call.arg(0)).to_i32().unwrap();

    let mut pathNameType: GLenum;
    pathNameType = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let paths: &mut [GLc_void];
    let paths = (call.arg(2)).to_pointer().unwrap() as *mut c_void;

    let mut pathBase: GLuint;
    pathBase = (call.arg(3)).to_u32().unwrap();

    let mut coverMode: GLenum;
    coverMode = (call.arg(4)).to_u32().unwrap().try_into().unwrap();

    let mut transformType: GLenum;
    transformType = (call.arg(5)).to_u32().unwrap().try_into().unwrap();

    let transformValues: &mut [GLfloat];
    transformValues = _allocator.alloc_array::<GLfloat>(&call.arg(6));
    let _a_GLfloat245_0 = (call.arg(6)).to_array();
    if let Some(_a_GLfloat245_0) = _a_GLfloat245_0 {
        for _jGLfloat245 in 0.._a_GLfloat245_0.values.len() {
    transformValues[_jGLfloat245] = (*_a_GLfloat245_0.values[_jGLfloat245]).to_f32().unwrap();
        }
    }
    let transformValues = transformValues.as_mut_ptr();

//not found in gl!    unsafe { gl::CoverStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues) };
}

pub fn retrace_glGetPathSpacingNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut pathListMode: GLenum;
    pathListMode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut numPaths: GLsizei;
    numPaths = (call.arg(1)).to_i32().unwrap();

    let mut pathNameType: GLenum;
    pathNameType = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let paths: &mut [GLc_void];
    let paths = (call.arg(3)).to_pointer().unwrap() as *mut c_void;

    let mut pathBase: GLuint;
    pathBase = (call.arg(4)).to_u32().unwrap();

    let mut advanceScale: GLfloat;
    advanceScale = (call.arg(5)).to_f32().unwrap();

    let mut kerningScale: GLfloat;
    kerningScale = (call.arg(6)).to_f32().unwrap();

    let mut transformType: GLenum;
    transformType = (call.arg(7)).to_u32().unwrap().try_into().unwrap();

    let returnedSpacing: &mut [GLfloat];
    returnedSpacing = _allocator.alloc_array::<GLfloat>(&call.arg(8));

//not found in gl!    unsafe { gl::GetPathSpacingNV(pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, returnedSpacing) };
    let _aGLfloat247 = (call.arg(8)).to_array();
    if (_aGLfloat247) {
        for _jGLfloat247 in 0.._aGLfloat247.values.len() {
        }
    }
}

pub fn retrace_glGetPathLengthNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut path: GLuint;
    path = (call.arg(0)).to_u32().unwrap();

    let mut startSegment: GLsizei;
    startSegment = (call.arg(1)).to_i32().unwrap();

    let mut numSegments: GLsizei;
    numSegments = (call.arg(2)).to_i32().unwrap();

//not found in gl!    let _result = unsafe { gl::GetPathLengthNV(path, startSegment, numSegments) };

}

pub fn retrace_glMatrixLoad3x2fNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut matrixMode: GLenum;
    matrixMode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let m: &mut [GLfloat];
    m = _allocator.alloc_array::<GLfloat>(&call.arg(1));
    let _a_GLfloat248_0 = (call.arg(1)).to_array();
    if let Some(_a_GLfloat248_0) = _a_GLfloat248_0 {
        for _jGLfloat248 in 0.._a_GLfloat248_0.values.len() {
    m[_jGLfloat248] = (*_a_GLfloat248_0.values[_jGLfloat248]).to_f32().unwrap();
        }
    }
    let m = m.as_mut_ptr();

//not found in gl!    unsafe { gl::MatrixLoad3x2fNV(matrixMode, m) };
}

pub fn retrace_glMatrixLoad3x3fNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut matrixMode: GLenum;
    matrixMode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let m: &mut [GLfloat];
    m = _allocator.alloc_array::<GLfloat>(&call.arg(1));
    let _a_GLfloat249_0 = (call.arg(1)).to_array();
    if let Some(_a_GLfloat249_0) = _a_GLfloat249_0 {
        for _jGLfloat249 in 0.._a_GLfloat249_0.values.len() {
    m[_jGLfloat249] = (*_a_GLfloat249_0.values[_jGLfloat249]).to_f32().unwrap();
        }
    }
    let m = m.as_mut_ptr();

//not found in gl!    unsafe { gl::MatrixLoad3x3fNV(matrixMode, m) };
}

pub fn retrace_glMatrixLoadTranspose3x3fNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut matrixMode: GLenum;
    matrixMode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let m: &mut [GLfloat];
    m = _allocator.alloc_array::<GLfloat>(&call.arg(1));
    let _a_GLfloat250_0 = (call.arg(1)).to_array();
    if let Some(_a_GLfloat250_0) = _a_GLfloat250_0 {
        for _jGLfloat250 in 0.._a_GLfloat250_0.values.len() {
    m[_jGLfloat250] = (*_a_GLfloat250_0.values[_jGLfloat250]).to_f32().unwrap();
        }
    }
    let m = m.as_mut_ptr();

//not found in gl!    unsafe { gl::MatrixLoadTranspose3x3fNV(matrixMode, m) };
}

pub fn retrace_glMatrixMult3x2fNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut matrixMode: GLenum;
    matrixMode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let m: &mut [GLfloat];
    m = _allocator.alloc_array::<GLfloat>(&call.arg(1));
    let _a_GLfloat251_0 = (call.arg(1)).to_array();
    if let Some(_a_GLfloat251_0) = _a_GLfloat251_0 {
        for _jGLfloat251 in 0.._a_GLfloat251_0.values.len() {
    m[_jGLfloat251] = (*_a_GLfloat251_0.values[_jGLfloat251]).to_f32().unwrap();
        }
    }
    let m = m.as_mut_ptr();

//not found in gl!    unsafe { gl::MatrixMult3x2fNV(matrixMode, m) };
}

pub fn retrace_glMatrixMult3x3fNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut matrixMode: GLenum;
    matrixMode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let m: &mut [GLfloat];
    m = _allocator.alloc_array::<GLfloat>(&call.arg(1));
    let _a_GLfloat252_0 = (call.arg(1)).to_array();
    if let Some(_a_GLfloat252_0) = _a_GLfloat252_0 {
        for _jGLfloat252 in 0.._a_GLfloat252_0.values.len() {
    m[_jGLfloat252] = (*_a_GLfloat252_0.values[_jGLfloat252]).to_f32().unwrap();
        }
    }
    let m = m.as_mut_ptr();

//not found in gl!    unsafe { gl::MatrixMult3x3fNV(matrixMode, m) };
}

pub fn retrace_glMatrixMultTranspose3x3fNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut matrixMode: GLenum;
    matrixMode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let m: &mut [GLfloat];
    m = _allocator.alloc_array::<GLfloat>(&call.arg(1));
    let _a_GLfloat253_0 = (call.arg(1)).to_array();
    if let Some(_a_GLfloat253_0) = _a_GLfloat253_0 {
        for _jGLfloat253 in 0.._a_GLfloat253_0.values.len() {
    m[_jGLfloat253] = (*_a_GLfloat253_0.values[_jGLfloat253]).to_f32().unwrap();
        }
    }
    let m = m.as_mut_ptr();

//not found in gl!    unsafe { gl::MatrixMultTranspose3x3fNV(matrixMode, m) };
}

pub fn retrace_glStencilThenCoverFillPathNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut path: GLuint;
    path = (call.arg(0)).to_u32().unwrap();

    let mut fillMode: GLenum;
    fillMode = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut mask: GLuint;
    mask = (call.arg(2)).to_u32().unwrap();

    let mut coverMode: GLenum;
    coverMode = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::StencilThenCoverFillPathNV(path, fillMode, mask, coverMode) };
}

pub fn retrace_glStencilThenCoverStrokePathNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut path: GLuint;
    path = (call.arg(0)).to_u32().unwrap();

    let mut reference: GLint;
    reference = (call.arg(1)).to_i32().unwrap();

    let mut mask: GLuint;
    mask = (call.arg(2)).to_u32().unwrap();

    let mut coverMode: GLenum;
    coverMode = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::StencilThenCoverStrokePathNV(path, reference, mask, coverMode) };
}

pub fn retrace_glStencilThenCoverFillPathInstancedNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut numPaths: GLsizei;
    numPaths = (call.arg(0)).to_i32().unwrap();

    let mut pathNameType: GLenum;
    pathNameType = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let paths: &mut [GLc_void];
    let paths = (call.arg(2)).to_pointer().unwrap() as *mut c_void;

    let mut pathBase: GLuint;
    pathBase = (call.arg(3)).to_u32().unwrap();

    let mut fillMode: GLenum;
    fillMode = (call.arg(4)).to_u32().unwrap().try_into().unwrap();

    let mut mask: GLuint;
    mask = (call.arg(5)).to_u32().unwrap();

    let mut coverMode: GLenum;
    coverMode = (call.arg(6)).to_u32().unwrap().try_into().unwrap();

    let mut transformType: GLenum;
    transformType = (call.arg(7)).to_u32().unwrap().try_into().unwrap();

    let transformValues: &mut [GLfloat];
    transformValues = _allocator.alloc_array::<GLfloat>(&call.arg(8));
    let _a_GLfloat254_0 = (call.arg(8)).to_array();
    if let Some(_a_GLfloat254_0) = _a_GLfloat254_0 {
        for _jGLfloat254 in 0.._a_GLfloat254_0.values.len() {
    transformValues[_jGLfloat254] = (*_a_GLfloat254_0.values[_jGLfloat254]).to_f32().unwrap();
        }
    }
    let transformValues = transformValues.as_mut_ptr();

//not found in gl!    unsafe { gl::StencilThenCoverFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, fillMode, mask, coverMode, transformType, transformValues) };
}

pub fn retrace_glStencilThenCoverStrokePathInstancedNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut numPaths: GLsizei;
    numPaths = (call.arg(0)).to_i32().unwrap();

    let mut pathNameType: GLenum;
    pathNameType = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let paths: &mut [GLc_void];
    let paths = (call.arg(2)).to_pointer().unwrap() as *mut c_void;

    let mut pathBase: GLuint;
    pathBase = (call.arg(3)).to_u32().unwrap();

    let mut reference: GLint;
    reference = (call.arg(4)).to_i32().unwrap();

    let mut mask: GLuint;
    mask = (call.arg(5)).to_u32().unwrap();

    let mut coverMode: GLenum;
    coverMode = (call.arg(6)).to_u32().unwrap().try_into().unwrap();

    let mut transformType: GLenum;
    transformType = (call.arg(7)).to_u32().unwrap().try_into().unwrap();

    let transformValues: &mut [GLfloat];
    transformValues = _allocator.alloc_array::<GLfloat>(&call.arg(8));
    let _a_GLfloat255_0 = (call.arg(8)).to_array();
    if let Some(_a_GLfloat255_0) = _a_GLfloat255_0 {
        for _jGLfloat255 in 0.._a_GLfloat255_0.values.len() {
    transformValues[_jGLfloat255] = (*_a_GLfloat255_0.values[_jGLfloat255]).to_f32().unwrap();
        }
    }
    let transformValues = transformValues.as_mut_ptr();

//not found in gl!    unsafe { gl::StencilThenCoverStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, reference, mask, coverMode, transformType, transformValues) };
}

pub fn retrace_glPathGlyphIndexRangeNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut fontTarget: GLenum;
    fontTarget = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let fontName: &mut [GLc_void];
    fontName = (call.arg(1)).to_string().unwrap();

    let mut fontStyle: GLbitfield;
    fontStyle = (call.arg(2)).to_u32().unwrap();

    let mut pathParameterTemplate: GLuint;
    pathParameterTemplate = (call.arg(3)).to_u32().unwrap();

    let mut emScale: GLfloat;
    emScale = (call.arg(4)).to_f32().unwrap();

    let baseAndCount: &mut [GLuint];
    baseAndCount = _allocator.alloc_array::<GLuint>(&call.arg(5));
    let _a_GLuint252_0 = (call.arg(5)).to_array();
    if let Some(_a_GLuint252_0) = _a_GLuint252_0 {
        for _jGLuint252 in 0.._a_GLuint252_0.values.len() {
    baseAndCount[_jGLuint252] = (*_a_GLuint252_0.values[_jGLuint252]).to_u32().unwrap();
        }
    }
    let baseAndCount = baseAndCount.as_mut_ptr();

//not found in gl!    let _result = unsafe { gl::PathGlyphIndexRangeNV(fontTarget, fontName, fontStyle, pathParameterTemplate, emScale, baseAndCount) };

}

pub fn retrace_glPathGlyphIndexArrayNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut firstPathName: GLuint;
    firstPathName = (call.arg(0)).to_u32().unwrap();

    let mut fontTarget: GLenum;
    fontTarget = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let fontName: &mut [GLc_void];
    fontName = (call.arg(2)).to_string().unwrap();

    let mut fontStyle: GLbitfield;
    fontStyle = (call.arg(3)).to_u32().unwrap();

    let mut firstGlyphIndex: GLuint;
    firstGlyphIndex = (call.arg(4)).to_u32().unwrap();

    let mut numGlyphs: GLsizei;
    numGlyphs = (call.arg(5)).to_i32().unwrap();

    let mut pathParameterTemplate: GLuint;
    pathParameterTemplate = (call.arg(6)).to_u32().unwrap();

    let mut emScale: GLfloat;
    emScale = (call.arg(7)).to_f32().unwrap();

//not found in gl!    let _result = unsafe { gl::PathGlyphIndexArrayNV(firstPathName, fontTarget, fontName, fontStyle, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale) };

}

pub fn retrace_glPathMemoryGlyphIndexArrayNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut firstPathName: GLuint;
    firstPathName = (call.arg(0)).to_u32().unwrap();

    let mut fontTarget: GLenum;
    fontTarget = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut fontSize: GLsizeiptr;
    fontSize = (call.arg(2)).to_i32().unwrap();

    let fontData: &mut [c_void];
    let fontData = (call.arg(3)).to_pointer().unwrap() as *mut c_void;

    let mut faceIndex: GLsizei;
    faceIndex = (call.arg(4)).to_i32().unwrap();

    let mut firstGlyphIndex: GLuint;
    firstGlyphIndex = (call.arg(5)).to_u32().unwrap();

    let mut numGlyphs: GLsizei;
    numGlyphs = (call.arg(6)).to_i32().unwrap();

    let mut pathParameterTemplate: GLuint;
    pathParameterTemplate = (call.arg(7)).to_u32().unwrap();

    let mut emScale: GLfloat;
    emScale = (call.arg(8)).to_f32().unwrap();

//not found in gl!    let _result = unsafe { gl::PathMemoryGlyphIndexArrayNV(firstPathName, fontTarget, fontSize, fontData, faceIndex, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale) };

}

pub fn retrace_glProgramPathFragmentInputGenNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut genMode: GLenum;
    genMode = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut components: GLint;
    components = (call.arg(3)).to_i32().unwrap();

    let coeffs: &mut [GLfloat];
    coeffs = _allocator.alloc_array::<GLfloat>(&call.arg(4));
    let _a_GLfloat256_0 = (call.arg(4)).to_array();
    if let Some(_a_GLfloat256_0) = _a_GLfloat256_0 {
        for _jGLfloat256 in 0.._a_GLfloat256_0.values.len() {
    coeffs[_jGLfloat256] = (*_a_GLfloat256_0.values[_jGLfloat256]).to_f32().unwrap();
        }
    }
    let coeffs = coeffs.as_mut_ptr();

//not found in gl!    unsafe { gl::ProgramPathFragmentInputGenNV(program, location, genMode, components, coeffs) };
}

pub fn retrace_glPixelDataRangeNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut length: GLsizei;
    length = (call.arg(1)).to_i32().unwrap();

    let pointer: &mut [GLc_void];
//FIXME    memset(&pointer, 0, sizeof pointer); 

    if (1) {
    }
//not found in gl!    unsafe { gl::PixelDataRangeNV(target, length, pointer) };
}

pub fn retrace_glFlushPixelDataRangeNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::FlushPixelDataRangeNV(target) };
}

pub fn retrace_glPointParameteriNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut pname: GLenum;
    pname = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut param: GLint;
    param = (call.arg(1)).to_i32().unwrap();

//not found in gl!    unsafe { gl::PointParameteriNV(pname, param) };
}

pub fn retrace_glPointParameterivNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut pname: GLenum;
    pname = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLint];
    params = _allocator.alloc_array::<GLint>(&call.arg(1));
    let _a_GLint256_0 = (call.arg(1)).to_array();
    if let Some(_a_GLint256_0) = _a_GLint256_0 {
        for _jGLint256 in 0.._a_GLint256_0.values.len() {
    params[_jGLint256] = (*_a_GLint256_0.values[_jGLint256]).to_i32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::PointParameterivNV(pname, params) };
}

pub fn retrace_glPresentFrameKeyedNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut video_slot: GLuint;
    video_slot = (call.arg(0)).to_u32().unwrap();

    let mut minPresentTime: GLuint64EXT;
    minPresentTime = (call.arg(1)).to_u32().unwrap();

    let mut beginPresentTimeId: GLuint;
    beginPresentTimeId = (call.arg(2)).to_u32().unwrap();

    let mut presentDurationId: GLuint;
    presentDurationId = (call.arg(3)).to_u32().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(4)).to_u32().unwrap().try_into().unwrap();

    let mut target0: GLenum;
    target0 = (call.arg(5)).to_u32().unwrap().try_into().unwrap();

    let mut fill0: GLuint;
    fill0 = (call.arg(6)).to_u32().unwrap();

    let mut key0: GLuint;
    key0 = (call.arg(7)).to_u32().unwrap();

    let mut target1: GLenum;
    target1 = (call.arg(8)).to_u32().unwrap().try_into().unwrap();

    let mut fill1: GLuint;
    fill1 = (call.arg(9)).to_u32().unwrap();

    let mut key1: GLuint;
    key1 = (call.arg(10)).to_u32().unwrap();

//not found in gl!    unsafe { gl::PresentFrameKeyedNV(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, _type, target0, fill0, key0, target1, fill1, key1) };
}

pub fn retrace_glPresentFrameDualFillNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut video_slot: GLuint;
    video_slot = (call.arg(0)).to_u32().unwrap();

    let mut minPresentTime: GLuint64EXT;
    minPresentTime = (call.arg(1)).to_u32().unwrap();

    let mut beginPresentTimeId: GLuint;
    beginPresentTimeId = (call.arg(2)).to_u32().unwrap();

    let mut presentDurationId: GLuint;
    presentDurationId = (call.arg(3)).to_u32().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(4)).to_u32().unwrap().try_into().unwrap();

    let mut target0: GLenum;
    target0 = (call.arg(5)).to_u32().unwrap().try_into().unwrap();

    let mut fill0: GLuint;
    fill0 = (call.arg(6)).to_u32().unwrap();

    let mut target1: GLenum;
    target1 = (call.arg(7)).to_u32().unwrap().try_into().unwrap();

    let mut fill1: GLuint;
    fill1 = (call.arg(8)).to_u32().unwrap();

    let mut target2: GLenum;
    target2 = (call.arg(9)).to_u32().unwrap().try_into().unwrap();

    let mut fill2: GLuint;
    fill2 = (call.arg(10)).to_u32().unwrap();

    let mut target3: GLenum;
    target3 = (call.arg(11)).to_u32().unwrap().try_into().unwrap();

    let mut fill3: GLuint;
    fill3 = (call.arg(12)).to_u32().unwrap();

//not found in gl!    unsafe { gl::PresentFrameDualFillNV(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, _type, target0, fill0, target1, fill1, target2, fill2, target3, fill3) };
}

pub fn retrace_glPrimitiveRestartNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
//not found in gl!    unsafe { gl::PrimitiveRestartNV() };
}

pub fn retrace_glPrimitiveRestartIndexNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

//not found in gl!    unsafe { gl::PrimitiveRestartIndexNV(index) };
}

pub fn retrace_glReadBufferNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::ReadBufferNV(mode) };
}

pub fn retrace_glCombinerParameterfvNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut pname: GLenum;
    pname = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLfloat];
    params = _allocator.alloc_array::<GLfloat>(&call.arg(1));
    let _a_GLfloat257_0 = (call.arg(1)).to_array();
    if let Some(_a_GLfloat257_0) = _a_GLfloat257_0 {
        for _jGLfloat257 in 0.._a_GLfloat257_0.values.len() {
    params[_jGLfloat257] = (*_a_GLfloat257_0.values[_jGLfloat257]).to_f32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::CombinerParameterfvNV(pname, params) };
}

pub fn retrace_glCombinerParameterfNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut pname: GLenum;
    pname = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut param: GLfloat;
    param = (call.arg(1)).to_f32().unwrap();

//not found in gl!    unsafe { gl::CombinerParameterfNV(pname, param) };
}

pub fn retrace_glCombinerParameterivNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut pname: GLenum;
    pname = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLint];
    params = _allocator.alloc_array::<GLint>(&call.arg(1));
    let _a_GLint257_0 = (call.arg(1)).to_array();
    if let Some(_a_GLint257_0) = _a_GLint257_0 {
        for _jGLint257 in 0.._a_GLint257_0.values.len() {
    params[_jGLint257] = (*_a_GLint257_0.values[_jGLint257]).to_i32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::CombinerParameterivNV(pname, params) };
}

pub fn retrace_glCombinerParameteriNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut pname: GLenum;
    pname = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut param: GLint;
    param = (call.arg(1)).to_i32().unwrap();

//not found in gl!    unsafe { gl::CombinerParameteriNV(pname, param) };
}

pub fn retrace_glCombinerInputNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut stage: GLenum;
    stage = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut portion: GLenum;
    portion = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut variable: GLenum;
    variable = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut input: GLenum;
    input = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let mut mapping: GLenum;
    mapping = (call.arg(4)).to_u32().unwrap().try_into().unwrap();

    let mut componentUsage: GLenum;
    componentUsage = (call.arg(5)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::CombinerInputNV(stage, portion, variable, input, mapping, componentUsage) };
}

pub fn retrace_glCombinerOutputNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut stage: GLenum;
    stage = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut portion: GLenum;
    portion = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut abOutput: GLenum;
    abOutput = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut cdOutput: GLenum;
    cdOutput = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let mut sumOutput: GLenum;
    sumOutput = (call.arg(4)).to_u32().unwrap().try_into().unwrap();

    let mut scale: GLenum;
    scale = (call.arg(5)).to_u32().unwrap().try_into().unwrap();

    let mut bias: GLenum;
    bias = (call.arg(6)).to_u32().unwrap().try_into().unwrap();

    let mut abDotProduct: GLboolean;
    abDotProduct = (call.arg(7)).to_u32().unwrap() as u8;

    let mut cdDotProduct: GLboolean;
    cdDotProduct = (call.arg(8)).to_u32().unwrap() as u8;

    let mut muxSum: GLboolean;
    muxSum = (call.arg(9)).to_u32().unwrap() as u8;

//not found in gl!    unsafe { gl::CombinerOutputNV(stage, portion, abOutput, cdOutput, sumOutput, scale, bias, abDotProduct, cdDotProduct, muxSum) };
}

pub fn retrace_glFinalCombinerInputNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut variable: GLenum;
    variable = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut input: GLenum;
    input = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut mapping: GLenum;
    mapping = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut componentUsage: GLenum;
    componentUsage = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::FinalCombinerInputNV(variable, input, mapping, componentUsage) };
}

pub fn retrace_glCombinerStageParameterfvNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut stage: GLenum;
    stage = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLfloat];
    params = _allocator.alloc_array::<GLfloat>(&call.arg(2));
    let _a_GLfloat258_0 = (call.arg(2)).to_array();
    if let Some(_a_GLfloat258_0) = _a_GLfloat258_0 {
        for _jGLfloat258 in 0.._a_GLfloat258_0.values.len() {
    params[_jGLfloat258] = (*_a_GLfloat258_0.values[_jGLfloat258]).to_f32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::CombinerStageParameterfvNV(stage, pname, params) };
}

pub fn retrace_glMakeBufferResidentNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut access: GLenum;
    access = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::MakeBufferResidentNV(target, access) };
}

pub fn retrace_glMakeBufferNonResidentNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::MakeBufferNonResidentNV(target) };
}

pub fn retrace_glMakeNamedBufferResidentNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut buffer: GLuint;
    buffer = (call.arg(0)).to_u32().unwrap();
    buffer = self._buffer_map[buffer];

    let mut access: GLenum;
    access = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::MakeNamedBufferResidentNV(buffer, access) };
}

pub fn retrace_glMakeNamedBufferNonResidentNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut buffer: GLuint;
    buffer = (call.arg(0)).to_u32().unwrap();
    buffer = self._buffer_map[buffer];

//not found in gl!    unsafe { gl::MakeNamedBufferNonResidentNV(buffer) };
}

pub fn retrace_glUniformui64NV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut value: GLuint64EXT;
    value = (call.arg(1)).to_u32().unwrap();

//not found in gl!    unsafe { gl::Uniformui64NV(location, value) };
}

pub fn retrace_glUniformui64vNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut location: GLint;
    let program = _getActiveProgram();
    location = (call.arg(0)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let value: &mut [GLuint64EXT];
    value = _allocator.alloc_array::<GLuint64EXT>(&call.arg(2));
    let _a_GLuint64EXT16_0 = (call.arg(2)).to_array();
    if let Some(_a_GLuint64EXT16_0) = _a_GLuint64EXT16_0 {
        for _jGLuint64EXT16 in 0.._a_GLuint64EXT16_0.values.len() {
    value[_jGLuint64EXT16] = (*_a_GLuint64EXT16_0.values[_jGLuint64EXT16]).to_u32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::Uniformui64vNV(location, count, value) };
}

pub fn retrace_glProgramUniformui64NV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut value: GLuint64EXT;
    value = (call.arg(2)).to_u32().unwrap();

//not found in gl!    unsafe { gl::ProgramUniformui64NV(program, location, value) };
}

pub fn retrace_glProgramUniformui64vNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut location: GLint;
    location = (call.arg(1)).to_i32().unwrap();
    location = self._location_map[program].lookupUniformLocation(location);

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let value: &mut [GLuint64EXT];
    value = _allocator.alloc_array::<GLuint64EXT>(&call.arg(3));
    let _a_GLuint64EXT17_0 = (call.arg(3)).to_array();
    if let Some(_a_GLuint64EXT17_0) = _a_GLuint64EXT17_0 {
        for _jGLuint64EXT17 in 0.._a_GLuint64EXT17_0.values.len() {
    value[_jGLuint64EXT17] = (*_a_GLuint64EXT17_0.values[_jGLuint64EXT17]).to_u32().unwrap();
        }
    }
    let value = value.as_mut_ptr();

//not found in gl!    unsafe { gl::ProgramUniformui64vNV(program, location, count, value) };
}

pub fn retrace_glTextureBarrierNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
//not found in gl!    unsafe { gl::TextureBarrierNV() };
}

pub fn retrace_glTexImage2DMultisampleCoverageNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut coverageSamples: GLsizei;
    coverageSamples = (call.arg(1)).to_i32().unwrap();

    let mut colorSamples: GLsizei;
    colorSamples = (call.arg(2)).to_i32().unwrap();

    let mut internalFormat: GLint;
    internalFormat = (call.arg(3)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(4)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(5)).to_i32().unwrap();

    let mut fixedSampleLocations: GLboolean;
    fixedSampleLocations = (call.arg(6)).to_u32().unwrap() as u8;

//not found in gl!    unsafe { gl::TexImage2DMultisampleCoverageNV(target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations) };
}

pub fn retrace_glTexImage3DMultisampleCoverageNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut coverageSamples: GLsizei;
    coverageSamples = (call.arg(1)).to_i32().unwrap();

    let mut colorSamples: GLsizei;
    colorSamples = (call.arg(2)).to_i32().unwrap();

    let mut internalFormat: GLint;
    internalFormat = (call.arg(3)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(4)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(5)).to_i32().unwrap();

    let mut depth: GLsizei;
    depth = (call.arg(6)).to_i32().unwrap();

    let mut fixedSampleLocations: GLboolean;
    fixedSampleLocations = (call.arg(7)).to_u32().unwrap() as u8;

//not found in gl!    unsafe { gl::TexImage3DMultisampleCoverageNV(target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations) };
}

pub fn retrace_glTextureImage2DMultisampleNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut samples: GLsizei;
    samples = (call.arg(2)).to_i32().unwrap();
    let max_samples = 0;
//not found in gl!    unsafe { gl::GetIntegerv(gl::MAX_SAMPLES, &max_samples) };
    if samples > max_samples {
        samples = max_samples;
    }

    let mut internalFormat: GLint;
    internalFormat = (call.arg(3)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(4)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(5)).to_i32().unwrap();

    let mut fixedSampleLocations: GLboolean;
    fixedSampleLocations = (call.arg(6)).to_u32().unwrap() as u8;

//not found in gl!    unsafe { gl::TextureImage2DMultisampleNV(texture, target, samples, internalFormat, width, height, fixedSampleLocations) };
}

pub fn retrace_glTextureImage3DMultisampleNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut samples: GLsizei;
    samples = (call.arg(2)).to_i32().unwrap();
    let max_samples = 0;
//not found in gl!    unsafe { gl::GetIntegerv(gl::MAX_SAMPLES, &max_samples) };
    if samples > max_samples {
        samples = max_samples;
    }

    let mut internalFormat: GLint;
    internalFormat = (call.arg(3)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(4)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(5)).to_i32().unwrap();

    let mut depth: GLsizei;
    depth = (call.arg(6)).to_i32().unwrap();

    let mut fixedSampleLocations: GLboolean;
    fixedSampleLocations = (call.arg(7)).to_u32().unwrap() as u8;

//not found in gl!    unsafe { gl::TextureImage3DMultisampleNV(texture, target, samples, internalFormat, width, height, depth, fixedSampleLocations) };
}

pub fn retrace_glTextureImage2DMultisampleCoverageNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut coverageSamples: GLsizei;
    coverageSamples = (call.arg(2)).to_i32().unwrap();

    let mut colorSamples: GLsizei;
    colorSamples = (call.arg(3)).to_i32().unwrap();

    let mut internalFormat: GLint;
    internalFormat = (call.arg(4)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(5)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(6)).to_i32().unwrap();

    let mut fixedSampleLocations: GLboolean;
    fixedSampleLocations = (call.arg(7)).to_u32().unwrap() as u8;

//not found in gl!    unsafe { gl::TextureImage2DMultisampleCoverageNV(texture, target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations) };
}

pub fn retrace_glTextureImage3DMultisampleCoverageNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut texture: GLuint;
    texture = (call.arg(0)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut coverageSamples: GLsizei;
    coverageSamples = (call.arg(2)).to_i32().unwrap();

    let mut colorSamples: GLsizei;
    colorSamples = (call.arg(3)).to_i32().unwrap();

    let mut internalFormat: GLint;
    internalFormat = (call.arg(4)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(5)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(6)).to_i32().unwrap();

    let mut depth: GLsizei;
    depth = (call.arg(7)).to_i32().unwrap();

    let mut fixedSampleLocations: GLboolean;
    fixedSampleLocations = (call.arg(8)).to_u32().unwrap() as u8;

//not found in gl!    unsafe { gl::TextureImage3DMultisampleCoverageNV(texture, target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations) };
}

pub fn retrace_glBeginTransformFeedbackNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut primitiveMode: GLenum;
    primitiveMode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::BeginTransformFeedbackNV(primitiveMode) };
}

pub fn retrace_glEndTransformFeedbackNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
//not found in gl!    unsafe { gl::EndTransformFeedbackNV() };
}

pub fn retrace_glTransformFeedbackAttribsNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut count: GLsizei;
    count = (call.arg(0)).to_i32().unwrap();

    let attribs: &mut [GLint];
    attribs = _allocator.alloc_array::<GLint>(&call.arg(1));
    let _a_GLint258_0 = (call.arg(1)).to_array();
    if let Some(_a_GLint258_0) = _a_GLint258_0 {
        for _jGLint258 in 0.._a_GLint258_0.values.len() {
    attribs[_jGLint258] = (*_a_GLint258_0.values[_jGLint258]).to_i32().unwrap();
        }
    }
    let attribs = attribs.as_mut_ptr();

    let mut bufferMode: GLenum;
    bufferMode = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::TransformFeedbackAttribsNV(count, attribs, bufferMode) };
}

pub fn retrace_glBindBufferRangeNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut index: GLuint;
    index = (call.arg(1)).to_u32().unwrap();

    let mut buffer: GLuint;
    buffer = (call.arg(2)).to_u32().unwrap();
    buffer = self._buffer_map[buffer];

    let mut offset: GLintptr;
    offset = (call.arg(3)).to_i32().unwrap();

    let mut size: GLsizeiptr;
    size = (call.arg(4)).to_i32().unwrap();

//not found in gl!    unsafe { gl::BindBufferRangeNV(target, index, buffer, offset, size) };
}

pub fn retrace_glBindBufferOffsetNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut index: GLuint;
    index = (call.arg(1)).to_u32().unwrap();

    let mut buffer: GLuint;
    buffer = (call.arg(2)).to_u32().unwrap();
    buffer = self._buffer_map[buffer];

    let mut offset: GLintptr;
    offset = (call.arg(3)).to_i32().unwrap();

//not found in gl!    unsafe { gl::BindBufferOffsetNV(target, index, buffer, offset) };
}

pub fn retrace_glBindBufferBaseNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut index: GLuint;
    index = (call.arg(1)).to_u32().unwrap();

    let mut buffer: GLuint;
    buffer = (call.arg(2)).to_u32().unwrap();
    buffer = self._buffer_map[buffer];

//not found in gl!    unsafe { gl::BindBufferBaseNV(target, index, buffer) };
}

pub fn retrace_glTransformFeedbackVaryingsNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let locations: &mut [GLint];
    locations = _allocator.alloc_array::<GLint>(&call.arg(2));
    let _a_GLint259_0 = (call.arg(2)).to_array();
    if let Some(_a_GLint259_0) = _a_GLint259_0 {
        for _jGLint259 in 0.._a_GLint259_0.values.len() {
    locations[_jGLint259] = (*_a_GLint259_0.values[_jGLint259]).to_i32().unwrap();
        }
    }
    let locations = locations.as_mut_ptr();

    let mut bufferMode: GLenum;
    bufferMode = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::TransformFeedbackVaryingsNV(program, count, locations, bufferMode) };
}

pub fn retrace_glActiveVaryingNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let name: &mut [GLchar];
    name = (call.arg(1)).to_string().unwrap();

//not found in gl!    unsafe { gl::ActiveVaryingNV(program, name) };
}

pub fn retrace_glGetVaryingLocationNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let name: &mut [GLchar];
    name = (call.arg(1)).to_string().unwrap();

//not found in gl!    let _result = unsafe { gl::GetVaryingLocationNV(program, name) };

    let _origResult: GLint;
    _origResult = (*call.ret).to_i32().unwrap();
    self._location_map[program][_origResult] = _result; 
}

pub fn retrace_glTransformFeedbackStreamAttribsNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut count: GLsizei;
    count = (call.arg(0)).to_i32().unwrap();

    let attribs: &mut [GLint];
    attribs = _allocator.alloc_array::<GLint>(&call.arg(1));
    let _a_GLint260_0 = (call.arg(1)).to_array();
    if let Some(_a_GLint260_0) = _a_GLint260_0 {
        for _jGLint260 in 0.._a_GLint260_0.values.len() {
    attribs[_jGLint260] = (*_a_GLint260_0.values[_jGLint260]).to_i32().unwrap();
        }
    }
    let attribs = attribs.as_mut_ptr();

    let mut nbuffers: GLsizei;
    nbuffers = (call.arg(2)).to_i32().unwrap();

    let bufstreams: &mut [GLint];
    bufstreams = _allocator.alloc_array::<GLint>(&call.arg(3));
    let _a_GLint261_0 = (call.arg(3)).to_array();
    if let Some(_a_GLint261_0) = _a_GLint261_0 {
        for _jGLint261 in 0.._a_GLint261_0.values.len() {
    bufstreams[_jGLint261] = (*_a_GLint261_0.values[_jGLint261]).to_i32().unwrap();
        }
    }
    let bufstreams = bufstreams.as_mut_ptr();

    let mut bufferMode: GLenum;
    bufferMode = (call.arg(4)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::TransformFeedbackStreamAttribsNV(count, attribs, nbuffers, bufstreams, bufferMode) };
}

pub fn retrace_glBindTransformFeedbackNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut id: GLuint;
    id = (call.arg(1)).to_u32().unwrap();
    id = self._feedback_map[id];

//not found in gl!    unsafe { gl::BindTransformFeedbackNV(target, id) };
}

pub fn retrace_glDeleteTransformFeedbacksNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut n: GLsizei;
    n = (call.arg(0)).to_i32().unwrap();

    let ids: &mut [GLuint];
    ids = _allocator.alloc_array::<GLuint>(&call.arg(1));
    let _a_GLuint253_0 = (call.arg(1)).to_array();
    if let Some(_a_GLuint253_0) = _a_GLuint253_0 {
        for _jGLuint253 in 0.._a_GLuint253_0.values.len() {
    ids[_jGLuint253] = (*_a_GLuint253_0.values[_jGLuint253]).to_u32().unwrap();
    ids[_jGLuint253] = self._feedback_map[ids[_jGLuint253]];
        }
    }
    let ids = ids.as_mut_ptr();

//not found in gl!    unsafe { gl::DeleteTransformFeedbacksNV(n, ids) };
}

pub fn retrace_glGenTransformFeedbacksNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut n: GLsizei;
    n = (call.arg(0)).to_i32().unwrap();

    let ids: &mut [GLuint];
    ids = _allocator.alloc_array::<GLuint>(&call.arg(1));

//not found in gl!    unsafe { gl::GenTransformFeedbacksNV(n, ids) };
    let _aGLuint255 = (call.arg(1)).to_array();
    if (_aGLuint255) {
        for _jGLuint255 in 0.._aGLuint255.values.len() {
    let _origResult: GLuint;
    _origResult = (_aGLuint255.values[_jGLuint255]).to_u32().unwrap();
    self._feedback_map[_origResult] = ids[_jGLuint255]; 
        }
    }
}

pub fn retrace_glPauseTransformFeedbackNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
//not found in gl!    unsafe { gl::PauseTransformFeedbackNV() };
}

pub fn retrace_glResumeTransformFeedbackNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
//not found in gl!    unsafe { gl::ResumeTransformFeedbackNV() };
}

pub fn retrace_glDrawTransformFeedbackNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut id: GLuint;
    id = (call.arg(1)).to_u32().unwrap();
    id = self._feedback_map[id];

//not found in gl!    unsafe { gl::DrawTransformFeedbackNV(mode, id) };
}

pub fn retrace_glVDPAUInitNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let vdpDevice: &mut [GLc_void];
//FIXME    memset(&vdpDevice, 0, sizeof vdpDevice); 

    let getProcAddress: &mut [GLc_void];
//FIXME    memset(&getProcAddress, 0, sizeof getProcAddress); 

    if (1) {
    }
//not found in gl!    unsafe { gl::VDPAUInitNV(vdpDevice, getProcAddress) };
}

pub fn retrace_glVDPAUFiniNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
//not found in gl!    unsafe { gl::VDPAUFiniNV() };
}

pub fn retrace_glVDPAURegisterVideoSurfaceNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let vdpSurface: &mut [GLc_void];
//FIXME    memset(&vdpSurface, 0, sizeof vdpSurface); 

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut numTextureNames: GLsizei;
    numTextureNames = (call.arg(2)).to_i32().unwrap();

    let textureNames: &mut [GLuint];
    textureNames = _allocator.alloc_array::<GLuint>(&call.arg(3));
    let _a_GLuint256_0 = (call.arg(3)).to_array();
    if let Some(_a_GLuint256_0) = _a_GLuint256_0 {
        for _jGLuint256 in 0.._a_GLuint256_0.values.len() {
    textureNames[_jGLuint256] = (*_a_GLuint256_0.values[_jGLuint256]).to_u32().unwrap();
    textureNames[_jGLuint256] = self._texture_map[textureNames[_jGLuint256]];
        }
    }
    let textureNames = textureNames.as_mut_ptr();

    if (1) {
    }
//not found in gl!    let _result = unsafe { gl::VDPAURegisterVideoSurfaceNV(vdpSurface, target, numTextureNames, textureNames) };

}

pub fn retrace_glVDPAURegisterOutputSurfaceNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let vdpSurface: &mut [GLc_void];
//FIXME    memset(&vdpSurface, 0, sizeof vdpSurface); 

    let mut target: GLenum;
    target = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut numTextureNames: GLsizei;
    numTextureNames = (call.arg(2)).to_i32().unwrap();

    let textureNames: &mut [GLuint];
    textureNames = _allocator.alloc_array::<GLuint>(&call.arg(3));
    let _a_GLuint257_0 = (call.arg(3)).to_array();
    if let Some(_a_GLuint257_0) = _a_GLuint257_0 {
        for _jGLuint257 in 0.._a_GLuint257_0.values.len() {
    textureNames[_jGLuint257] = (*_a_GLuint257_0.values[_jGLuint257]).to_u32().unwrap();
    textureNames[_jGLuint257] = self._texture_map[textureNames[_jGLuint257]];
        }
    }
    let textureNames = textureNames.as_mut_ptr();

    if (1) {
    }
//not found in gl!    let _result = unsafe { gl::VDPAURegisterOutputSurfaceNV(vdpSurface, target, numTextureNames, textureNames) };

}

pub fn retrace_glVDPAUUnregisterSurfaceNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut surface: GLvdpauSurfaceNV;
    surface = (call.arg(0)).to_i32().unwrap();

//not found in gl!    unsafe { gl::VDPAUUnregisterSurfaceNV(surface) };
}

pub fn retrace_glVDPAUGetSurfaceivNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut surface: GLvdpauSurfaceNV;
    surface = (call.arg(0)).to_i32().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut bufSize: GLsizei;
    bufSize = (call.arg(2)).to_i32().unwrap();

    let length: &mut [GLsizei];
    length = _allocator.alloc_array::<GLsizei>(&call.arg(3));

    let values: &mut [GLint];
    values = _allocator.alloc_array::<GLint>(&call.arg(4));

//not found in gl!    unsafe { gl::VDPAUGetSurfaceivNV(surface, pname, bufSize, length, values) };
    let _aPGLsizei37 = (call.arg(3)).to_array();
    if (_aPGLsizei37) {
    }
    let _aGLint263 = (call.arg(4)).to_array();
    if (_aGLint263) {
        for _jGLint263 in 0.._aGLint263.values.len() {
        }
    }
}

pub fn retrace_glVDPAUSurfaceAccessNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut surface: GLvdpauSurfaceNV;
    surface = (call.arg(0)).to_i32().unwrap();

    let mut access: GLenum;
    access = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::VDPAUSurfaceAccessNV(surface, access) };
}

pub fn retrace_glVDPAUMapSurfacesNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut numSurfaces: GLsizei;
    numSurfaces = (call.arg(0)).to_i32().unwrap();

    let surfaces: &mut [GLvdpauSurfaceNV];
    surfaces = _allocator.alloc_array::<GLvdpauSurfaceNV>(&call.arg(1));
    let _a_GLvdpauSurfaceNV1_0 = (call.arg(1)).to_array();
    if let Some(_a_GLvdpauSurfaceNV1_0) = _a_GLvdpauSurfaceNV1_0 {
        for _jGLvdpauSurfaceNV1 in 0.._a_GLvdpauSurfaceNV1_0.values.len() {
    surfaces[_jGLvdpauSurfaceNV1] = (*_a_GLvdpauSurfaceNV1_0.values[_jGLvdpauSurfaceNV1]).to_i32().unwrap();
        }
    }
    let surfaces = surfaces.as_mut_ptr();

//not found in gl!    unsafe { gl::VDPAUMapSurfacesNV(numSurfaces, surfaces) };
}

pub fn retrace_glVDPAUUnmapSurfacesNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut numSurface: GLsizei;
    numSurface = (call.arg(0)).to_i32().unwrap();

    let surfaces: &mut [GLvdpauSurfaceNV];
    surfaces = _allocator.alloc_array::<GLvdpauSurfaceNV>(&call.arg(1));
    let _a_GLvdpauSurfaceNV2_0 = (call.arg(1)).to_array();
    if let Some(_a_GLvdpauSurfaceNV2_0) = _a_GLvdpauSurfaceNV2_0 {
        for _jGLvdpauSurfaceNV2 in 0.._a_GLvdpauSurfaceNV2_0.values.len() {
    surfaces[_jGLvdpauSurfaceNV2] = (*_a_GLvdpauSurfaceNV2_0.values[_jGLvdpauSurfaceNV2]).to_i32().unwrap();
        }
    }
    let surfaces = surfaces.as_mut_ptr();

//not found in gl!    unsafe { gl::VDPAUUnmapSurfacesNV(numSurface, surfaces) };
}

pub fn retrace_glFlushVertexArrayRangeNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
//not found in gl!    unsafe { gl::FlushVertexArrayRangeNV() };
}

pub fn retrace_glVertexArrayRangeNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut length: GLsizei;
    length = (call.arg(0)).to_i32().unwrap();

    let pointer: &mut [GLc_void];
//FIXME    memset(&pointer, 0, sizeof pointer); 

    if (1) {
    }
//not found in gl!    unsafe { gl::VertexArrayRangeNV(length, pointer) };
}

pub fn retrace_glVertexAttribL1i64NV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut x: GLint64EXT;
    x = (call.arg(1)).to_i32().unwrap();

//not found in gl!    unsafe { gl::VertexAttribL1i64NV(index, x) };
}

pub fn retrace_glVertexAttribL2i64NV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut x: GLint64EXT;
    x = (call.arg(1)).to_i32().unwrap();

    let mut y: GLint64EXT;
    y = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::VertexAttribL2i64NV(index, x, y) };
}

pub fn retrace_glVertexAttribL3i64NV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut x: GLint64EXT;
    x = (call.arg(1)).to_i32().unwrap();

    let mut y: GLint64EXT;
    y = (call.arg(2)).to_i32().unwrap();

    let mut z: GLint64EXT;
    z = (call.arg(3)).to_i32().unwrap();

//not found in gl!    unsafe { gl::VertexAttribL3i64NV(index, x, y, z) };
}

pub fn retrace_glVertexAttribL4i64NV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut x: GLint64EXT;
    x = (call.arg(1)).to_i32().unwrap();

    let mut y: GLint64EXT;
    y = (call.arg(2)).to_i32().unwrap();

    let mut z: GLint64EXT;
    z = (call.arg(3)).to_i32().unwrap();

    let mut w: GLint64EXT;
    w = (call.arg(4)).to_i32().unwrap();

//not found in gl!    unsafe { gl::VertexAttribL4i64NV(index, x, y, z, w) };
}

pub fn retrace_glVertexAttribL1i64vNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLint64EXT];
    v = _allocator.alloc_array::<GLint64EXT>(&call.arg(1));
    let _a_PGLint64EXT_0 = (call.arg(1)).to_array().unwrap();
    v[0] = (_a_PGLint64EXT_0.values[0]).to_i32().unwrap();

//not found in gl!    unsafe { gl::VertexAttribL1i64vNV(index, v) };
}

pub fn retrace_glVertexAttribL2i64vNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLint64EXT];
    v = _allocator.alloc_array::<GLint64EXT>(&call.arg(1));
    let _a_GLint64EXT12_0 = (call.arg(1)).to_array();
    if let Some(_a_GLint64EXT12_0) = _a_GLint64EXT12_0 {
        for _jGLint64EXT12 in 0.._a_GLint64EXT12_0.values.len() {
    v[_jGLint64EXT12] = (*_a_GLint64EXT12_0.values[_jGLint64EXT12]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::VertexAttribL2i64vNV(index, v) };
}

pub fn retrace_glVertexAttribL3i64vNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLint64EXT];
    v = _allocator.alloc_array::<GLint64EXT>(&call.arg(1));
    let _a_GLint64EXT13_0 = (call.arg(1)).to_array();
    if let Some(_a_GLint64EXT13_0) = _a_GLint64EXT13_0 {
        for _jGLint64EXT13 in 0.._a_GLint64EXT13_0.values.len() {
    v[_jGLint64EXT13] = (*_a_GLint64EXT13_0.values[_jGLint64EXT13]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::VertexAttribL3i64vNV(index, v) };
}

pub fn retrace_glVertexAttribL4i64vNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLint64EXT];
    v = _allocator.alloc_array::<GLint64EXT>(&call.arg(1));
    let _a_GLint64EXT14_0 = (call.arg(1)).to_array();
    if let Some(_a_GLint64EXT14_0) = _a_GLint64EXT14_0 {
        for _jGLint64EXT14 in 0.._a_GLint64EXT14_0.values.len() {
    v[_jGLint64EXT14] = (*_a_GLint64EXT14_0.values[_jGLint64EXT14]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::VertexAttribL4i64vNV(index, v) };
}

pub fn retrace_glVertexAttribL1ui64NV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut x: GLuint64EXT;
    x = (call.arg(1)).to_u32().unwrap();

//not found in gl!    unsafe { gl::VertexAttribL1ui64NV(index, x) };
}

pub fn retrace_glVertexAttribL2ui64NV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut x: GLuint64EXT;
    x = (call.arg(1)).to_u32().unwrap();

    let mut y: GLuint64EXT;
    y = (call.arg(2)).to_u32().unwrap();

//not found in gl!    unsafe { gl::VertexAttribL2ui64NV(index, x, y) };
}

pub fn retrace_glVertexAttribL3ui64NV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut x: GLuint64EXT;
    x = (call.arg(1)).to_u32().unwrap();

    let mut y: GLuint64EXT;
    y = (call.arg(2)).to_u32().unwrap();

    let mut z: GLuint64EXT;
    z = (call.arg(3)).to_u32().unwrap();

//not found in gl!    unsafe { gl::VertexAttribL3ui64NV(index, x, y, z) };
}

pub fn retrace_glVertexAttribL4ui64NV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut x: GLuint64EXT;
    x = (call.arg(1)).to_u32().unwrap();

    let mut y: GLuint64EXT;
    y = (call.arg(2)).to_u32().unwrap();

    let mut z: GLuint64EXT;
    z = (call.arg(3)).to_u32().unwrap();

    let mut w: GLuint64EXT;
    w = (call.arg(4)).to_u32().unwrap();

//not found in gl!    unsafe { gl::VertexAttribL4ui64NV(index, x, y, z, w) };
}

pub fn retrace_glVertexAttribL1ui64vNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLuint64EXT];
    v = _allocator.alloc_array::<GLuint64EXT>(&call.arg(1));
    let _a_PGLuint64EXT1_0 = (call.arg(1)).to_array().unwrap();
    v[0] = (_a_PGLuint64EXT1_0.values[0]).to_u32().unwrap();

//not found in gl!    unsafe { gl::VertexAttribL1ui64vNV(index, v) };
}

pub fn retrace_glVertexAttribL2ui64vNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLuint64EXT];
    v = _allocator.alloc_array::<GLuint64EXT>(&call.arg(1));
    let _a_GLuint64EXT18_0 = (call.arg(1)).to_array();
    if let Some(_a_GLuint64EXT18_0) = _a_GLuint64EXT18_0 {
        for _jGLuint64EXT18 in 0.._a_GLuint64EXT18_0.values.len() {
    v[_jGLuint64EXT18] = (*_a_GLuint64EXT18_0.values[_jGLuint64EXT18]).to_u32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::VertexAttribL2ui64vNV(index, v) };
}

pub fn retrace_glVertexAttribL3ui64vNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLuint64EXT];
    v = _allocator.alloc_array::<GLuint64EXT>(&call.arg(1));
    let _a_GLuint64EXT19_0 = (call.arg(1)).to_array();
    if let Some(_a_GLuint64EXT19_0) = _a_GLuint64EXT19_0 {
        for _jGLuint64EXT19 in 0.._a_GLuint64EXT19_0.values.len() {
    v[_jGLuint64EXT19] = (*_a_GLuint64EXT19_0.values[_jGLuint64EXT19]).to_u32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::VertexAttribL3ui64vNV(index, v) };
}

pub fn retrace_glVertexAttribL4ui64vNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLuint64EXT];
    v = _allocator.alloc_array::<GLuint64EXT>(&call.arg(1));
    let _a_GLuint64EXT20_0 = (call.arg(1)).to_array();
    if let Some(_a_GLuint64EXT20_0) = _a_GLuint64EXT20_0 {
        for _jGLuint64EXT20 in 0.._a_GLuint64EXT20_0.values.len() {
    v[_jGLuint64EXT20] = (*_a_GLuint64EXT20_0.values[_jGLuint64EXT20]).to_u32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::VertexAttribL4ui64vNV(index, v) };
}

pub fn retrace_glVertexAttribLFormatNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut size: GLint;
    size = (call.arg(1)).to_i32().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut stride: GLsizei;
    stride = (call.arg(3)).to_i32().unwrap();

//not found in gl!    unsafe { gl::VertexAttribLFormatNV(index, size, _type, stride) };
}

pub fn retrace_glBufferAddressRangeNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut pname: GLenum;
    pname = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut index: GLuint;
    index = (call.arg(1)).to_u32().unwrap();

    let mut address: GLuint64EXT;
    address = (call.arg(2)).to_u32().unwrap();

    let mut length: GLsizeiptr;
    length = (call.arg(3)).to_i32().unwrap();

//not found in gl!    unsafe { gl::BufferAddressRangeNV(pname, index, address, length) };
}

pub fn retrace_glVertexFormatNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut size: GLint;
    size = (call.arg(0)).to_i32().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut stride: GLsizei;
    stride = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::VertexFormatNV(size, _type, stride) };
}

pub fn retrace_glNormalFormatNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut _type: GLenum;
    _type = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut stride: GLsizei;
    stride = (call.arg(1)).to_i32().unwrap();

//not found in gl!    unsafe { gl::NormalFormatNV(_type, stride) };
}

pub fn retrace_glColorFormatNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut size: GLint;
    size = (call.arg(0)).to_i32().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut stride: GLsizei;
    stride = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::ColorFormatNV(size, _type, stride) };
}

pub fn retrace_glIndexFormatNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut _type: GLenum;
    _type = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut stride: GLsizei;
    stride = (call.arg(1)).to_i32().unwrap();

//not found in gl!    unsafe { gl::IndexFormatNV(_type, stride) };
}

pub fn retrace_glTexCoordFormatNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut size: GLint;
    size = (call.arg(0)).to_i32().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut stride: GLsizei;
    stride = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::TexCoordFormatNV(size, _type, stride) };
}

pub fn retrace_glEdgeFlagFormatNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut stride: GLsizei;
    stride = (call.arg(0)).to_i32().unwrap();

//not found in gl!    unsafe { gl::EdgeFlagFormatNV(stride) };
}

pub fn retrace_glSecondaryColorFormatNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut size: GLint;
    size = (call.arg(0)).to_i32().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut stride: GLsizei;
    stride = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::SecondaryColorFormatNV(size, _type, stride) };
}

pub fn retrace_glFogCoordFormatNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut _type: GLenum;
    _type = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut stride: GLsizei;
    stride = (call.arg(1)).to_i32().unwrap();

//not found in gl!    unsafe { gl::FogCoordFormatNV(_type, stride) };
}

pub fn retrace_glVertexAttribFormatNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut size: GLint;
    size = (call.arg(1)).to_i32().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut normalized: GLboolean;
    normalized = (call.arg(3)).to_u32().unwrap() as u8;

    let mut stride: GLsizei;
    stride = (call.arg(4)).to_i32().unwrap();

//not found in gl!    unsafe { gl::VertexAttribFormatNV(index, size, _type, normalized, stride) };
}

pub fn retrace_glVertexAttribIFormatNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut size: GLint;
    size = (call.arg(1)).to_i32().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut stride: GLsizei;
    stride = (call.arg(3)).to_i32().unwrap();

//not found in gl!    unsafe { gl::VertexAttribIFormatNV(index, size, _type, stride) };
}

pub fn retrace_glBindProgramNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut program: GLuint;
    program = (call.arg(1)).to_u32().unwrap();
    program = self._programARB_map[program];

//not found in gl!    unsafe { gl::BindProgramNV(target, program) };
}

pub fn retrace_glDeleteProgramsNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut n: GLsizei;
    n = (call.arg(0)).to_i32().unwrap();

    let programs: &mut [GLuint];
    programs = _allocator.alloc_array::<GLuint>(&call.arg(1));
    let _a_GLuint258_0 = (call.arg(1)).to_array();
    if let Some(_a_GLuint258_0) = _a_GLuint258_0 {
        for _jGLuint258 in 0.._a_GLuint258_0.values.len() {
    programs[_jGLuint258] = (*_a_GLuint258_0.values[_jGLuint258]).to_u32().unwrap();
    programs[_jGLuint258] = self._programARB_map[programs[_jGLuint258]];
        }
    }
    let programs = programs.as_mut_ptr();

//not found in gl!    unsafe { gl::DeleteProgramsNV(n, programs) };
}

pub fn retrace_glExecuteProgramNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut id: GLuint;
    id = (call.arg(1)).to_u32().unwrap();
    id = self._programARB_map[id];

    let params: &mut [GLfloat];
    params = _allocator.alloc_array::<GLfloat>(&call.arg(2));
    let _a_GLfloat259_0 = (call.arg(2)).to_array();
    if let Some(_a_GLfloat259_0) = _a_GLfloat259_0 {
        for _jGLfloat259 in 0.._a_GLfloat259_0.values.len() {
    params[_jGLfloat259] = (*_a_GLfloat259_0.values[_jGLfloat259]).to_f32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::ExecuteProgramNV(target, id, params) };
}

pub fn retrace_glGenProgramsNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut n: GLsizei;
    n = (call.arg(0)).to_i32().unwrap();

    let programs: &mut [GLuint];
    programs = _allocator.alloc_array::<GLuint>(&call.arg(1));

//not found in gl!    unsafe { gl::GenProgramsNV(n, programs) };
    let _aGLuint260 = (call.arg(1)).to_array();
    if (_aGLuint260) {
        for _jGLuint260 in 0.._aGLuint260.values.len() {
    let _origResult: GLuint;
    _origResult = (_aGLuint260.values[_jGLuint260]).to_u32().unwrap();
    self._programARB_map[_origResult] = programs[_jGLuint260]; 
        }
    }
}

pub fn retrace_glLoadProgramNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut id: GLuint;
    id = (call.arg(1)).to_u32().unwrap();
    id = self._programARB_map[id];

    let mut len: GLsizei;
    len = (call.arg(2)).to_i32().unwrap();

    let program: &mut [GLubyte];
    program = (call.arg(3)).to_string().unwrap();

//not found in gl!    unsafe { gl::LoadProgramNV(target, id, len, program) };
        let error_position: GLint = -1;
//not found in gl!        unsafe { gl::GetIntegerv(gl::PIXEL_PACK_BUFFER_BINDING, &error_position) };
        if error_position != -1 {
//not found in gl!            let error_string = unsafe { gl::GetString(gl::PROGRAM_ERROR_STRING_ARB) };
            println!("error in position {}: {}", error_position, error_string);
        }
}

pub fn retrace_glProgramParameter4dNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut index: GLuint;
    index = (call.arg(1)).to_u32().unwrap();

    let mut x: GLdouble;
    x = (call.arg(2)).to_f64().unwrap();

    let mut y: GLdouble;
    y = (call.arg(3)).to_f64().unwrap();

    let mut z: GLdouble;
    z = (call.arg(4)).to_f64().unwrap();

    let mut w: GLdouble;
    w = (call.arg(5)).to_f64().unwrap();

//not found in gl!    unsafe { gl::ProgramParameter4dNV(target, index, x, y, z, w) };
}

pub fn retrace_glProgramParameter4dvNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut index: GLuint;
    index = (call.arg(1)).to_u32().unwrap();

    let v: &mut [GLdouble];
    v = _allocator.alloc_array::<GLdouble>(&call.arg(2));
    let _a_GLdouble134_0 = (call.arg(2)).to_array();
    if let Some(_a_GLdouble134_0) = _a_GLdouble134_0 {
        for _jGLdouble134 in 0.._a_GLdouble134_0.values.len() {
    v[_jGLdouble134] = (*_a_GLdouble134_0.values[_jGLdouble134]).to_f64().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::ProgramParameter4dvNV(target, index, v) };
}

pub fn retrace_glProgramParameter4fNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut index: GLuint;
    index = (call.arg(1)).to_u32().unwrap();

    let mut x: GLfloat;
    x = (call.arg(2)).to_f32().unwrap();

    let mut y: GLfloat;
    y = (call.arg(3)).to_f32().unwrap();

    let mut z: GLfloat;
    z = (call.arg(4)).to_f32().unwrap();

    let mut w: GLfloat;
    w = (call.arg(5)).to_f32().unwrap();

//not found in gl!    unsafe { gl::ProgramParameter4fNV(target, index, x, y, z, w) };
}

pub fn retrace_glProgramParameter4fvNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut index: GLuint;
    index = (call.arg(1)).to_u32().unwrap();

    let v: &mut [GLfloat];
    v = _allocator.alloc_array::<GLfloat>(&call.arg(2));
    let _a_GLfloat260_0 = (call.arg(2)).to_array();
    if let Some(_a_GLfloat260_0) = _a_GLfloat260_0 {
        for _jGLfloat260 in 0.._a_GLfloat260_0.values.len() {
    v[_jGLfloat260] = (*_a_GLfloat260_0.values[_jGLfloat260]).to_f32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::ProgramParameter4fvNV(target, index, v) };
}

pub fn retrace_glProgramParameters4dvNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut index: GLuint;
    index = (call.arg(1)).to_u32().unwrap();

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let v: &mut [GLdouble];
    v = _allocator.alloc_array::<GLdouble>(&call.arg(3));
    let _a_GLdouble135_0 = (call.arg(3)).to_array();
    if let Some(_a_GLdouble135_0) = _a_GLdouble135_0 {
        for _jGLdouble135 in 0.._a_GLdouble135_0.values.len() {
    v[_jGLdouble135] = (*_a_GLdouble135_0.values[_jGLdouble135]).to_f64().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::ProgramParameters4dvNV(target, index, count, v) };
}

pub fn retrace_glProgramParameters4fvNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut index: GLuint;
    index = (call.arg(1)).to_u32().unwrap();

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let v: &mut [GLfloat];
    v = _allocator.alloc_array::<GLfloat>(&call.arg(3));
    let _a_GLfloat261_0 = (call.arg(3)).to_array();
    if let Some(_a_GLfloat261_0) = _a_GLfloat261_0 {
        for _jGLfloat261 in 0.._a_GLfloat261_0.values.len() {
    v[_jGLfloat261] = (*_a_GLfloat261_0.values[_jGLfloat261]).to_f32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::ProgramParameters4fvNV(target, index, count, v) };
}

pub fn retrace_glRequestResidentProgramsNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut n: GLsizei;
    n = (call.arg(0)).to_i32().unwrap();

    let programs: &mut [GLuint];
    programs = _allocator.alloc_array::<GLuint>(&call.arg(1));
    let _a_GLuint261_0 = (call.arg(1)).to_array();
    if let Some(_a_GLuint261_0) = _a_GLuint261_0 {
        for _jGLuint261 in 0.._a_GLuint261_0.values.len() {
    programs[_jGLuint261] = (*_a_GLuint261_0.values[_jGLuint261]).to_u32().unwrap();
    programs[_jGLuint261] = self._programARB_map[programs[_jGLuint261]];
        }
    }
    let programs = programs.as_mut_ptr();

//not found in gl!    unsafe { gl::RequestResidentProgramsNV(n, programs) };
}

pub fn retrace_glTrackMatrixNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut address: GLuint;
    address = (call.arg(1)).to_u32().unwrap();

    let mut matrix: GLenum;
    matrix = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut transform: GLenum;
    transform = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::TrackMatrixNV(target, address, matrix, transform) };
}

pub fn retrace_glVertexAttribPointerNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut size: GLint;
    size = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut stride: GLsizei;
    stride = (call.arg(3)).to_i32().unwrap();

    let pointer: &mut [GLc_void];
    pointer = region::to_pointer(call.arg(4), true);

//not found in gl!    unsafe { gl::VertexAttribPointerNV(index, size, _type, stride, pointer) };
}

pub fn retrace_glVertexAttrib1dNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut x: GLdouble;
    x = (call.arg(1)).to_f64().unwrap();

//not found in gl!    unsafe { gl::VertexAttrib1dNV(index, x) };
}

pub fn retrace_glVertexAttrib1dvNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLdouble];
    v = _allocator.alloc_array::<GLdouble>(&call.arg(1));
    let _a_PGLdouble13_0 = (call.arg(1)).to_array().unwrap();
    v[0] = (_a_PGLdouble13_0.values[0]).to_f64().unwrap();

//not found in gl!    unsafe { gl::VertexAttrib1dvNV(index, v) };
}

pub fn retrace_glVertexAttrib1fNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut x: GLfloat;
    x = (call.arg(1)).to_f32().unwrap();

//not found in gl!    unsafe { gl::VertexAttrib1fNV(index, x) };
}

pub fn retrace_glVertexAttrib1fvNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLfloat];
    v = _allocator.alloc_array::<GLfloat>(&call.arg(1));
    let _a_PGLfloat22_0 = (call.arg(1)).to_array().unwrap();
    v[0] = (_a_PGLfloat22_0.values[0]).to_f32().unwrap();

//not found in gl!    unsafe { gl::VertexAttrib1fvNV(index, v) };
}

pub fn retrace_glVertexAttrib1sNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut x: GLshort;
    x = (call.arg(1)).to_i32().unwrap();

//not found in gl!    unsafe { gl::VertexAttrib1sNV(index, x) };
}

pub fn retrace_glVertexAttrib1svNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLshort];
    v = _allocator.alloc_array::<GLshort>(&call.arg(1));
    let _a_PGLshort7_0 = (call.arg(1)).to_array().unwrap();
    v[0] = (_a_PGLshort7_0.values[0]).to_i32().unwrap();

//not found in gl!    unsafe { gl::VertexAttrib1svNV(index, v) };
}

pub fn retrace_glVertexAttrib2dNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut x: GLdouble;
    x = (call.arg(1)).to_f64().unwrap();

    let mut y: GLdouble;
    y = (call.arg(2)).to_f64().unwrap();

//not found in gl!    unsafe { gl::VertexAttrib2dNV(index, x, y) };
}

pub fn retrace_glVertexAttrib2dvNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLdouble];
    v = _allocator.alloc_array::<GLdouble>(&call.arg(1));
    let _a_GLdouble136_0 = (call.arg(1)).to_array();
    if let Some(_a_GLdouble136_0) = _a_GLdouble136_0 {
        for _jGLdouble136 in 0.._a_GLdouble136_0.values.len() {
    v[_jGLdouble136] = (*_a_GLdouble136_0.values[_jGLdouble136]).to_f64().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::VertexAttrib2dvNV(index, v) };
}

pub fn retrace_glVertexAttrib2fNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut x: GLfloat;
    x = (call.arg(1)).to_f32().unwrap();

    let mut y: GLfloat;
    y = (call.arg(2)).to_f32().unwrap();

//not found in gl!    unsafe { gl::VertexAttrib2fNV(index, x, y) };
}

pub fn retrace_glVertexAttrib2fvNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLfloat];
    v = _allocator.alloc_array::<GLfloat>(&call.arg(1));
    let _a_GLfloat262_0 = (call.arg(1)).to_array();
    if let Some(_a_GLfloat262_0) = _a_GLfloat262_0 {
        for _jGLfloat262 in 0.._a_GLfloat262_0.values.len() {
    v[_jGLfloat262] = (*_a_GLfloat262_0.values[_jGLfloat262]).to_f32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::VertexAttrib2fvNV(index, v) };
}

pub fn retrace_glVertexAttrib2sNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut x: GLshort;
    x = (call.arg(1)).to_i32().unwrap();

    let mut y: GLshort;
    y = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::VertexAttrib2sNV(index, x, y) };
}

pub fn retrace_glVertexAttrib2svNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLshort];
    v = _allocator.alloc_array::<GLshort>(&call.arg(1));
    let _a_GLshort46_0 = (call.arg(1)).to_array();
    if let Some(_a_GLshort46_0) = _a_GLshort46_0 {
        for _jGLshort46 in 0.._a_GLshort46_0.values.len() {
    v[_jGLshort46] = (*_a_GLshort46_0.values[_jGLshort46]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::VertexAttrib2svNV(index, v) };
}

pub fn retrace_glVertexAttrib3dNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut x: GLdouble;
    x = (call.arg(1)).to_f64().unwrap();

    let mut y: GLdouble;
    y = (call.arg(2)).to_f64().unwrap();

    let mut z: GLdouble;
    z = (call.arg(3)).to_f64().unwrap();

//not found in gl!    unsafe { gl::VertexAttrib3dNV(index, x, y, z) };
}

pub fn retrace_glVertexAttrib3dvNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLdouble];
    v = _allocator.alloc_array::<GLdouble>(&call.arg(1));
    let _a_GLdouble137_0 = (call.arg(1)).to_array();
    if let Some(_a_GLdouble137_0) = _a_GLdouble137_0 {
        for _jGLdouble137 in 0.._a_GLdouble137_0.values.len() {
    v[_jGLdouble137] = (*_a_GLdouble137_0.values[_jGLdouble137]).to_f64().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::VertexAttrib3dvNV(index, v) };
}

pub fn retrace_glVertexAttrib3fNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut x: GLfloat;
    x = (call.arg(1)).to_f32().unwrap();

    let mut y: GLfloat;
    y = (call.arg(2)).to_f32().unwrap();

    let mut z: GLfloat;
    z = (call.arg(3)).to_f32().unwrap();

//not found in gl!    unsafe { gl::VertexAttrib3fNV(index, x, y, z) };
}

pub fn retrace_glVertexAttrib3fvNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLfloat];
    v = _allocator.alloc_array::<GLfloat>(&call.arg(1));
    let _a_GLfloat263_0 = (call.arg(1)).to_array();
    if let Some(_a_GLfloat263_0) = _a_GLfloat263_0 {
        for _jGLfloat263 in 0.._a_GLfloat263_0.values.len() {
    v[_jGLfloat263] = (*_a_GLfloat263_0.values[_jGLfloat263]).to_f32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::VertexAttrib3fvNV(index, v) };
}

pub fn retrace_glVertexAttrib3sNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut x: GLshort;
    x = (call.arg(1)).to_i32().unwrap();

    let mut y: GLshort;
    y = (call.arg(2)).to_i32().unwrap();

    let mut z: GLshort;
    z = (call.arg(3)).to_i32().unwrap();

//not found in gl!    unsafe { gl::VertexAttrib3sNV(index, x, y, z) };
}

pub fn retrace_glVertexAttrib3svNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLshort];
    v = _allocator.alloc_array::<GLshort>(&call.arg(1));
    let _a_GLshort47_0 = (call.arg(1)).to_array();
    if let Some(_a_GLshort47_0) = _a_GLshort47_0 {
        for _jGLshort47 in 0.._a_GLshort47_0.values.len() {
    v[_jGLshort47] = (*_a_GLshort47_0.values[_jGLshort47]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::VertexAttrib3svNV(index, v) };
}

pub fn retrace_glVertexAttrib4dNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut x: GLdouble;
    x = (call.arg(1)).to_f64().unwrap();

    let mut y: GLdouble;
    y = (call.arg(2)).to_f64().unwrap();

    let mut z: GLdouble;
    z = (call.arg(3)).to_f64().unwrap();

    let mut w: GLdouble;
    w = (call.arg(4)).to_f64().unwrap();

//not found in gl!    unsafe { gl::VertexAttrib4dNV(index, x, y, z, w) };
}

pub fn retrace_glVertexAttrib4dvNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLdouble];
    v = _allocator.alloc_array::<GLdouble>(&call.arg(1));
    let _a_GLdouble138_0 = (call.arg(1)).to_array();
    if let Some(_a_GLdouble138_0) = _a_GLdouble138_0 {
        for _jGLdouble138 in 0.._a_GLdouble138_0.values.len() {
    v[_jGLdouble138] = (*_a_GLdouble138_0.values[_jGLdouble138]).to_f64().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::VertexAttrib4dvNV(index, v) };
}

pub fn retrace_glVertexAttrib4fNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut x: GLfloat;
    x = (call.arg(1)).to_f32().unwrap();

    let mut y: GLfloat;
    y = (call.arg(2)).to_f32().unwrap();

    let mut z: GLfloat;
    z = (call.arg(3)).to_f32().unwrap();

    let mut w: GLfloat;
    w = (call.arg(4)).to_f32().unwrap();

//not found in gl!    unsafe { gl::VertexAttrib4fNV(index, x, y, z, w) };
}

pub fn retrace_glVertexAttrib4fvNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLfloat];
    v = _allocator.alloc_array::<GLfloat>(&call.arg(1));
    let _a_GLfloat264_0 = (call.arg(1)).to_array();
    if let Some(_a_GLfloat264_0) = _a_GLfloat264_0 {
        for _jGLfloat264 in 0.._a_GLfloat264_0.values.len() {
    v[_jGLfloat264] = (*_a_GLfloat264_0.values[_jGLfloat264]).to_f32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::VertexAttrib4fvNV(index, v) };
}

pub fn retrace_glVertexAttrib4sNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut x: GLshort;
    x = (call.arg(1)).to_i32().unwrap();

    let mut y: GLshort;
    y = (call.arg(2)).to_i32().unwrap();

    let mut z: GLshort;
    z = (call.arg(3)).to_i32().unwrap();

    let mut w: GLshort;
    w = (call.arg(4)).to_i32().unwrap();

//not found in gl!    unsafe { gl::VertexAttrib4sNV(index, x, y, z, w) };
}

pub fn retrace_glVertexAttrib4svNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLshort];
    v = _allocator.alloc_array::<GLshort>(&call.arg(1));
    let _a_GLshort48_0 = (call.arg(1)).to_array();
    if let Some(_a_GLshort48_0) = _a_GLshort48_0 {
        for _jGLshort48 in 0.._a_GLshort48_0.values.len() {
    v[_jGLshort48] = (*_a_GLshort48_0.values[_jGLshort48]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::VertexAttrib4svNV(index, v) };
}

pub fn retrace_glVertexAttrib4ubNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut x: GLubyte;
    x = (call.arg(1)).to_u32().unwrap();

    let mut y: GLubyte;
    y = (call.arg(2)).to_u32().unwrap();

    let mut z: GLubyte;
    z = (call.arg(3)).to_u32().unwrap();

    let mut w: GLubyte;
    w = (call.arg(4)).to_u32().unwrap();

//not found in gl!    unsafe { gl::VertexAttrib4ubNV(index, x, y, z, w) };
}

pub fn retrace_glVertexAttrib4ubvNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLubyte];
    v = _allocator.alloc_array::<GLubyte>(&call.arg(1));
    let _a_GLubyte22_0 = (call.arg(1)).to_array();
    if let Some(_a_GLubyte22_0) = _a_GLubyte22_0 {
        for _jGLubyte22 in 0.._a_GLubyte22_0.values.len() {
    v[_jGLubyte22] = (*_a_GLubyte22_0.values[_jGLubyte22]).to_u32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::VertexAttrib4ubvNV(index, v) };
}

pub fn retrace_glVertexAttribs1dvNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let v: &mut [GLdouble];
    v = _allocator.alloc_array::<GLdouble>(&call.arg(2));
    let _a_GLdouble139_0 = (call.arg(2)).to_array();
    if let Some(_a_GLdouble139_0) = _a_GLdouble139_0 {
        for _jGLdouble139 in 0.._a_GLdouble139_0.values.len() {
    v[_jGLdouble139] = (*_a_GLdouble139_0.values[_jGLdouble139]).to_f64().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::VertexAttribs1dvNV(index, count, v) };
}

pub fn retrace_glVertexAttribs1fvNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let v: &mut [GLfloat];
    v = _allocator.alloc_array::<GLfloat>(&call.arg(2));
    let _a_GLfloat265_0 = (call.arg(2)).to_array();
    if let Some(_a_GLfloat265_0) = _a_GLfloat265_0 {
        for _jGLfloat265 in 0.._a_GLfloat265_0.values.len() {
    v[_jGLfloat265] = (*_a_GLfloat265_0.values[_jGLfloat265]).to_f32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::VertexAttribs1fvNV(index, count, v) };
}

pub fn retrace_glVertexAttribs1svNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let v: &mut [GLshort];
    v = _allocator.alloc_array::<GLshort>(&call.arg(2));
    let _a_GLshort49_0 = (call.arg(2)).to_array();
    if let Some(_a_GLshort49_0) = _a_GLshort49_0 {
        for _jGLshort49 in 0.._a_GLshort49_0.values.len() {
    v[_jGLshort49] = (*_a_GLshort49_0.values[_jGLshort49]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::VertexAttribs1svNV(index, count, v) };
}

pub fn retrace_glVertexAttribs2dvNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let v: &mut [GLdouble];
    v = _allocator.alloc_array::<GLdouble>(&call.arg(2));
    let _a_GLdouble140_0 = (call.arg(2)).to_array();
    if let Some(_a_GLdouble140_0) = _a_GLdouble140_0 {
        for _jGLdouble140 in 0.._a_GLdouble140_0.values.len() {
    v[_jGLdouble140] = (*_a_GLdouble140_0.values[_jGLdouble140]).to_f64().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::VertexAttribs2dvNV(index, count, v) };
}

pub fn retrace_glVertexAttribs2fvNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let v: &mut [GLfloat];
    v = _allocator.alloc_array::<GLfloat>(&call.arg(2));
    let _a_GLfloat266_0 = (call.arg(2)).to_array();
    if let Some(_a_GLfloat266_0) = _a_GLfloat266_0 {
        for _jGLfloat266 in 0.._a_GLfloat266_0.values.len() {
    v[_jGLfloat266] = (*_a_GLfloat266_0.values[_jGLfloat266]).to_f32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::VertexAttribs2fvNV(index, count, v) };
}

pub fn retrace_glVertexAttribs2svNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let v: &mut [GLshort];
    v = _allocator.alloc_array::<GLshort>(&call.arg(2));
    let _a_GLshort50_0 = (call.arg(2)).to_array();
    if let Some(_a_GLshort50_0) = _a_GLshort50_0 {
        for _jGLshort50 in 0.._a_GLshort50_0.values.len() {
    v[_jGLshort50] = (*_a_GLshort50_0.values[_jGLshort50]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::VertexAttribs2svNV(index, count, v) };
}

pub fn retrace_glVertexAttribs3dvNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let v: &mut [GLdouble];
    v = _allocator.alloc_array::<GLdouble>(&call.arg(2));
    let _a_GLdouble141_0 = (call.arg(2)).to_array();
    if let Some(_a_GLdouble141_0) = _a_GLdouble141_0 {
        for _jGLdouble141 in 0.._a_GLdouble141_0.values.len() {
    v[_jGLdouble141] = (*_a_GLdouble141_0.values[_jGLdouble141]).to_f64().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::VertexAttribs3dvNV(index, count, v) };
}

pub fn retrace_glVertexAttribs3fvNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let v: &mut [GLfloat];
    v = _allocator.alloc_array::<GLfloat>(&call.arg(2));
    let _a_GLfloat267_0 = (call.arg(2)).to_array();
    if let Some(_a_GLfloat267_0) = _a_GLfloat267_0 {
        for _jGLfloat267 in 0.._a_GLfloat267_0.values.len() {
    v[_jGLfloat267] = (*_a_GLfloat267_0.values[_jGLfloat267]).to_f32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::VertexAttribs3fvNV(index, count, v) };
}

pub fn retrace_glVertexAttribs3svNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let v: &mut [GLshort];
    v = _allocator.alloc_array::<GLshort>(&call.arg(2));
    let _a_GLshort51_0 = (call.arg(2)).to_array();
    if let Some(_a_GLshort51_0) = _a_GLshort51_0 {
        for _jGLshort51 in 0.._a_GLshort51_0.values.len() {
    v[_jGLshort51] = (*_a_GLshort51_0.values[_jGLshort51]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::VertexAttribs3svNV(index, count, v) };
}

pub fn retrace_glVertexAttribs4dvNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let v: &mut [GLdouble];
    v = _allocator.alloc_array::<GLdouble>(&call.arg(2));
    let _a_GLdouble142_0 = (call.arg(2)).to_array();
    if let Some(_a_GLdouble142_0) = _a_GLdouble142_0 {
        for _jGLdouble142 in 0.._a_GLdouble142_0.values.len() {
    v[_jGLdouble142] = (*_a_GLdouble142_0.values[_jGLdouble142]).to_f64().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::VertexAttribs4dvNV(index, count, v) };
}

pub fn retrace_glVertexAttribs4fvNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let v: &mut [GLfloat];
    v = _allocator.alloc_array::<GLfloat>(&call.arg(2));
    let _a_GLfloat268_0 = (call.arg(2)).to_array();
    if let Some(_a_GLfloat268_0) = _a_GLfloat268_0 {
        for _jGLfloat268 in 0.._a_GLfloat268_0.values.len() {
    v[_jGLfloat268] = (*_a_GLfloat268_0.values[_jGLfloat268]).to_f32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::VertexAttribs4fvNV(index, count, v) };
}

pub fn retrace_glVertexAttribs4svNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let v: &mut [GLshort];
    v = _allocator.alloc_array::<GLshort>(&call.arg(2));
    let _a_GLshort52_0 = (call.arg(2)).to_array();
    if let Some(_a_GLshort52_0) = _a_GLshort52_0 {
        for _jGLshort52 in 0.._a_GLshort52_0.values.len() {
    v[_jGLshort52] = (*_a_GLshort52_0.values[_jGLshort52]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::VertexAttribs4svNV(index, count, v) };
}

pub fn retrace_glVertexAttribs4ubvNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let v: &mut [GLubyte];
    v = _allocator.alloc_array::<GLubyte>(&call.arg(2));
    let _a_GLubyte23_0 = (call.arg(2)).to_array();
    if let Some(_a_GLubyte23_0) = _a_GLubyte23_0 {
        for _jGLubyte23 in 0.._a_GLubyte23_0.values.len() {
    v[_jGLubyte23] = (*_a_GLubyte23_0.values[_jGLubyte23]).to_u32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::VertexAttribs4ubvNV(index, count, v) };
}

pub fn retrace_glVertexAttribI1iEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut x: GLint;
    x = (call.arg(1)).to_i32().unwrap();

//not found in gl!    unsafe { gl::VertexAttribI1iEXT(index, x) };
}

pub fn retrace_glVertexAttribI2iEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut x: GLint;
    x = (call.arg(1)).to_i32().unwrap();

    let mut y: GLint;
    y = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::VertexAttribI2iEXT(index, x, y) };
}

pub fn retrace_glVertexAttribI3iEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut x: GLint;
    x = (call.arg(1)).to_i32().unwrap();

    let mut y: GLint;
    y = (call.arg(2)).to_i32().unwrap();

    let mut z: GLint;
    z = (call.arg(3)).to_i32().unwrap();

//not found in gl!    unsafe { gl::VertexAttribI3iEXT(index, x, y, z) };
}

pub fn retrace_glVertexAttribI4iEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut x: GLint;
    x = (call.arg(1)).to_i32().unwrap();

    let mut y: GLint;
    y = (call.arg(2)).to_i32().unwrap();

    let mut z: GLint;
    z = (call.arg(3)).to_i32().unwrap();

    let mut w: GLint;
    w = (call.arg(4)).to_i32().unwrap();

//not found in gl!    unsafe { gl::VertexAttribI4iEXT(index, x, y, z, w) };
}

pub fn retrace_glVertexAttribI1uiEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut x: GLuint;
    x = (call.arg(1)).to_u32().unwrap();

//not found in gl!    unsafe { gl::VertexAttribI1uiEXT(index, x) };
}

pub fn retrace_glVertexAttribI2uiEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut x: GLuint;
    x = (call.arg(1)).to_u32().unwrap();

    let mut y: GLuint;
    y = (call.arg(2)).to_u32().unwrap();

//not found in gl!    unsafe { gl::VertexAttribI2uiEXT(index, x, y) };
}

pub fn retrace_glVertexAttribI3uiEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut x: GLuint;
    x = (call.arg(1)).to_u32().unwrap();

    let mut y: GLuint;
    y = (call.arg(2)).to_u32().unwrap();

    let mut z: GLuint;
    z = (call.arg(3)).to_u32().unwrap();

//not found in gl!    unsafe { gl::VertexAttribI3uiEXT(index, x, y, z) };
}

pub fn retrace_glVertexAttribI4uiEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut x: GLuint;
    x = (call.arg(1)).to_u32().unwrap();

    let mut y: GLuint;
    y = (call.arg(2)).to_u32().unwrap();

    let mut z: GLuint;
    z = (call.arg(3)).to_u32().unwrap();

    let mut w: GLuint;
    w = (call.arg(4)).to_u32().unwrap();

//not found in gl!    unsafe { gl::VertexAttribI4uiEXT(index, x, y, z, w) };
}

pub fn retrace_glVertexAttribI1ivEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLint];
    v = _allocator.alloc_array::<GLint>(&call.arg(1));
    let _a_PGLint35_0 = (call.arg(1)).to_array().unwrap();
    v[0] = (_a_PGLint35_0.values[0]).to_i32().unwrap();

//not found in gl!    unsafe { gl::VertexAttribI1ivEXT(index, v) };
}

pub fn retrace_glVertexAttribI2ivEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLint];
    v = _allocator.alloc_array::<GLint>(&call.arg(1));
    let _a_GLint264_0 = (call.arg(1)).to_array();
    if let Some(_a_GLint264_0) = _a_GLint264_0 {
        for _jGLint264 in 0.._a_GLint264_0.values.len() {
    v[_jGLint264] = (*_a_GLint264_0.values[_jGLint264]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::VertexAttribI2ivEXT(index, v) };
}

pub fn retrace_glVertexAttribI3ivEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLint];
    v = _allocator.alloc_array::<GLint>(&call.arg(1));
    let _a_GLint265_0 = (call.arg(1)).to_array();
    if let Some(_a_GLint265_0) = _a_GLint265_0 {
        for _jGLint265 in 0.._a_GLint265_0.values.len() {
    v[_jGLint265] = (*_a_GLint265_0.values[_jGLint265]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::VertexAttribI3ivEXT(index, v) };
}

pub fn retrace_glVertexAttribI4ivEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLint];
    v = _allocator.alloc_array::<GLint>(&call.arg(1));
    let _a_GLint266_0 = (call.arg(1)).to_array();
    if let Some(_a_GLint266_0) = _a_GLint266_0 {
        for _jGLint266 in 0.._a_GLint266_0.values.len() {
    v[_jGLint266] = (*_a_GLint266_0.values[_jGLint266]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::VertexAttribI4ivEXT(index, v) };
}

pub fn retrace_glVertexAttribI1uivEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLuint];
    v = _allocator.alloc_array::<GLuint>(&call.arg(1));
    let _a_PGLuint61_0 = (call.arg(1)).to_array().unwrap();
    v[0] = (_a_PGLuint61_0.values[0]).to_u32().unwrap();

//not found in gl!    unsafe { gl::VertexAttribI1uivEXT(index, v) };
}

pub fn retrace_glVertexAttribI2uivEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLuint];
    v = _allocator.alloc_array::<GLuint>(&call.arg(1));
    let _a_GLuint262_0 = (call.arg(1)).to_array();
    if let Some(_a_GLuint262_0) = _a_GLuint262_0 {
        for _jGLuint262 in 0.._a_GLuint262_0.values.len() {
    v[_jGLuint262] = (*_a_GLuint262_0.values[_jGLuint262]).to_u32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::VertexAttribI2uivEXT(index, v) };
}

pub fn retrace_glVertexAttribI3uivEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLuint];
    v = _allocator.alloc_array::<GLuint>(&call.arg(1));
    let _a_GLuint263_0 = (call.arg(1)).to_array();
    if let Some(_a_GLuint263_0) = _a_GLuint263_0 {
        for _jGLuint263 in 0.._a_GLuint263_0.values.len() {
    v[_jGLuint263] = (*_a_GLuint263_0.values[_jGLuint263]).to_u32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::VertexAttribI3uivEXT(index, v) };
}

pub fn retrace_glVertexAttribI4uivEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLuint];
    v = _allocator.alloc_array::<GLuint>(&call.arg(1));
    let _a_GLuint264_0 = (call.arg(1)).to_array();
    if let Some(_a_GLuint264_0) = _a_GLuint264_0 {
        for _jGLuint264 in 0.._a_GLuint264_0.values.len() {
    v[_jGLuint264] = (*_a_GLuint264_0.values[_jGLuint264]).to_u32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::VertexAttribI4uivEXT(index, v) };
}

pub fn retrace_glVertexAttribI4bvEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLbyte];
    v = _allocator.alloc_array::<GLbyte>(&call.arg(1));
    let _a_GLbyte15_0 = (call.arg(1)).to_array();
    if let Some(_a_GLbyte15_0) = _a_GLbyte15_0 {
        for _jGLbyte15 in 0.._a_GLbyte15_0.values.len() {
    v[_jGLbyte15] = (*_a_GLbyte15_0.values[_jGLbyte15]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::VertexAttribI4bvEXT(index, v) };
}

pub fn retrace_glVertexAttribI4svEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLshort];
    v = _allocator.alloc_array::<GLshort>(&call.arg(1));
    let _a_GLshort53_0 = (call.arg(1)).to_array();
    if let Some(_a_GLshort53_0) = _a_GLshort53_0 {
        for _jGLshort53 in 0.._a_GLshort53_0.values.len() {
    v[_jGLshort53] = (*_a_GLshort53_0.values[_jGLshort53]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::VertexAttribI4svEXT(index, v) };
}

pub fn retrace_glVertexAttribI4ubvEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLubyte];
    v = _allocator.alloc_array::<GLubyte>(&call.arg(1));
    let _a_GLubyte24_0 = (call.arg(1)).to_array();
    if let Some(_a_GLubyte24_0) = _a_GLubyte24_0 {
        for _jGLubyte24 in 0.._a_GLubyte24_0.values.len() {
    v[_jGLubyte24] = (*_a_GLubyte24_0.values[_jGLubyte24]).to_u32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::VertexAttribI4ubvEXT(index, v) };
}

pub fn retrace_glVertexAttribI4usvEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLushort];
    v = _allocator.alloc_array::<GLushort>(&call.arg(1));
    let _a_GLushort19_0 = (call.arg(1)).to_array();
    if let Some(_a_GLushort19_0) = _a_GLushort19_0 {
        for _jGLushort19 in 0.._a_GLushort19_0.values.len() {
    v[_jGLushort19] = (*_a_GLushort19_0.values[_jGLushort19]).to_u32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::VertexAttribI4usvEXT(index, v) };
}

pub fn retrace_glVertexAttribIPointerEXT(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut size: GLint;
    size = (call.arg(1)).to_i32().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut stride: GLsizei;
    stride = (call.arg(3)).to_i32().unwrap();

    let pointer: &mut [GLc_void];
    pointer = region::to_pointer(call.arg(4), true);

//not found in gl!    unsafe { gl::VertexAttribIPointerEXT(index, size, _type, stride, pointer) };
}

pub fn retrace_glBeginVideoCaptureNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut video_capture_slot: GLuint;
    video_capture_slot = (call.arg(0)).to_u32().unwrap();

//not found in gl!    unsafe { gl::BeginVideoCaptureNV(video_capture_slot) };
}

pub fn retrace_glBindVideoCaptureStreamBufferNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut video_capture_slot: GLuint;
    video_capture_slot = (call.arg(0)).to_u32().unwrap();

    let mut stream: GLuint;
    stream = (call.arg(1)).to_u32().unwrap();

    let mut frame_region: GLenum;
    frame_region = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut offset: GLintptrARB;
    offset = (call.arg(3)).to_i32().unwrap();

//not found in gl!    unsafe { gl::BindVideoCaptureStreamBufferNV(video_capture_slot, stream, frame_region, offset) };
}

pub fn retrace_glBindVideoCaptureStreamTextureNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut video_capture_slot: GLuint;
    video_capture_slot = (call.arg(0)).to_u32().unwrap();

    let mut stream: GLuint;
    stream = (call.arg(1)).to_u32().unwrap();

    let mut frame_region: GLenum;
    frame_region = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut target: GLenum;
    target = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let mut texture: GLuint;
    texture = (call.arg(4)).to_u32().unwrap();

//not found in gl!    unsafe { gl::BindVideoCaptureStreamTextureNV(video_capture_slot, stream, frame_region, target, texture) };
}

pub fn retrace_glEndVideoCaptureNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut video_capture_slot: GLuint;
    video_capture_slot = (call.arg(0)).to_u32().unwrap();

//not found in gl!    unsafe { gl::EndVideoCaptureNV(video_capture_slot) };
}

pub fn retrace_glVideoCaptureNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut video_capture_slot: GLuint;
    video_capture_slot = (call.arg(0)).to_u32().unwrap();

    let sequence_num: &mut [GLuint];
    sequence_num = _allocator.alloc_array::<GLuint>(&call.arg(1));

    let capture_time: &mut [GLuint64EXT];
    capture_time = _allocator.alloc_array::<GLuint64EXT>(&call.arg(2));

//not found in gl!    let _result = unsafe { gl::VideoCaptureNV(video_capture_slot, sequence_num, capture_time) };

    let _aPGLuint38 = (call.arg(1)).to_array();
    if (_aPGLuint38) {
    }
    let _aPGLuint64EXT = (call.arg(2)).to_array();
    if (_aPGLuint64EXT) {
    }
}

pub fn retrace_glVideoCaptureStreamParameterivNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut video_capture_slot: GLuint;
    video_capture_slot = (call.arg(0)).to_u32().unwrap();

    let mut stream: GLuint;
    stream = (call.arg(1)).to_u32().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLint];
    params = _allocator.alloc_array::<GLint>(&call.arg(3));
    let _a_GLint267_0 = (call.arg(3)).to_array();
    if let Some(_a_GLint267_0) = _a_GLint267_0 {
        for _jGLint267 in 0.._a_GLint267_0.values.len() {
    params[_jGLint267] = (*_a_GLint267_0.values[_jGLint267]).to_i32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::VideoCaptureStreamParameterivNV(video_capture_slot, stream, pname, params) };
}

pub fn retrace_glVideoCaptureStreamParameterfvNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut video_capture_slot: GLuint;
    video_capture_slot = (call.arg(0)).to_u32().unwrap();

    let mut stream: GLuint;
    stream = (call.arg(1)).to_u32().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLfloat];
    params = _allocator.alloc_array::<GLfloat>(&call.arg(3));
    let _a_GLfloat269_0 = (call.arg(3)).to_array();
    if let Some(_a_GLfloat269_0) = _a_GLfloat269_0 {
        for _jGLfloat269 in 0.._a_GLfloat269_0.values.len() {
    params[_jGLfloat269] = (*_a_GLfloat269_0.values[_jGLfloat269]).to_f32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::VideoCaptureStreamParameterfvNV(video_capture_slot, stream, pname, params) };
}

pub fn retrace_glVideoCaptureStreamParameterdvNV(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut video_capture_slot: GLuint;
    video_capture_slot = (call.arg(0)).to_u32().unwrap();

    let mut stream: GLuint;
    stream = (call.arg(1)).to_u32().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLdouble];
    params = _allocator.alloc_array::<GLdouble>(&call.arg(3));
    let _a_GLdouble143_0 = (call.arg(3)).to_array();
    if let Some(_a_GLdouble143_0) = _a_GLdouble143_0 {
        for _jGLdouble143 in 0.._a_GLdouble143_0.values.len() {
    params[_jGLdouble143] = (*_a_GLdouble143_0.values[_jGLdouble143]).to_f64().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::VideoCaptureStreamParameterdvNV(video_capture_slot, stream, pname, params) };
}

pub fn retrace_glBlendEquationSeparateOES(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut modeRGB: GLenum;
    modeRGB = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut modeAlpha: GLenum;
    modeAlpha = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::BlendEquationSeparateOES(modeRGB, modeAlpha) };
}

pub fn retrace_glBlendFuncSeparateOES(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut sfactorRGB: GLenum;
    sfactorRGB = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut dfactorRGB: GLenum;
    dfactorRGB = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut sfactorAlpha: GLenum;
    sfactorAlpha = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut dfactorAlpha: GLenum;
    dfactorAlpha = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::BlendFuncSeparateOES(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha) };
}

pub fn retrace_glBlendEquationOES(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::BlendEquationOES(mode) };
}

pub fn retrace_glDrawTexfOES(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut x: GLfloat;
    x = (call.arg(0)).to_f32().unwrap();

    let mut y: GLfloat;
    y = (call.arg(1)).to_f32().unwrap();

    let mut z: GLfloat;
    z = (call.arg(2)).to_f32().unwrap();

    let mut width: GLfloat;
    width = (call.arg(3)).to_f32().unwrap();

    let mut height: GLfloat;
    height = (call.arg(4)).to_f32().unwrap();

//not found in gl!    unsafe { gl::DrawTexfOES(x, y, z, width, height) };
}

pub fn retrace_glDrawTexfvOES(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let coords: &mut [GLfloat];
    coords = _allocator.alloc_array::<GLfloat>(&call.arg(0));
    let _a_GLfloat270_0 = (call.arg(0)).to_array();
    if let Some(_a_GLfloat270_0) = _a_GLfloat270_0 {
        for _jGLfloat270 in 0.._a_GLfloat270_0.values.len() {
    coords[_jGLfloat270] = (*_a_GLfloat270_0.values[_jGLfloat270]).to_f32().unwrap();
        }
    }
    let coords = coords.as_mut_ptr();

//not found in gl!    unsafe { gl::DrawTexfvOES(coords) };
}

pub fn retrace_glDrawTexiOES(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut x: GLint;
    x = (call.arg(0)).to_i32().unwrap();

    let mut y: GLint;
    y = (call.arg(1)).to_i32().unwrap();

    let mut z: GLint;
    z = (call.arg(2)).to_i32().unwrap();

    let mut width: GLint;
    width = (call.arg(3)).to_i32().unwrap();

    let mut height: GLint;
    height = (call.arg(4)).to_i32().unwrap();

//not found in gl!    unsafe { gl::DrawTexiOES(x, y, z, width, height) };
}

pub fn retrace_glDrawTexivOES(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let coords: &mut [GLint];
    coords = _allocator.alloc_array::<GLint>(&call.arg(0));
    let _a_GLint268_0 = (call.arg(0)).to_array();
    if let Some(_a_GLint268_0) = _a_GLint268_0 {
        for _jGLint268 in 0.._a_GLint268_0.values.len() {
    coords[_jGLint268] = (*_a_GLint268_0.values[_jGLint268]).to_i32().unwrap();
        }
    }
    let coords = coords.as_mut_ptr();

//not found in gl!    unsafe { gl::DrawTexivOES(coords) };
}

pub fn retrace_glDrawTexsOES(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut x: GLshort;
    x = (call.arg(0)).to_i32().unwrap();

    let mut y: GLshort;
    y = (call.arg(1)).to_i32().unwrap();

    let mut z: GLshort;
    z = (call.arg(2)).to_i32().unwrap();

    let mut width: GLshort;
    width = (call.arg(3)).to_i32().unwrap();

    let mut height: GLshort;
    height = (call.arg(4)).to_i32().unwrap();

//not found in gl!    unsafe { gl::DrawTexsOES(x, y, z, width, height) };
}

pub fn retrace_glDrawTexsvOES(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let coords: &mut [GLshort];
    coords = _allocator.alloc_array::<GLshort>(&call.arg(0));
    let _a_GLshort54_0 = (call.arg(0)).to_array();
    if let Some(_a_GLshort54_0) = _a_GLshort54_0 {
        for _jGLshort54 in 0.._a_GLshort54_0.values.len() {
    coords[_jGLshort54] = (*_a_GLshort54_0.values[_jGLshort54]).to_i32().unwrap();
        }
    }
    let coords = coords.as_mut_ptr();

//not found in gl!    unsafe { gl::DrawTexsvOES(coords) };
}

pub fn retrace_glBindRenderbufferOES(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut renderbuffer: GLuint;
    renderbuffer = (call.arg(1)).to_u32().unwrap();
    renderbuffer = self._renderbuffer_map[renderbuffer];

//not found in gl!    unsafe { gl::BindRenderbufferOES(target, renderbuffer) };
}

pub fn retrace_glDeleteRenderbuffersOES(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut n: GLsizei;
    n = (call.arg(0)).to_i32().unwrap();

    let renderbuffers: &mut [GLuint];
    renderbuffers = _allocator.alloc_array::<GLuint>(&call.arg(1));
    let _a_GLuint265_0 = (call.arg(1)).to_array();
    if let Some(_a_GLuint265_0) = _a_GLuint265_0 {
        for _jGLuint265 in 0.._a_GLuint265_0.values.len() {
    renderbuffers[_jGLuint265] = (*_a_GLuint265_0.values[_jGLuint265]).to_u32().unwrap();
    renderbuffers[_jGLuint265] = self._renderbuffer_map[renderbuffers[_jGLuint265]];
        }
    }
    let renderbuffers = renderbuffers.as_mut_ptr();

//not found in gl!    unsafe { gl::DeleteRenderbuffersOES(n, renderbuffers) };
}

pub fn retrace_glGenRenderbuffersOES(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut n: GLsizei;
    n = (call.arg(0)).to_i32().unwrap();

    let renderbuffers: &mut [GLuint];
    renderbuffers = _allocator.alloc_array::<GLuint>(&call.arg(1));

//not found in gl!    unsafe { gl::GenRenderbuffersOES(n, renderbuffers) };
    let _aGLuint267 = (call.arg(1)).to_array();
    if (_aGLuint267) {
        for _jGLuint267 in 0.._aGLuint267.values.len() {
    let _origResult: GLuint;
    _origResult = (_aGLuint267.values[_jGLuint267]).to_u32().unwrap();
    self._renderbuffer_map[_origResult] = renderbuffers[_jGLuint267]; 
        }
    }
}

pub fn retrace_glRenderbufferStorageOES(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut internalformat: GLenum;
    internalformat = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut width: GLsizei;
    width = (call.arg(2)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(3)).to_i32().unwrap();

//not found in gl!    unsafe { gl::RenderbufferStorageOES(target, internalformat, width, height) };
}

pub fn retrace_glBindFramebufferOES(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut framebuffer: GLuint;
    framebuffer = (call.arg(1)).to_u32().unwrap();
    framebuffer = self._framebuffer_map[framebuffer];

//not found in gl!    unsafe { gl::BindFramebufferOES(target, framebuffer) };
}

pub fn retrace_glDeleteFramebuffersOES(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut n: GLsizei;
    n = (call.arg(0)).to_i32().unwrap();

    let framebuffers: &mut [GLuint];
    framebuffers = _allocator.alloc_array::<GLuint>(&call.arg(1));
    let _a_GLuint268_0 = (call.arg(1)).to_array();
    if let Some(_a_GLuint268_0) = _a_GLuint268_0 {
        for _jGLuint268 in 0.._a_GLuint268_0.values.len() {
    framebuffers[_jGLuint268] = (*_a_GLuint268_0.values[_jGLuint268]).to_u32().unwrap();
    framebuffers[_jGLuint268] = self._framebuffer_map[framebuffers[_jGLuint268]];
        }
    }
    let framebuffers = framebuffers.as_mut_ptr();

//not found in gl!    unsafe { gl::DeleteFramebuffersOES(n, framebuffers) };
}

pub fn retrace_glGenFramebuffersOES(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut n: GLsizei;
    n = (call.arg(0)).to_i32().unwrap();

    let framebuffers: &mut [GLuint];
    framebuffers = _allocator.alloc_array::<GLuint>(&call.arg(1));

//not found in gl!    unsafe { gl::GenFramebuffersOES(n, framebuffers) };
    let _aGLuint270 = (call.arg(1)).to_array();
    if (_aGLuint270) {
        for _jGLuint270 in 0.._aGLuint270.values.len() {
    let _origResult: GLuint;
    _origResult = (_aGLuint270.values[_jGLuint270]).to_u32().unwrap();
    self._framebuffer_map[_origResult] = framebuffers[_jGLuint270]; 
        }
    }
}

pub fn retrace_glCheckFramebufferStatusOES(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    let _result = unsafe { gl::CheckFramebufferStatusOES(target) };

}

pub fn retrace_glFramebufferTexture2DOES(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut attachment: GLenum;
    attachment = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut textarget: GLenum;
    textarget = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut texture: GLuint;
    texture = (call.arg(3)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut level: GLint;
    level = (call.arg(4)).to_i32().unwrap();

//not found in gl!    unsafe { gl::FramebufferTexture2DOES(target, attachment, textarget, texture, level) };
}

pub fn retrace_glFramebufferRenderbufferOES(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut attachment: GLenum;
    attachment = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut renderbuffertarget: GLenum;
    renderbuffertarget = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut renderbuffer: GLuint;
    renderbuffer = (call.arg(3)).to_u32().unwrap();

//not found in gl!    unsafe { gl::FramebufferRenderbufferOES(target, attachment, renderbuffertarget, renderbuffer) };
}

pub fn retrace_glGenerateMipmapOES(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::GenerateMipmapOES(target) };
}

pub fn retrace_glProgramBinaryOES(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut program: GLuint;
    program = (call.arg(0)).to_u32().unwrap();
if supportsARBShaderObjects {
    program = self._handleARB_map[program];
} else {
    program = self._program_map[program];
}

    let mut binaryFormat: GLenum;
    binaryFormat = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let binary: &mut [GLc_void];
    let binary = (call.arg(2)).to_pointer().unwrap() as *mut c_void;

    let mut length: GLsizei;
    length = (call.arg(3)).to_i32().unwrap();

//not found in gl!    unsafe { gl::ProgramBinaryOES(program, binaryFormat, binary, length) };
        let link_status = 0;
//not found in gl!        unsafe { gl::GetProgramiv(program, gl::LINK_STATUS, &link_status) };
        if link_status == 0 {
             println!("link failed");
        }
        let info_log_length = 0;
//not found in gl!        unsafe { gl::GetProgramiv(program, gl::INFO_LOG_LENGTH, &info_log_length) };
        if info_log_length > 1 {
             let infoLog = vec![0i8; info_log_length].as_mut_ptr();
//not found in gl!             unsafe { gl::GetProgramInfoLog(program, info_log_length, std::ptr::null_mut(), infoLog) };
        }
}

pub fn retrace_glMapBufferOES(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut access: GLenum;
    access = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    let _result = unsafe { gl::MapBufferOES(target, access) };

    let length = 0;
//not found in gl!    unsafe { gl::GetBufferParameteriv(target, gl::BUFFER_SIZE, &length) };
    region::add_region(call, (*call.ret).toUIntPtr(), _result, length);
}

pub fn retrace_glUnmapBufferOES(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

        let ptr = ptr::null_mut() as *mut c_void;
//not found in gl!//not found in gl!            unsafe { gl::GetBufferPointervOES(target, gl::BUFFER_MAP_POINTER_OES, &ptr) };
        if (ptr) {
            retrace::delRegionByPointer(ptr);
        } else {
            retrace::warning(call) << "failed to get mapped pointer\n";
        }
//not found in gl!    let _result = unsafe { gl::UnmapBufferOES(target) };

}

pub fn retrace_glCurrentPaletteMatrixOES(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

//not found in gl!    unsafe { gl::CurrentPaletteMatrixOES(index) };
}

pub fn retrace_glLoadPaletteFromModelViewMatrixOES(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
//not found in gl!    unsafe { gl::LoadPaletteFromModelViewMatrixOES() };
}

pub fn retrace_glMatrixIndexPointerOES(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut size: GLint;
    size = (call.arg(0)).to_i32().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut stride: GLsizei;
    stride = (call.arg(2)).to_i32().unwrap();

    let pointer: &mut [GLc_void];
//FIXME    memset(&pointer, 0, sizeof pointer); 

    if (1) {
    }
//not found in gl!    unsafe { gl::MatrixIndexPointerOES(size, _type, stride, pointer) };
}

pub fn retrace_glWeightPointerOES(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut size: GLint;
    size = (call.arg(0)).to_i32().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut stride: GLsizei;
    stride = (call.arg(2)).to_i32().unwrap();

    let pointer: &mut [GLc_void];
//FIXME    memset(&pointer, 0, sizeof pointer); 

    if (1) {
    }
//not found in gl!    unsafe { gl::WeightPointerOES(size, _type, stride, pointer) };
}

pub fn retrace_glPointSizePointerOES(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut _type: GLenum;
    _type = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut stride: GLsizei;
    stride = (call.arg(1)).to_i32().unwrap();

    let ptr: &mut [GLc_void];
//FIXME    memset(&ptr, 0, sizeof ptr); 

    if (1) {
    }
//not found in gl!    unsafe { gl::PointSizePointerOES(_type, stride, ptr) };
}

pub fn retrace_glQueryMatrixxOES(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mantissa: &mut [GLfixed];
    mantissa = _allocator.alloc_array::<GLfixed>(&call.arg(0));
    let _a_GLfixed19_0 = (call.arg(0)).to_array();
    if let Some(_a_GLfixed19_0) = _a_GLfixed19_0 {
        for _jGLfixed19 in 0.._a_GLfixed19_0.values.len() {
    mantissa[_jGLfixed19] = (*_a_GLfixed19_0.values[_jGLfixed19]).to_i32().unwrap();
        }
    }
    let mantissa = mantissa.as_mut_ptr();

    let exponent: &mut [GLint];
    exponent = _allocator.alloc_array::<GLint>(&call.arg(1));
    let _a_GLint269_0 = (call.arg(1)).to_array();
    if let Some(_a_GLint269_0) = _a_GLint269_0 {
        for _jGLint269 in 0.._a_GLint269_0.values.len() {
    exponent[_jGLint269] = (*_a_GLint269_0.values[_jGLint269]).to_i32().unwrap();
        }
    }
    let exponent = exponent.as_mut_ptr();

//not found in gl!    let _result = unsafe { gl::QueryMatrixxOES(mantissa, exponent) };

}

pub fn retrace_glClearDepthfOES(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut depth: GLclampf;
    depth = (call.arg(0)).to_f32().unwrap();

//not found in gl!    unsafe { gl::ClearDepthfOES(depth) };
}

pub fn retrace_glClipPlanefOES(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut plane: GLenum;
    plane = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let equation: &mut [GLfloat];
    equation = _allocator.alloc_array::<GLfloat>(&call.arg(1));
    let _a_GLfloat271_0 = (call.arg(1)).to_array();
    if let Some(_a_GLfloat271_0) = _a_GLfloat271_0 {
        for _jGLfloat271 in 0.._a_GLfloat271_0.values.len() {
    equation[_jGLfloat271] = (*_a_GLfloat271_0.values[_jGLfloat271]).to_f32().unwrap();
        }
    }
    let equation = equation.as_mut_ptr();

//not found in gl!    unsafe { gl::ClipPlanefOES(plane, equation) };
}

pub fn retrace_glDepthRangefOES(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut n: GLclampf;
    n = (call.arg(0)).to_f32().unwrap();

    let mut f: GLclampf;
    f = (call.arg(1)).to_f32().unwrap();

//not found in gl!    unsafe { gl::DepthRangefOES(n, f) };
}

pub fn retrace_glFrustumfOES(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut l: GLfloat;
    l = (call.arg(0)).to_f32().unwrap();

    let mut r: GLfloat;
    r = (call.arg(1)).to_f32().unwrap();

    let mut b: GLfloat;
    b = (call.arg(2)).to_f32().unwrap();

    let mut t: GLfloat;
    t = (call.arg(3)).to_f32().unwrap();

    let mut n: GLfloat;
    n = (call.arg(4)).to_f32().unwrap();

    let mut f: GLfloat;
    f = (call.arg(5)).to_f32().unwrap();

//not found in gl!    unsafe { gl::FrustumfOES(l, r, b, t, n, f) };
}

pub fn retrace_glOrthofOES(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut l: GLfloat;
    l = (call.arg(0)).to_f32().unwrap();

    let mut r: GLfloat;
    r = (call.arg(1)).to_f32().unwrap();

    let mut b: GLfloat;
    b = (call.arg(2)).to_f32().unwrap();

    let mut t: GLfloat;
    t = (call.arg(3)).to_f32().unwrap();

    let mut n: GLfloat;
    n = (call.arg(4)).to_f32().unwrap();

    let mut f: GLfloat;
    f = (call.arg(5)).to_f32().unwrap();

//not found in gl!    unsafe { gl::OrthofOES(l, r, b, t, n, f) };
}

pub fn retrace_glTexImage3DOES(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(1)).to_i32().unwrap();

    let mut internalformat: GLenum;
    internalformat = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut width: GLsizei;
    width = (call.arg(3)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(4)).to_i32().unwrap();

    let mut depth: GLsizei;
    depth = (call.arg(5)).to_i32().unwrap();

    let mut border: GLint;
    border = (call.arg(6)).to_i32().unwrap();

    let mut format: GLenum;
    format = (call.arg(7)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(8)).to_u32().unwrap().try_into().unwrap();

    let pixels = (call.arg(9)).to_pointer().unwrap() as *mut c_void;

//not found in gl!    unsafe { gl::TexImage3DOES(target, level, internalformat, width, height, depth, border, format, _type, pixels) };
}

pub fn retrace_glTexSubImage3DOES(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(1)).to_i32().unwrap();

    let mut xoffset: GLint;
    xoffset = (call.arg(2)).to_i32().unwrap();

    let mut yoffset: GLint;
    yoffset = (call.arg(3)).to_i32().unwrap();

    let mut zoffset: GLint;
    zoffset = (call.arg(4)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(5)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(6)).to_i32().unwrap();

    let mut depth: GLsizei;
    depth = (call.arg(7)).to_i32().unwrap();

    let mut format: GLenum;
    format = (call.arg(8)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(9)).to_u32().unwrap().try_into().unwrap();

    let pixels = (call.arg(10)).to_pointer().unwrap() as *mut c_void;

//not found in gl!    unsafe { gl::TexSubImage3DOES(target, level, xoffset, yoffset, zoffset, width, height, depth, format, _type, pixels) };
}

pub fn retrace_glCopyTexSubImage3DOES(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(1)).to_i32().unwrap();

    let mut xoffset: GLint;
    xoffset = (call.arg(2)).to_i32().unwrap();

    let mut yoffset: GLint;
    yoffset = (call.arg(3)).to_i32().unwrap();

    let mut zoffset: GLint;
    zoffset = (call.arg(4)).to_i32().unwrap();

    let mut x: GLint;
    x = (call.arg(5)).to_i32().unwrap();

    let mut y: GLint;
    y = (call.arg(6)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(7)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(8)).to_i32().unwrap();

//not found in gl!    unsafe { gl::CopyTexSubImage3DOES(target, level, xoffset, yoffset, zoffset, x, y, width, height) };
}

pub fn retrace_glCompressedTexImage3DOES(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(1)).to_i32().unwrap();

    let mut internalformat: GLenum;
    internalformat = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut width: GLsizei;
    width = (call.arg(3)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(4)).to_i32().unwrap();

    let mut depth: GLsizei;
    depth = (call.arg(5)).to_i32().unwrap();

    let mut border: GLint;
    border = (call.arg(6)).to_i32().unwrap();

    let mut imageSize: GLsizei;
    imageSize = (call.arg(7)).to_i32().unwrap();

    let data: &mut [GLc_void];
    let data = (call.arg(8)).to_pointer().unwrap() as *mut c_void;

//not found in gl!    unsafe { gl::CompressedTexImage3DOES(target, level, internalformat, width, height, depth, border, imageSize, data) };
}

pub fn retrace_glCompressedTexSubImage3DOES(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(1)).to_i32().unwrap();

    let mut xoffset: GLint;
    xoffset = (call.arg(2)).to_i32().unwrap();

    let mut yoffset: GLint;
    yoffset = (call.arg(3)).to_i32().unwrap();

    let mut zoffset: GLint;
    zoffset = (call.arg(4)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(5)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(6)).to_i32().unwrap();

    let mut depth: GLsizei;
    depth = (call.arg(7)).to_i32().unwrap();

    let mut format: GLenum;
    format = (call.arg(8)).to_u32().unwrap().try_into().unwrap();

    let mut imageSize: GLsizei;
    imageSize = (call.arg(9)).to_i32().unwrap();

    let data: &mut [GLc_void];
    let data = (call.arg(10)).to_pointer().unwrap() as *mut c_void;

//not found in gl!    unsafe { gl::CompressedTexSubImage3DOES(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) };
}

pub fn retrace_glFramebufferTexture3DOES(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut attachment: GLenum;
    attachment = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut textarget: GLenum;
    textarget = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut texture: GLuint;
    texture = (call.arg(3)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut level: GLint;
    level = (call.arg(4)).to_i32().unwrap();

    let mut zoffset: GLint;
    zoffset = (call.arg(5)).to_i32().unwrap();

//not found in gl!    unsafe { gl::FramebufferTexture3DOES(target, attachment, textarget, texture, level, zoffset) };
}

pub fn retrace_glTexGenfOES(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut coord: GLenum;
    coord = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut param: GLfloat;
    param = (call.arg(2)).to_f32().unwrap();

//not found in gl!    unsafe { gl::TexGenfOES(coord, pname, param) };
}

pub fn retrace_glTexGenfvOES(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut coord: GLenum;
    coord = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLfloat];
    params = _allocator.alloc_array::<GLfloat>(&call.arg(2));
    let _a_GLfloat272_0 = (call.arg(2)).to_array();
    if let Some(_a_GLfloat272_0) = _a_GLfloat272_0 {
        for _jGLfloat272 in 0.._a_GLfloat272_0.values.len() {
    params[_jGLfloat272] = (*_a_GLfloat272_0.values[_jGLfloat272]).to_f32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::TexGenfvOES(coord, pname, params) };
}

pub fn retrace_glTexGeniOES(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut coord: GLenum;
    coord = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut param: GLint;
    param = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::TexGeniOES(coord, pname, param) };
}

pub fn retrace_glTexGenivOES(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut coord: GLenum;
    coord = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLint];
    params = _allocator.alloc_array::<GLint>(&call.arg(2));
    let _a_GLint270_0 = (call.arg(2)).to_array();
    if let Some(_a_GLint270_0) = _a_GLint270_0 {
        for _jGLint270 in 0.._a_GLint270_0.values.len() {
    params[_jGLint270] = (*_a_GLint270_0.values[_jGLint270]).to_i32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::TexGenivOES(coord, pname, params) };
}

pub fn retrace_glTexGenxOES(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut coord: GLenum;
    coord = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut param: GLfixed;
    param = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::TexGenxOES(coord, pname, param) };
}

pub fn retrace_glTexGenxvOES(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut coord: GLenum;
    coord = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLfixed];
    params = _allocator.alloc_array::<GLfixed>(&call.arg(2));
    let _a_GLfixed20_0 = (call.arg(2)).to_array();
    if let Some(_a_GLfixed20_0) = _a_GLfixed20_0 {
        for _jGLfixed20 in 0.._a_GLfixed20_0.values.len() {
    params[_jGLfixed20] = (*_a_GLfixed20_0.values[_jGLfixed20]).to_i32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::TexGenxvOES(coord, pname, params) };
}

pub fn retrace_glBindVertexArrayOES(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut array: GLuint;
    array = (call.arg(0)).to_u32().unwrap();
    array = self._array_map[DUMMY_CONTEXT][array];

//not found in gl!    unsafe { gl::BindVertexArrayOES(array) };
}

pub fn retrace_glDeleteVertexArraysOES(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut n: GLsizei;
    n = (call.arg(0)).to_i32().unwrap();

    let arrays: &mut [GLuint];
    arrays = _allocator.alloc_array::<GLuint>(&call.arg(1));
    let _a_GLuint271_0 = (call.arg(1)).to_array();
    if let Some(_a_GLuint271_0) = _a_GLuint271_0 {
        for _jGLuint271 in 0.._a_GLuint271_0.values.len() {
    arrays[_jGLuint271] = (*_a_GLuint271_0.values[_jGLuint271]).to_u32().unwrap();
    arrays[_jGLuint271] = self._array_map[DUMMY_CONTEXT][arrays[_jGLuint271]];
        }
    }
    let arrays = arrays.as_mut_ptr();

//not found in gl!    unsafe { gl::DeleteVertexArraysOES(n, arrays) };
}

pub fn retrace_glGenVertexArraysOES(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut n: GLsizei;
    n = (call.arg(0)).to_i32().unwrap();

    let arrays: &mut [GLuint];
    arrays = _allocator.alloc_array::<GLuint>(&call.arg(1));

//not found in gl!    unsafe { gl::GenVertexArraysOES(n, arrays) };
    let _aGLuint273 = (call.arg(1)).to_array();
    if (_aGLuint273) {
        for _jGLuint273 in 0.._aGLuint273.values.len() {
    let _origResult: GLuint;
    _origResult = (_aGLuint273.values[_jGLuint273]).to_u32().unwrap();
    self._array_map[DUMMY_CONTEXT][_origResult] = arrays[_jGLuint273]; 
        }
    }
}

pub fn retrace_glViewportArrayvOES(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut first: GLuint;
    first = (call.arg(0)).to_u32().unwrap();

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let v: &mut [GLfloat];
    v = _allocator.alloc_array::<GLfloat>(&call.arg(2));
    let _a_GLfloat273_0 = (call.arg(2)).to_array();
    if let Some(_a_GLfloat273_0) = _a_GLfloat273_0 {
        for _jGLfloat273 in 0.._a_GLfloat273_0.values.len() {
    v[_jGLfloat273] = (*_a_GLfloat273_0.values[_jGLfloat273]).to_f32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::ViewportArrayvOES(first, count, v) };
}

pub fn retrace_glViewportIndexedfOES(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut x: GLfloat;
    x = (call.arg(1)).to_f32().unwrap();

    let mut y: GLfloat;
    y = (call.arg(2)).to_f32().unwrap();

    let mut w: GLfloat;
    w = (call.arg(3)).to_f32().unwrap();

    let mut h: GLfloat;
    h = (call.arg(4)).to_f32().unwrap();

//not found in gl!    unsafe { gl::ViewportIndexedfOES(index, x, y, w, h) };
}

pub fn retrace_glViewportIndexedfvOES(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLfloat];
    v = _allocator.alloc_array::<GLfloat>(&call.arg(1));
    let _a_GLfloat274_0 = (call.arg(1)).to_array();
    if let Some(_a_GLfloat274_0) = _a_GLfloat274_0 {
        for _jGLfloat274 in 0.._a_GLfloat274_0.values.len() {
    v[_jGLfloat274] = (*_a_GLfloat274_0.values[_jGLfloat274]).to_f32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::ViewportIndexedfvOES(index, v) };
}

pub fn retrace_glScissorArrayvOES(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut first: GLuint;
    first = (call.arg(0)).to_u32().unwrap();

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let v: &mut [GLint];
    v = _allocator.alloc_array::<GLint>(&call.arg(2));
    let _a_GLint271_0 = (call.arg(2)).to_array();
    if let Some(_a_GLint271_0) = _a_GLint271_0 {
        for _jGLint271 in 0.._a_GLint271_0.values.len() {
    v[_jGLint271] = (*_a_GLint271_0.values[_jGLint271]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::ScissorArrayvOES(first, count, v) };
}

pub fn retrace_glScissorIndexedOES(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut left: GLint;
    left = (call.arg(1)).to_i32().unwrap();

    let mut bottom: GLint;
    bottom = (call.arg(2)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(3)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(4)).to_i32().unwrap();

//not found in gl!    unsafe { gl::ScissorIndexedOES(index, left, bottom, width, height) };
}

pub fn retrace_glScissorIndexedvOES(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let v: &mut [GLint];
    v = _allocator.alloc_array::<GLint>(&call.arg(1));
    let _a_GLint272_0 = (call.arg(1)).to_array();
    if let Some(_a_GLint272_0) = _a_GLint272_0 {
        for _jGLint272 in 0.._a_GLint272_0.values.len() {
    v[_jGLint272] = (*_a_GLint272_0.values[_jGLint272]).to_i32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::ScissorIndexedvOES(index, v) };
}

pub fn retrace_glDepthRangeArrayfvOES(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut first: GLuint;
    first = (call.arg(0)).to_u32().unwrap();

    let mut count: GLsizei;
    count = (call.arg(1)).to_i32().unwrap();

    let v: &mut [GLfloat];
    v = _allocator.alloc_array::<GLfloat>(&call.arg(2));
    let _a_GLfloat275_0 = (call.arg(2)).to_array();
    if let Some(_a_GLfloat275_0) = _a_GLfloat275_0 {
        for _jGLfloat275 in 0.._a_GLfloat275_0.values.len() {
    v[_jGLfloat275] = (*_a_GLfloat275_0.values[_jGLfloat275]).to_f32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::DepthRangeArrayfvOES(first, count, v) };
}

pub fn retrace_glDepthRangeIndexedfOES(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut index: GLuint;
    index = (call.arg(0)).to_u32().unwrap();

    let mut n: GLfloat;
    n = (call.arg(1)).to_f32().unwrap();

    let mut f: GLfloat;
    f = (call.arg(2)).to_f32().unwrap();

//not found in gl!    unsafe { gl::DepthRangeIndexedfOES(index, n, f) };
}

pub fn retrace_glFramebufferTextureMultiviewOVR(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut attachment: GLenum;
    attachment = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut texture: GLuint;
    texture = (call.arg(2)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut level: GLint;
    level = (call.arg(3)).to_i32().unwrap();

    let mut baseViewIndex: GLint;
    baseViewIndex = (call.arg(4)).to_i32().unwrap();

    let mut numViews: GLsizei;
    numViews = (call.arg(5)).to_i32().unwrap();

//not found in gl!    unsafe { gl::FramebufferTextureMultiviewOVR(target, attachment, texture, level, baseViewIndex, numViews) };
}

pub fn retrace_glNamedFramebufferTextureMultiviewOVR(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut framebuffer: GLuint;
    framebuffer = (call.arg(0)).to_u32().unwrap();
    framebuffer = self._framebuffer_map[framebuffer];

    let mut attachment: GLenum;
    attachment = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut texture: GLuint;
    texture = (call.arg(2)).to_u32().unwrap();
    texture = self._texture_map[texture];

    let mut level: GLint;
    level = (call.arg(3)).to_i32().unwrap();

    let mut baseViewIndex: GLint;
    baseViewIndex = (call.arg(4)).to_i32().unwrap();

    let mut numViews: GLsizei;
    numViews = (call.arg(5)).to_i32().unwrap();

//not found in gl!    unsafe { gl::NamedFramebufferTextureMultiviewOVR(framebuffer, attachment, texture, level, baseViewIndex, numViews) };
}

pub fn retrace_glHintPGI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut mode: GLint;
    mode = (call.arg(1)).to_i32().unwrap();

//not found in gl!    unsafe { gl::HintPGI(target, mode) };
}

pub fn retrace_glDetailTexFuncSGIS(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut n: GLsizei;
    n = (call.arg(1)).to_i32().unwrap();

    let points: &mut [GLfloat];
    points = _allocator.alloc_array::<GLfloat>(&call.arg(2));
    let _a_GLfloat276_0 = (call.arg(2)).to_array();
    if let Some(_a_GLfloat276_0) = _a_GLfloat276_0 {
        for _jGLfloat276 in 0.._a_GLfloat276_0.values.len() {
    points[_jGLfloat276] = (*_a_GLfloat276_0.values[_jGLfloat276]).to_f32().unwrap();
        }
    }
    let points = points.as_mut_ptr();

//not found in gl!    unsafe { gl::DetailTexFuncSGIS(target, n, points) };
}

pub fn retrace_glFogFuncSGIS(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut n: GLsizei;
    n = (call.arg(0)).to_i32().unwrap();

    let points: &mut [GLfloat];
    points = _allocator.alloc_array::<GLfloat>(&call.arg(1));
    let _a_GLfloat277_0 = (call.arg(1)).to_array();
    if let Some(_a_GLfloat277_0) = _a_GLfloat277_0 {
        for _jGLfloat277 in 0.._a_GLfloat277_0.values.len() {
    points[_jGLfloat277] = (*_a_GLfloat277_0.values[_jGLfloat277]).to_f32().unwrap();
        }
    }
    let points = points.as_mut_ptr();

//not found in gl!    unsafe { gl::FogFuncSGIS(n, points) };
}

pub fn retrace_glSampleMaskSGIS(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut value: GLclampf;
    value = (call.arg(0)).to_f32().unwrap();

    let mut invert: GLboolean;
    invert = (call.arg(1)).to_u32().unwrap() as u8;

//not found in gl!    unsafe { gl::SampleMaskSGIS(value, invert) };
}

pub fn retrace_glSamplePatternSGIS(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut pattern: GLenum;
    pattern = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::SamplePatternSGIS(pattern) };
}

pub fn retrace_glPixelTexGenParameteriSGIS(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut pname: GLenum;
    pname = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut param: GLint;
    param = (call.arg(1)).to_i32().unwrap();

//not found in gl!    unsafe { gl::PixelTexGenParameteriSGIS(pname, param) };
}

pub fn retrace_glPixelTexGenParameterivSGIS(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut pname: GLenum;
    pname = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLint];
    params = _allocator.alloc_array::<GLint>(&call.arg(1));
    let _a_GLint273_0 = (call.arg(1)).to_array();
    if let Some(_a_GLint273_0) = _a_GLint273_0 {
        for _jGLint273 in 0.._a_GLint273_0.values.len() {
    params[_jGLint273] = (*_a_GLint273_0.values[_jGLint273]).to_i32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::PixelTexGenParameterivSGIS(pname, params) };
}

pub fn retrace_glPixelTexGenParameterfSGIS(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut pname: GLenum;
    pname = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut param: GLfloat;
    param = (call.arg(1)).to_f32().unwrap();

//not found in gl!    unsafe { gl::PixelTexGenParameterfSGIS(pname, param) };
}

pub fn retrace_glPixelTexGenParameterfvSGIS(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut pname: GLenum;
    pname = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLfloat];
    params = _allocator.alloc_array::<GLfloat>(&call.arg(1));
    let _a_GLfloat278_0 = (call.arg(1)).to_array();
    if let Some(_a_GLfloat278_0) = _a_GLfloat278_0 {
        for _jGLfloat278 in 0.._a_GLfloat278_0.values.len() {
    params[_jGLfloat278] = (*_a_GLfloat278_0.values[_jGLfloat278]).to_f32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::PixelTexGenParameterfvSGIS(pname, params) };
}

pub fn retrace_glPointParameterfSGIS(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut pname: GLenum;
    pname = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut param: GLfloat;
    param = (call.arg(1)).to_f32().unwrap();

//not found in gl!    unsafe { gl::PointParameterfSGIS(pname, param) };
}

pub fn retrace_glPointParameterfvSGIS(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut pname: GLenum;
    pname = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLfloat];
    params = _allocator.alloc_array::<GLfloat>(&call.arg(1));
    let _a_GLfloat279_0 = (call.arg(1)).to_array();
    if let Some(_a_GLfloat279_0) = _a_GLfloat279_0 {
        for _jGLfloat279 in 0.._a_GLfloat279_0.values.len() {
    params[_jGLfloat279] = (*_a_GLfloat279_0.values[_jGLfloat279]).to_f32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::PointParameterfvSGIS(pname, params) };
}

pub fn retrace_glSharpenTexFuncSGIS(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut n: GLsizei;
    n = (call.arg(1)).to_i32().unwrap();

    let points: &mut [GLfloat];
    points = _allocator.alloc_array::<GLfloat>(&call.arg(2));
    let _a_GLfloat280_0 = (call.arg(2)).to_array();
    if let Some(_a_GLfloat280_0) = _a_GLfloat280_0 {
        for _jGLfloat280 in 0.._a_GLfloat280_0.values.len() {
    points[_jGLfloat280] = (*_a_GLfloat280_0.values[_jGLfloat280]).to_f32().unwrap();
        }
    }
    let points = points.as_mut_ptr();

//not found in gl!    unsafe { gl::SharpenTexFuncSGIS(target, n, points) };
}

pub fn retrace_glTexImage4DSGIS(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(1)).to_i32().unwrap();

    let mut internalformat: GLenum;
    internalformat = (call.arg(2)).to_u32().unwrap().try_into().unwrap();

    let mut width: GLsizei;
    width = (call.arg(3)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(4)).to_i32().unwrap();

    let mut depth: GLsizei;
    depth = (call.arg(5)).to_i32().unwrap();

    let mut size4d: GLsizei;
    size4d = (call.arg(6)).to_i32().unwrap();

    let mut border: GLint;
    border = (call.arg(7)).to_i32().unwrap();

    let mut format: GLenum;
    format = (call.arg(8)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(9)).to_u32().unwrap().try_into().unwrap();

//FIXME    memset(&pixels, 0, sizeof pixels); 

    if (1) {
    }
//not found in gl!//not found in gl!    unsafe { gl::TexImage4DSGIS(target, level, internalformat, width, height, depth, size4d, border, format, _type, pixels) };
}

pub fn retrace_glTexSubImage4DSGIS(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut level: GLint;
    level = (call.arg(1)).to_i32().unwrap();

    let mut xoffset: GLint;
    xoffset = (call.arg(2)).to_i32().unwrap();

    let mut yoffset: GLint;
    yoffset = (call.arg(3)).to_i32().unwrap();

    let mut zoffset: GLint;
    zoffset = (call.arg(4)).to_i32().unwrap();

    let mut woffset: GLint;
    woffset = (call.arg(5)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(6)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(7)).to_i32().unwrap();

    let mut depth: GLsizei;
    depth = (call.arg(8)).to_i32().unwrap();

    let mut size4d: GLsizei;
    size4d = (call.arg(9)).to_i32().unwrap();

    let mut format: GLenum;
    format = (call.arg(10)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(11)).to_u32().unwrap().try_into().unwrap();

//FIXME    memset(&pixels, 0, sizeof pixels); 

    if (1) {
    }
//not found in gl!//not found in gl!    unsafe { gl::TexSubImage4DSGIS(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, _type, pixels) };
}

pub fn retrace_glTextureColorMaskSGIS(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut red: GLboolean;
    red = (call.arg(0)).to_u32().unwrap() as u8;

    let mut green: GLboolean;
    green = (call.arg(1)).to_u32().unwrap() as u8;

    let mut blue: GLboolean;
    blue = (call.arg(2)).to_u32().unwrap() as u8;

    let mut alpha: GLboolean;
    alpha = (call.arg(3)).to_u32().unwrap() as u8;

//not found in gl!    unsafe { gl::TextureColorMaskSGIS(red, green, blue, alpha) };
}

pub fn retrace_glTexFilterFuncSGIS(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut filter: GLenum;
    filter = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut n: GLsizei;
    n = (call.arg(2)).to_i32().unwrap();

    let weights: &mut [GLfloat];
    weights = _allocator.alloc_array::<GLfloat>(&call.arg(3));
    let _a_GLfloat281_0 = (call.arg(3)).to_array();
    if let Some(_a_GLfloat281_0) = _a_GLfloat281_0 {
        for _jGLfloat281 in 0.._a_GLfloat281_0.values.len() {
    weights[_jGLfloat281] = (*_a_GLfloat281_0.values[_jGLfloat281]).to_f32().unwrap();
        }
    }
    let weights = weights.as_mut_ptr();

//not found in gl!    unsafe { gl::TexFilterFuncSGIS(target, filter, n, weights) };
}

pub fn retrace_glAsyncMarkerSGIX(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut marker: GLuint;
    marker = (call.arg(0)).to_u32().unwrap();

//not found in gl!    unsafe { gl::AsyncMarkerSGIX(marker) };
}

pub fn retrace_glFinishAsyncSGIX(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let markerp: &mut [GLuint];
    markerp = _allocator.alloc_array::<GLuint>(&call.arg(0));

//not found in gl!    let _result = unsafe { gl::FinishAsyncSGIX(markerp) };

    let _aPGLuint39 = (call.arg(0)).to_array();
    if (_aPGLuint39) {
    }
}

pub fn retrace_glPollAsyncSGIX(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let markerp: &mut [GLuint];
    markerp = _allocator.alloc_array::<GLuint>(&call.arg(0));

//not found in gl!    let _result = unsafe { gl::PollAsyncSGIX(markerp) };

    let _aPGLuint40 = (call.arg(0)).to_array();
    if (_aPGLuint40) {
    }
}

pub fn retrace_glGenAsyncMarkersSGIX(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut range: GLsizei;
    range = (call.arg(0)).to_i32().unwrap();

//not found in gl!    let _result = unsafe { gl::GenAsyncMarkersSGIX(range) };

}

pub fn retrace_glDeleteAsyncMarkersSGIX(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut marker: GLuint;
    marker = (call.arg(0)).to_u32().unwrap();

    let mut range: GLsizei;
    range = (call.arg(1)).to_i32().unwrap();

//not found in gl!    unsafe { gl::DeleteAsyncMarkersSGIX(marker, range) };
}

pub fn retrace_glFlushRasterSGIX(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
//not found in gl!    unsafe { gl::FlushRasterSGIX() };
}

pub fn retrace_glFragmentColorMaterialSGIX(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut face: GLenum;
    face = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut mode: GLenum;
    mode = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::FragmentColorMaterialSGIX(face, mode) };
}

pub fn retrace_glFragmentLightfSGIX(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut light: GLenum;
    light = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut param: GLfloat;
    param = (call.arg(2)).to_f32().unwrap();

//not found in gl!    unsafe { gl::FragmentLightfSGIX(light, pname, param) };
}

pub fn retrace_glFragmentLightfvSGIX(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut light: GLenum;
    light = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLfloat];
    params = _allocator.alloc_array::<GLfloat>(&call.arg(2));
    let _a_GLfloat282_0 = (call.arg(2)).to_array();
    if let Some(_a_GLfloat282_0) = _a_GLfloat282_0 {
        for _jGLfloat282 in 0.._a_GLfloat282_0.values.len() {
    params[_jGLfloat282] = (*_a_GLfloat282_0.values[_jGLfloat282]).to_f32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::FragmentLightfvSGIX(light, pname, params) };
}

pub fn retrace_glFragmentLightiSGIX(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut light: GLenum;
    light = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut param: GLint;
    param = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::FragmentLightiSGIX(light, pname, param) };
}

pub fn retrace_glFragmentLightivSGIX(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut light: GLenum;
    light = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLint];
    params = _allocator.alloc_array::<GLint>(&call.arg(2));
    let _a_GLint274_0 = (call.arg(2)).to_array();
    if let Some(_a_GLint274_0) = _a_GLint274_0 {
        for _jGLint274 in 0.._a_GLint274_0.values.len() {
    params[_jGLint274] = (*_a_GLint274_0.values[_jGLint274]).to_i32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::FragmentLightivSGIX(light, pname, params) };
}

pub fn retrace_glFragmentLightModelfSGIX(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut pname: GLenum;
    pname = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut param: GLfloat;
    param = (call.arg(1)).to_f32().unwrap();

//not found in gl!    unsafe { gl::FragmentLightModelfSGIX(pname, param) };
}

pub fn retrace_glFragmentLightModelfvSGIX(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut pname: GLenum;
    pname = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLfloat];
    params = _allocator.alloc_array::<GLfloat>(&call.arg(1));
    let _a_GLfloat283_0 = (call.arg(1)).to_array();
    if let Some(_a_GLfloat283_0) = _a_GLfloat283_0 {
        for _jGLfloat283 in 0.._a_GLfloat283_0.values.len() {
    params[_jGLfloat283] = (*_a_GLfloat283_0.values[_jGLfloat283]).to_f32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::FragmentLightModelfvSGIX(pname, params) };
}

pub fn retrace_glFragmentLightModeliSGIX(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut pname: GLenum;
    pname = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut param: GLint;
    param = (call.arg(1)).to_i32().unwrap();

//not found in gl!    unsafe { gl::FragmentLightModeliSGIX(pname, param) };
}

pub fn retrace_glFragmentLightModelivSGIX(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut pname: GLenum;
    pname = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLint];
    params = _allocator.alloc_array::<GLint>(&call.arg(1));
    let _a_GLint275_0 = (call.arg(1)).to_array();
    if let Some(_a_GLint275_0) = _a_GLint275_0 {
        for _jGLint275 in 0.._a_GLint275_0.values.len() {
    params[_jGLint275] = (*_a_GLint275_0.values[_jGLint275]).to_i32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::FragmentLightModelivSGIX(pname, params) };
}

pub fn retrace_glFragmentMaterialfSGIX(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut face: GLenum;
    face = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut param: GLfloat;
    param = (call.arg(2)).to_f32().unwrap();

//not found in gl!    unsafe { gl::FragmentMaterialfSGIX(face, pname, param) };
}

pub fn retrace_glFragmentMaterialfvSGIX(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut face: GLenum;
    face = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLfloat];
    params = _allocator.alloc_array::<GLfloat>(&call.arg(2));
    let _a_GLfloat284_0 = (call.arg(2)).to_array();
    if let Some(_a_GLfloat284_0) = _a_GLfloat284_0 {
        for _jGLfloat284 in 0.._a_GLfloat284_0.values.len() {
    params[_jGLfloat284] = (*_a_GLfloat284_0.values[_jGLfloat284]).to_f32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::FragmentMaterialfvSGIX(face, pname, params) };
}

pub fn retrace_glFragmentMaterialiSGIX(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut face: GLenum;
    face = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut param: GLint;
    param = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::FragmentMaterialiSGIX(face, pname, param) };
}

pub fn retrace_glFragmentMaterialivSGIX(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut face: GLenum;
    face = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLint];
    params = _allocator.alloc_array::<GLint>(&call.arg(2));
    let _a_GLint276_0 = (call.arg(2)).to_array();
    if let Some(_a_GLint276_0) = _a_GLint276_0 {
        for _jGLint276 in 0.._a_GLint276_0.values.len() {
    params[_jGLint276] = (*_a_GLint276_0.values[_jGLint276]).to_i32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::FragmentMaterialivSGIX(face, pname, params) };
}

pub fn retrace_glLightEnviSGIX(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut pname: GLenum;
    pname = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut param: GLint;
    param = (call.arg(1)).to_i32().unwrap();

//not found in gl!    unsafe { gl::LightEnviSGIX(pname, param) };
}

pub fn retrace_glFrameZoomSGIX(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut factor: GLint;
    factor = (call.arg(0)).to_i32().unwrap();

//not found in gl!    unsafe { gl::FrameZoomSGIX(factor) };
}

pub fn retrace_glIglooInterfaceSGIX(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut pname: GLenum;
    pname = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLc_void];
//FIXME    memset(&params, 0, sizeof params); 

    if (1) {
    }
//not found in gl!    unsafe { gl::IglooInterfaceSGIX(pname, params) };
}

pub fn retrace_glInstrumentsBufferSGIX(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut size: GLsizei;
    size = (call.arg(0)).to_i32().unwrap();

    let buffer: &mut [GLint];
//FIXME    memset(&buffer, 0, sizeof buffer); 

    if (1) {
    }
//not found in gl!    unsafe { gl::InstrumentsBufferSGIX(size, buffer) };
}

pub fn retrace_glPollInstrumentsSGIX(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let marker_p: &mut [GLint];
    marker_p = _allocator.alloc_array::<GLint>(&call.arg(0));

//not found in gl!    let _result = unsafe { gl::PollInstrumentsSGIX(marker_p) };

    let _aPGLint28 = (call.arg(0)).to_array();
    if (_aPGLint28) {
    }
}

pub fn retrace_glReadInstrumentsSGIX(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut marker: GLint;
    marker = (call.arg(0)).to_i32().unwrap();

//not found in gl!    unsafe { gl::ReadInstrumentsSGIX(marker) };
}

pub fn retrace_glStartInstrumentsSGIX(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
//not found in gl!    unsafe { gl::StartInstrumentsSGIX() };
}

pub fn retrace_glStopInstrumentsSGIX(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut marker: GLint;
    marker = (call.arg(0)).to_i32().unwrap();

//not found in gl!    unsafe { gl::StopInstrumentsSGIX(marker) };
}

pub fn retrace_glListParameterfSGIX(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut list: GLuint;
    list = (call.arg(0)).to_u32().unwrap();
    list = self._list_map[list];

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut param: GLfloat;
    param = (call.arg(2)).to_f32().unwrap();

//not found in gl!    unsafe { gl::ListParameterfSGIX(list, pname, param) };
}

pub fn retrace_glListParameterfvSGIX(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut list: GLuint;
    list = (call.arg(0)).to_u32().unwrap();
    list = self._list_map[list];

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLfloat];
    params = _allocator.alloc_array::<GLfloat>(&call.arg(2));
    let _a_GLfloat285_0 = (call.arg(2)).to_array();
    if let Some(_a_GLfloat285_0) = _a_GLfloat285_0 {
        for _jGLfloat285 in 0.._a_GLfloat285_0.values.len() {
    params[_jGLfloat285] = (*_a_GLfloat285_0.values[_jGLfloat285]).to_f32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::ListParameterfvSGIX(list, pname, params) };
}

pub fn retrace_glListParameteriSGIX(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut list: GLuint;
    list = (call.arg(0)).to_u32().unwrap();
    list = self._list_map[list];

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut param: GLint;
    param = (call.arg(2)).to_i32().unwrap();

//not found in gl!    unsafe { gl::ListParameteriSGIX(list, pname, param) };
}

pub fn retrace_glListParameterivSGIX(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut list: GLuint;
    list = (call.arg(0)).to_u32().unwrap();
    list = self._list_map[list];

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLint];
    params = _allocator.alloc_array::<GLint>(&call.arg(2));
    let _a_GLint277_0 = (call.arg(2)).to_array();
    if let Some(_a_GLint277_0) = _a_GLint277_0 {
        for _jGLint277 in 0.._a_GLint277_0.values.len() {
    params[_jGLint277] = (*_a_GLint277_0.values[_jGLint277]).to_i32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::ListParameterivSGIX(list, pname, params) };
}

pub fn retrace_glPixelTexGenSGIX(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

//not found in gl!    unsafe { gl::PixelTexGenSGIX(mode) };
}

pub fn retrace_glDeformationMap3dSGIX(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut u1: GLdouble;
    u1 = (call.arg(1)).to_f64().unwrap();

    let mut u2: GLdouble;
    u2 = (call.arg(2)).to_f64().unwrap();

    let mut ustride: GLint;
    ustride = (call.arg(3)).to_i32().unwrap();

    let mut uorder: GLint;
    uorder = (call.arg(4)).to_i32().unwrap();

    let mut v1: GLdouble;
    v1 = (call.arg(5)).to_f64().unwrap();

    let mut v2: GLdouble;
    v2 = (call.arg(6)).to_f64().unwrap();

    let mut vstride: GLint;
    vstride = (call.arg(7)).to_i32().unwrap();

    let mut vorder: GLint;
    vorder = (call.arg(8)).to_i32().unwrap();

    let mut w1: GLdouble;
    w1 = (call.arg(9)).to_f64().unwrap();

    let mut w2: GLdouble;
    w2 = (call.arg(10)).to_f64().unwrap();

    let mut wstride: GLint;
    wstride = (call.arg(11)).to_i32().unwrap();

    let mut worder: GLint;
    worder = (call.arg(12)).to_i32().unwrap();

    let points: &mut [GLdouble];
//FIXME    memset(&points, 0, sizeof points); 

    if (1) {
    }
//not found in gl!    unsafe { gl::DeformationMap3dSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points) };
}

pub fn retrace_glDeformationMap3fSGIX(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut u1: GLfloat;
    u1 = (call.arg(1)).to_f32().unwrap();

    let mut u2: GLfloat;
    u2 = (call.arg(2)).to_f32().unwrap();

    let mut ustride: GLint;
    ustride = (call.arg(3)).to_i32().unwrap();

    let mut uorder: GLint;
    uorder = (call.arg(4)).to_i32().unwrap();

    let mut v1: GLfloat;
    v1 = (call.arg(5)).to_f32().unwrap();

    let mut v2: GLfloat;
    v2 = (call.arg(6)).to_f32().unwrap();

    let mut vstride: GLint;
    vstride = (call.arg(7)).to_i32().unwrap();

    let mut vorder: GLint;
    vorder = (call.arg(8)).to_i32().unwrap();

    let mut w1: GLfloat;
    w1 = (call.arg(9)).to_f32().unwrap();

    let mut w2: GLfloat;
    w2 = (call.arg(10)).to_f32().unwrap();

    let mut wstride: GLint;
    wstride = (call.arg(11)).to_i32().unwrap();

    let mut worder: GLint;
    worder = (call.arg(12)).to_i32().unwrap();

    let points: &mut [GLfloat];
//FIXME    memset(&points, 0, sizeof points); 

    if (1) {
    }
//not found in gl!    unsafe { gl::DeformationMap3fSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points) };
}

pub fn retrace_glDeformSGIX(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mask: GLbitfield;
    mask = (call.arg(0)).to_u32().unwrap();

//not found in gl!    unsafe { gl::DeformSGIX(mask) };
}

pub fn retrace_glLoadIdentityDeformationMapSGIX(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mask: GLbitfield;
    mask = (call.arg(0)).to_u32().unwrap();

//not found in gl!    unsafe { gl::LoadIdentityDeformationMapSGIX(mask) };
}

pub fn retrace_glReferencePlaneSGIX(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let equation: &mut [GLdouble];
    equation = _allocator.alloc_array::<GLdouble>(&call.arg(0));
    let _a_GLdouble144_0 = (call.arg(0)).to_array();
    if let Some(_a_GLdouble144_0) = _a_GLdouble144_0 {
        for _jGLdouble144 in 0.._a_GLdouble144_0.values.len() {
    equation[_jGLdouble144] = (*_a_GLdouble144_0.values[_jGLdouble144]).to_f64().unwrap();
        }
    }
    let equation = equation.as_mut_ptr();

//not found in gl!    unsafe { gl::ReferencePlaneSGIX(equation) };
}

pub fn retrace_glSpriteParameterfSGIX(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut pname: GLenum;
    pname = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut param: GLfloat;
    param = (call.arg(1)).to_f32().unwrap();

//not found in gl!    unsafe { gl::SpriteParameterfSGIX(pname, param) };
}

pub fn retrace_glSpriteParameterfvSGIX(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut pname: GLenum;
    pname = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLfloat];
    params = _allocator.alloc_array::<GLfloat>(&call.arg(1));
    let _a_GLfloat286_0 = (call.arg(1)).to_array();
    if let Some(_a_GLfloat286_0) = _a_GLfloat286_0 {
        for _jGLfloat286 in 0.._a_GLfloat286_0.values.len() {
    params[_jGLfloat286] = (*_a_GLfloat286_0.values[_jGLfloat286]).to_f32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::SpriteParameterfvSGIX(pname, params) };
}

pub fn retrace_glSpriteParameteriSGIX(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut pname: GLenum;
    pname = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut param: GLint;
    param = (call.arg(1)).to_i32().unwrap();

//not found in gl!    unsafe { gl::SpriteParameteriSGIX(pname, param) };
}

pub fn retrace_glSpriteParameterivSGIX(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut pname: GLenum;
    pname = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLint];
    params = _allocator.alloc_array::<GLint>(&call.arg(1));
    let _a_GLint278_0 = (call.arg(1)).to_array();
    if let Some(_a_GLint278_0) = _a_GLint278_0 {
        for _jGLint278 in 0.._a_GLint278_0.values.len() {
    params[_jGLint278] = (*_a_GLint278_0.values[_jGLint278]).to_i32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::SpriteParameterivSGIX(pname, params) };
}

pub fn retrace_glTagSampleBufferSGIX(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
//not found in gl!    unsafe { gl::TagSampleBufferSGIX() };
}

pub fn retrace_glColorTableSGI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut internalformat: GLenum;
    internalformat = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut width: GLsizei;
    width = (call.arg(2)).to_i32().unwrap();

    let mut format: GLenum;
    format = (call.arg(3)).to_u32().unwrap().try_into().unwrap();

    let mut _type: GLenum;
    _type = (call.arg(4)).to_u32().unwrap().try_into().unwrap();

    let table: &mut [GLc_void];
    let table = (call.arg(5)).to_pointer().unwrap() as *mut c_void;

//not found in gl!    unsafe { gl::ColorTableSGI(target, internalformat, width, format, _type, table) };
}

pub fn retrace_glColorTableParameterfvSGI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLfloat];
    params = _allocator.alloc_array::<GLfloat>(&call.arg(2));
    let _a_GLfloat287_0 = (call.arg(2)).to_array();
    if let Some(_a_GLfloat287_0) = _a_GLfloat287_0 {
        for _jGLfloat287 in 0.._a_GLfloat287_0.values.len() {
    params[_jGLfloat287] = (*_a_GLfloat287_0.values[_jGLfloat287]).to_f32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::ColorTableParameterfvSGI(target, pname, params) };
}

pub fn retrace_glColorTableParameterivSGI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut pname: GLenum;
    pname = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let params: &mut [GLint];
    params = _allocator.alloc_array::<GLint>(&call.arg(2));
    let _a_GLint279_0 = (call.arg(2)).to_array();
    if let Some(_a_GLint279_0) = _a_GLint279_0 {
        for _jGLint279 in 0.._a_GLint279_0.values.len() {
    params[_jGLint279] = (*_a_GLint279_0.values[_jGLint279]).to_i32().unwrap();
        }
    }
    let params = params.as_mut_ptr();

//not found in gl!    unsafe { gl::ColorTableParameterivSGI(target, pname, params) };
}

pub fn retrace_glCopyColorTableSGI(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut target: GLenum;
    target = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut internalformat: GLenum;
    internalformat = (call.arg(1)).to_u32().unwrap().try_into().unwrap();

    let mut x: GLint;
    x = (call.arg(2)).to_i32().unwrap();

    let mut y: GLint;
    y = (call.arg(3)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(4)).to_i32().unwrap();

//not found in gl!    unsafe { gl::CopyColorTableSGI(target, internalformat, x, y, width) };
}

pub fn retrace_glFinishTextureSUNX(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
//not found in gl!    unsafe { gl::FinishTextureSUNX() };
}

pub fn retrace_glGlobalAlphaFactorbSUN(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut factor: GLbyte;
    factor = (call.arg(0)).to_i32().unwrap();

//not found in gl!    unsafe { gl::GlobalAlphaFactorbSUN(factor) };
}

pub fn retrace_glGlobalAlphaFactorsSUN(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut factor: GLshort;
    factor = (call.arg(0)).to_i32().unwrap();

//not found in gl!    unsafe { gl::GlobalAlphaFactorsSUN(factor) };
}

pub fn retrace_glGlobalAlphaFactoriSUN(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut factor: GLint;
    factor = (call.arg(0)).to_i32().unwrap();

//not found in gl!    unsafe { gl::GlobalAlphaFactoriSUN(factor) };
}

pub fn retrace_glGlobalAlphaFactorfSUN(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut factor: GLfloat;
    factor = (call.arg(0)).to_f32().unwrap();

//not found in gl!    unsafe { gl::GlobalAlphaFactorfSUN(factor) };
}

pub fn retrace_glGlobalAlphaFactordSUN(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut factor: GLdouble;
    factor = (call.arg(0)).to_f64().unwrap();

//not found in gl!    unsafe { gl::GlobalAlphaFactordSUN(factor) };
}

pub fn retrace_glGlobalAlphaFactorubSUN(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut factor: GLubyte;
    factor = (call.arg(0)).to_u32().unwrap();

//not found in gl!    unsafe { gl::GlobalAlphaFactorubSUN(factor) };
}

pub fn retrace_glGlobalAlphaFactorusSUN(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut factor: GLushort;
    factor = (call.arg(0)).to_u32().unwrap();

//not found in gl!    unsafe { gl::GlobalAlphaFactorusSUN(factor) };
}

pub fn retrace_glGlobalAlphaFactoruiSUN(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut factor: GLuint;
    factor = (call.arg(0)).to_u32().unwrap();

//not found in gl!    unsafe { gl::GlobalAlphaFactoruiSUN(factor) };
}

pub fn retrace_glDrawMeshArraysSUN(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut mode: GLenum;
    mode = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut first: GLint;
    first = (call.arg(1)).to_i32().unwrap();

    let mut count: GLsizei;
    count = (call.arg(2)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(3)).to_i32().unwrap();

//not found in gl!    unsafe { gl::DrawMeshArraysSUN(mode, first, count, width) };
}

pub fn retrace_glReplacementCodeuiSUN(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut code: GLuint;
    code = (call.arg(0)).to_u32().unwrap();

//not found in gl!    unsafe { gl::ReplacementCodeuiSUN(code) };
}

pub fn retrace_glReplacementCodeusSUN(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut code: GLushort;
    code = (call.arg(0)).to_u32().unwrap();

//not found in gl!    unsafe { gl::ReplacementCodeusSUN(code) };
}

pub fn retrace_glReplacementCodeubSUN(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut code: GLubyte;
    code = (call.arg(0)).to_u32().unwrap();

//not found in gl!    unsafe { gl::ReplacementCodeubSUN(code) };
}

pub fn retrace_glReplacementCodeuivSUN(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let code: &mut [GLuint];
//FIXME    memset(&code, 0, sizeof code); 

    if (1) {
    }
//not found in gl!    unsafe { gl::ReplacementCodeuivSUN(code) };
}

pub fn retrace_glReplacementCodeusvSUN(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let code: &mut [GLushort];
//FIXME    memset(&code, 0, sizeof code); 

    if (1) {
    }
//not found in gl!    unsafe { gl::ReplacementCodeusvSUN(code) };
}

pub fn retrace_glReplacementCodeubvSUN(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let code: &mut [GLubyte];
//FIXME    memset(&code, 0, sizeof code); 

    if (1) {
    }
//not found in gl!    unsafe { gl::ReplacementCodeubvSUN(code) };
}

pub fn retrace_glReplacementCodePointerSUN(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut _type: GLenum;
    _type = (call.arg(0)).to_u32().unwrap().try_into().unwrap();

    let mut stride: GLsizei;
    stride = (call.arg(1)).to_i32().unwrap();

    let pointer: &mut [GLc_void];
//FIXME    memset(&pointer, 0, sizeof pointer); 

    if (1) {
    }
//not found in gl!    unsafe { gl::ReplacementCodePointerSUN(_type, stride, pointer) };
}

pub fn retrace_glColor4ubVertex2fSUN(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut r: GLubyte;
    r = (call.arg(0)).to_u32().unwrap();

    let mut g: GLubyte;
    g = (call.arg(1)).to_u32().unwrap();

    let mut b: GLubyte;
    b = (call.arg(2)).to_u32().unwrap();

    let mut a: GLubyte;
    a = (call.arg(3)).to_u32().unwrap();

    let mut x: GLfloat;
    x = (call.arg(4)).to_f32().unwrap();

    let mut y: GLfloat;
    y = (call.arg(5)).to_f32().unwrap();

//not found in gl!    unsafe { gl::Color4ubVertex2fSUN(r, g, b, a, x, y) };
}

pub fn retrace_glColor4ubVertex2fvSUN(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let c: &mut [GLubyte];
    c = _allocator.alloc_array::<GLubyte>(&call.arg(0));
    let _a_GLubyte25_0 = (call.arg(0)).to_array();
    if let Some(_a_GLubyte25_0) = _a_GLubyte25_0 {
        for _jGLubyte25 in 0.._a_GLubyte25_0.values.len() {
    c[_jGLubyte25] = (*_a_GLubyte25_0.values[_jGLubyte25]).to_u32().unwrap();
        }
    }
    let c = c.as_mut_ptr();

    let v: &mut [GLfloat];
    v = _allocator.alloc_array::<GLfloat>(&call.arg(1));
    let _a_GLfloat288_0 = (call.arg(1)).to_array();
    if let Some(_a_GLfloat288_0) = _a_GLfloat288_0 {
        for _jGLfloat288 in 0.._a_GLfloat288_0.values.len() {
    v[_jGLfloat288] = (*_a_GLfloat288_0.values[_jGLfloat288]).to_f32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::Color4ubVertex2fvSUN(c, v) };
}

pub fn retrace_glColor4ubVertex3fSUN(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut r: GLubyte;
    r = (call.arg(0)).to_u32().unwrap();

    let mut g: GLubyte;
    g = (call.arg(1)).to_u32().unwrap();

    let mut b: GLubyte;
    b = (call.arg(2)).to_u32().unwrap();

    let mut a: GLubyte;
    a = (call.arg(3)).to_u32().unwrap();

    let mut x: GLfloat;
    x = (call.arg(4)).to_f32().unwrap();

    let mut y: GLfloat;
    y = (call.arg(5)).to_f32().unwrap();

    let mut z: GLfloat;
    z = (call.arg(6)).to_f32().unwrap();

//not found in gl!    unsafe { gl::Color4ubVertex3fSUN(r, g, b, a, x, y, z) };
}

pub fn retrace_glColor4ubVertex3fvSUN(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let c: &mut [GLubyte];
    c = _allocator.alloc_array::<GLubyte>(&call.arg(0));
    let _a_GLubyte26_0 = (call.arg(0)).to_array();
    if let Some(_a_GLubyte26_0) = _a_GLubyte26_0 {
        for _jGLubyte26 in 0.._a_GLubyte26_0.values.len() {
    c[_jGLubyte26] = (*_a_GLubyte26_0.values[_jGLubyte26]).to_u32().unwrap();
        }
    }
    let c = c.as_mut_ptr();

    let v: &mut [GLfloat];
    v = _allocator.alloc_array::<GLfloat>(&call.arg(1));
    let _a_GLfloat289_0 = (call.arg(1)).to_array();
    if let Some(_a_GLfloat289_0) = _a_GLfloat289_0 {
        for _jGLfloat289 in 0.._a_GLfloat289_0.values.len() {
    v[_jGLfloat289] = (*_a_GLfloat289_0.values[_jGLfloat289]).to_f32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::Color4ubVertex3fvSUN(c, v) };
}

pub fn retrace_glColor3fVertex3fSUN(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut r: GLfloat;
    r = (call.arg(0)).to_f32().unwrap();

    let mut g: GLfloat;
    g = (call.arg(1)).to_f32().unwrap();

    let mut b: GLfloat;
    b = (call.arg(2)).to_f32().unwrap();

    let mut x: GLfloat;
    x = (call.arg(3)).to_f32().unwrap();

    let mut y: GLfloat;
    y = (call.arg(4)).to_f32().unwrap();

    let mut z: GLfloat;
    z = (call.arg(5)).to_f32().unwrap();

//not found in gl!    unsafe { gl::Color3fVertex3fSUN(r, g, b, x, y, z) };
}

pub fn retrace_glColor3fVertex3fvSUN(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let c: &mut [GLfloat];
    c = _allocator.alloc_array::<GLfloat>(&call.arg(0));
    let _a_GLfloat290_0 = (call.arg(0)).to_array();
    if let Some(_a_GLfloat290_0) = _a_GLfloat290_0 {
        for _jGLfloat290 in 0.._a_GLfloat290_0.values.len() {
    c[_jGLfloat290] = (*_a_GLfloat290_0.values[_jGLfloat290]).to_f32().unwrap();
        }
    }
    let c = c.as_mut_ptr();

    let v: &mut [GLfloat];
    v = _allocator.alloc_array::<GLfloat>(&call.arg(1));
    let _a_GLfloat291_0 = (call.arg(1)).to_array();
    if let Some(_a_GLfloat291_0) = _a_GLfloat291_0 {
        for _jGLfloat291 in 0.._a_GLfloat291_0.values.len() {
    v[_jGLfloat291] = (*_a_GLfloat291_0.values[_jGLfloat291]).to_f32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::Color3fVertex3fvSUN(c, v) };
}

pub fn retrace_glNormal3fVertex3fSUN(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut nx: GLfloat;
    nx = (call.arg(0)).to_f32().unwrap();

    let mut ny: GLfloat;
    ny = (call.arg(1)).to_f32().unwrap();

    let mut nz: GLfloat;
    nz = (call.arg(2)).to_f32().unwrap();

    let mut x: GLfloat;
    x = (call.arg(3)).to_f32().unwrap();

    let mut y: GLfloat;
    y = (call.arg(4)).to_f32().unwrap();

    let mut z: GLfloat;
    z = (call.arg(5)).to_f32().unwrap();

//not found in gl!    unsafe { gl::Normal3fVertex3fSUN(nx, ny, nz, x, y, z) };
}

pub fn retrace_glNormal3fVertex3fvSUN(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let n: &mut [GLfloat];
    n = _allocator.alloc_array::<GLfloat>(&call.arg(0));
    let _a_GLfloat292_0 = (call.arg(0)).to_array();
    if let Some(_a_GLfloat292_0) = _a_GLfloat292_0 {
        for _jGLfloat292 in 0.._a_GLfloat292_0.values.len() {
    n[_jGLfloat292] = (*_a_GLfloat292_0.values[_jGLfloat292]).to_f32().unwrap();
        }
    }
    let n = n.as_mut_ptr();

    let v: &mut [GLfloat];
    v = _allocator.alloc_array::<GLfloat>(&call.arg(1));
    let _a_GLfloat293_0 = (call.arg(1)).to_array();
    if let Some(_a_GLfloat293_0) = _a_GLfloat293_0 {
        for _jGLfloat293 in 0.._a_GLfloat293_0.values.len() {
    v[_jGLfloat293] = (*_a_GLfloat293_0.values[_jGLfloat293]).to_f32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::Normal3fVertex3fvSUN(n, v) };
}

pub fn retrace_glColor4fNormal3fVertex3fSUN(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut r: GLfloat;
    r = (call.arg(0)).to_f32().unwrap();

    let mut g: GLfloat;
    g = (call.arg(1)).to_f32().unwrap();

    let mut b: GLfloat;
    b = (call.arg(2)).to_f32().unwrap();

    let mut a: GLfloat;
    a = (call.arg(3)).to_f32().unwrap();

    let mut nx: GLfloat;
    nx = (call.arg(4)).to_f32().unwrap();

    let mut ny: GLfloat;
    ny = (call.arg(5)).to_f32().unwrap();

    let mut nz: GLfloat;
    nz = (call.arg(6)).to_f32().unwrap();

    let mut x: GLfloat;
    x = (call.arg(7)).to_f32().unwrap();

    let mut y: GLfloat;
    y = (call.arg(8)).to_f32().unwrap();

    let mut z: GLfloat;
    z = (call.arg(9)).to_f32().unwrap();

//not found in gl!    unsafe { gl::Color4fNormal3fVertex3fSUN(r, g, b, a, nx, ny, nz, x, y, z) };
}

pub fn retrace_glColor4fNormal3fVertex3fvSUN(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let c: &mut [GLfloat];
    c = _allocator.alloc_array::<GLfloat>(&call.arg(0));
    let _a_GLfloat294_0 = (call.arg(0)).to_array();
    if let Some(_a_GLfloat294_0) = _a_GLfloat294_0 {
        for _jGLfloat294 in 0.._a_GLfloat294_0.values.len() {
    c[_jGLfloat294] = (*_a_GLfloat294_0.values[_jGLfloat294]).to_f32().unwrap();
        }
    }
    let c = c.as_mut_ptr();

    let n: &mut [GLfloat];
    n = _allocator.alloc_array::<GLfloat>(&call.arg(1));
    let _a_GLfloat295_0 = (call.arg(1)).to_array();
    if let Some(_a_GLfloat295_0) = _a_GLfloat295_0 {
        for _jGLfloat295 in 0.._a_GLfloat295_0.values.len() {
    n[_jGLfloat295] = (*_a_GLfloat295_0.values[_jGLfloat295]).to_f32().unwrap();
        }
    }
    let n = n.as_mut_ptr();

    let v: &mut [GLfloat];
    v = _allocator.alloc_array::<GLfloat>(&call.arg(2));
    let _a_GLfloat296_0 = (call.arg(2)).to_array();
    if let Some(_a_GLfloat296_0) = _a_GLfloat296_0 {
        for _jGLfloat296 in 0.._a_GLfloat296_0.values.len() {
    v[_jGLfloat296] = (*_a_GLfloat296_0.values[_jGLfloat296]).to_f32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::Color4fNormal3fVertex3fvSUN(c, n, v) };
}

pub fn retrace_glTexCoord2fVertex3fSUN(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut s: GLfloat;
    s = (call.arg(0)).to_f32().unwrap();

    let mut t: GLfloat;
    t = (call.arg(1)).to_f32().unwrap();

    let mut x: GLfloat;
    x = (call.arg(2)).to_f32().unwrap();

    let mut y: GLfloat;
    y = (call.arg(3)).to_f32().unwrap();

    let mut z: GLfloat;
    z = (call.arg(4)).to_f32().unwrap();

//not found in gl!    unsafe { gl::TexCoord2fVertex3fSUN(s, t, x, y, z) };
}

pub fn retrace_glTexCoord2fVertex3fvSUN(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let tc: &mut [GLfloat];
    tc = _allocator.alloc_array::<GLfloat>(&call.arg(0));
    let _a_GLfloat297_0 = (call.arg(0)).to_array();
    if let Some(_a_GLfloat297_0) = _a_GLfloat297_0 {
        for _jGLfloat297 in 0.._a_GLfloat297_0.values.len() {
    tc[_jGLfloat297] = (*_a_GLfloat297_0.values[_jGLfloat297]).to_f32().unwrap();
        }
    }
    let tc = tc.as_mut_ptr();

    let v: &mut [GLfloat];
    v = _allocator.alloc_array::<GLfloat>(&call.arg(1));
    let _a_GLfloat298_0 = (call.arg(1)).to_array();
    if let Some(_a_GLfloat298_0) = _a_GLfloat298_0 {
        for _jGLfloat298 in 0.._a_GLfloat298_0.values.len() {
    v[_jGLfloat298] = (*_a_GLfloat298_0.values[_jGLfloat298]).to_f32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::TexCoord2fVertex3fvSUN(tc, v) };
}

pub fn retrace_glTexCoord4fVertex4fSUN(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut s: GLfloat;
    s = (call.arg(0)).to_f32().unwrap();

    let mut t: GLfloat;
    t = (call.arg(1)).to_f32().unwrap();

    let mut p: GLfloat;
    p = (call.arg(2)).to_f32().unwrap();

    let mut q: GLfloat;
    q = (call.arg(3)).to_f32().unwrap();

    let mut x: GLfloat;
    x = (call.arg(4)).to_f32().unwrap();

    let mut y: GLfloat;
    y = (call.arg(5)).to_f32().unwrap();

    let mut z: GLfloat;
    z = (call.arg(6)).to_f32().unwrap();

    let mut w: GLfloat;
    w = (call.arg(7)).to_f32().unwrap();

//not found in gl!    unsafe { gl::TexCoord4fVertex4fSUN(s, t, p, q, x, y, z, w) };
}

pub fn retrace_glTexCoord4fVertex4fvSUN(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let tc: &mut [GLfloat];
    tc = _allocator.alloc_array::<GLfloat>(&call.arg(0));
    let _a_GLfloat299_0 = (call.arg(0)).to_array();
    if let Some(_a_GLfloat299_0) = _a_GLfloat299_0 {
        for _jGLfloat299 in 0.._a_GLfloat299_0.values.len() {
    tc[_jGLfloat299] = (*_a_GLfloat299_0.values[_jGLfloat299]).to_f32().unwrap();
        }
    }
    let tc = tc.as_mut_ptr();

    let v: &mut [GLfloat];
    v = _allocator.alloc_array::<GLfloat>(&call.arg(1));
    let _a_GLfloat300_0 = (call.arg(1)).to_array();
    if let Some(_a_GLfloat300_0) = _a_GLfloat300_0 {
        for _jGLfloat300 in 0.._a_GLfloat300_0.values.len() {
    v[_jGLfloat300] = (*_a_GLfloat300_0.values[_jGLfloat300]).to_f32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::TexCoord4fVertex4fvSUN(tc, v) };
}

pub fn retrace_glTexCoord2fColor4ubVertex3fSUN(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut s: GLfloat;
    s = (call.arg(0)).to_f32().unwrap();

    let mut t: GLfloat;
    t = (call.arg(1)).to_f32().unwrap();

    let mut r: GLubyte;
    r = (call.arg(2)).to_u32().unwrap();

    let mut g: GLubyte;
    g = (call.arg(3)).to_u32().unwrap();

    let mut b: GLubyte;
    b = (call.arg(4)).to_u32().unwrap();

    let mut a: GLubyte;
    a = (call.arg(5)).to_u32().unwrap();

    let mut x: GLfloat;
    x = (call.arg(6)).to_f32().unwrap();

    let mut y: GLfloat;
    y = (call.arg(7)).to_f32().unwrap();

    let mut z: GLfloat;
    z = (call.arg(8)).to_f32().unwrap();

//not found in gl!    unsafe { gl::TexCoord2fColor4ubVertex3fSUN(s, t, r, g, b, a, x, y, z) };
}

pub fn retrace_glTexCoord2fColor4ubVertex3fvSUN(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let tc: &mut [GLfloat];
    tc = _allocator.alloc_array::<GLfloat>(&call.arg(0));
    let _a_GLfloat301_0 = (call.arg(0)).to_array();
    if let Some(_a_GLfloat301_0) = _a_GLfloat301_0 {
        for _jGLfloat301 in 0.._a_GLfloat301_0.values.len() {
    tc[_jGLfloat301] = (*_a_GLfloat301_0.values[_jGLfloat301]).to_f32().unwrap();
        }
    }
    let tc = tc.as_mut_ptr();

    let c: &mut [GLubyte];
    c = _allocator.alloc_array::<GLubyte>(&call.arg(1));
    let _a_GLubyte27_0 = (call.arg(1)).to_array();
    if let Some(_a_GLubyte27_0) = _a_GLubyte27_0 {
        for _jGLubyte27 in 0.._a_GLubyte27_0.values.len() {
    c[_jGLubyte27] = (*_a_GLubyte27_0.values[_jGLubyte27]).to_u32().unwrap();
        }
    }
    let c = c.as_mut_ptr();

    let v: &mut [GLfloat];
    v = _allocator.alloc_array::<GLfloat>(&call.arg(2));
    let _a_GLfloat302_0 = (call.arg(2)).to_array();
    if let Some(_a_GLfloat302_0) = _a_GLfloat302_0 {
        for _jGLfloat302 in 0.._a_GLfloat302_0.values.len() {
    v[_jGLfloat302] = (*_a_GLfloat302_0.values[_jGLfloat302]).to_f32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::TexCoord2fColor4ubVertex3fvSUN(tc, c, v) };
}

pub fn retrace_glTexCoord2fColor3fVertex3fSUN(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut s: GLfloat;
    s = (call.arg(0)).to_f32().unwrap();

    let mut t: GLfloat;
    t = (call.arg(1)).to_f32().unwrap();

    let mut r: GLfloat;
    r = (call.arg(2)).to_f32().unwrap();

    let mut g: GLfloat;
    g = (call.arg(3)).to_f32().unwrap();

    let mut b: GLfloat;
    b = (call.arg(4)).to_f32().unwrap();

    let mut x: GLfloat;
    x = (call.arg(5)).to_f32().unwrap();

    let mut y: GLfloat;
    y = (call.arg(6)).to_f32().unwrap();

    let mut z: GLfloat;
    z = (call.arg(7)).to_f32().unwrap();

//not found in gl!    unsafe { gl::TexCoord2fColor3fVertex3fSUN(s, t, r, g, b, x, y, z) };
}

pub fn retrace_glTexCoord2fColor3fVertex3fvSUN(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let tc: &mut [GLfloat];
    tc = _allocator.alloc_array::<GLfloat>(&call.arg(0));
    let _a_GLfloat303_0 = (call.arg(0)).to_array();
    if let Some(_a_GLfloat303_0) = _a_GLfloat303_0 {
        for _jGLfloat303 in 0.._a_GLfloat303_0.values.len() {
    tc[_jGLfloat303] = (*_a_GLfloat303_0.values[_jGLfloat303]).to_f32().unwrap();
        }
    }
    let tc = tc.as_mut_ptr();

    let c: &mut [GLfloat];
    c = _allocator.alloc_array::<GLfloat>(&call.arg(1));
    let _a_GLfloat304_0 = (call.arg(1)).to_array();
    if let Some(_a_GLfloat304_0) = _a_GLfloat304_0 {
        for _jGLfloat304 in 0.._a_GLfloat304_0.values.len() {
    c[_jGLfloat304] = (*_a_GLfloat304_0.values[_jGLfloat304]).to_f32().unwrap();
        }
    }
    let c = c.as_mut_ptr();

    let v: &mut [GLfloat];
    v = _allocator.alloc_array::<GLfloat>(&call.arg(2));
    let _a_GLfloat305_0 = (call.arg(2)).to_array();
    if let Some(_a_GLfloat305_0) = _a_GLfloat305_0 {
        for _jGLfloat305 in 0.._a_GLfloat305_0.values.len() {
    v[_jGLfloat305] = (*_a_GLfloat305_0.values[_jGLfloat305]).to_f32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::TexCoord2fColor3fVertex3fvSUN(tc, c, v) };
}

pub fn retrace_glTexCoord2fNormal3fVertex3fSUN(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut s: GLfloat;
    s = (call.arg(0)).to_f32().unwrap();

    let mut t: GLfloat;
    t = (call.arg(1)).to_f32().unwrap();

    let mut nx: GLfloat;
    nx = (call.arg(2)).to_f32().unwrap();

    let mut ny: GLfloat;
    ny = (call.arg(3)).to_f32().unwrap();

    let mut nz: GLfloat;
    nz = (call.arg(4)).to_f32().unwrap();

    let mut x: GLfloat;
    x = (call.arg(5)).to_f32().unwrap();

    let mut y: GLfloat;
    y = (call.arg(6)).to_f32().unwrap();

    let mut z: GLfloat;
    z = (call.arg(7)).to_f32().unwrap();

//not found in gl!    unsafe { gl::TexCoord2fNormal3fVertex3fSUN(s, t, nx, ny, nz, x, y, z) };
}

pub fn retrace_glTexCoord2fNormal3fVertex3fvSUN(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let tc: &mut [GLfloat];
    tc = _allocator.alloc_array::<GLfloat>(&call.arg(0));
    let _a_GLfloat306_0 = (call.arg(0)).to_array();
    if let Some(_a_GLfloat306_0) = _a_GLfloat306_0 {
        for _jGLfloat306 in 0.._a_GLfloat306_0.values.len() {
    tc[_jGLfloat306] = (*_a_GLfloat306_0.values[_jGLfloat306]).to_f32().unwrap();
        }
    }
    let tc = tc.as_mut_ptr();

    let n: &mut [GLfloat];
    n = _allocator.alloc_array::<GLfloat>(&call.arg(1));
    let _a_GLfloat307_0 = (call.arg(1)).to_array();
    if let Some(_a_GLfloat307_0) = _a_GLfloat307_0 {
        for _jGLfloat307 in 0.._a_GLfloat307_0.values.len() {
    n[_jGLfloat307] = (*_a_GLfloat307_0.values[_jGLfloat307]).to_f32().unwrap();
        }
    }
    let n = n.as_mut_ptr();

    let v: &mut [GLfloat];
    v = _allocator.alloc_array::<GLfloat>(&call.arg(2));
    let _a_GLfloat308_0 = (call.arg(2)).to_array();
    if let Some(_a_GLfloat308_0) = _a_GLfloat308_0 {
        for _jGLfloat308 in 0.._a_GLfloat308_0.values.len() {
    v[_jGLfloat308] = (*_a_GLfloat308_0.values[_jGLfloat308]).to_f32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::TexCoord2fNormal3fVertex3fvSUN(tc, n, v) };
}

pub fn retrace_glTexCoord2fColor4fNormal3fVertex3fSUN(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut s: GLfloat;
    s = (call.arg(0)).to_f32().unwrap();

    let mut t: GLfloat;
    t = (call.arg(1)).to_f32().unwrap();

    let mut r: GLfloat;
    r = (call.arg(2)).to_f32().unwrap();

    let mut g: GLfloat;
    g = (call.arg(3)).to_f32().unwrap();

    let mut b: GLfloat;
    b = (call.arg(4)).to_f32().unwrap();

    let mut a: GLfloat;
    a = (call.arg(5)).to_f32().unwrap();

    let mut nx: GLfloat;
    nx = (call.arg(6)).to_f32().unwrap();

    let mut ny: GLfloat;
    ny = (call.arg(7)).to_f32().unwrap();

    let mut nz: GLfloat;
    nz = (call.arg(8)).to_f32().unwrap();

    let mut x: GLfloat;
    x = (call.arg(9)).to_f32().unwrap();

    let mut y: GLfloat;
    y = (call.arg(10)).to_f32().unwrap();

    let mut z: GLfloat;
    z = (call.arg(11)).to_f32().unwrap();

//not found in gl!    unsafe { gl::TexCoord2fColor4fNormal3fVertex3fSUN(s, t, r, g, b, a, nx, ny, nz, x, y, z) };
}

pub fn retrace_glTexCoord2fColor4fNormal3fVertex3fvSUN(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let tc: &mut [GLfloat];
    tc = _allocator.alloc_array::<GLfloat>(&call.arg(0));
    let _a_GLfloat309_0 = (call.arg(0)).to_array();
    if let Some(_a_GLfloat309_0) = _a_GLfloat309_0 {
        for _jGLfloat309 in 0.._a_GLfloat309_0.values.len() {
    tc[_jGLfloat309] = (*_a_GLfloat309_0.values[_jGLfloat309]).to_f32().unwrap();
        }
    }
    let tc = tc.as_mut_ptr();

    let c: &mut [GLfloat];
    c = _allocator.alloc_array::<GLfloat>(&call.arg(1));
    let _a_GLfloat310_0 = (call.arg(1)).to_array();
    if let Some(_a_GLfloat310_0) = _a_GLfloat310_0 {
        for _jGLfloat310 in 0.._a_GLfloat310_0.values.len() {
    c[_jGLfloat310] = (*_a_GLfloat310_0.values[_jGLfloat310]).to_f32().unwrap();
        }
    }
    let c = c.as_mut_ptr();

    let n: &mut [GLfloat];
    n = _allocator.alloc_array::<GLfloat>(&call.arg(2));
    let _a_GLfloat311_0 = (call.arg(2)).to_array();
    if let Some(_a_GLfloat311_0) = _a_GLfloat311_0 {
        for _jGLfloat311 in 0.._a_GLfloat311_0.values.len() {
    n[_jGLfloat311] = (*_a_GLfloat311_0.values[_jGLfloat311]).to_f32().unwrap();
        }
    }
    let n = n.as_mut_ptr();

    let v: &mut [GLfloat];
    v = _allocator.alloc_array::<GLfloat>(&call.arg(3));
    let _a_GLfloat312_0 = (call.arg(3)).to_array();
    if let Some(_a_GLfloat312_0) = _a_GLfloat312_0 {
        for _jGLfloat312 in 0.._a_GLfloat312_0.values.len() {
    v[_jGLfloat312] = (*_a_GLfloat312_0.values[_jGLfloat312]).to_f32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::TexCoord2fColor4fNormal3fVertex3fvSUN(tc, c, n, v) };
}

pub fn retrace_glTexCoord4fColor4fNormal3fVertex4fSUN(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut s: GLfloat;
    s = (call.arg(0)).to_f32().unwrap();

    let mut t: GLfloat;
    t = (call.arg(1)).to_f32().unwrap();

    let mut p: GLfloat;
    p = (call.arg(2)).to_f32().unwrap();

    let mut q: GLfloat;
    q = (call.arg(3)).to_f32().unwrap();

    let mut r: GLfloat;
    r = (call.arg(4)).to_f32().unwrap();

    let mut g: GLfloat;
    g = (call.arg(5)).to_f32().unwrap();

    let mut b: GLfloat;
    b = (call.arg(6)).to_f32().unwrap();

    let mut a: GLfloat;
    a = (call.arg(7)).to_f32().unwrap();

    let mut nx: GLfloat;
    nx = (call.arg(8)).to_f32().unwrap();

    let mut ny: GLfloat;
    ny = (call.arg(9)).to_f32().unwrap();

    let mut nz: GLfloat;
    nz = (call.arg(10)).to_f32().unwrap();

    let mut x: GLfloat;
    x = (call.arg(11)).to_f32().unwrap();

    let mut y: GLfloat;
    y = (call.arg(12)).to_f32().unwrap();

    let mut z: GLfloat;
    z = (call.arg(13)).to_f32().unwrap();

    let mut w: GLfloat;
    w = (call.arg(14)).to_f32().unwrap();

//not found in gl!    unsafe { gl::TexCoord4fColor4fNormal3fVertex4fSUN(s, t, p, q, r, g, b, a, nx, ny, nz, x, y, z, w) };
}

pub fn retrace_glTexCoord4fColor4fNormal3fVertex4fvSUN(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let tc: &mut [GLfloat];
    tc = _allocator.alloc_array::<GLfloat>(&call.arg(0));
    let _a_GLfloat313_0 = (call.arg(0)).to_array();
    if let Some(_a_GLfloat313_0) = _a_GLfloat313_0 {
        for _jGLfloat313 in 0.._a_GLfloat313_0.values.len() {
    tc[_jGLfloat313] = (*_a_GLfloat313_0.values[_jGLfloat313]).to_f32().unwrap();
        }
    }
    let tc = tc.as_mut_ptr();

    let c: &mut [GLfloat];
    c = _allocator.alloc_array::<GLfloat>(&call.arg(1));
    let _a_GLfloat314_0 = (call.arg(1)).to_array();
    if let Some(_a_GLfloat314_0) = _a_GLfloat314_0 {
        for _jGLfloat314 in 0.._a_GLfloat314_0.values.len() {
    c[_jGLfloat314] = (*_a_GLfloat314_0.values[_jGLfloat314]).to_f32().unwrap();
        }
    }
    let c = c.as_mut_ptr();

    let n: &mut [GLfloat];
    n = _allocator.alloc_array::<GLfloat>(&call.arg(2));
    let _a_GLfloat315_0 = (call.arg(2)).to_array();
    if let Some(_a_GLfloat315_0) = _a_GLfloat315_0 {
        for _jGLfloat315 in 0.._a_GLfloat315_0.values.len() {
    n[_jGLfloat315] = (*_a_GLfloat315_0.values[_jGLfloat315]).to_f32().unwrap();
        }
    }
    let n = n.as_mut_ptr();

    let v: &mut [GLfloat];
    v = _allocator.alloc_array::<GLfloat>(&call.arg(3));
    let _a_GLfloat316_0 = (call.arg(3)).to_array();
    if let Some(_a_GLfloat316_0) = _a_GLfloat316_0 {
        for _jGLfloat316 in 0.._a_GLfloat316_0.values.len() {
    v[_jGLfloat316] = (*_a_GLfloat316_0.values[_jGLfloat316]).to_f32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::TexCoord4fColor4fNormal3fVertex4fvSUN(tc, c, n, v) };
}

pub fn retrace_glReplacementCodeuiVertex3fSUN(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut rc: GLuint;
    rc = (call.arg(0)).to_u32().unwrap();

    let mut x: GLfloat;
    x = (call.arg(1)).to_f32().unwrap();

    let mut y: GLfloat;
    y = (call.arg(2)).to_f32().unwrap();

    let mut z: GLfloat;
    z = (call.arg(3)).to_f32().unwrap();

//not found in gl!    unsafe { gl::ReplacementCodeuiVertex3fSUN(rc, x, y, z) };
}

pub fn retrace_glReplacementCodeuiVertex3fvSUN(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let rc: &mut [GLuint];
    rc = _allocator.alloc_array::<GLuint>(&call.arg(0));
    let _a_PGLuint62_0 = (call.arg(0)).to_array().unwrap();
    rc[0] = (_a_PGLuint62_0.values[0]).to_u32().unwrap();

    let v: &mut [GLfloat];
    v = _allocator.alloc_array::<GLfloat>(&call.arg(1));
    let _a_GLfloat317_0 = (call.arg(1)).to_array();
    if let Some(_a_GLfloat317_0) = _a_GLfloat317_0 {
        for _jGLfloat317 in 0.._a_GLfloat317_0.values.len() {
    v[_jGLfloat317] = (*_a_GLfloat317_0.values[_jGLfloat317]).to_f32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::ReplacementCodeuiVertex3fvSUN(rc, v) };
}

pub fn retrace_glReplacementCodeuiColor4ubVertex3fSUN(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut rc: GLuint;
    rc = (call.arg(0)).to_u32().unwrap();

    let mut r: GLubyte;
    r = (call.arg(1)).to_u32().unwrap();

    let mut g: GLubyte;
    g = (call.arg(2)).to_u32().unwrap();

    let mut b: GLubyte;
    b = (call.arg(3)).to_u32().unwrap();

    let mut a: GLubyte;
    a = (call.arg(4)).to_u32().unwrap();

    let mut x: GLfloat;
    x = (call.arg(5)).to_f32().unwrap();

    let mut y: GLfloat;
    y = (call.arg(6)).to_f32().unwrap();

    let mut z: GLfloat;
    z = (call.arg(7)).to_f32().unwrap();

//not found in gl!    unsafe { gl::ReplacementCodeuiColor4ubVertex3fSUN(rc, r, g, b, a, x, y, z) };
}

pub fn retrace_glReplacementCodeuiColor4ubVertex3fvSUN(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let rc: &mut [GLuint];
    rc = _allocator.alloc_array::<GLuint>(&call.arg(0));
    let _a_PGLuint63_0 = (call.arg(0)).to_array().unwrap();
    rc[0] = (_a_PGLuint63_0.values[0]).to_u32().unwrap();

    let c: &mut [GLubyte];
    c = _allocator.alloc_array::<GLubyte>(&call.arg(1));
    let _a_GLubyte28_0 = (call.arg(1)).to_array();
    if let Some(_a_GLubyte28_0) = _a_GLubyte28_0 {
        for _jGLubyte28 in 0.._a_GLubyte28_0.values.len() {
    c[_jGLubyte28] = (*_a_GLubyte28_0.values[_jGLubyte28]).to_u32().unwrap();
        }
    }
    let c = c.as_mut_ptr();

    let v: &mut [GLfloat];
    v = _allocator.alloc_array::<GLfloat>(&call.arg(2));
    let _a_GLfloat318_0 = (call.arg(2)).to_array();
    if let Some(_a_GLfloat318_0) = _a_GLfloat318_0 {
        for _jGLfloat318 in 0.._a_GLfloat318_0.values.len() {
    v[_jGLfloat318] = (*_a_GLfloat318_0.values[_jGLfloat318]).to_f32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::ReplacementCodeuiColor4ubVertex3fvSUN(rc, c, v) };
}

pub fn retrace_glReplacementCodeuiColor3fVertex3fSUN(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut rc: GLuint;
    rc = (call.arg(0)).to_u32().unwrap();

    let mut r: GLfloat;
    r = (call.arg(1)).to_f32().unwrap();

    let mut g: GLfloat;
    g = (call.arg(2)).to_f32().unwrap();

    let mut b: GLfloat;
    b = (call.arg(3)).to_f32().unwrap();

    let mut x: GLfloat;
    x = (call.arg(4)).to_f32().unwrap();

    let mut y: GLfloat;
    y = (call.arg(5)).to_f32().unwrap();

    let mut z: GLfloat;
    z = (call.arg(6)).to_f32().unwrap();

//not found in gl!    unsafe { gl::ReplacementCodeuiColor3fVertex3fSUN(rc, r, g, b, x, y, z) };
}

pub fn retrace_glReplacementCodeuiColor3fVertex3fvSUN(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let rc: &mut [GLuint];
    rc = _allocator.alloc_array::<GLuint>(&call.arg(0));
    let _a_PGLuint65_0 = (call.arg(0)).to_array().unwrap();
    rc[0] = (_a_PGLuint65_0.values[0]).to_u32().unwrap();

    let c: &mut [GLfloat];
    c = _allocator.alloc_array::<GLfloat>(&call.arg(1));
    let _a_GLfloat319_0 = (call.arg(1)).to_array();
    if let Some(_a_GLfloat319_0) = _a_GLfloat319_0 {
        for _jGLfloat319 in 0.._a_GLfloat319_0.values.len() {
    c[_jGLfloat319] = (*_a_GLfloat319_0.values[_jGLfloat319]).to_f32().unwrap();
        }
    }
    let c = c.as_mut_ptr();

    let v: &mut [GLfloat];
    v = _allocator.alloc_array::<GLfloat>(&call.arg(2));
    let _a_GLfloat320_0 = (call.arg(2)).to_array();
    if let Some(_a_GLfloat320_0) = _a_GLfloat320_0 {
        for _jGLfloat320 in 0.._a_GLfloat320_0.values.len() {
    v[_jGLfloat320] = (*_a_GLfloat320_0.values[_jGLfloat320]).to_f32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::ReplacementCodeuiColor3fVertex3fvSUN(rc, c, v) };
}

pub fn retrace_glReplacementCodeuiNormal3fVertex3fSUN(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut rc: GLuint;
    rc = (call.arg(0)).to_u32().unwrap();

    let mut nx: GLfloat;
    nx = (call.arg(1)).to_f32().unwrap();

    let mut ny: GLfloat;
    ny = (call.arg(2)).to_f32().unwrap();

    let mut nz: GLfloat;
    nz = (call.arg(3)).to_f32().unwrap();

    let mut x: GLfloat;
    x = (call.arg(4)).to_f32().unwrap();

    let mut y: GLfloat;
    y = (call.arg(5)).to_f32().unwrap();

    let mut z: GLfloat;
    z = (call.arg(6)).to_f32().unwrap();

//not found in gl!    unsafe { gl::ReplacementCodeuiNormal3fVertex3fSUN(rc, nx, ny, nz, x, y, z) };
}

pub fn retrace_glReplacementCodeuiNormal3fVertex3fvSUN(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let rc: &mut [GLuint];
    rc = _allocator.alloc_array::<GLuint>(&call.arg(0));
    let _a_PGLuint66_0 = (call.arg(0)).to_array().unwrap();
    rc[0] = (_a_PGLuint66_0.values[0]).to_u32().unwrap();

    let n: &mut [GLfloat];
    n = _allocator.alloc_array::<GLfloat>(&call.arg(1));
    let _a_GLfloat321_0 = (call.arg(1)).to_array();
    if let Some(_a_GLfloat321_0) = _a_GLfloat321_0 {
        for _jGLfloat321 in 0.._a_GLfloat321_0.values.len() {
    n[_jGLfloat321] = (*_a_GLfloat321_0.values[_jGLfloat321]).to_f32().unwrap();
        }
    }
    let n = n.as_mut_ptr();

    let v: &mut [GLfloat];
    v = _allocator.alloc_array::<GLfloat>(&call.arg(2));
    let _a_GLfloat322_0 = (call.arg(2)).to_array();
    if let Some(_a_GLfloat322_0) = _a_GLfloat322_0 {
        for _jGLfloat322 in 0.._a_GLfloat322_0.values.len() {
    v[_jGLfloat322] = (*_a_GLfloat322_0.values[_jGLfloat322]).to_f32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::ReplacementCodeuiNormal3fVertex3fvSUN(rc, n, v) };
}

pub fn retrace_glReplacementCodeuiColor4fNormal3fVertex3fSUN(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut rc: GLuint;
    rc = (call.arg(0)).to_u32().unwrap();

    let mut r: GLfloat;
    r = (call.arg(1)).to_f32().unwrap();

    let mut g: GLfloat;
    g = (call.arg(2)).to_f32().unwrap();

    let mut b: GLfloat;
    b = (call.arg(3)).to_f32().unwrap();

    let mut a: GLfloat;
    a = (call.arg(4)).to_f32().unwrap();

    let mut nx: GLfloat;
    nx = (call.arg(5)).to_f32().unwrap();

    let mut ny: GLfloat;
    ny = (call.arg(6)).to_f32().unwrap();

    let mut nz: GLfloat;
    nz = (call.arg(7)).to_f32().unwrap();

    let mut x: GLfloat;
    x = (call.arg(8)).to_f32().unwrap();

    let mut y: GLfloat;
    y = (call.arg(9)).to_f32().unwrap();

    let mut z: GLfloat;
    z = (call.arg(10)).to_f32().unwrap();

//not found in gl!    unsafe { gl::ReplacementCodeuiColor4fNormal3fVertex3fSUN(rc, r, g, b, a, nx, ny, nz, x, y, z) };
}

pub fn retrace_glReplacementCodeuiColor4fNormal3fVertex3fvSUN(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let rc: &mut [GLuint];
    rc = _allocator.alloc_array::<GLuint>(&call.arg(0));
    let _a_PGLuint67_0 = (call.arg(0)).to_array().unwrap();
    rc[0] = (_a_PGLuint67_0.values[0]).to_u32().unwrap();

    let c: &mut [GLfloat];
    c = _allocator.alloc_array::<GLfloat>(&call.arg(1));
    let _a_GLfloat323_0 = (call.arg(1)).to_array();
    if let Some(_a_GLfloat323_0) = _a_GLfloat323_0 {
        for _jGLfloat323 in 0.._a_GLfloat323_0.values.len() {
    c[_jGLfloat323] = (*_a_GLfloat323_0.values[_jGLfloat323]).to_f32().unwrap();
        }
    }
    let c = c.as_mut_ptr();

    let n: &mut [GLfloat];
    n = _allocator.alloc_array::<GLfloat>(&call.arg(2));
    let _a_GLfloat324_0 = (call.arg(2)).to_array();
    if let Some(_a_GLfloat324_0) = _a_GLfloat324_0 {
        for _jGLfloat324 in 0.._a_GLfloat324_0.values.len() {
    n[_jGLfloat324] = (*_a_GLfloat324_0.values[_jGLfloat324]).to_f32().unwrap();
        }
    }
    let n = n.as_mut_ptr();

    let v: &mut [GLfloat];
    v = _allocator.alloc_array::<GLfloat>(&call.arg(3));
    let _a_GLfloat325_0 = (call.arg(3)).to_array();
    if let Some(_a_GLfloat325_0) = _a_GLfloat325_0 {
        for _jGLfloat325 in 0.._a_GLfloat325_0.values.len() {
    v[_jGLfloat325] = (*_a_GLfloat325_0.values[_jGLfloat325]).to_f32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::ReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c, n, v) };
}

pub fn retrace_glReplacementCodeuiTexCoord2fVertex3fSUN(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut rc: GLuint;
    rc = (call.arg(0)).to_u32().unwrap();

    let mut s: GLfloat;
    s = (call.arg(1)).to_f32().unwrap();

    let mut t: GLfloat;
    t = (call.arg(2)).to_f32().unwrap();

    let mut x: GLfloat;
    x = (call.arg(3)).to_f32().unwrap();

    let mut y: GLfloat;
    y = (call.arg(4)).to_f32().unwrap();

    let mut z: GLfloat;
    z = (call.arg(5)).to_f32().unwrap();

//not found in gl!    unsafe { gl::ReplacementCodeuiTexCoord2fVertex3fSUN(rc, s, t, x, y, z) };
}

pub fn retrace_glReplacementCodeuiTexCoord2fVertex3fvSUN(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let rc: &mut [GLuint];
    rc = _allocator.alloc_array::<GLuint>(&call.arg(0));
    let _a_PGLuint68_0 = (call.arg(0)).to_array().unwrap();
    rc[0] = (_a_PGLuint68_0.values[0]).to_u32().unwrap();

    let tc: &mut [GLfloat];
    tc = _allocator.alloc_array::<GLfloat>(&call.arg(1));
    let _a_GLfloat326_0 = (call.arg(1)).to_array();
    if let Some(_a_GLfloat326_0) = _a_GLfloat326_0 {
        for _jGLfloat326 in 0.._a_GLfloat326_0.values.len() {
    tc[_jGLfloat326] = (*_a_GLfloat326_0.values[_jGLfloat326]).to_f32().unwrap();
        }
    }
    let tc = tc.as_mut_ptr();

    let v: &mut [GLfloat];
    v = _allocator.alloc_array::<GLfloat>(&call.arg(2));
    let _a_GLfloat327_0 = (call.arg(2)).to_array();
    if let Some(_a_GLfloat327_0) = _a_GLfloat327_0 {
        for _jGLfloat327 in 0.._a_GLfloat327_0.values.len() {
    v[_jGLfloat327] = (*_a_GLfloat327_0.values[_jGLfloat327]).to_f32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::ReplacementCodeuiTexCoord2fVertex3fvSUN(rc, tc, v) };
}

pub fn retrace_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut rc: GLuint;
    rc = (call.arg(0)).to_u32().unwrap();

    let mut s: GLfloat;
    s = (call.arg(1)).to_f32().unwrap();

    let mut t: GLfloat;
    t = (call.arg(2)).to_f32().unwrap();

    let mut nx: GLfloat;
    nx = (call.arg(3)).to_f32().unwrap();

    let mut ny: GLfloat;
    ny = (call.arg(4)).to_f32().unwrap();

    let mut nz: GLfloat;
    nz = (call.arg(5)).to_f32().unwrap();

    let mut x: GLfloat;
    x = (call.arg(6)).to_f32().unwrap();

    let mut y: GLfloat;
    y = (call.arg(7)).to_f32().unwrap();

    let mut z: GLfloat;
    z = (call.arg(8)).to_f32().unwrap();

//not found in gl!    unsafe { gl::ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(rc, s, t, nx, ny, nz, x, y, z) };
}

pub fn retrace_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let rc: &mut [GLuint];
    rc = _allocator.alloc_array::<GLuint>(&call.arg(0));
    let _a_PGLuint69_0 = (call.arg(0)).to_array().unwrap();
    rc[0] = (_a_PGLuint69_0.values[0]).to_u32().unwrap();

    let tc: &mut [GLfloat];
    tc = _allocator.alloc_array::<GLfloat>(&call.arg(1));
    let _a_GLfloat328_0 = (call.arg(1)).to_array();
    if let Some(_a_GLfloat328_0) = _a_GLfloat328_0 {
        for _jGLfloat328 in 0.._a_GLfloat328_0.values.len() {
    tc[_jGLfloat328] = (*_a_GLfloat328_0.values[_jGLfloat328]).to_f32().unwrap();
        }
    }
    let tc = tc.as_mut_ptr();

    let n: &mut [GLfloat];
    n = _allocator.alloc_array::<GLfloat>(&call.arg(2));
    let _a_GLfloat329_0 = (call.arg(2)).to_array();
    if let Some(_a_GLfloat329_0) = _a_GLfloat329_0 {
        for _jGLfloat329 in 0.._a_GLfloat329_0.values.len() {
    n[_jGLfloat329] = (*_a_GLfloat329_0.values[_jGLfloat329]).to_f32().unwrap();
        }
    }
    let n = n.as_mut_ptr();

    let v: &mut [GLfloat];
    v = _allocator.alloc_array::<GLfloat>(&call.arg(3));
    let _a_GLfloat330_0 = (call.arg(3)).to_array();
    if let Some(_a_GLfloat330_0) = _a_GLfloat330_0 {
        for _jGLfloat330 in 0.._a_GLfloat330_0.values.len() {
    v[_jGLfloat330] = (*_a_GLfloat330_0.values[_jGLfloat330]).to_f32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc, n, v) };
}

pub fn retrace_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut rc: GLuint;
    rc = (call.arg(0)).to_u32().unwrap();

    let mut s: GLfloat;
    s = (call.arg(1)).to_f32().unwrap();

    let mut t: GLfloat;
    t = (call.arg(2)).to_f32().unwrap();

    let mut r: GLfloat;
    r = (call.arg(3)).to_f32().unwrap();

    let mut g: GLfloat;
    g = (call.arg(4)).to_f32().unwrap();

    let mut b: GLfloat;
    b = (call.arg(5)).to_f32().unwrap();

    let mut a: GLfloat;
    a = (call.arg(6)).to_f32().unwrap();

    let mut nx: GLfloat;
    nx = (call.arg(7)).to_f32().unwrap();

    let mut ny: GLfloat;
    ny = (call.arg(8)).to_f32().unwrap();

    let mut nz: GLfloat;
    nz = (call.arg(9)).to_f32().unwrap();

    let mut x: GLfloat;
    x = (call.arg(10)).to_f32().unwrap();

    let mut y: GLfloat;
    y = (call.arg(11)).to_f32().unwrap();

    let mut z: GLfloat;
    z = (call.arg(12)).to_f32().unwrap();

//not found in gl!    unsafe { gl::ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(rc, s, t, r, g, b, a, nx, ny, nz, x, y, z) };
}

pub fn retrace_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let rc: &mut [GLuint];
    rc = _allocator.alloc_array::<GLuint>(&call.arg(0));
    let _a_PGLuint70_0 = (call.arg(0)).to_array().unwrap();
    rc[0] = (_a_PGLuint70_0.values[0]).to_u32().unwrap();

    let tc: &mut [GLfloat];
    tc = _allocator.alloc_array::<GLfloat>(&call.arg(1));
    let _a_GLfloat331_0 = (call.arg(1)).to_array();
    if let Some(_a_GLfloat331_0) = _a_GLfloat331_0 {
        for _jGLfloat331 in 0.._a_GLfloat331_0.values.len() {
    tc[_jGLfloat331] = (*_a_GLfloat331_0.values[_jGLfloat331]).to_f32().unwrap();
        }
    }
    let tc = tc.as_mut_ptr();

    let c: &mut [GLfloat];
    c = _allocator.alloc_array::<GLfloat>(&call.arg(2));
    let _a_GLfloat332_0 = (call.arg(2)).to_array();
    if let Some(_a_GLfloat332_0) = _a_GLfloat332_0 {
        for _jGLfloat332 in 0.._a_GLfloat332_0.values.len() {
    c[_jGLfloat332] = (*_a_GLfloat332_0.values[_jGLfloat332]).to_f32().unwrap();
        }
    }
    let c = c.as_mut_ptr();

    let n: &mut [GLfloat];
    n = _allocator.alloc_array::<GLfloat>(&call.arg(3));
    let _a_GLfloat333_0 = (call.arg(3)).to_array();
    if let Some(_a_GLfloat333_0) = _a_GLfloat333_0 {
        for _jGLfloat333 in 0.._a_GLfloat333_0.values.len() {
    n[_jGLfloat333] = (*_a_GLfloat333_0.values[_jGLfloat333]).to_f32().unwrap();
        }
    }
    let n = n.as_mut_ptr();

    let v: &mut [GLfloat];
    v = _allocator.alloc_array::<GLfloat>(&call.arg(4));
    let _a_GLfloat334_0 = (call.arg(4)).to_array();
    if let Some(_a_GLfloat334_0) = _a_GLfloat334_0 {
        for _jGLfloat334 in 0.._a_GLfloat334_0.values.len() {
    v[_jGLfloat334] = (*_a_GLfloat334_0.values[_jGLfloat334]).to_f32().unwrap();
        }
    }
    let v = v.as_mut_ptr();

//not found in gl!    unsafe { gl::ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c, n, v) };
}

pub fn retrace_glAddSwapHintRectWIN(&mut self, call: &mut Call) {
    let mut _allocator = ScopedAllocator::new();
    let _ = &_allocator;
    let mut x: GLint;
    x = (call.arg(0)).to_i32().unwrap();

    let mut y: GLint;
    y = (call.arg(1)).to_i32().unwrap();

    let mut width: GLsizei;
    width = (call.arg(2)).to_i32().unwrap();

    let mut height: GLsizei;
    height = (call.arg(3)).to_i32().unwrap();

//not found in gl!    unsafe { gl::AddSwapHintRectWIN(x, y, width, height) };
}


    fn ignore(&mut self, call: &Call) {}

}

static gl_callbacks: [(&'static str, Callback); 2947] = [
    ("glCullFace", GlRetracer::retrace_glCullFace),
    ("glFrontFace", GlRetracer::retrace_glFrontFace),
    ("glHint", GlRetracer::retrace_glHint),
    ("glLineWidth", GlRetracer::retrace_glLineWidth),
    ("glPointSize", GlRetracer::retrace_glPointSize),
    ("glPolygonMode", GlRetracer::retrace_glPolygonMode),
    ("glScissor", GlRetracer::retrace_glScissor),
    ("glTexParameterf", GlRetracer::retrace_glTexParameterf),
    ("glTexParameterfv", GlRetracer::retrace_glTexParameterfv),
    ("glTexParameteri", GlRetracer::retrace_glTexParameteri),
    ("glTexParameteriv", GlRetracer::retrace_glTexParameteriv),
    ("glTexImage1D", GlRetracer::retrace_glTexImage1D),
    ("glTexImage2D", GlRetracer::retrace_glTexImage2D),
    ("glDrawBuffer", GlRetracer::retrace_glDrawBuffer),
    ("glClear", GlRetracer::retrace_glClear),
    ("glClearColor", GlRetracer::retrace_glClearColor),
    ("glClearStencil", GlRetracer::retrace_glClearStencil),
    ("glClearDepth", GlRetracer::retrace_glClearDepth),
    ("glStencilMask", GlRetracer::retrace_glStencilMask),
    ("glColorMask", GlRetracer::retrace_glColorMask),
    ("glDepthMask", GlRetracer::retrace_glDepthMask),
    ("glDisable", GlRetracer::retrace_glDisable),
    ("glEnable", GlRetracer::retrace_glEnable),
    ("glFinish", GlRetracer::retrace_glFinish),
    ("glFlush", GlRetracer::retrace_glFlush),
    ("glBlendFunc", GlRetracer::retrace_glBlendFunc),
    ("glLogicOp", GlRetracer::retrace_glLogicOp),
    ("glStencilFunc", GlRetracer::retrace_glStencilFunc),
    ("glStencilOp", GlRetracer::retrace_glStencilOp),
    ("glDepthFunc", GlRetracer::retrace_glDepthFunc),
    ("glPixelStoref", GlRetracer::retrace_glPixelStoref),
    ("glPixelStorei", GlRetracer::retrace_glPixelStorei),
    ("glReadBuffer", GlRetracer::retrace_glReadBuffer),
    ("glReadPixels", GlRetracer::retrace_glReadPixels),
    ("glGetBooleanv", GlRetracer::ignore),
    ("glGetDoublev", GlRetracer::ignore),
    ("glGetError", GlRetracer::ignore),
    ("glGetFloatv", GlRetracer::ignore),
    ("glGetIntegerv", GlRetracer::ignore),
    ("glGetString", GlRetracer::ignore),
    ("glGetTexImage", GlRetracer::retrace_glGetTexImage),
    ("glGetTexParameterfv", GlRetracer::ignore),
    ("glGetTexParameteriv", GlRetracer::ignore),
    ("glGetTexLevelParameterfv", GlRetracer::ignore),
    ("glGetTexLevelParameteriv", GlRetracer::ignore),
    ("glIsEnabled", GlRetracer::ignore),
    ("glDepthRange", GlRetracer::retrace_glDepthRange),
    ("glViewport", GlRetracer::retrace_glViewport),
    ("glNewList", GlRetracer::retrace_glNewList),
    ("glEndList", GlRetracer::retrace_glEndList),
    ("glCallList", GlRetracer::retrace_glCallList),
    ("glCallLists", GlRetracer::retrace_glCallLists),
    ("glDeleteLists", GlRetracer::retrace_glDeleteLists),
    ("glGenLists", GlRetracer::retrace_glGenLists),
    ("glListBase", GlRetracer::retrace_glListBase),
    ("glBegin", GlRetracer::retrace_glBegin),
    ("glBitmap", GlRetracer::retrace_glBitmap),
    ("glColor3b", GlRetracer::retrace_glColor3b),
    ("glColor3bv", GlRetracer::retrace_glColor3bv),
    ("glColor3d", GlRetracer::retrace_glColor3d),
    ("glColor3dv", GlRetracer::retrace_glColor3dv),
    ("glColor3f", GlRetracer::retrace_glColor3f),
    ("glColor3fv", GlRetracer::retrace_glColor3fv),
    ("glColor3i", GlRetracer::retrace_glColor3i),
    ("glColor3iv", GlRetracer::retrace_glColor3iv),
    ("glColor3s", GlRetracer::retrace_glColor3s),
    ("glColor3sv", GlRetracer::retrace_glColor3sv),
    ("glColor3ub", GlRetracer::retrace_glColor3ub),
    ("glColor3ubv", GlRetracer::retrace_glColor3ubv),
    ("glColor3ui", GlRetracer::retrace_glColor3ui),
    ("glColor3uiv", GlRetracer::retrace_glColor3uiv),
    ("glColor3us", GlRetracer::retrace_glColor3us),
    ("glColor3usv", GlRetracer::retrace_glColor3usv),
    ("glColor4b", GlRetracer::retrace_glColor4b),
    ("glColor4bv", GlRetracer::retrace_glColor4bv),
    ("glColor4d", GlRetracer::retrace_glColor4d),
    ("glColor4dv", GlRetracer::retrace_glColor4dv),
    ("glColor4f", GlRetracer::retrace_glColor4f),
    ("glColor4fv", GlRetracer::retrace_glColor4fv),
    ("glColor4i", GlRetracer::retrace_glColor4i),
    ("glColor4iv", GlRetracer::retrace_glColor4iv),
    ("glColor4s", GlRetracer::retrace_glColor4s),
    ("glColor4sv", GlRetracer::retrace_glColor4sv),
    ("glColor4ub", GlRetracer::retrace_glColor4ub),
    ("glColor4ubv", GlRetracer::retrace_glColor4ubv),
    ("glColor4ui", GlRetracer::retrace_glColor4ui),
    ("glColor4uiv", GlRetracer::retrace_glColor4uiv),
    ("glColor4us", GlRetracer::retrace_glColor4us),
    ("glColor4usv", GlRetracer::retrace_glColor4usv),
    ("glEdgeFlag", GlRetracer::retrace_glEdgeFlag),
    ("glEdgeFlagv", GlRetracer::retrace_glEdgeFlagv),
    ("glEnd", GlRetracer::retrace_glEnd),
    ("glIndexd", GlRetracer::retrace_glIndexd),
    ("glIndexdv", GlRetracer::retrace_glIndexdv),
    ("glIndexf", GlRetracer::retrace_glIndexf),
    ("glIndexfv", GlRetracer::retrace_glIndexfv),
    ("glIndexi", GlRetracer::retrace_glIndexi),
    ("glIndexiv", GlRetracer::retrace_glIndexiv),
    ("glIndexs", GlRetracer::retrace_glIndexs),
    ("glIndexsv", GlRetracer::retrace_glIndexsv),
    ("glNormal3b", GlRetracer::retrace_glNormal3b),
    ("glNormal3bv", GlRetracer::retrace_glNormal3bv),
    ("glNormal3d", GlRetracer::retrace_glNormal3d),
    ("glNormal3dv", GlRetracer::retrace_glNormal3dv),
    ("glNormal3f", GlRetracer::retrace_glNormal3f),
    ("glNormal3fv", GlRetracer::retrace_glNormal3fv),
    ("glNormal3i", GlRetracer::retrace_glNormal3i),
    ("glNormal3iv", GlRetracer::retrace_glNormal3iv),
    ("glNormal3s", GlRetracer::retrace_glNormal3s),
    ("glNormal3sv", GlRetracer::retrace_glNormal3sv),
    ("glRasterPos2d", GlRetracer::retrace_glRasterPos2d),
    ("glRasterPos2dv", GlRetracer::retrace_glRasterPos2dv),
    ("glRasterPos2f", GlRetracer::retrace_glRasterPos2f),
    ("glRasterPos2fv", GlRetracer::retrace_glRasterPos2fv),
    ("glRasterPos2i", GlRetracer::retrace_glRasterPos2i),
    ("glRasterPos2iv", GlRetracer::retrace_glRasterPos2iv),
    ("glRasterPos2s", GlRetracer::retrace_glRasterPos2s),
    ("glRasterPos2sv", GlRetracer::retrace_glRasterPos2sv),
    ("glRasterPos3d", GlRetracer::retrace_glRasterPos3d),
    ("glRasterPos3dv", GlRetracer::retrace_glRasterPos3dv),
    ("glRasterPos3f", GlRetracer::retrace_glRasterPos3f),
    ("glRasterPos3fv", GlRetracer::retrace_glRasterPos3fv),
    ("glRasterPos3i", GlRetracer::retrace_glRasterPos3i),
    ("glRasterPos3iv", GlRetracer::retrace_glRasterPos3iv),
    ("glRasterPos3s", GlRetracer::retrace_glRasterPos3s),
    ("glRasterPos3sv", GlRetracer::retrace_glRasterPos3sv),
    ("glRasterPos4d", GlRetracer::retrace_glRasterPos4d),
    ("glRasterPos4dv", GlRetracer::retrace_glRasterPos4dv),
    ("glRasterPos4f", GlRetracer::retrace_glRasterPos4f),
    ("glRasterPos4fv", GlRetracer::retrace_glRasterPos4fv),
    ("glRasterPos4i", GlRetracer::retrace_glRasterPos4i),
    ("glRasterPos4iv", GlRetracer::retrace_glRasterPos4iv),
    ("glRasterPos4s", GlRetracer::retrace_glRasterPos4s),
    ("glRasterPos4sv", GlRetracer::retrace_glRasterPos4sv),
    ("glRectd", GlRetracer::retrace_glRectd),
    ("glRectdv", GlRetracer::retrace_glRectdv),
    ("glRectf", GlRetracer::retrace_glRectf),
    ("glRectfv", GlRetracer::retrace_glRectfv),
    ("glRecti", GlRetracer::retrace_glRecti),
    ("glRectiv", GlRetracer::retrace_glRectiv),
    ("glRects", GlRetracer::retrace_glRects),
    ("glRectsv", GlRetracer::retrace_glRectsv),
    ("glTexCoord1d", GlRetracer::retrace_glTexCoord1d),
    ("glTexCoord1dv", GlRetracer::retrace_glTexCoord1dv),
    ("glTexCoord1f", GlRetracer::retrace_glTexCoord1f),
    ("glTexCoord1fv", GlRetracer::retrace_glTexCoord1fv),
    ("glTexCoord1i", GlRetracer::retrace_glTexCoord1i),
    ("glTexCoord1iv", GlRetracer::retrace_glTexCoord1iv),
    ("glTexCoord1s", GlRetracer::retrace_glTexCoord1s),
    ("glTexCoord1sv", GlRetracer::retrace_glTexCoord1sv),
    ("glTexCoord2d", GlRetracer::retrace_glTexCoord2d),
    ("glTexCoord2dv", GlRetracer::retrace_glTexCoord2dv),
    ("glTexCoord2f", GlRetracer::retrace_glTexCoord2f),
    ("glTexCoord2fv", GlRetracer::retrace_glTexCoord2fv),
    ("glTexCoord2i", GlRetracer::retrace_glTexCoord2i),
    ("glTexCoord2iv", GlRetracer::retrace_glTexCoord2iv),
    ("glTexCoord2s", GlRetracer::retrace_glTexCoord2s),
    ("glTexCoord2sv", GlRetracer::retrace_glTexCoord2sv),
    ("glTexCoord3d", GlRetracer::retrace_glTexCoord3d),
    ("glTexCoord3dv", GlRetracer::retrace_glTexCoord3dv),
    ("glTexCoord3f", GlRetracer::retrace_glTexCoord3f),
    ("glTexCoord3fv", GlRetracer::retrace_glTexCoord3fv),
    ("glTexCoord3i", GlRetracer::retrace_glTexCoord3i),
    ("glTexCoord3iv", GlRetracer::retrace_glTexCoord3iv),
    ("glTexCoord3s", GlRetracer::retrace_glTexCoord3s),
    ("glTexCoord3sv", GlRetracer::retrace_glTexCoord3sv),
    ("glTexCoord4d", GlRetracer::retrace_glTexCoord4d),
    ("glTexCoord4dv", GlRetracer::retrace_glTexCoord4dv),
    ("glTexCoord4f", GlRetracer::retrace_glTexCoord4f),
    ("glTexCoord4fv", GlRetracer::retrace_glTexCoord4fv),
    ("glTexCoord4i", GlRetracer::retrace_glTexCoord4i),
    ("glTexCoord4iv", GlRetracer::retrace_glTexCoord4iv),
    ("glTexCoord4s", GlRetracer::retrace_glTexCoord4s),
    ("glTexCoord4sv", GlRetracer::retrace_glTexCoord4sv),
    ("glVertex2d", GlRetracer::retrace_glVertex2d),
    ("glVertex2dv", GlRetracer::retrace_glVertex2dv),
    ("glVertex2f", GlRetracer::retrace_glVertex2f),
    ("glVertex2fv", GlRetracer::retrace_glVertex2fv),
    ("glVertex2i", GlRetracer::retrace_glVertex2i),
    ("glVertex2iv", GlRetracer::retrace_glVertex2iv),
    ("glVertex2s", GlRetracer::retrace_glVertex2s),
    ("glVertex2sv", GlRetracer::retrace_glVertex2sv),
    ("glVertex3d", GlRetracer::retrace_glVertex3d),
    ("glVertex3dv", GlRetracer::retrace_glVertex3dv),
    ("glVertex3f", GlRetracer::retrace_glVertex3f),
    ("glVertex3fv", GlRetracer::retrace_glVertex3fv),
    ("glVertex3i", GlRetracer::retrace_glVertex3i),
    ("glVertex3iv", GlRetracer::retrace_glVertex3iv),
    ("glVertex3s", GlRetracer::retrace_glVertex3s),
    ("glVertex3sv", GlRetracer::retrace_glVertex3sv),
    ("glVertex4d", GlRetracer::retrace_glVertex4d),
    ("glVertex4dv", GlRetracer::retrace_glVertex4dv),
    ("glVertex4f", GlRetracer::retrace_glVertex4f),
    ("glVertex4fv", GlRetracer::retrace_glVertex4fv),
    ("glVertex4i", GlRetracer::retrace_glVertex4i),
    ("glVertex4iv", GlRetracer::retrace_glVertex4iv),
    ("glVertex4s", GlRetracer::retrace_glVertex4s),
    ("glVertex4sv", GlRetracer::retrace_glVertex4sv),
    ("glClipPlane", GlRetracer::retrace_glClipPlane),
    ("glColorMaterial", GlRetracer::retrace_glColorMaterial),
    ("glFogf", GlRetracer::retrace_glFogf),
    ("glFogfv", GlRetracer::retrace_glFogfv),
    ("glFogi", GlRetracer::retrace_glFogi),
    ("glFogiv", GlRetracer::retrace_glFogiv),
    ("glLightf", GlRetracer::retrace_glLightf),
    ("glLightfv", GlRetracer::retrace_glLightfv),
    ("glLighti", GlRetracer::retrace_glLighti),
    ("glLightiv", GlRetracer::retrace_glLightiv),
    ("glLightModelf", GlRetracer::retrace_glLightModelf),
    ("glLightModelfv", GlRetracer::retrace_glLightModelfv),
    ("glLightModeli", GlRetracer::retrace_glLightModeli),
    ("glLightModeliv", GlRetracer::retrace_glLightModeliv),
    ("glLineStipple", GlRetracer::retrace_glLineStipple),
    ("glMaterialf", GlRetracer::retrace_glMaterialf),
    ("glMaterialfv", GlRetracer::retrace_glMaterialfv),
    ("glMateriali", GlRetracer::retrace_glMateriali),
    ("glMaterialiv", GlRetracer::retrace_glMaterialiv),
    ("glPolygonStipple", GlRetracer::retrace_glPolygonStipple),
    ("glShadeModel", GlRetracer::retrace_glShadeModel),
    ("glTexEnvf", GlRetracer::retrace_glTexEnvf),
    ("glTexEnvfv", GlRetracer::retrace_glTexEnvfv),
    ("glTexEnvi", GlRetracer::retrace_glTexEnvi),
    ("glTexEnviv", GlRetracer::retrace_glTexEnviv),
    ("glTexGend", GlRetracer::retrace_glTexGend),
    ("glTexGendv", GlRetracer::retrace_glTexGendv),
    ("glTexGenf", GlRetracer::retrace_glTexGenf),
    ("glTexGenfv", GlRetracer::retrace_glTexGenfv),
    ("glTexGeni", GlRetracer::retrace_glTexGeni),
    ("glTexGeniv", GlRetracer::retrace_glTexGeniv),
    ("glFeedbackBuffer", GlRetracer::retrace_glFeedbackBuffer),
    ("glSelectBuffer", GlRetracer::retrace_glSelectBuffer),
    ("glRenderMode", GlRetracer::retrace_glRenderMode),
    ("glInitNames", GlRetracer::retrace_glInitNames),
    ("glLoadName", GlRetracer::retrace_glLoadName),
    ("glPassThrough", GlRetracer::retrace_glPassThrough),
    ("glPopName", GlRetracer::retrace_glPopName),
    ("glPushName", GlRetracer::retrace_glPushName),
    ("glClearAccum", GlRetracer::retrace_glClearAccum),
    ("glClearIndex", GlRetracer::retrace_glClearIndex),
    ("glIndexMask", GlRetracer::retrace_glIndexMask),
    ("glAccum", GlRetracer::retrace_glAccum),
    ("glPopAttrib", GlRetracer::retrace_glPopAttrib),
    ("glPushAttrib", GlRetracer::retrace_glPushAttrib),
    ("glMap1d", GlRetracer::retrace_glMap1d),
    ("glMap1f", GlRetracer::retrace_glMap1f),
    ("glMap2d", GlRetracer::retrace_glMap2d),
    ("glMap2f", GlRetracer::retrace_glMap2f),
    ("glMapGrid1d", GlRetracer::retrace_glMapGrid1d),
    ("glMapGrid1f", GlRetracer::retrace_glMapGrid1f),
    ("glMapGrid2d", GlRetracer::retrace_glMapGrid2d),
    ("glMapGrid2f", GlRetracer::retrace_glMapGrid2f),
    ("glEvalCoord1d", GlRetracer::retrace_glEvalCoord1d),
    ("glEvalCoord1dv", GlRetracer::retrace_glEvalCoord1dv),
    ("glEvalCoord1f", GlRetracer::retrace_glEvalCoord1f),
    ("glEvalCoord1fv", GlRetracer::retrace_glEvalCoord1fv),
    ("glEvalCoord2d", GlRetracer::retrace_glEvalCoord2d),
    ("glEvalCoord2dv", GlRetracer::retrace_glEvalCoord2dv),
    ("glEvalCoord2f", GlRetracer::retrace_glEvalCoord2f),
    ("glEvalCoord2fv", GlRetracer::retrace_glEvalCoord2fv),
    ("glEvalMesh1", GlRetracer::retrace_glEvalMesh1),
    ("glEvalPoint1", GlRetracer::retrace_glEvalPoint1),
    ("glEvalMesh2", GlRetracer::retrace_glEvalMesh2),
    ("glEvalPoint2", GlRetracer::retrace_glEvalPoint2),
    ("glAlphaFunc", GlRetracer::retrace_glAlphaFunc),
    ("glPixelZoom", GlRetracer::retrace_glPixelZoom),
    ("glPixelTransferf", GlRetracer::retrace_glPixelTransferf),
    ("glPixelTransferi", GlRetracer::retrace_glPixelTransferi),
    ("glPixelMapfv", GlRetracer::retrace_glPixelMapfv),
    ("glPixelMapuiv", GlRetracer::retrace_glPixelMapuiv),
    ("glPixelMapusv", GlRetracer::retrace_glPixelMapusv),
    ("glCopyPixels", GlRetracer::retrace_glCopyPixels),
    ("glDrawPixels", GlRetracer::retrace_glDrawPixels),
    ("glGetClipPlane", GlRetracer::ignore),
    ("glGetLightfv", GlRetracer::ignore),
    ("glGetLightiv", GlRetracer::ignore),
    ("glGetMapdv", GlRetracer::ignore),
    ("glGetMapfv", GlRetracer::ignore),
    ("glGetMapiv", GlRetracer::ignore),
    ("glGetMaterialfv", GlRetracer::ignore),
    ("glGetMaterialiv", GlRetracer::ignore),
    ("glGetPixelMapfv", GlRetracer::retrace_glGetPixelMapfv),
    ("glGetPixelMapuiv", GlRetracer::retrace_glGetPixelMapuiv),
    ("glGetPixelMapusv", GlRetracer::retrace_glGetPixelMapusv),
    ("glGetPolygonStipple", GlRetracer::retrace_glGetPolygonStipple),
    ("glGetTexEnvfv", GlRetracer::ignore),
    ("glGetTexEnviv", GlRetracer::ignore),
    ("glGetTexGendv", GlRetracer::ignore),
    ("glGetTexGenfv", GlRetracer::ignore),
    ("glGetTexGeniv", GlRetracer::ignore),
    ("glIsList", GlRetracer::ignore),
    ("glFrustum", GlRetracer::retrace_glFrustum),
    ("glLoadIdentity", GlRetracer::retrace_glLoadIdentity),
    ("glLoadMatrixf", GlRetracer::retrace_glLoadMatrixf),
    ("glLoadMatrixd", GlRetracer::retrace_glLoadMatrixd),
    ("glMatrixMode", GlRetracer::retrace_glMatrixMode),
    ("glMultMatrixf", GlRetracer::retrace_glMultMatrixf),
    ("glMultMatrixd", GlRetracer::retrace_glMultMatrixd),
    ("glOrtho", GlRetracer::retrace_glOrtho),
    ("glPopMatrix", GlRetracer::retrace_glPopMatrix),
    ("glPushMatrix", GlRetracer::retrace_glPushMatrix),
    ("glRotated", GlRetracer::retrace_glRotated),
    ("glRotatef", GlRetracer::retrace_glRotatef),
    ("glScaled", GlRetracer::retrace_glScaled),
    ("glScalef", GlRetracer::retrace_glScalef),
    ("glTranslated", GlRetracer::retrace_glTranslated),
    ("glTranslatef", GlRetracer::retrace_glTranslatef),
    ("glDrawArrays", GlRetracer::retrace_glDrawArrays),
    ("glDrawElements", GlRetracer::retrace_glDrawElements),
    ("glGetPointerv", GlRetracer::ignore),
    ("glPolygonOffset", GlRetracer::retrace_glPolygonOffset),
    ("glCopyTexImage1D", GlRetracer::retrace_glCopyTexImage1D),
    ("glCopyTexImage2D", GlRetracer::retrace_glCopyTexImage2D),
    ("glCopyTexSubImage1D", GlRetracer::retrace_glCopyTexSubImage1D),
    ("glCopyTexSubImage2D", GlRetracer::retrace_glCopyTexSubImage2D),
    ("glTexSubImage1D", GlRetracer::retrace_glTexSubImage1D),
    ("glTexSubImage2D", GlRetracer::retrace_glTexSubImage2D),
    ("glBindTexture", GlRetracer::retrace_glBindTexture),
    ("glDeleteTextures", GlRetracer::retrace_glDeleteTextures),
    ("glGenTextures", GlRetracer::retrace_glGenTextures),
    ("glIsTexture", GlRetracer::ignore),
    ("glArrayElement", GlRetracer::retrace_glArrayElement),
    ("glColorPointer", GlRetracer::retrace_glColorPointer),
    ("glDisableClientState", GlRetracer::retrace_glDisableClientState),
    ("glEdgeFlagPointer", GlRetracer::retrace_glEdgeFlagPointer),
    ("glEnableClientState", GlRetracer::retrace_glEnableClientState),
    ("glIndexPointer", GlRetracer::retrace_glIndexPointer),
    ("glInterleavedArrays", GlRetracer::retrace_glInterleavedArrays),
    ("glNormalPointer", GlRetracer::retrace_glNormalPointer),
    ("glTexCoordPointer", GlRetracer::retrace_glTexCoordPointer),
    ("glVertexPointer", GlRetracer::retrace_glVertexPointer),
    ("glAreTexturesResident", GlRetracer::ignore),
    ("glPrioritizeTextures", GlRetracer::retrace_glPrioritizeTextures),
    ("glIndexub", GlRetracer::retrace_glIndexub),
    ("glIndexubv", GlRetracer::retrace_glIndexubv),
    ("glPopClientAttrib", GlRetracer::retrace_glPopClientAttrib),
    ("glPushClientAttrib", GlRetracer::retrace_glPushClientAttrib),
    ("glBlendColor", GlRetracer::retrace_glBlendColor),
    ("glBlendEquation", GlRetracer::retrace_glBlendEquation),
    ("glDrawRangeElements", GlRetracer::retrace_glDrawRangeElements),
    ("glTexImage3D", GlRetracer::retrace_glTexImage3D),
    ("glTexSubImage3D", GlRetracer::retrace_glTexSubImage3D),
    ("glCopyTexSubImage3D", GlRetracer::retrace_glCopyTexSubImage3D),
    ("glColorTable", GlRetracer::retrace_glColorTable),
    ("glColorTableParameterfv", GlRetracer::retrace_glColorTableParameterfv),
    ("glColorTableParameteriv", GlRetracer::retrace_glColorTableParameteriv),
    ("glCopyColorTable", GlRetracer::retrace_glCopyColorTable),
    ("glGetColorTable", GlRetracer::ignore),
    ("glGetColorTableParameterfv", GlRetracer::ignore),
    ("glGetColorTableParameteriv", GlRetracer::ignore),
    ("glColorSubTable", GlRetracer::retrace_glColorSubTable),
    ("glCopyColorSubTable", GlRetracer::retrace_glCopyColorSubTable),
    ("glConvolutionFilter1D", GlRetracer::retrace_glConvolutionFilter1D),
    ("glConvolutionFilter2D", GlRetracer::retrace_glConvolutionFilter2D),
    ("glConvolutionParameterf", GlRetracer::retrace_glConvolutionParameterf),
    ("glConvolutionParameterfv", GlRetracer::retrace_glConvolutionParameterfv),
    ("glConvolutionParameteri", GlRetracer::retrace_glConvolutionParameteri),
    ("glConvolutionParameteriv", GlRetracer::retrace_glConvolutionParameteriv),
    ("glCopyConvolutionFilter1D", GlRetracer::retrace_glCopyConvolutionFilter1D),
    ("glCopyConvolutionFilter2D", GlRetracer::retrace_glCopyConvolutionFilter2D),
    ("glGetConvolutionFilter", GlRetracer::retrace_glGetConvolutionFilter),
    ("glGetConvolutionParameterfv", GlRetracer::ignore),
    ("glGetConvolutionParameteriv", GlRetracer::ignore),
    ("glGetSeparableFilter", GlRetracer::retrace_glGetSeparableFilter),
    ("glSeparableFilter2D", GlRetracer::retrace_glSeparableFilter2D),
    ("glGetHistogram", GlRetracer::retrace_glGetHistogram),
    ("glGetHistogramParameterfv", GlRetracer::ignore),
    ("glGetHistogramParameteriv", GlRetracer::ignore),
    ("glGetMinmax", GlRetracer::retrace_glGetMinmax),
    ("glGetMinmaxParameterfv", GlRetracer::ignore),
    ("glGetMinmaxParameteriv", GlRetracer::ignore),
    ("glHistogram", GlRetracer::retrace_glHistogram),
    ("glMinmax", GlRetracer::retrace_glMinmax),
    ("glResetHistogram", GlRetracer::retrace_glResetHistogram),
    ("glResetMinmax", GlRetracer::retrace_glResetMinmax),
    ("glActiveTexture", GlRetracer::retrace_glActiveTexture),
    ("glSampleCoverage", GlRetracer::retrace_glSampleCoverage),
    ("glCompressedTexImage3D", GlRetracer::retrace_glCompressedTexImage3D),
    ("glCompressedTexImage2D", GlRetracer::retrace_glCompressedTexImage2D),
    ("glCompressedTexImage1D", GlRetracer::retrace_glCompressedTexImage1D),
    ("glCompressedTexSubImage3D", GlRetracer::retrace_glCompressedTexSubImage3D),
    ("glCompressedTexSubImage2D", GlRetracer::retrace_glCompressedTexSubImage2D),
    ("glCompressedTexSubImage1D", GlRetracer::retrace_glCompressedTexSubImage1D),
    ("glGetCompressedTexImage", GlRetracer::retrace_glGetCompressedTexImage),
    ("glClientActiveTexture", GlRetracer::retrace_glClientActiveTexture),
    ("glMultiTexCoord1d", GlRetracer::retrace_glMultiTexCoord1d),
    ("glMultiTexCoord1dv", GlRetracer::retrace_glMultiTexCoord1dv),
    ("glMultiTexCoord1f", GlRetracer::retrace_glMultiTexCoord1f),
    ("glMultiTexCoord1fv", GlRetracer::retrace_glMultiTexCoord1fv),
    ("glMultiTexCoord1i", GlRetracer::retrace_glMultiTexCoord1i),
    ("glMultiTexCoord1iv", GlRetracer::retrace_glMultiTexCoord1iv),
    ("glMultiTexCoord1s", GlRetracer::retrace_glMultiTexCoord1s),
    ("glMultiTexCoord1sv", GlRetracer::retrace_glMultiTexCoord1sv),
    ("glMultiTexCoord2d", GlRetracer::retrace_glMultiTexCoord2d),
    ("glMultiTexCoord2dv", GlRetracer::retrace_glMultiTexCoord2dv),
    ("glMultiTexCoord2f", GlRetracer::retrace_glMultiTexCoord2f),
    ("glMultiTexCoord2fv", GlRetracer::retrace_glMultiTexCoord2fv),
    ("glMultiTexCoord2i", GlRetracer::retrace_glMultiTexCoord2i),
    ("glMultiTexCoord2iv", GlRetracer::retrace_glMultiTexCoord2iv),
    ("glMultiTexCoord2s", GlRetracer::retrace_glMultiTexCoord2s),
    ("glMultiTexCoord2sv", GlRetracer::retrace_glMultiTexCoord2sv),
    ("glMultiTexCoord3d", GlRetracer::retrace_glMultiTexCoord3d),
    ("glMultiTexCoord3dv", GlRetracer::retrace_glMultiTexCoord3dv),
    ("glMultiTexCoord3f", GlRetracer::retrace_glMultiTexCoord3f),
    ("glMultiTexCoord3fv", GlRetracer::retrace_glMultiTexCoord3fv),
    ("glMultiTexCoord3i", GlRetracer::retrace_glMultiTexCoord3i),
    ("glMultiTexCoord3iv", GlRetracer::retrace_glMultiTexCoord3iv),
    ("glMultiTexCoord3s", GlRetracer::retrace_glMultiTexCoord3s),
    ("glMultiTexCoord3sv", GlRetracer::retrace_glMultiTexCoord3sv),
    ("glMultiTexCoord4d", GlRetracer::retrace_glMultiTexCoord4d),
    ("glMultiTexCoord4dv", GlRetracer::retrace_glMultiTexCoord4dv),
    ("glMultiTexCoord4f", GlRetracer::retrace_glMultiTexCoord4f),
    ("glMultiTexCoord4fv", GlRetracer::retrace_glMultiTexCoord4fv),
    ("glMultiTexCoord4i", GlRetracer::retrace_glMultiTexCoord4i),
    ("glMultiTexCoord4iv", GlRetracer::retrace_glMultiTexCoord4iv),
    ("glMultiTexCoord4s", GlRetracer::retrace_glMultiTexCoord4s),
    ("glMultiTexCoord4sv", GlRetracer::retrace_glMultiTexCoord4sv),
    ("glLoadTransposeMatrixf", GlRetracer::retrace_glLoadTransposeMatrixf),
    ("glLoadTransposeMatrixd", GlRetracer::retrace_glLoadTransposeMatrixd),
    ("glMultTransposeMatrixf", GlRetracer::retrace_glMultTransposeMatrixf),
    ("glMultTransposeMatrixd", GlRetracer::retrace_glMultTransposeMatrixd),
    ("glBlendFuncSeparate", GlRetracer::retrace_glBlendFuncSeparate),
    ("glMultiDrawArrays", GlRetracer::retrace_glMultiDrawArrays),
    ("glMultiDrawElements", GlRetracer::retrace_glMultiDrawElements),
    ("glPointParameterf", GlRetracer::retrace_glPointParameterf),
    ("glPointParameterfv", GlRetracer::retrace_glPointParameterfv),
    ("glPointParameteri", GlRetracer::retrace_glPointParameteri),
    ("glPointParameteriv", GlRetracer::retrace_glPointParameteriv),
    ("glFogCoordf", GlRetracer::retrace_glFogCoordf),
    ("glFogCoordfv", GlRetracer::retrace_glFogCoordfv),
    ("glFogCoordd", GlRetracer::retrace_glFogCoordd),
    ("glFogCoorddv", GlRetracer::retrace_glFogCoorddv),
    ("glFogCoordPointer", GlRetracer::retrace_glFogCoordPointer),
    ("glSecondaryColor3b", GlRetracer::retrace_glSecondaryColor3b),
    ("glSecondaryColor3bv", GlRetracer::retrace_glSecondaryColor3bv),
    ("glSecondaryColor3d", GlRetracer::retrace_glSecondaryColor3d),
    ("glSecondaryColor3dv", GlRetracer::retrace_glSecondaryColor3dv),
    ("glSecondaryColor3f", GlRetracer::retrace_glSecondaryColor3f),
    ("glSecondaryColor3fv", GlRetracer::retrace_glSecondaryColor3fv),
    ("glSecondaryColor3i", GlRetracer::retrace_glSecondaryColor3i),
    ("glSecondaryColor3iv", GlRetracer::retrace_glSecondaryColor3iv),
    ("glSecondaryColor3s", GlRetracer::retrace_glSecondaryColor3s),
    ("glSecondaryColor3sv", GlRetracer::retrace_glSecondaryColor3sv),
    ("glSecondaryColor3ub", GlRetracer::retrace_glSecondaryColor3ub),
    ("glSecondaryColor3ubv", GlRetracer::retrace_glSecondaryColor3ubv),
    ("glSecondaryColor3ui", GlRetracer::retrace_glSecondaryColor3ui),
    ("glSecondaryColor3uiv", GlRetracer::retrace_glSecondaryColor3uiv),
    ("glSecondaryColor3us", GlRetracer::retrace_glSecondaryColor3us),
    ("glSecondaryColor3usv", GlRetracer::retrace_glSecondaryColor3usv),
    ("glSecondaryColorPointer", GlRetracer::retrace_glSecondaryColorPointer),
    ("glWindowPos2d", GlRetracer::retrace_glWindowPos2d),
    ("glWindowPos2dv", GlRetracer::retrace_glWindowPos2dv),
    ("glWindowPos2f", GlRetracer::retrace_glWindowPos2f),
    ("glWindowPos2fv", GlRetracer::retrace_glWindowPos2fv),
    ("glWindowPos2i", GlRetracer::retrace_glWindowPos2i),
    ("glWindowPos2iv", GlRetracer::retrace_glWindowPos2iv),
    ("glWindowPos2s", GlRetracer::retrace_glWindowPos2s),
    ("glWindowPos2sv", GlRetracer::retrace_glWindowPos2sv),
    ("glWindowPos3d", GlRetracer::retrace_glWindowPos3d),
    ("glWindowPos3dv", GlRetracer::retrace_glWindowPos3dv),
    ("glWindowPos3f", GlRetracer::retrace_glWindowPos3f),
    ("glWindowPos3fv", GlRetracer::retrace_glWindowPos3fv),
    ("glWindowPos3i", GlRetracer::retrace_glWindowPos3i),
    ("glWindowPos3iv", GlRetracer::retrace_glWindowPos3iv),
    ("glWindowPos3s", GlRetracer::retrace_glWindowPos3s),
    ("glWindowPos3sv", GlRetracer::retrace_glWindowPos3sv),
    ("glGenQueries", GlRetracer::retrace_glGenQueries),
    ("glDeleteQueries", GlRetracer::retrace_glDeleteQueries),
    ("glIsQuery", GlRetracer::ignore),
    ("glBeginQuery", GlRetracer::retrace_glBeginQuery),
    ("glEndQuery", GlRetracer::retrace_glEndQuery),
    ("glGetQueryiv", GlRetracer::ignore),
    ("glGetQueryObjectiv", GlRetracer::retrace_glGetQueryObjectiv),
    ("glGetQueryObjectuiv", GlRetracer::retrace_glGetQueryObjectuiv),
    ("glBindBuffer", GlRetracer::retrace_glBindBuffer),
    ("glDeleteBuffers", GlRetracer::retrace_glDeleteBuffers),
    ("glGenBuffers", GlRetracer::retrace_glGenBuffers),
    ("glIsBuffer", GlRetracer::ignore),
    ("glBufferData", GlRetracer::retrace_glBufferData),
    ("glBufferSubData", GlRetracer::retrace_glBufferSubData),
    ("glGetBufferSubData", GlRetracer::ignore),
    ("glMapBuffer", GlRetracer::retrace_glMapBuffer),
    ("glUnmapBuffer", GlRetracer::retrace_glUnmapBuffer),
    ("glGetBufferParameteriv", GlRetracer::ignore),
    ("glGetBufferPointerv", GlRetracer::ignore),
    ("glBlendEquationSeparate", GlRetracer::retrace_glBlendEquationSeparate),
    ("glDrawBuffers", GlRetracer::retrace_glDrawBuffers),
    ("glStencilOpSeparate", GlRetracer::retrace_glStencilOpSeparate),
    ("glStencilFuncSeparate", GlRetracer::retrace_glStencilFuncSeparate),
    ("glStencilMaskSeparate", GlRetracer::retrace_glStencilMaskSeparate),
    ("glAttachShader", GlRetracer::retrace_glAttachShader),
    ("glBindAttribLocation", GlRetracer::retrace_glBindAttribLocation),
    ("glCompileShader", GlRetracer::retrace_glCompileShader),
    ("glCreateProgram", GlRetracer::retrace_glCreateProgram),
    ("glCreateShader", GlRetracer::retrace_glCreateShader),
    ("glDeleteProgram", GlRetracer::retrace_glDeleteProgram),
    ("glDeleteShader", GlRetracer::retrace_glDeleteShader),
    ("glDetachShader", GlRetracer::retrace_glDetachShader),
    ("glDisableVertexAttribArray", GlRetracer::retrace_glDisableVertexAttribArray),
    ("glEnableVertexAttribArray", GlRetracer::retrace_glEnableVertexAttribArray),
    ("glGetActiveAttrib", GlRetracer::ignore),
    ("glGetActiveUniform", GlRetracer::ignore),
    ("glGetAttachedShaders", GlRetracer::ignore),
    ("glGetAttribLocation", GlRetracer::retrace_glGetAttribLocation),
    ("glGetProgramiv", GlRetracer::ignore),
    ("glGetProgramInfoLog", GlRetracer::ignore),
    ("glGetShaderiv", GlRetracer::ignore),
    ("glGetShaderInfoLog", GlRetracer::ignore),
    ("glGetShaderSource", GlRetracer::ignore),
    ("glGetUniformLocation", GlRetracer::retrace_glGetUniformLocation),
    ("glGetUniformfv", GlRetracer::ignore),
    ("glGetUniformiv", GlRetracer::ignore),
    ("glGetVertexAttribdv", GlRetracer::ignore),
    ("glGetVertexAttribfv", GlRetracer::ignore),
    ("glGetVertexAttribiv", GlRetracer::ignore),
    ("glGetVertexAttribPointerv", GlRetracer::ignore),
    ("glIsProgram", GlRetracer::ignore),
    ("glIsShader", GlRetracer::ignore),
    ("glLinkProgram", GlRetracer::retrace_glLinkProgram),
    ("glShaderSource", GlRetracer::retrace_glShaderSource),
    ("glUseProgram", GlRetracer::retrace_glUseProgram),
    ("glUniform1f", GlRetracer::retrace_glUniform1f),
    ("glUniform2f", GlRetracer::retrace_glUniform2f),
    ("glUniform3f", GlRetracer::retrace_glUniform3f),
    ("glUniform4f", GlRetracer::retrace_glUniform4f),
    ("glUniform1i", GlRetracer::retrace_glUniform1i),
    ("glUniform2i", GlRetracer::retrace_glUniform2i),
    ("glUniform3i", GlRetracer::retrace_glUniform3i),
    ("glUniform4i", GlRetracer::retrace_glUniform4i),
    ("glUniform1fv", GlRetracer::retrace_glUniform1fv),
    ("glUniform2fv", GlRetracer::retrace_glUniform2fv),
    ("glUniform3fv", GlRetracer::retrace_glUniform3fv),
    ("glUniform4fv", GlRetracer::retrace_glUniform4fv),
    ("glUniform1iv", GlRetracer::retrace_glUniform1iv),
    ("glUniform2iv", GlRetracer::retrace_glUniform2iv),
    ("glUniform3iv", GlRetracer::retrace_glUniform3iv),
    ("glUniform4iv", GlRetracer::retrace_glUniform4iv),
    ("glUniformMatrix2fv", GlRetracer::retrace_glUniformMatrix2fv),
    ("glUniformMatrix3fv", GlRetracer::retrace_glUniformMatrix3fv),
    ("glUniformMatrix4fv", GlRetracer::retrace_glUniformMatrix4fv),
    ("glValidateProgram", GlRetracer::retrace_glValidateProgram),
    ("glVertexAttrib1d", GlRetracer::retrace_glVertexAttrib1d),
    ("glVertexAttrib1dv", GlRetracer::retrace_glVertexAttrib1dv),
    ("glVertexAttrib1f", GlRetracer::retrace_glVertexAttrib1f),
    ("glVertexAttrib1fv", GlRetracer::retrace_glVertexAttrib1fv),
    ("glVertexAttrib1s", GlRetracer::retrace_glVertexAttrib1s),
    ("glVertexAttrib1sv", GlRetracer::retrace_glVertexAttrib1sv),
    ("glVertexAttrib2d", GlRetracer::retrace_glVertexAttrib2d),
    ("glVertexAttrib2dv", GlRetracer::retrace_glVertexAttrib2dv),
    ("glVertexAttrib2f", GlRetracer::retrace_glVertexAttrib2f),
    ("glVertexAttrib2fv", GlRetracer::retrace_glVertexAttrib2fv),
    ("glVertexAttrib2s", GlRetracer::retrace_glVertexAttrib2s),
    ("glVertexAttrib2sv", GlRetracer::retrace_glVertexAttrib2sv),
    ("glVertexAttrib3d", GlRetracer::retrace_glVertexAttrib3d),
    ("glVertexAttrib3dv", GlRetracer::retrace_glVertexAttrib3dv),
    ("glVertexAttrib3f", GlRetracer::retrace_glVertexAttrib3f),
    ("glVertexAttrib3fv", GlRetracer::retrace_glVertexAttrib3fv),
    ("glVertexAttrib3s", GlRetracer::retrace_glVertexAttrib3s),
    ("glVertexAttrib3sv", GlRetracer::retrace_glVertexAttrib3sv),
    ("glVertexAttrib4Nbv", GlRetracer::retrace_glVertexAttrib4Nbv),
    ("glVertexAttrib4Niv", GlRetracer::retrace_glVertexAttrib4Niv),
    ("glVertexAttrib4Nsv", GlRetracer::retrace_glVertexAttrib4Nsv),
    ("glVertexAttrib4Nub", GlRetracer::retrace_glVertexAttrib4Nub),
    ("glVertexAttrib4Nubv", GlRetracer::retrace_glVertexAttrib4Nubv),
    ("glVertexAttrib4Nuiv", GlRetracer::retrace_glVertexAttrib4Nuiv),
    ("glVertexAttrib4Nusv", GlRetracer::retrace_glVertexAttrib4Nusv),
    ("glVertexAttrib4bv", GlRetracer::retrace_glVertexAttrib4bv),
    ("glVertexAttrib4d", GlRetracer::retrace_glVertexAttrib4d),
    ("glVertexAttrib4dv", GlRetracer::retrace_glVertexAttrib4dv),
    ("glVertexAttrib4f", GlRetracer::retrace_glVertexAttrib4f),
    ("glVertexAttrib4fv", GlRetracer::retrace_glVertexAttrib4fv),
    ("glVertexAttrib4iv", GlRetracer::retrace_glVertexAttrib4iv),
    ("glVertexAttrib4s", GlRetracer::retrace_glVertexAttrib4s),
    ("glVertexAttrib4sv", GlRetracer::retrace_glVertexAttrib4sv),
    ("glVertexAttrib4ubv", GlRetracer::retrace_glVertexAttrib4ubv),
    ("glVertexAttrib4uiv", GlRetracer::retrace_glVertexAttrib4uiv),
    ("glVertexAttrib4usv", GlRetracer::retrace_glVertexAttrib4usv),
    ("glVertexAttribPointer", GlRetracer::retrace_glVertexAttribPointer),
    ("glUniformMatrix2x3fv", GlRetracer::retrace_glUniformMatrix2x3fv),
    ("glUniformMatrix3x2fv", GlRetracer::retrace_glUniformMatrix3x2fv),
    ("glUniformMatrix2x4fv", GlRetracer::retrace_glUniformMatrix2x4fv),
    ("glUniformMatrix4x2fv", GlRetracer::retrace_glUniformMatrix4x2fv),
    ("glUniformMatrix3x4fv", GlRetracer::retrace_glUniformMatrix3x4fv),
    ("glUniformMatrix4x3fv", GlRetracer::retrace_glUniformMatrix4x3fv),
    ("glColorMaski", GlRetracer::retrace_glColorMaski),
    ("glGetBooleani_v", GlRetracer::ignore),
    ("glGetIntegeri_v", GlRetracer::ignore),
    ("glEnablei", GlRetracer::retrace_glEnablei),
    ("glDisablei", GlRetracer::retrace_glDisablei),
    ("glIsEnabledi", GlRetracer::ignore),
    ("glBeginTransformFeedback", GlRetracer::retrace_glBeginTransformFeedback),
    ("glEndTransformFeedback", GlRetracer::retrace_glEndTransformFeedback),
    ("glBindBufferRange", GlRetracer::retrace_glBindBufferRange),
    ("glBindBufferBase", GlRetracer::retrace_glBindBufferBase),
    ("glTransformFeedbackVaryings", GlRetracer::retrace_glTransformFeedbackVaryings),
    ("glGetTransformFeedbackVarying", GlRetracer::ignore),
    ("glClampColor", GlRetracer::retrace_glClampColor),
    ("glBeginConditionalRender", GlRetracer::retrace_glBeginConditionalRender),
    ("glEndConditionalRender", GlRetracer::retrace_glEndConditionalRender),
    ("glVertexAttribIPointer", GlRetracer::retrace_glVertexAttribIPointer),
    ("glGetVertexAttribIiv", GlRetracer::ignore),
    ("glGetVertexAttribIuiv", GlRetracer::ignore),
    ("glVertexAttribI1i", GlRetracer::retrace_glVertexAttribI1i),
    ("glVertexAttribI2i", GlRetracer::retrace_glVertexAttribI2i),
    ("glVertexAttribI3i", GlRetracer::retrace_glVertexAttribI3i),
    ("glVertexAttribI4i", GlRetracer::retrace_glVertexAttribI4i),
    ("glVertexAttribI1ui", GlRetracer::retrace_glVertexAttribI1ui),
    ("glVertexAttribI2ui", GlRetracer::retrace_glVertexAttribI2ui),
    ("glVertexAttribI3ui", GlRetracer::retrace_glVertexAttribI3ui),
    ("glVertexAttribI4ui", GlRetracer::retrace_glVertexAttribI4ui),
    ("glVertexAttribI1iv", GlRetracer::retrace_glVertexAttribI1iv),
    ("glVertexAttribI2iv", GlRetracer::retrace_glVertexAttribI2iv),
    ("glVertexAttribI3iv", GlRetracer::retrace_glVertexAttribI3iv),
    ("glVertexAttribI4iv", GlRetracer::retrace_glVertexAttribI4iv),
    ("glVertexAttribI1uiv", GlRetracer::retrace_glVertexAttribI1uiv),
    ("glVertexAttribI2uiv", GlRetracer::retrace_glVertexAttribI2uiv),
    ("glVertexAttribI3uiv", GlRetracer::retrace_glVertexAttribI3uiv),
    ("glVertexAttribI4uiv", GlRetracer::retrace_glVertexAttribI4uiv),
    ("glVertexAttribI4bv", GlRetracer::retrace_glVertexAttribI4bv),
    ("glVertexAttribI4sv", GlRetracer::retrace_glVertexAttribI4sv),
    ("glVertexAttribI4ubv", GlRetracer::retrace_glVertexAttribI4ubv),
    ("glVertexAttribI4usv", GlRetracer::retrace_glVertexAttribI4usv),
    ("glGetUniformuiv", GlRetracer::ignore),
    ("glBindFragDataLocation", GlRetracer::retrace_glBindFragDataLocation),
    ("glGetFragDataLocation", GlRetracer::ignore),
    ("glUniform1ui", GlRetracer::retrace_glUniform1ui),
    ("glUniform2ui", GlRetracer::retrace_glUniform2ui),
    ("glUniform3ui", GlRetracer::retrace_glUniform3ui),
    ("glUniform4ui", GlRetracer::retrace_glUniform4ui),
    ("glUniform1uiv", GlRetracer::retrace_glUniform1uiv),
    ("glUniform2uiv", GlRetracer::retrace_glUniform2uiv),
    ("glUniform3uiv", GlRetracer::retrace_glUniform3uiv),
    ("glUniform4uiv", GlRetracer::retrace_glUniform4uiv),
    ("glTexParameterIiv", GlRetracer::retrace_glTexParameterIiv),
    ("glTexParameterIuiv", GlRetracer::retrace_glTexParameterIuiv),
    ("glGetTexParameterIiv", GlRetracer::ignore),
    ("glGetTexParameterIuiv", GlRetracer::ignore),
    ("glClearBufferiv", GlRetracer::retrace_glClearBufferiv),
    ("glClearBufferuiv", GlRetracer::retrace_glClearBufferuiv),
    ("glClearBufferfv", GlRetracer::retrace_glClearBufferfv),
    ("glClearBufferfi", GlRetracer::retrace_glClearBufferfi),
    ("glGetStringi", GlRetracer::ignore),
    ("glDrawArraysInstanced", GlRetracer::retrace_glDrawArraysInstanced),
    ("glDrawElementsInstanced", GlRetracer::retrace_glDrawElementsInstanced),
    ("glTexBuffer", GlRetracer::retrace_glTexBuffer),
    ("glPrimitiveRestartIndex", GlRetracer::retrace_glPrimitiveRestartIndex),
    ("glGetInteger64i_v", GlRetracer::ignore),
    ("glGetBufferParameteri64v", GlRetracer::ignore),
    ("glFramebufferTexture", GlRetracer::retrace_glFramebufferTexture),
    ("glVertexAttribDivisor", GlRetracer::retrace_glVertexAttribDivisor),
    ("glMinSampleShading", GlRetracer::retrace_glMinSampleShading),
    ("glBlendEquationi", GlRetracer::retrace_glBlendEquationi),
    ("glBlendEquationSeparatei", GlRetracer::retrace_glBlendEquationSeparatei),
    ("glBlendFunci", GlRetracer::retrace_glBlendFunci),
    ("glBlendFuncSeparatei", GlRetracer::retrace_glBlendFuncSeparatei),
    ("glGetnCompressedTexImage", GlRetracer::retrace_glGetnCompressedTexImage),
    ("glGetnTexImage", GlRetracer::retrace_glGetnTexImage),
    ("glGetnUniformdv", GlRetracer::ignore),
    ("glGetnMapdv", GlRetracer::ignore),
    ("glGetnMapfv", GlRetracer::ignore),
    ("glGetnMapiv", GlRetracer::ignore),
    ("glGetnPixelMapfv", GlRetracer::retrace_glGetnPixelMapfv),
    ("glGetnPixelMapuiv", GlRetracer::retrace_glGetnPixelMapuiv),
    ("glGetnPixelMapusv", GlRetracer::retrace_glGetnPixelMapusv),
    ("glGetnPolygonStipple", GlRetracer::retrace_glGetnPolygonStipple),
    ("glGetnColorTable", GlRetracer::ignore),
    ("glGetnConvolutionFilter", GlRetracer::retrace_glGetnConvolutionFilter),
    ("glGetnSeparableFilter", GlRetracer::retrace_glGetnSeparableFilter),
    ("glGetnHistogram", GlRetracer::retrace_glGetnHistogram),
    ("glGetnMinmax", GlRetracer::retrace_glGetnMinmax),
    ("glSpecializeShader", GlRetracer::retrace_glSpecializeShader),
    ("glMultiDrawArraysIndirectCount", GlRetracer::retrace_glMultiDrawArraysIndirectCount),
    ("glMultiDrawElementsIndirectCount", GlRetracer::retrace_glMultiDrawElementsIndirectCount),
    ("glClipPlanef", GlRetracer::retrace_glClipPlanef),
    ("glFrustumf", GlRetracer::retrace_glFrustumf),
    ("glGetClipPlanef", GlRetracer::ignore),
    ("glOrthof", GlRetracer::retrace_glOrthof),
    ("glAlphaFuncx", GlRetracer::retrace_glAlphaFuncx),
    ("glClearColorx", GlRetracer::retrace_glClearColorx),
    ("glClearDepthx", GlRetracer::retrace_glClearDepthx),
    ("glClipPlanex", GlRetracer::retrace_glClipPlanex),
    ("glColor4x", GlRetracer::retrace_glColor4x),
    ("glDepthRangex", GlRetracer::retrace_glDepthRangex),
    ("glFogx", GlRetracer::retrace_glFogx),
    ("glFogxv", GlRetracer::retrace_glFogxv),
    ("glFrustumx", GlRetracer::retrace_glFrustumx),
    ("glGetClipPlanex", GlRetracer::ignore),
    ("glGetFixedv", GlRetracer::ignore),
    ("glGetLightxv", GlRetracer::ignore),
    ("glGetMaterialxv", GlRetracer::ignore),
    ("glGetTexEnvxv", GlRetracer::ignore),
    ("glGetTexParameterxv", GlRetracer::ignore),
    ("glLightModelx", GlRetracer::retrace_glLightModelx),
    ("glLightModelxv", GlRetracer::retrace_glLightModelxv),
    ("glLightx", GlRetracer::retrace_glLightx),
    ("glLightxv", GlRetracer::retrace_glLightxv),
    ("glLineWidthx", GlRetracer::retrace_glLineWidthx),
    ("glLoadMatrixx", GlRetracer::retrace_glLoadMatrixx),
    ("glMaterialx", GlRetracer::retrace_glMaterialx),
    ("glMaterialxv", GlRetracer::retrace_glMaterialxv),
    ("glMultMatrixx", GlRetracer::retrace_glMultMatrixx),
    ("glMultiTexCoord4x", GlRetracer::retrace_glMultiTexCoord4x),
    ("glNormal3x", GlRetracer::retrace_glNormal3x),
    ("glOrthox", GlRetracer::retrace_glOrthox),
    ("glPointParameterx", GlRetracer::retrace_glPointParameterx),
    ("glPointParameterxv", GlRetracer::retrace_glPointParameterxv),
    ("glPointSizex", GlRetracer::retrace_glPointSizex),
    ("glPolygonOffsetx", GlRetracer::retrace_glPolygonOffsetx),
    ("glRotatex", GlRetracer::retrace_glRotatex),
    ("glSampleCoveragex", GlRetracer::retrace_glSampleCoveragex),
    ("glScalex", GlRetracer::retrace_glScalex),
    ("glTexEnvx", GlRetracer::retrace_glTexEnvx),
    ("glTexEnvxv", GlRetracer::retrace_glTexEnvxv),
    ("glTexParameterx", GlRetracer::retrace_glTexParameterx),
    ("glTexParameterxv", GlRetracer::retrace_glTexParameterxv),
    ("glTranslatex", GlRetracer::retrace_glTranslatex),
    ("glBlendBarrier", GlRetracer::retrace_glBlendBarrier),
    ("glPrimitiveBoundingBox", GlRetracer::retrace_glPrimitiveBoundingBox),
    ("glTbufferMask3DFX", GlRetracer::retrace_glTbufferMask3DFX),
    ("glDebugMessageEnableAMD", GlRetracer::retrace_glDebugMessageEnableAMD),
    ("glDebugMessageInsertAMD", GlRetracer::retrace_glDebugMessageInsertAMD),
    ("glDebugMessageCallbackAMD", GlRetracer::ignore),
    ("glGetDebugMessageLogAMD", GlRetracer::ignore),
    ("glBlendFuncIndexedAMD", GlRetracer::retrace_glBlendFuncIndexedAMD),
    ("glBlendFuncSeparateIndexedAMD", GlRetracer::retrace_glBlendFuncSeparateIndexedAMD),
    ("glBlendEquationIndexedAMD", GlRetracer::retrace_glBlendEquationIndexedAMD),
    ("glBlendEquationSeparateIndexedAMD", GlRetracer::retrace_glBlendEquationSeparateIndexedAMD),
    ("glVertexAttribParameteriAMD", GlRetracer::retrace_glVertexAttribParameteriAMD),
    ("glMultiDrawArraysIndirectAMD", GlRetracer::retrace_glMultiDrawArraysIndirectAMD),
    ("glMultiDrawElementsIndirectAMD", GlRetracer::retrace_glMultiDrawElementsIndirectAMD),
    ("glGenNamesAMD", GlRetracer::retrace_glGenNamesAMD),
    ("glDeleteNamesAMD", GlRetracer::retrace_glDeleteNamesAMD),
    ("glIsNameAMD", GlRetracer::ignore),
    ("glQueryObjectParameteruiAMD", GlRetracer::retrace_glQueryObjectParameteruiAMD),
    ("glGetPerfMonitorGroupsAMD", GlRetracer::ignore),
    ("glGetPerfMonitorCountersAMD", GlRetracer::ignore),
    ("glGetPerfMonitorGroupStringAMD", GlRetracer::ignore),
    ("glGetPerfMonitorCounterStringAMD", GlRetracer::ignore),
    ("glGetPerfMonitorCounterInfoAMD", GlRetracer::ignore),
    ("glGenPerfMonitorsAMD", GlRetracer::retrace_glGenPerfMonitorsAMD),
    ("glDeletePerfMonitorsAMD", GlRetracer::retrace_glDeletePerfMonitorsAMD),
    ("glSelectPerfMonitorCountersAMD", GlRetracer::retrace_glSelectPerfMonitorCountersAMD),
    ("glBeginPerfMonitorAMD", GlRetracer::retrace_glBeginPerfMonitorAMD),
    ("glEndPerfMonitorAMD", GlRetracer::retrace_glEndPerfMonitorAMD),
    ("glGetPerfMonitorCounterDataAMD", GlRetracer::ignore),
    ("glSetMultisamplefvAMD", GlRetracer::retrace_glSetMultisamplefvAMD),
    ("glTexStorageSparseAMD", GlRetracer::retrace_glTexStorageSparseAMD),
    ("glTextureStorageSparseAMD", GlRetracer::retrace_glTextureStorageSparseAMD),
    ("glStencilOpValueAMD", GlRetracer::retrace_glStencilOpValueAMD),
    ("glTessellationFactorAMD", GlRetracer::retrace_glTessellationFactorAMD),
    ("glTessellationModeAMD", GlRetracer::retrace_glTessellationModeAMD),
    ("glBlitFramebufferANGLE", GlRetracer::retrace_glBlitFramebufferANGLE),
    ("glRenderbufferStorageMultisampleANGLE", GlRetracer::retrace_glRenderbufferStorageMultisampleANGLE),
    ("glDrawArraysInstancedANGLE", GlRetracer::retrace_glDrawArraysInstancedANGLE),
    ("glDrawElementsInstancedANGLE", GlRetracer::retrace_glDrawElementsInstancedANGLE),
    ("glVertexAttribDivisorANGLE", GlRetracer::retrace_glVertexAttribDivisorANGLE),
    ("glGenQueriesANGLE", GlRetracer::retrace_glGenQueriesANGLE),
    ("glDeleteQueriesANGLE", GlRetracer::retrace_glDeleteQueriesANGLE),
    ("glIsQueryANGLE", GlRetracer::ignore),
    ("glBeginQueryANGLE", GlRetracer::retrace_glBeginQueryANGLE),
    ("glEndQueryANGLE", GlRetracer::retrace_glEndQueryANGLE),
    ("glQueryCounterANGLE", GlRetracer::retrace_glQueryCounterANGLE),
    ("glGetQueryivANGLE", GlRetracer::ignore),
    ("glGetQueryObjectivANGLE", GlRetracer::retrace_glGetQueryObjectivANGLE),
    ("glGetQueryObjectuivANGLE", GlRetracer::retrace_glGetQueryObjectuivANGLE),
    ("glGetQueryObjecti64vANGLE", GlRetracer::retrace_glGetQueryObjecti64vANGLE),
    ("glGetQueryObjectui64vANGLE", GlRetracer::retrace_glGetQueryObjectui64vANGLE),
    ("glGetTranslatedShaderSourceANGLE", GlRetracer::ignore),
    ("glCopyTextureLevelsAPPLE", GlRetracer::retrace_glCopyTextureLevelsAPPLE),
    ("glElementPointerAPPLE", GlRetracer::retrace_glElementPointerAPPLE),
    ("glDrawElementArrayAPPLE", GlRetracer::retrace_glDrawElementArrayAPPLE),
    ("glDrawRangeElementArrayAPPLE", GlRetracer::retrace_glDrawRangeElementArrayAPPLE),
    ("glMultiDrawElementArrayAPPLE", GlRetracer::retrace_glMultiDrawElementArrayAPPLE),
    ("glMultiDrawRangeElementArrayAPPLE", GlRetracer::retrace_glMultiDrawRangeElementArrayAPPLE),
    ("glGenFencesAPPLE", GlRetracer::retrace_glGenFencesAPPLE),
    ("glDeleteFencesAPPLE", GlRetracer::retrace_glDeleteFencesAPPLE),
    ("glSetFenceAPPLE", GlRetracer::retrace_glSetFenceAPPLE),
    ("glIsFenceAPPLE", GlRetracer::ignore),
    ("glTestFenceAPPLE", GlRetracer::retrace_glTestFenceAPPLE),
    ("glFinishFenceAPPLE", GlRetracer::retrace_glFinishFenceAPPLE),
    ("glTestObjectAPPLE", GlRetracer::retrace_glTestObjectAPPLE),
    ("glFinishObjectAPPLE", GlRetracer::retrace_glFinishObjectAPPLE),
    ("glBufferParameteriAPPLE", GlRetracer::retrace_glBufferParameteriAPPLE),
    ("glFlushMappedBufferRangeAPPLE", GlRetracer::retrace_glFlushMappedBufferRangeAPPLE),
    ("glFlushRenderAPPLE", GlRetracer::retrace_glFlushRenderAPPLE),
    ("glFinishRenderAPPLE", GlRetracer::retrace_glFinishRenderAPPLE),
    ("glSwapAPPLE", GlRetracer::retrace_glSwapAPPLE),
    ("glRenderbufferStorageMultisampleAPPLE", GlRetracer::retrace_glRenderbufferStorageMultisampleAPPLE),
    ("glResolveMultisampleFramebufferAPPLE", GlRetracer::retrace_glResolveMultisampleFramebufferAPPLE),
    ("glObjectPurgeableAPPLE", GlRetracer::retrace_glObjectPurgeableAPPLE),
    ("glObjectUnpurgeableAPPLE", GlRetracer::retrace_glObjectUnpurgeableAPPLE),
    ("glGetObjectParameterivAPPLE", GlRetracer::ignore),
    ("glPointSizePointerAPPLE", GlRetracer::retrace_glPointSizePointerAPPLE),
    ("glVertexPointSizefAPPLE", GlRetracer::retrace_glVertexPointSizefAPPLE),
    ("glFenceSyncAPPLE", GlRetracer::retrace_glFenceSyncAPPLE),
    ("glIsSyncAPPLE", GlRetracer::ignore),
    ("glDeleteSyncAPPLE", GlRetracer::retrace_glDeleteSyncAPPLE),
    ("glClientWaitSyncAPPLE", GlRetracer::retrace_glClientWaitSyncAPPLE),
    ("glWaitSyncAPPLE", GlRetracer::retrace_glWaitSyncAPPLE),
    ("glGetInteger64vAPPLE", GlRetracer::ignore),
    ("glGetSyncivAPPLE", GlRetracer::ignore),
    ("glTextureRangeAPPLE", GlRetracer::retrace_glTextureRangeAPPLE),
    ("glGetTexParameterPointervAPPLE", GlRetracer::ignore),
    ("glBindVertexArrayAPPLE", GlRetracer::retrace_glBindVertexArrayAPPLE),
    ("glDeleteVertexArraysAPPLE", GlRetracer::retrace_glDeleteVertexArraysAPPLE),
    ("glGenVertexArraysAPPLE", GlRetracer::retrace_glGenVertexArraysAPPLE),
    ("glIsVertexArrayAPPLE", GlRetracer::ignore),
    ("glVertexArrayRangeAPPLE", GlRetracer::retrace_glVertexArrayRangeAPPLE),
    ("glFlushVertexArrayRangeAPPLE", GlRetracer::retrace_glFlushVertexArrayRangeAPPLE),
    ("glVertexArrayParameteriAPPLE", GlRetracer::retrace_glVertexArrayParameteriAPPLE),
    ("glEnableVertexAttribAPPLE", GlRetracer::retrace_glEnableVertexAttribAPPLE),
    ("glDisableVertexAttribAPPLE", GlRetracer::retrace_glDisableVertexAttribAPPLE),
    ("glIsVertexAttribEnabledAPPLE", GlRetracer::ignore),
    ("glMapVertexAttrib1dAPPLE", GlRetracer::retrace_glMapVertexAttrib1dAPPLE),
    ("glMapVertexAttrib1fAPPLE", GlRetracer::retrace_glMapVertexAttrib1fAPPLE),
    ("glMapVertexAttrib2dAPPLE", GlRetracer::retrace_glMapVertexAttrib2dAPPLE),
    ("glMapVertexAttrib2fAPPLE", GlRetracer::retrace_glMapVertexAttrib2fAPPLE),
    ("glReleaseShaderCompiler", GlRetracer::retrace_glReleaseShaderCompiler),
    ("glShaderBinary", GlRetracer::retrace_glShaderBinary),
    ("glGetShaderPrecisionFormat", GlRetracer::ignore),
    ("glDepthRangef", GlRetracer::retrace_glDepthRangef),
    ("glClearDepthf", GlRetracer::retrace_glClearDepthf),
    ("glMemoryBarrierByRegion", GlRetracer::retrace_glMemoryBarrierByRegion),
    ("glPrimitiveBoundingBoxARB", GlRetracer::retrace_glPrimitiveBoundingBoxARB),
    ("glDrawArraysInstancedBaseInstance", GlRetracer::retrace_glDrawArraysInstancedBaseInstance),
    ("glDrawElementsInstancedBaseInstance", GlRetracer::retrace_glDrawElementsInstancedBaseInstance),
    ("glDrawElementsInstancedBaseVertexBaseInstance", GlRetracer::retrace_glDrawElementsInstancedBaseVertexBaseInstance),
    ("glGetTextureHandleARB", GlRetracer::retrace_glGetTextureHandleARB),
    ("glGetTextureSamplerHandleARB", GlRetracer::retrace_glGetTextureSamplerHandleARB),
    ("glMakeTextureHandleResidentARB", GlRetracer::retrace_glMakeTextureHandleResidentARB),
    ("glMakeTextureHandleNonResidentARB", GlRetracer::retrace_glMakeTextureHandleNonResidentARB),
    ("glGetImageHandleARB", GlRetracer::retrace_glGetImageHandleARB),
    ("glMakeImageHandleResidentARB", GlRetracer::retrace_glMakeImageHandleResidentARB),
    ("glMakeImageHandleNonResidentARB", GlRetracer::retrace_glMakeImageHandleNonResidentARB),
    ("glUniformHandleui64ARB", GlRetracer::retrace_glUniformHandleui64ARB),
    ("glUniformHandleui64vARB", GlRetracer::retrace_glUniformHandleui64vARB),
    ("glProgramUniformHandleui64ARB", GlRetracer::retrace_glProgramUniformHandleui64ARB),
    ("glProgramUniformHandleui64vARB", GlRetracer::retrace_glProgramUniformHandleui64vARB),
    ("glIsTextureHandleResidentARB", GlRetracer::ignore),
    ("glIsImageHandleResidentARB", GlRetracer::ignore),
    ("glVertexAttribL1ui64ARB", GlRetracer::retrace_glVertexAttribL1ui64ARB),
    ("glVertexAttribL1ui64vARB", GlRetracer::retrace_glVertexAttribL1ui64vARB),
    ("glGetVertexAttribLui64vARB", GlRetracer::ignore),
    ("glBindFragDataLocationIndexed", GlRetracer::retrace_glBindFragDataLocationIndexed),
    ("glGetFragDataIndex", GlRetracer::ignore),
    ("glBufferStorage", GlRetracer::retrace_glBufferStorage),
    ("glCreateSyncFromCLeventARB", GlRetracer::ignore),
    ("glClearBufferData", GlRetracer::retrace_glClearBufferData),
    ("glClearBufferSubData", GlRetracer::retrace_glClearBufferSubData),
    ("glClearTexImage", GlRetracer::retrace_glClearTexImage),
    ("glClearTexSubImage", GlRetracer::retrace_glClearTexSubImage),
    ("glClipControl", GlRetracer::retrace_glClipControl),
    ("glClampColorARB", GlRetracer::retrace_glClampColorARB),
    ("glDispatchCompute", GlRetracer::retrace_glDispatchCompute),
    ("glDispatchComputeIndirect", GlRetracer::retrace_glDispatchComputeIndirect),
    ("glDispatchComputeGroupSizeARB", GlRetracer::retrace_glDispatchComputeGroupSizeARB),
    ("glCopyBufferSubData", GlRetracer::retrace_glCopyBufferSubData),
    ("glCopyImageSubData", GlRetracer::retrace_glCopyImageSubData),
    ("glDebugMessageControlARB", GlRetracer::retrace_glDebugMessageControlARB),
    ("glDebugMessageInsertARB", GlRetracer::retrace_glDebugMessageInsertARB),
    ("glDebugMessageCallbackARB", GlRetracer::ignore),
    ("glGetDebugMessageLogARB", GlRetracer::ignore),
    ("glCreateTransformFeedbacks", GlRetracer::retrace_glCreateTransformFeedbacks),
    ("glTransformFeedbackBufferBase", GlRetracer::retrace_glTransformFeedbackBufferBase),
    ("glTransformFeedbackBufferRange", GlRetracer::retrace_glTransformFeedbackBufferRange),
    ("glGetTransformFeedbackiv", GlRetracer::ignore),
    ("glGetTransformFeedbacki_v", GlRetracer::ignore),
    ("glGetTransformFeedbacki64_v", GlRetracer::ignore),
    ("glCreateBuffers", GlRetracer::retrace_glCreateBuffers),
    ("glNamedBufferStorage", GlRetracer::retrace_glNamedBufferStorage),
    ("glNamedBufferData", GlRetracer::retrace_glNamedBufferData),
    ("glNamedBufferSubData", GlRetracer::retrace_glNamedBufferSubData),
    ("glCopyNamedBufferSubData", GlRetracer::retrace_glCopyNamedBufferSubData),
    ("glClearNamedBufferData", GlRetracer::retrace_glClearNamedBufferData),
    ("glClearNamedBufferSubData", GlRetracer::retrace_glClearNamedBufferSubData),
    ("glMapNamedBuffer", GlRetracer::retrace_glMapNamedBuffer),
    ("glMapNamedBufferRange", GlRetracer::retrace_glMapNamedBufferRange),
    ("glUnmapNamedBuffer", GlRetracer::retrace_glUnmapNamedBuffer),
    ("glFlushMappedNamedBufferRange", GlRetracer::retrace_glFlushMappedNamedBufferRange),
    ("glGetNamedBufferParameteriv", GlRetracer::ignore),
    ("glGetNamedBufferParameteri64v", GlRetracer::ignore),
    ("glGetNamedBufferPointerv", GlRetracer::ignore),
    ("glGetNamedBufferSubData", GlRetracer::ignore),
    ("glCreateFramebuffers", GlRetracer::retrace_glCreateFramebuffers),
    ("glNamedFramebufferRenderbuffer", GlRetracer::retrace_glNamedFramebufferRenderbuffer),
    ("glNamedFramebufferParameteri", GlRetracer::retrace_glNamedFramebufferParameteri),
    ("glNamedFramebufferTexture", GlRetracer::retrace_glNamedFramebufferTexture),
    ("glNamedFramebufferTextureLayer", GlRetracer::retrace_glNamedFramebufferTextureLayer),
    ("glNamedFramebufferDrawBuffer", GlRetracer::retrace_glNamedFramebufferDrawBuffer),
    ("glNamedFramebufferDrawBuffers", GlRetracer::retrace_glNamedFramebufferDrawBuffers),
    ("glNamedFramebufferReadBuffer", GlRetracer::retrace_glNamedFramebufferReadBuffer),
    ("glInvalidateNamedFramebufferData", GlRetracer::retrace_glInvalidateNamedFramebufferData),
    ("glInvalidateNamedFramebufferSubData", GlRetracer::retrace_glInvalidateNamedFramebufferSubData),
    ("glClearNamedFramebufferiv", GlRetracer::retrace_glClearNamedFramebufferiv),
    ("glClearNamedFramebufferuiv", GlRetracer::retrace_glClearNamedFramebufferuiv),
    ("glClearNamedFramebufferfv", GlRetracer::retrace_glClearNamedFramebufferfv),
    ("glClearNamedFramebufferfi", GlRetracer::retrace_glClearNamedFramebufferfi),
    ("glBlitNamedFramebuffer", GlRetracer::retrace_glBlitNamedFramebuffer),
    ("glCheckNamedFramebufferStatus", GlRetracer::retrace_glCheckNamedFramebufferStatus),
    ("glGetNamedFramebufferParameteriv", GlRetracer::ignore),
    ("glGetNamedFramebufferAttachmentParameteriv", GlRetracer::ignore),
    ("glCreateRenderbuffers", GlRetracer::retrace_glCreateRenderbuffers),
    ("glNamedRenderbufferStorage", GlRetracer::retrace_glNamedRenderbufferStorage),
    ("glNamedRenderbufferStorageMultisample", GlRetracer::retrace_glNamedRenderbufferStorageMultisample),
    ("glGetNamedRenderbufferParameteriv", GlRetracer::ignore),
    ("glCreateTextures", GlRetracer::retrace_glCreateTextures),
    ("glTextureBuffer", GlRetracer::retrace_glTextureBuffer),
    ("glTextureBufferRange", GlRetracer::retrace_glTextureBufferRange),
    ("glTextureStorage1D", GlRetracer::retrace_glTextureStorage1D),
    ("glTextureStorage2D", GlRetracer::retrace_glTextureStorage2D),
    ("glTextureStorage3D", GlRetracer::retrace_glTextureStorage3D),
    ("glTextureStorage2DMultisample", GlRetracer::retrace_glTextureStorage2DMultisample),
    ("glTextureStorage3DMultisample", GlRetracer::retrace_glTextureStorage3DMultisample),
    ("glTextureSubImage1D", GlRetracer::retrace_glTextureSubImage1D),
    ("glTextureSubImage2D", GlRetracer::retrace_glTextureSubImage2D),
    ("glTextureSubImage3D", GlRetracer::retrace_glTextureSubImage3D),
    ("glCompressedTextureSubImage1D", GlRetracer::retrace_glCompressedTextureSubImage1D),
    ("glCompressedTextureSubImage2D", GlRetracer::retrace_glCompressedTextureSubImage2D),
    ("glCompressedTextureSubImage3D", GlRetracer::retrace_glCompressedTextureSubImage3D),
    ("glCopyTextureSubImage1D", GlRetracer::retrace_glCopyTextureSubImage1D),
    ("glCopyTextureSubImage2D", GlRetracer::retrace_glCopyTextureSubImage2D),
    ("glCopyTextureSubImage3D", GlRetracer::retrace_glCopyTextureSubImage3D),
    ("glTextureParameterf", GlRetracer::retrace_glTextureParameterf),
    ("glTextureParameterfv", GlRetracer::retrace_glTextureParameterfv),
    ("glTextureParameteri", GlRetracer::retrace_glTextureParameteri),
    ("glTextureParameterIiv", GlRetracer::retrace_glTextureParameterIiv),
    ("glTextureParameterIuiv", GlRetracer::retrace_glTextureParameterIuiv),
    ("glTextureParameteriv", GlRetracer::retrace_glTextureParameteriv),
    ("glGenerateTextureMipmap", GlRetracer::retrace_glGenerateTextureMipmap),
    ("glBindTextureUnit", GlRetracer::retrace_glBindTextureUnit),
    ("glGetTextureImage", GlRetracer::retrace_glGetTextureImage),
    ("glGetCompressedTextureImage", GlRetracer::retrace_glGetCompressedTextureImage),
    ("glGetTextureLevelParameterfv", GlRetracer::ignore),
    ("glGetTextureLevelParameteriv", GlRetracer::ignore),
    ("glGetTextureParameterfv", GlRetracer::ignore),
    ("glGetTextureParameterIiv", GlRetracer::ignore),
    ("glGetTextureParameterIuiv", GlRetracer::ignore),
    ("glGetTextureParameteriv", GlRetracer::ignore),
    ("glCreateVertexArrays", GlRetracer::retrace_glCreateVertexArrays),
    ("glDisableVertexArrayAttrib", GlRetracer::retrace_glDisableVertexArrayAttrib),
    ("glEnableVertexArrayAttrib", GlRetracer::retrace_glEnableVertexArrayAttrib),
    ("glVertexArrayElementBuffer", GlRetracer::retrace_glVertexArrayElementBuffer),
    ("glVertexArrayVertexBuffer", GlRetracer::retrace_glVertexArrayVertexBuffer),
    ("glVertexArrayVertexBuffers", GlRetracer::retrace_glVertexArrayVertexBuffers),
    ("glVertexArrayAttribBinding", GlRetracer::retrace_glVertexArrayAttribBinding),
    ("glVertexArrayAttribFormat", GlRetracer::retrace_glVertexArrayAttribFormat),
    ("glVertexArrayAttribIFormat", GlRetracer::retrace_glVertexArrayAttribIFormat),
    ("glVertexArrayAttribLFormat", GlRetracer::retrace_glVertexArrayAttribLFormat),
    ("glVertexArrayBindingDivisor", GlRetracer::retrace_glVertexArrayBindingDivisor),
    ("glGetVertexArrayiv", GlRetracer::ignore),
    ("glGetVertexArrayIndexediv", GlRetracer::ignore),
    ("glGetVertexArrayIndexed64iv", GlRetracer::ignore),
    ("glCreateSamplers", GlRetracer::retrace_glCreateSamplers),
    ("glCreateProgramPipelines", GlRetracer::retrace_glCreateProgramPipelines),
    ("glCreateQueries", GlRetracer::retrace_glCreateQueries),
    ("glGetQueryBufferObjecti64v", GlRetracer::retrace_glGetQueryBufferObjecti64v),
    ("glGetQueryBufferObjectiv", GlRetracer::retrace_glGetQueryBufferObjectiv),
    ("glGetQueryBufferObjectui64v", GlRetracer::retrace_glGetQueryBufferObjectui64v),
    ("glGetQueryBufferObjectuiv", GlRetracer::retrace_glGetQueryBufferObjectuiv),
    ("glDrawBuffersARB", GlRetracer::retrace_glDrawBuffersARB),
    ("glBlendEquationiARB", GlRetracer::retrace_glBlendEquationiARB),
    ("glBlendEquationSeparateiARB", GlRetracer::retrace_glBlendEquationSeparateiARB),
    ("glBlendFunciARB", GlRetracer::retrace_glBlendFunciARB),
    ("glBlendFuncSeparateiARB", GlRetracer::retrace_glBlendFuncSeparateiARB),
    ("glDrawElementsBaseVertex", GlRetracer::retrace_glDrawElementsBaseVertex),
    ("glDrawRangeElementsBaseVertex", GlRetracer::retrace_glDrawRangeElementsBaseVertex),
    ("glDrawElementsInstancedBaseVertex", GlRetracer::retrace_glDrawElementsInstancedBaseVertex),
    ("glMultiDrawElementsBaseVertex", GlRetracer::retrace_glMultiDrawElementsBaseVertex),
    ("glDrawArraysIndirect", GlRetracer::retrace_glDrawArraysIndirect),
    ("glDrawElementsIndirect", GlRetracer::retrace_glDrawElementsIndirect),
    ("glDrawArraysInstancedARB", GlRetracer::retrace_glDrawArraysInstancedARB),
    ("glDrawElementsInstancedARB", GlRetracer::retrace_glDrawElementsInstancedARB),
    ("glFramebufferParameteri", GlRetracer::retrace_glFramebufferParameteri),
    ("glGetFramebufferParameteriv", GlRetracer::ignore),
    ("glIsRenderbuffer", GlRetracer::ignore),
    ("glBindRenderbuffer", GlRetracer::retrace_glBindRenderbuffer),
    ("glDeleteRenderbuffers", GlRetracer::retrace_glDeleteRenderbuffers),
    ("glGenRenderbuffers", GlRetracer::retrace_glGenRenderbuffers),
    ("glRenderbufferStorage", GlRetracer::retrace_glRenderbufferStorage),
    ("glGetRenderbufferParameteriv", GlRetracer::ignore),
    ("glIsFramebuffer", GlRetracer::ignore),
    ("glBindFramebuffer", GlRetracer::retrace_glBindFramebuffer),
    ("glDeleteFramebuffers", GlRetracer::retrace_glDeleteFramebuffers),
    ("glGenFramebuffers", GlRetracer::retrace_glGenFramebuffers),
    ("glCheckFramebufferStatus", GlRetracer::retrace_glCheckFramebufferStatus),
    ("glFramebufferTexture1D", GlRetracer::retrace_glFramebufferTexture1D),
    ("glFramebufferTexture2D", GlRetracer::retrace_glFramebufferTexture2D),
    ("glFramebufferTexture3D", GlRetracer::retrace_glFramebufferTexture3D),
    ("glFramebufferRenderbuffer", GlRetracer::retrace_glFramebufferRenderbuffer),
    ("glGetFramebufferAttachmentParameteriv", GlRetracer::ignore),
    ("glGenerateMipmap", GlRetracer::retrace_glGenerateMipmap),
    ("glBlitFramebuffer", GlRetracer::retrace_glBlitFramebuffer),
    ("glRenderbufferStorageMultisample", GlRetracer::retrace_glRenderbufferStorageMultisample),
    ("glFramebufferTextureLayer", GlRetracer::retrace_glFramebufferTextureLayer),
    ("glProgramParameteriARB", GlRetracer::retrace_glProgramParameteriARB),
    ("glFramebufferTextureARB", GlRetracer::retrace_glFramebufferTextureARB),
    ("glFramebufferTextureLayerARB", GlRetracer::retrace_glFramebufferTextureLayerARB),
    ("glFramebufferTextureFaceARB", GlRetracer::retrace_glFramebufferTextureFaceARB),
    ("glGetProgramBinary", GlRetracer::ignore),
    ("glProgramBinary", GlRetracer::retrace_glProgramBinary),
    ("glProgramParameteri", GlRetracer::retrace_glProgramParameteri),
    ("glGetTextureSubImage", GlRetracer::retrace_glGetTextureSubImage),
    ("glGetCompressedTextureSubImage", GlRetracer::retrace_glGetCompressedTextureSubImage),
    ("glSpecializeShaderARB", GlRetracer::retrace_glSpecializeShaderARB),
    ("glUniform1d", GlRetracer::retrace_glUniform1d),
    ("glUniform2d", GlRetracer::retrace_glUniform2d),
    ("glUniform3d", GlRetracer::retrace_glUniform3d),
    ("glUniform4d", GlRetracer::retrace_glUniform4d),
    ("glUniform1dv", GlRetracer::retrace_glUniform1dv),
    ("glUniform2dv", GlRetracer::retrace_glUniform2dv),
    ("glUniform3dv", GlRetracer::retrace_glUniform3dv),
    ("glUniform4dv", GlRetracer::retrace_glUniform4dv),
    ("glUniformMatrix2dv", GlRetracer::retrace_glUniformMatrix2dv),
    ("glUniformMatrix3dv", GlRetracer::retrace_glUniformMatrix3dv),
    ("glUniformMatrix4dv", GlRetracer::retrace_glUniformMatrix4dv),
    ("glUniformMatrix2x3dv", GlRetracer::retrace_glUniformMatrix2x3dv),
    ("glUniformMatrix2x4dv", GlRetracer::retrace_glUniformMatrix2x4dv),
    ("glUniformMatrix3x2dv", GlRetracer::retrace_glUniformMatrix3x2dv),
    ("glUniformMatrix3x4dv", GlRetracer::retrace_glUniformMatrix3x4dv),
    ("glUniformMatrix4x2dv", GlRetracer::retrace_glUniformMatrix4x2dv),
    ("glUniformMatrix4x3dv", GlRetracer::retrace_glUniformMatrix4x3dv),
    ("glGetUniformdv", GlRetracer::ignore),
    ("glUniform1i64ARB", GlRetracer::retrace_glUniform1i64ARB),
    ("glUniform2i64ARB", GlRetracer::retrace_glUniform2i64ARB),
    ("glUniform3i64ARB", GlRetracer::retrace_glUniform3i64ARB),
    ("glUniform4i64ARB", GlRetracer::retrace_glUniform4i64ARB),
    ("glUniform1i64vARB", GlRetracer::retrace_glUniform1i64vARB),
    ("glUniform2i64vARB", GlRetracer::retrace_glUniform2i64vARB),
    ("glUniform3i64vARB", GlRetracer::retrace_glUniform3i64vARB),
    ("glUniform4i64vARB", GlRetracer::retrace_glUniform4i64vARB),
    ("glUniform1ui64ARB", GlRetracer::retrace_glUniform1ui64ARB),
    ("glUniform2ui64ARB", GlRetracer::retrace_glUniform2ui64ARB),
    ("glUniform3ui64ARB", GlRetracer::retrace_glUniform3ui64ARB),
    ("glUniform4ui64ARB", GlRetracer::retrace_glUniform4ui64ARB),
    ("glUniform1ui64vARB", GlRetracer::retrace_glUniform1ui64vARB),
    ("glUniform2ui64vARB", GlRetracer::retrace_glUniform2ui64vARB),
    ("glUniform3ui64vARB", GlRetracer::retrace_glUniform3ui64vARB),
    ("glUniform4ui64vARB", GlRetracer::retrace_glUniform4ui64vARB),
    ("glGetUniformi64vARB", GlRetracer::ignore),
    ("glGetUniformui64vARB", GlRetracer::ignore),
    ("glGetnUniformi64vARB", GlRetracer::ignore),
    ("glGetnUniformui64vARB", GlRetracer::ignore),
    ("glProgramUniform1i64ARB", GlRetracer::retrace_glProgramUniform1i64ARB),
    ("glProgramUniform2i64ARB", GlRetracer::retrace_glProgramUniform2i64ARB),
    ("glProgramUniform3i64ARB", GlRetracer::retrace_glProgramUniform3i64ARB),
    ("glProgramUniform4i64ARB", GlRetracer::retrace_glProgramUniform4i64ARB),
    ("glProgramUniform1i64vARB", GlRetracer::retrace_glProgramUniform1i64vARB),
    ("glProgramUniform2i64vARB", GlRetracer::retrace_glProgramUniform2i64vARB),
    ("glProgramUniform3i64vARB", GlRetracer::retrace_glProgramUniform3i64vARB),
    ("glProgramUniform4i64vARB", GlRetracer::retrace_glProgramUniform4i64vARB),
    ("glProgramUniform1ui64ARB", GlRetracer::retrace_glProgramUniform1ui64ARB),
    ("glProgramUniform2ui64ARB", GlRetracer::retrace_glProgramUniform2ui64ARB),
    ("glProgramUniform3ui64ARB", GlRetracer::retrace_glProgramUniform3ui64ARB),
    ("glProgramUniform4ui64ARB", GlRetracer::retrace_glProgramUniform4ui64ARB),
    ("glProgramUniform1ui64vARB", GlRetracer::retrace_glProgramUniform1ui64vARB),
    ("glProgramUniform2ui64vARB", GlRetracer::retrace_glProgramUniform2ui64vARB),
    ("glProgramUniform3ui64vARB", GlRetracer::retrace_glProgramUniform3ui64vARB),
    ("glProgramUniform4ui64vARB", GlRetracer::retrace_glProgramUniform4ui64vARB),
    ("glMultiDrawArraysIndirectCountARB", GlRetracer::retrace_glMultiDrawArraysIndirectCountARB),
    ("glMultiDrawElementsIndirectCountARB", GlRetracer::retrace_glMultiDrawElementsIndirectCountARB),
    ("glVertexAttribDivisorARB", GlRetracer::retrace_glVertexAttribDivisorARB),
    ("glGetInternalformativ", GlRetracer::ignore),
    ("glGetInternalformati64v", GlRetracer::ignore),
    ("glInvalidateTexSubImage", GlRetracer::retrace_glInvalidateTexSubImage),
    ("glInvalidateTexImage", GlRetracer::retrace_glInvalidateTexImage),
    ("glInvalidateBufferSubData", GlRetracer::retrace_glInvalidateBufferSubData),
    ("glInvalidateBufferData", GlRetracer::retrace_glInvalidateBufferData),
    ("glInvalidateFramebuffer", GlRetracer::retrace_glInvalidateFramebuffer),
    ("glInvalidateSubFramebuffer", GlRetracer::retrace_glInvalidateSubFramebuffer),
    ("glMapBufferRange", GlRetracer::retrace_glMapBufferRange),
    ("glFlushMappedBufferRange", GlRetracer::retrace_glFlushMappedBufferRange),
    ("glCurrentPaletteMatrixARB", GlRetracer::retrace_glCurrentPaletteMatrixARB),
    ("glMatrixIndexubvARB", GlRetracer::retrace_glMatrixIndexubvARB),
    ("glMatrixIndexusvARB", GlRetracer::retrace_glMatrixIndexusvARB),
    ("glMatrixIndexuivARB", GlRetracer::retrace_glMatrixIndexuivARB),
    ("glMatrixIndexPointerARB", GlRetracer::retrace_glMatrixIndexPointerARB),
    ("glBindBuffersBase", GlRetracer::retrace_glBindBuffersBase),
    ("glBindBuffersRange", GlRetracer::retrace_glBindBuffersRange),
    ("glBindTextures", GlRetracer::retrace_glBindTextures),
    ("glBindSamplers", GlRetracer::retrace_glBindSamplers),
    ("glBindImageTextures", GlRetracer::retrace_glBindImageTextures),
    ("glBindVertexBuffers", GlRetracer::retrace_glBindVertexBuffers),
    ("glMultiDrawArraysIndirect", GlRetracer::retrace_glMultiDrawArraysIndirect),
    ("glMultiDrawElementsIndirect", GlRetracer::retrace_glMultiDrawElementsIndirect),
    ("glSampleCoverageARB", GlRetracer::retrace_glSampleCoverageARB),
    ("glActiveTextureARB", GlRetracer::retrace_glActiveTextureARB),
    ("glClientActiveTextureARB", GlRetracer::retrace_glClientActiveTextureARB),
    ("glMultiTexCoord1dARB", GlRetracer::retrace_glMultiTexCoord1dARB),
    ("glMultiTexCoord1dvARB", GlRetracer::retrace_glMultiTexCoord1dvARB),
    ("glMultiTexCoord1fARB", GlRetracer::retrace_glMultiTexCoord1fARB),
    ("glMultiTexCoord1fvARB", GlRetracer::retrace_glMultiTexCoord1fvARB),
    ("glMultiTexCoord1iARB", GlRetracer::retrace_glMultiTexCoord1iARB),
    ("glMultiTexCoord1ivARB", GlRetracer::retrace_glMultiTexCoord1ivARB),
    ("glMultiTexCoord1sARB", GlRetracer::retrace_glMultiTexCoord1sARB),
    ("glMultiTexCoord1svARB", GlRetracer::retrace_glMultiTexCoord1svARB),
    ("glMultiTexCoord2dARB", GlRetracer::retrace_glMultiTexCoord2dARB),
    ("glMultiTexCoord2dvARB", GlRetracer::retrace_glMultiTexCoord2dvARB),
    ("glMultiTexCoord2fARB", GlRetracer::retrace_glMultiTexCoord2fARB),
    ("glMultiTexCoord2fvARB", GlRetracer::retrace_glMultiTexCoord2fvARB),
    ("glMultiTexCoord2iARB", GlRetracer::retrace_glMultiTexCoord2iARB),
    ("glMultiTexCoord2ivARB", GlRetracer::retrace_glMultiTexCoord2ivARB),
    ("glMultiTexCoord2sARB", GlRetracer::retrace_glMultiTexCoord2sARB),
    ("glMultiTexCoord2svARB", GlRetracer::retrace_glMultiTexCoord2svARB),
    ("glMultiTexCoord3dARB", GlRetracer::retrace_glMultiTexCoord3dARB),
    ("glMultiTexCoord3dvARB", GlRetracer::retrace_glMultiTexCoord3dvARB),
    ("glMultiTexCoord3fARB", GlRetracer::retrace_glMultiTexCoord3fARB),
    ("glMultiTexCoord3fvARB", GlRetracer::retrace_glMultiTexCoord3fvARB),
    ("glMultiTexCoord3iARB", GlRetracer::retrace_glMultiTexCoord3iARB),
    ("glMultiTexCoord3ivARB", GlRetracer::retrace_glMultiTexCoord3ivARB),
    ("glMultiTexCoord3sARB", GlRetracer::retrace_glMultiTexCoord3sARB),
    ("glMultiTexCoord3svARB", GlRetracer::retrace_glMultiTexCoord3svARB),
    ("glMultiTexCoord4dARB", GlRetracer::retrace_glMultiTexCoord4dARB),
    ("glMultiTexCoord4dvARB", GlRetracer::retrace_glMultiTexCoord4dvARB),
    ("glMultiTexCoord4fARB", GlRetracer::retrace_glMultiTexCoord4fARB),
    ("glMultiTexCoord4fvARB", GlRetracer::retrace_glMultiTexCoord4fvARB),
    ("glMultiTexCoord4iARB", GlRetracer::retrace_glMultiTexCoord4iARB),
    ("glMultiTexCoord4ivARB", GlRetracer::retrace_glMultiTexCoord4ivARB),
    ("glMultiTexCoord4sARB", GlRetracer::retrace_glMultiTexCoord4sARB),
    ("glMultiTexCoord4svARB", GlRetracer::retrace_glMultiTexCoord4svARB),
    ("glGenQueriesARB", GlRetracer::retrace_glGenQueriesARB),
    ("glDeleteQueriesARB", GlRetracer::retrace_glDeleteQueriesARB),
    ("glIsQueryARB", GlRetracer::ignore),
    ("glBeginQueryARB", GlRetracer::retrace_glBeginQueryARB),
    ("glEndQueryARB", GlRetracer::retrace_glEndQueryARB),
    ("glGetQueryivARB", GlRetracer::ignore),
    ("glGetQueryObjectivARB", GlRetracer::retrace_glGetQueryObjectivARB),
    ("glGetQueryObjectuivARB", GlRetracer::retrace_glGetQueryObjectuivARB),
    ("glMaxShaderCompilerThreadsARB", GlRetracer::retrace_glMaxShaderCompilerThreadsARB),
    ("glPointParameterfARB", GlRetracer::retrace_glPointParameterfARB),
    ("glPointParameterfvARB", GlRetracer::retrace_glPointParameterfvARB),
    ("glGetProgramInterfaceiv", GlRetracer::ignore),
    ("glGetProgramResourceIndex", GlRetracer::ignore),
    ("glGetProgramResourceName", GlRetracer::retrace_glGetProgramResourceName),
    ("glGetProgramResourceiv", GlRetracer::retrace_glGetProgramResourceiv),
    ("glGetProgramResourceLocation", GlRetracer::retrace_glGetProgramResourceLocation),
    ("glGetProgramResourceLocationIndex", GlRetracer::ignore),
    ("glProvokingVertex", GlRetracer::retrace_glProvokingVertex),
    ("glGetGraphicsResetStatusARB", GlRetracer::ignore),
    ("glGetnMapdvARB", GlRetracer::ignore),
    ("glGetnMapfvARB", GlRetracer::ignore),
    ("glGetnMapivARB", GlRetracer::ignore),
    ("glGetnPixelMapfvARB", GlRetracer::retrace_glGetnPixelMapfvARB),
    ("glGetnPixelMapuivARB", GlRetracer::retrace_glGetnPixelMapuivARB),
    ("glGetnPixelMapusvARB", GlRetracer::retrace_glGetnPixelMapusvARB),
    ("glGetnPolygonStippleARB", GlRetracer::retrace_glGetnPolygonStippleARB),
    ("glGetnColorTableARB", GlRetracer::ignore),
    ("glGetnConvolutionFilterARB", GlRetracer::retrace_glGetnConvolutionFilterARB),
    ("glGetnSeparableFilterARB", GlRetracer::retrace_glGetnSeparableFilterARB),
    ("glGetnHistogramARB", GlRetracer::retrace_glGetnHistogramARB),
    ("glGetnMinmaxARB", GlRetracer::retrace_glGetnMinmaxARB),
    ("glGetnTexImageARB", GlRetracer::retrace_glGetnTexImageARB),
    ("glReadnPixelsARB", GlRetracer::retrace_glReadnPixelsARB),
    ("glGetnCompressedTexImageARB", GlRetracer::retrace_glGetnCompressedTexImageARB),
    ("glGetnUniformfvARB", GlRetracer::ignore),
    ("glGetnUniformivARB", GlRetracer::ignore),
    ("glGetnUniformuivARB", GlRetracer::ignore),
    ("glGetnUniformdvARB", GlRetracer::ignore),
    ("glFramebufferSampleLocationsfvARB", GlRetracer::retrace_glFramebufferSampleLocationsfvARB),
    ("glNamedFramebufferSampleLocationsfvARB", GlRetracer::retrace_glNamedFramebufferSampleLocationsfvARB),
    ("glEvaluateDepthValuesARB", GlRetracer::retrace_glEvaluateDepthValuesARB),
    ("glMinSampleShadingARB", GlRetracer::retrace_glMinSampleShadingARB),
    ("glGenSamplers", GlRetracer::retrace_glGenSamplers),
    ("glDeleteSamplers", GlRetracer::retrace_glDeleteSamplers),
    ("glIsSampler", GlRetracer::ignore),
    ("glBindSampler", GlRetracer::retrace_glBindSampler),
    ("glSamplerParameteri", GlRetracer::retrace_glSamplerParameteri),
    ("glSamplerParameteriv", GlRetracer::retrace_glSamplerParameteriv),
    ("glSamplerParameterf", GlRetracer::retrace_glSamplerParameterf),
    ("glSamplerParameterfv", GlRetracer::retrace_glSamplerParameterfv),
    ("glSamplerParameterIiv", GlRetracer::retrace_glSamplerParameterIiv),
    ("glSamplerParameterIuiv", GlRetracer::retrace_glSamplerParameterIuiv),
    ("glGetSamplerParameteriv", GlRetracer::ignore),
    ("glGetSamplerParameterIiv", GlRetracer::ignore),
    ("glGetSamplerParameterfv", GlRetracer::ignore),
    ("glGetSamplerParameterIuiv", GlRetracer::ignore),
    ("glUseProgramStages", GlRetracer::retrace_glUseProgramStages),
    ("glActiveShaderProgram", GlRetracer::retrace_glActiveShaderProgram),
    ("glCreateShaderProgramv", GlRetracer::retrace_glCreateShaderProgramv),
    ("glBindProgramPipeline", GlRetracer::retrace_glBindProgramPipeline),
    ("glDeleteProgramPipelines", GlRetracer::retrace_glDeleteProgramPipelines),
    ("glGenProgramPipelines", GlRetracer::retrace_glGenProgramPipelines),
    ("glIsProgramPipeline", GlRetracer::ignore),
    ("glGetProgramPipelineiv", GlRetracer::ignore),
    ("glProgramUniform1i", GlRetracer::retrace_glProgramUniform1i),
    ("glProgramUniform1iv", GlRetracer::retrace_glProgramUniform1iv),
    ("glProgramUniform1f", GlRetracer::retrace_glProgramUniform1f),
    ("glProgramUniform1fv", GlRetracer::retrace_glProgramUniform1fv),
    ("glProgramUniform1d", GlRetracer::retrace_glProgramUniform1d),
    ("glProgramUniform1dv", GlRetracer::retrace_glProgramUniform1dv),
    ("glProgramUniform1ui", GlRetracer::retrace_glProgramUniform1ui),
    ("glProgramUniform1uiv", GlRetracer::retrace_glProgramUniform1uiv),
    ("glProgramUniform2i", GlRetracer::retrace_glProgramUniform2i),
    ("glProgramUniform2iv", GlRetracer::retrace_glProgramUniform2iv),
    ("glProgramUniform2f", GlRetracer::retrace_glProgramUniform2f),
    ("glProgramUniform2fv", GlRetracer::retrace_glProgramUniform2fv),
    ("glProgramUniform2d", GlRetracer::retrace_glProgramUniform2d),
    ("glProgramUniform2dv", GlRetracer::retrace_glProgramUniform2dv),
    ("glProgramUniform2ui", GlRetracer::retrace_glProgramUniform2ui),
    ("glProgramUniform2uiv", GlRetracer::retrace_glProgramUniform2uiv),
    ("glProgramUniform3i", GlRetracer::retrace_glProgramUniform3i),
    ("glProgramUniform3iv", GlRetracer::retrace_glProgramUniform3iv),
    ("glProgramUniform3f", GlRetracer::retrace_glProgramUniform3f),
    ("glProgramUniform3fv", GlRetracer::retrace_glProgramUniform3fv),
    ("glProgramUniform3d", GlRetracer::retrace_glProgramUniform3d),
    ("glProgramUniform3dv", GlRetracer::retrace_glProgramUniform3dv),
    ("glProgramUniform3ui", GlRetracer::retrace_glProgramUniform3ui),
    ("glProgramUniform3uiv", GlRetracer::retrace_glProgramUniform3uiv),
    ("glProgramUniform4i", GlRetracer::retrace_glProgramUniform4i),
    ("glProgramUniform4iv", GlRetracer::retrace_glProgramUniform4iv),
    ("glProgramUniform4f", GlRetracer::retrace_glProgramUniform4f),
    ("glProgramUniform4fv", GlRetracer::retrace_glProgramUniform4fv),
    ("glProgramUniform4d", GlRetracer::retrace_glProgramUniform4d),
    ("glProgramUniform4dv", GlRetracer::retrace_glProgramUniform4dv),
    ("glProgramUniform4ui", GlRetracer::retrace_glProgramUniform4ui),
    ("glProgramUniform4uiv", GlRetracer::retrace_glProgramUniform4uiv),
    ("glProgramUniformMatrix2fv", GlRetracer::retrace_glProgramUniformMatrix2fv),
    ("glProgramUniformMatrix3fv", GlRetracer::retrace_glProgramUniformMatrix3fv),
    ("glProgramUniformMatrix4fv", GlRetracer::retrace_glProgramUniformMatrix4fv),
    ("glProgramUniformMatrix2dv", GlRetracer::retrace_glProgramUniformMatrix2dv),
    ("glProgramUniformMatrix3dv", GlRetracer::retrace_glProgramUniformMatrix3dv),
    ("glProgramUniformMatrix4dv", GlRetracer::retrace_glProgramUniformMatrix4dv),
    ("glProgramUniformMatrix2x3fv", GlRetracer::retrace_glProgramUniformMatrix2x3fv),
    ("glProgramUniformMatrix3x2fv", GlRetracer::retrace_glProgramUniformMatrix3x2fv),
    ("glProgramUniformMatrix2x4fv", GlRetracer::retrace_glProgramUniformMatrix2x4fv),
    ("glProgramUniformMatrix4x2fv", GlRetracer::retrace_glProgramUniformMatrix4x2fv),
    ("glProgramUniformMatrix3x4fv", GlRetracer::retrace_glProgramUniformMatrix3x4fv),
    ("glProgramUniformMatrix4x3fv", GlRetracer::retrace_glProgramUniformMatrix4x3fv),
    ("glProgramUniformMatrix2x3dv", GlRetracer::retrace_glProgramUniformMatrix2x3dv),
    ("glProgramUniformMatrix3x2dv", GlRetracer::retrace_glProgramUniformMatrix3x2dv),
    ("glProgramUniformMatrix2x4dv", GlRetracer::retrace_glProgramUniformMatrix2x4dv),
    ("glProgramUniformMatrix4x2dv", GlRetracer::retrace_glProgramUniformMatrix4x2dv),
    ("glProgramUniformMatrix3x4dv", GlRetracer::retrace_glProgramUniformMatrix3x4dv),
    ("glProgramUniformMatrix4x3dv", GlRetracer::retrace_glProgramUniformMatrix4x3dv),
    ("glValidateProgramPipeline", GlRetracer::retrace_glValidateProgramPipeline),
    ("glGetProgramPipelineInfoLog", GlRetracer::ignore),
    ("glGetActiveAtomicCounterBufferiv", GlRetracer::ignore),
    ("glBindImageTexture", GlRetracer::retrace_glBindImageTexture),
    ("glMemoryBarrier", GlRetracer::retrace_glMemoryBarrier),
    ("glDeleteObjectARB", GlRetracer::retrace_glDeleteObjectARB),
    ("glGetHandleARB", GlRetracer::ignore),
    ("glDetachObjectARB", GlRetracer::retrace_glDetachObjectARB),
    ("glCreateShaderObjectARB", GlRetracer::retrace_glCreateShaderObjectARB),
    ("glShaderSourceARB", GlRetracer::retrace_glShaderSourceARB),
    ("glCompileShaderARB", GlRetracer::retrace_glCompileShaderARB),
    ("glCreateProgramObjectARB", GlRetracer::retrace_glCreateProgramObjectARB),
    ("glAttachObjectARB", GlRetracer::retrace_glAttachObjectARB),
    ("glLinkProgramARB", GlRetracer::retrace_glLinkProgramARB),
    ("glUseProgramObjectARB", GlRetracer::retrace_glUseProgramObjectARB),
    ("glValidateProgramARB", GlRetracer::retrace_glValidateProgramARB),
    ("glUniform1fARB", GlRetracer::retrace_glUniform1fARB),
    ("glUniform2fARB", GlRetracer::retrace_glUniform2fARB),
    ("glUniform3fARB", GlRetracer::retrace_glUniform3fARB),
    ("glUniform4fARB", GlRetracer::retrace_glUniform4fARB),
    ("glUniform1iARB", GlRetracer::retrace_glUniform1iARB),
    ("glUniform2iARB", GlRetracer::retrace_glUniform2iARB),
    ("glUniform3iARB", GlRetracer::retrace_glUniform3iARB),
    ("glUniform4iARB", GlRetracer::retrace_glUniform4iARB),
    ("glUniform1fvARB", GlRetracer::retrace_glUniform1fvARB),
    ("glUniform2fvARB", GlRetracer::retrace_glUniform2fvARB),
    ("glUniform3fvARB", GlRetracer::retrace_glUniform3fvARB),
    ("glUniform4fvARB", GlRetracer::retrace_glUniform4fvARB),
    ("glUniform1ivARB", GlRetracer::retrace_glUniform1ivARB),
    ("glUniform2ivARB", GlRetracer::retrace_glUniform2ivARB),
    ("glUniform3ivARB", GlRetracer::retrace_glUniform3ivARB),
    ("glUniform4ivARB", GlRetracer::retrace_glUniform4ivARB),
    ("glUniformMatrix2fvARB", GlRetracer::retrace_glUniformMatrix2fvARB),
    ("glUniformMatrix3fvARB", GlRetracer::retrace_glUniformMatrix3fvARB),
    ("glUniformMatrix4fvARB", GlRetracer::retrace_glUniformMatrix4fvARB),
    ("glGetObjectParameterfvARB", GlRetracer::ignore),
    ("glGetObjectParameterivARB", GlRetracer::ignore),
    ("glGetInfoLogARB", GlRetracer::ignore),
    ("glGetAttachedObjectsARB", GlRetracer::ignore),
    ("glGetUniformLocationARB", GlRetracer::retrace_glGetUniformLocationARB),
    ("glGetActiveUniformARB", GlRetracer::ignore),
    ("glGetUniformfvARB", GlRetracer::ignore),
    ("glGetUniformivARB", GlRetracer::ignore),
    ("glGetShaderSourceARB", GlRetracer::ignore),
    ("glShaderStorageBlockBinding", GlRetracer::retrace_glShaderStorageBlockBinding),
    ("glGetSubroutineUniformLocation", GlRetracer::retrace_glGetSubroutineUniformLocation),
    ("glGetSubroutineIndex", GlRetracer::retrace_glGetSubroutineIndex),
    ("glGetActiveSubroutineUniformiv", GlRetracer::ignore),
    ("glGetActiveSubroutineUniformName", GlRetracer::ignore),
    ("glGetActiveSubroutineName", GlRetracer::ignore),
    ("glUniformSubroutinesuiv", GlRetracer::retrace_glUniformSubroutinesuiv),
    ("glGetUniformSubroutineuiv", GlRetracer::ignore),
    ("glGetProgramStageiv", GlRetracer::ignore),
    ("glNamedStringARB", GlRetracer::retrace_glNamedStringARB),
    ("glDeleteNamedStringARB", GlRetracer::retrace_glDeleteNamedStringARB),
    ("glCompileShaderIncludeARB", GlRetracer::retrace_glCompileShaderIncludeARB),
    ("glIsNamedStringARB", GlRetracer::ignore),
    ("glGetNamedStringARB", GlRetracer::ignore),
    ("glGetNamedStringivARB", GlRetracer::ignore),
    ("glBufferPageCommitmentARB", GlRetracer::retrace_glBufferPageCommitmentARB),
    ("glNamedBufferPageCommitmentEXT", GlRetracer::retrace_glNamedBufferPageCommitmentEXT),
    ("glNamedBufferPageCommitmentARB", GlRetracer::retrace_glNamedBufferPageCommitmentARB),
    ("glTexPageCommitmentARB", GlRetracer::retrace_glTexPageCommitmentARB),
    ("glFenceSync", GlRetracer::retrace_glFenceSync),
    ("glIsSync", GlRetracer::ignore),
    ("glDeleteSync", GlRetracer::retrace_glDeleteSync),
    ("glClientWaitSync", GlRetracer::retrace_glClientWaitSync),
    ("glWaitSync", GlRetracer::retrace_glWaitSync),
    ("glGetInteger64v", GlRetracer::ignore),
    ("glGetSynciv", GlRetracer::retrace_glGetSynciv),
    ("glPatchParameteri", GlRetracer::retrace_glPatchParameteri),
    ("glPatchParameterfv", GlRetracer::retrace_glPatchParameterfv),
    ("glTextureBarrier", GlRetracer::retrace_glTextureBarrier),
    ("glTexBufferARB", GlRetracer::retrace_glTexBufferARB),
    ("glTexBufferRange", GlRetracer::retrace_glTexBufferRange),
    ("glCompressedTexImage3DARB", GlRetracer::retrace_glCompressedTexImage3DARB),
    ("glCompressedTexImage2DARB", GlRetracer::retrace_glCompressedTexImage2DARB),
    ("glCompressedTexImage1DARB", GlRetracer::retrace_glCompressedTexImage1DARB),
    ("glCompressedTexSubImage3DARB", GlRetracer::retrace_glCompressedTexSubImage3DARB),
    ("glCompressedTexSubImage2DARB", GlRetracer::retrace_glCompressedTexSubImage2DARB),
    ("glCompressedTexSubImage1DARB", GlRetracer::retrace_glCompressedTexSubImage1DARB),
    ("glGetCompressedTexImageARB", GlRetracer::retrace_glGetCompressedTexImageARB),
    ("glTexImage2DMultisample", GlRetracer::retrace_glTexImage2DMultisample),
    ("glTexImage3DMultisample", GlRetracer::retrace_glTexImage3DMultisample),
    ("glGetMultisamplefv", GlRetracer::ignore),
    ("glSampleMaski", GlRetracer::retrace_glSampleMaski),
    ("glTexStorage1D", GlRetracer::retrace_glTexStorage1D),
    ("glTexStorage2D", GlRetracer::retrace_glTexStorage2D),
    ("glTexStorage3D", GlRetracer::retrace_glTexStorage3D),
    ("glTexStorageAttribs2DEXT", GlRetracer::retrace_glTexStorageAttribs2DEXT),
    ("glTexStorageAttribs3DEXT", GlRetracer::retrace_glTexStorageAttribs3DEXT),
    ("glTexStorage2DMultisample", GlRetracer::retrace_glTexStorage2DMultisample),
    ("glTexStorage3DMultisample", GlRetracer::retrace_glTexStorage3DMultisample),
    ("glEGLImageTargetTexStorageEXT", GlRetracer::retrace_glEGLImageTargetTexStorageEXT),
    ("glEGLImageTargetTextureStorageEXT", GlRetracer::retrace_glEGLImageTargetTextureStorageEXT),
    ("glTextureView", GlRetracer::retrace_glTextureView),
    ("glQueryCounter", GlRetracer::retrace_glQueryCounter),
    ("glGetQueryObjecti64v", GlRetracer::retrace_glGetQueryObjecti64v),
    ("glGetQueryObjectui64v", GlRetracer::retrace_glGetQueryObjectui64v),
    ("glBindTransformFeedback", GlRetracer::retrace_glBindTransformFeedback),
    ("glDeleteTransformFeedbacks", GlRetracer::retrace_glDeleteTransformFeedbacks),
    ("glGenTransformFeedbacks", GlRetracer::retrace_glGenTransformFeedbacks),
    ("glIsTransformFeedback", GlRetracer::ignore),
    ("glPauseTransformFeedback", GlRetracer::retrace_glPauseTransformFeedback),
    ("glResumeTransformFeedback", GlRetracer::retrace_glResumeTransformFeedback),
    ("glDrawTransformFeedback", GlRetracer::retrace_glDrawTransformFeedback),
    ("glDrawTransformFeedbackStream", GlRetracer::retrace_glDrawTransformFeedbackStream),
    ("glBeginQueryIndexed", GlRetracer::retrace_glBeginQueryIndexed),
    ("glEndQueryIndexed", GlRetracer::retrace_glEndQueryIndexed),
    ("glGetQueryIndexediv", GlRetracer::ignore),
    ("glDrawTransformFeedbackInstanced", GlRetracer::retrace_glDrawTransformFeedbackInstanced),
    ("glDrawTransformFeedbackStreamInstanced", GlRetracer::retrace_glDrawTransformFeedbackStreamInstanced),
    ("glLoadTransposeMatrixfARB", GlRetracer::retrace_glLoadTransposeMatrixfARB),
    ("glLoadTransposeMatrixdARB", GlRetracer::retrace_glLoadTransposeMatrixdARB),
    ("glMultTransposeMatrixfARB", GlRetracer::retrace_glMultTransposeMatrixfARB),
    ("glMultTransposeMatrixdARB", GlRetracer::retrace_glMultTransposeMatrixdARB),
    ("glGetUniformIndices", GlRetracer::ignore),
    ("glGetActiveUniformsiv", GlRetracer::ignore),
    ("glGetActiveUniformName", GlRetracer::ignore),
    ("glGetUniformBlockIndex", GlRetracer::retrace_glGetUniformBlockIndex),
    ("glGetActiveUniformBlockiv", GlRetracer::ignore),
    ("glGetActiveUniformBlockName", GlRetracer::retrace_glGetActiveUniformBlockName),
    ("glUniformBlockBinding", GlRetracer::retrace_glUniformBlockBinding),
    ("glBindVertexArray", GlRetracer::retrace_glBindVertexArray),
    ("glDeleteVertexArrays", GlRetracer::retrace_glDeleteVertexArrays),
    ("glGenVertexArrays", GlRetracer::retrace_glGenVertexArrays),
    ("glIsVertexArray", GlRetracer::ignore),
    ("glVertexAttribL1d", GlRetracer::retrace_glVertexAttribL1d),
    ("glVertexAttribL2d", GlRetracer::retrace_glVertexAttribL2d),
    ("glVertexAttribL3d", GlRetracer::retrace_glVertexAttribL3d),
    ("glVertexAttribL4d", GlRetracer::retrace_glVertexAttribL4d),
    ("glVertexAttribL1dv", GlRetracer::retrace_glVertexAttribL1dv),
    ("glVertexAttribL2dv", GlRetracer::retrace_glVertexAttribL2dv),
    ("glVertexAttribL3dv", GlRetracer::retrace_glVertexAttribL3dv),
    ("glVertexAttribL4dv", GlRetracer::retrace_glVertexAttribL4dv),
    ("glVertexAttribLPointer", GlRetracer::retrace_glVertexAttribLPointer),
    ("glGetVertexAttribLdv", GlRetracer::ignore),
    ("glBindVertexBuffer", GlRetracer::retrace_glBindVertexBuffer),
    ("glVertexAttribFormat", GlRetracer::retrace_glVertexAttribFormat),
    ("glVertexAttribIFormat", GlRetracer::retrace_glVertexAttribIFormat),
    ("glVertexAttribLFormat", GlRetracer::retrace_glVertexAttribLFormat),
    ("glVertexAttribBinding", GlRetracer::retrace_glVertexAttribBinding),
    ("glVertexBindingDivisor", GlRetracer::retrace_glVertexBindingDivisor),
    ("glWeightbvARB", GlRetracer::retrace_glWeightbvARB),
    ("glWeightsvARB", GlRetracer::retrace_glWeightsvARB),
    ("glWeightivARB", GlRetracer::retrace_glWeightivARB),
    ("glWeightfvARB", GlRetracer::retrace_glWeightfvARB),
    ("glWeightdvARB", GlRetracer::retrace_glWeightdvARB),
    ("glWeightubvARB", GlRetracer::retrace_glWeightubvARB),
    ("glWeightusvARB", GlRetracer::retrace_glWeightusvARB),
    ("glWeightuivARB", GlRetracer::retrace_glWeightuivARB),
    ("glWeightPointerARB", GlRetracer::retrace_glWeightPointerARB),
    ("glVertexBlendARB", GlRetracer::retrace_glVertexBlendARB),
    ("glBindBufferARB", GlRetracer::retrace_glBindBufferARB),
    ("glDeleteBuffersARB", GlRetracer::retrace_glDeleteBuffersARB),
    ("glGenBuffersARB", GlRetracer::retrace_glGenBuffersARB),
    ("glIsBufferARB", GlRetracer::ignore),
    ("glBufferDataARB", GlRetracer::retrace_glBufferDataARB),
    ("glBufferSubDataARB", GlRetracer::retrace_glBufferSubDataARB),
    ("glGetBufferSubDataARB", GlRetracer::ignore),
    ("glMapBufferARB", GlRetracer::retrace_glMapBufferARB),
    ("glUnmapBufferARB", GlRetracer::retrace_glUnmapBufferARB),
    ("glGetBufferParameterivARB", GlRetracer::ignore),
    ("glGetBufferPointervARB", GlRetracer::ignore),
    ("glVertexAttrib1dARB", GlRetracer::retrace_glVertexAttrib1dARB),
    ("glVertexAttrib1dvARB", GlRetracer::retrace_glVertexAttrib1dvARB),
    ("glVertexAttrib1fARB", GlRetracer::retrace_glVertexAttrib1fARB),
    ("glVertexAttrib1fvARB", GlRetracer::retrace_glVertexAttrib1fvARB),
    ("glVertexAttrib1sARB", GlRetracer::retrace_glVertexAttrib1sARB),
    ("glVertexAttrib1svARB", GlRetracer::retrace_glVertexAttrib1svARB),
    ("glVertexAttrib2dARB", GlRetracer::retrace_glVertexAttrib2dARB),
    ("glVertexAttrib2dvARB", GlRetracer::retrace_glVertexAttrib2dvARB),
    ("glVertexAttrib2fARB", GlRetracer::retrace_glVertexAttrib2fARB),
    ("glVertexAttrib2fvARB", GlRetracer::retrace_glVertexAttrib2fvARB),
    ("glVertexAttrib2sARB", GlRetracer::retrace_glVertexAttrib2sARB),
    ("glVertexAttrib2svARB", GlRetracer::retrace_glVertexAttrib2svARB),
    ("glVertexAttrib3dARB", GlRetracer::retrace_glVertexAttrib3dARB),
    ("glVertexAttrib3dvARB", GlRetracer::retrace_glVertexAttrib3dvARB),
    ("glVertexAttrib3fARB", GlRetracer::retrace_glVertexAttrib3fARB),
    ("glVertexAttrib3fvARB", GlRetracer::retrace_glVertexAttrib3fvARB),
    ("glVertexAttrib3sARB", GlRetracer::retrace_glVertexAttrib3sARB),
    ("glVertexAttrib3svARB", GlRetracer::retrace_glVertexAttrib3svARB),
    ("glVertexAttrib4NbvARB", GlRetracer::retrace_glVertexAttrib4NbvARB),
    ("glVertexAttrib4NivARB", GlRetracer::retrace_glVertexAttrib4NivARB),
    ("glVertexAttrib4NsvARB", GlRetracer::retrace_glVertexAttrib4NsvARB),
    ("glVertexAttrib4NubARB", GlRetracer::retrace_glVertexAttrib4NubARB),
    ("glVertexAttrib4NubvARB", GlRetracer::retrace_glVertexAttrib4NubvARB),
    ("glVertexAttrib4NuivARB", GlRetracer::retrace_glVertexAttrib4NuivARB),
    ("glVertexAttrib4NusvARB", GlRetracer::retrace_glVertexAttrib4NusvARB),
    ("glVertexAttrib4bvARB", GlRetracer::retrace_glVertexAttrib4bvARB),
    ("glVertexAttrib4dARB", GlRetracer::retrace_glVertexAttrib4dARB),
    ("glVertexAttrib4dvARB", GlRetracer::retrace_glVertexAttrib4dvARB),
    ("glVertexAttrib4fARB", GlRetracer::retrace_glVertexAttrib4fARB),
    ("glVertexAttrib4fvARB", GlRetracer::retrace_glVertexAttrib4fvARB),
    ("glVertexAttrib4ivARB", GlRetracer::retrace_glVertexAttrib4ivARB),
    ("glVertexAttrib4sARB", GlRetracer::retrace_glVertexAttrib4sARB),
    ("glVertexAttrib4svARB", GlRetracer::retrace_glVertexAttrib4svARB),
    ("glVertexAttrib4ubvARB", GlRetracer::retrace_glVertexAttrib4ubvARB),
    ("glVertexAttrib4uivARB", GlRetracer::retrace_glVertexAttrib4uivARB),
    ("glVertexAttrib4usvARB", GlRetracer::retrace_glVertexAttrib4usvARB),
    ("glVertexAttribPointerARB", GlRetracer::retrace_glVertexAttribPointerARB),
    ("glEnableVertexAttribArrayARB", GlRetracer::retrace_glEnableVertexAttribArrayARB),
    ("glDisableVertexAttribArrayARB", GlRetracer::retrace_glDisableVertexAttribArrayARB),
    ("glProgramStringARB", GlRetracer::retrace_glProgramStringARB),
    ("glBindProgramARB", GlRetracer::retrace_glBindProgramARB),
    ("glDeleteProgramsARB", GlRetracer::retrace_glDeleteProgramsARB),
    ("glGenProgramsARB", GlRetracer::retrace_glGenProgramsARB),
    ("glProgramEnvParameter4dARB", GlRetracer::retrace_glProgramEnvParameter4dARB),
    ("glProgramEnvParameter4dvARB", GlRetracer::retrace_glProgramEnvParameter4dvARB),
    ("glProgramEnvParameter4fARB", GlRetracer::retrace_glProgramEnvParameter4fARB),
    ("glProgramEnvParameter4fvARB", GlRetracer::retrace_glProgramEnvParameter4fvARB),
    ("glProgramLocalParameter4dARB", GlRetracer::retrace_glProgramLocalParameter4dARB),
    ("glProgramLocalParameter4dvARB", GlRetracer::retrace_glProgramLocalParameter4dvARB),
    ("glProgramLocalParameter4fARB", GlRetracer::retrace_glProgramLocalParameter4fARB),
    ("glProgramLocalParameter4fvARB", GlRetracer::retrace_glProgramLocalParameter4fvARB),
    ("glGetProgramEnvParameterdvARB", GlRetracer::ignore),
    ("glGetProgramEnvParameterfvARB", GlRetracer::ignore),
    ("glGetProgramLocalParameterdvARB", GlRetracer::ignore),
    ("glGetProgramLocalParameterfvARB", GlRetracer::ignore),
    ("glGetProgramivARB", GlRetracer::ignore),
    ("glGetProgramStringARB", GlRetracer::ignore),
    ("glGetVertexAttribdvARB", GlRetracer::ignore),
    ("glGetVertexAttribfvARB", GlRetracer::ignore),
    ("glGetVertexAttribivARB", GlRetracer::ignore),
    ("glGetVertexAttribPointervARB", GlRetracer::ignore),
    ("glIsProgramARB", GlRetracer::ignore),
    ("glBindAttribLocationARB", GlRetracer::retrace_glBindAttribLocationARB),
    ("glGetActiveAttribARB", GlRetracer::ignore),
    ("glGetAttribLocationARB", GlRetracer::retrace_glGetAttribLocationARB),
    ("glVertexAttribP1ui", GlRetracer::retrace_glVertexAttribP1ui),
    ("glVertexAttribP1uiv", GlRetracer::retrace_glVertexAttribP1uiv),
    ("glVertexAttribP2ui", GlRetracer::retrace_glVertexAttribP2ui),
    ("glVertexAttribP2uiv", GlRetracer::retrace_glVertexAttribP2uiv),
    ("glVertexAttribP3ui", GlRetracer::retrace_glVertexAttribP3ui),
    ("glVertexAttribP3uiv", GlRetracer::retrace_glVertexAttribP3uiv),
    ("glVertexAttribP4ui", GlRetracer::retrace_glVertexAttribP4ui),
    ("glVertexAttribP4uiv", GlRetracer::retrace_glVertexAttribP4uiv),
    ("glVertexP2ui", GlRetracer::retrace_glVertexP2ui),
    ("glVertexP2uiv", GlRetracer::retrace_glVertexP2uiv),
    ("glVertexP3ui", GlRetracer::retrace_glVertexP3ui),
    ("glVertexP3uiv", GlRetracer::retrace_glVertexP3uiv),
    ("glVertexP4ui", GlRetracer::retrace_glVertexP4ui),
    ("glVertexP4uiv", GlRetracer::retrace_glVertexP4uiv),
    ("glTexCoordP1ui", GlRetracer::retrace_glTexCoordP1ui),
    ("glTexCoordP1uiv", GlRetracer::retrace_glTexCoordP1uiv),
    ("glTexCoordP2ui", GlRetracer::retrace_glTexCoordP2ui),
    ("glTexCoordP2uiv", GlRetracer::retrace_glTexCoordP2uiv),
    ("glTexCoordP3ui", GlRetracer::retrace_glTexCoordP3ui),
    ("glTexCoordP3uiv", GlRetracer::retrace_glTexCoordP3uiv),
    ("glTexCoordP4ui", GlRetracer::retrace_glTexCoordP4ui),
    ("glTexCoordP4uiv", GlRetracer::retrace_glTexCoordP4uiv),
    ("glMultiTexCoordP1ui", GlRetracer::retrace_glMultiTexCoordP1ui),
    ("glMultiTexCoordP1uiv", GlRetracer::retrace_glMultiTexCoordP1uiv),
    ("glMultiTexCoordP2ui", GlRetracer::retrace_glMultiTexCoordP2ui),
    ("glMultiTexCoordP2uiv", GlRetracer::retrace_glMultiTexCoordP2uiv),
    ("glMultiTexCoordP3ui", GlRetracer::retrace_glMultiTexCoordP3ui),
    ("glMultiTexCoordP3uiv", GlRetracer::retrace_glMultiTexCoordP3uiv),
    ("glMultiTexCoordP4ui", GlRetracer::retrace_glMultiTexCoordP4ui),
    ("glMultiTexCoordP4uiv", GlRetracer::retrace_glMultiTexCoordP4uiv),
    ("glNormalP3ui", GlRetracer::retrace_glNormalP3ui),
    ("glNormalP3uiv", GlRetracer::retrace_glNormalP3uiv),
    ("glColorP3ui", GlRetracer::retrace_glColorP3ui),
    ("glColorP3uiv", GlRetracer::retrace_glColorP3uiv),
    ("glColorP4ui", GlRetracer::retrace_glColorP4ui),
    ("glColorP4uiv", GlRetracer::retrace_glColorP4uiv),
    ("glSecondaryColorP3ui", GlRetracer::retrace_glSecondaryColorP3ui),
    ("glSecondaryColorP3uiv", GlRetracer::retrace_glSecondaryColorP3uiv),
    ("glViewportArrayv", GlRetracer::retrace_glViewportArrayv),
    ("glViewportIndexedf", GlRetracer::retrace_glViewportIndexedf),
    ("glViewportIndexedfv", GlRetracer::retrace_glViewportIndexedfv),
    ("glScissorArrayv", GlRetracer::retrace_glScissorArrayv),
    ("glScissorIndexed", GlRetracer::retrace_glScissorIndexed),
    ("glScissorIndexedv", GlRetracer::retrace_glScissorIndexedv),
    ("glDepthRangeArrayv", GlRetracer::retrace_glDepthRangeArrayv),
    ("glDepthRangeIndexed", GlRetracer::retrace_glDepthRangeIndexed),
    ("glGetFloati_v", GlRetracer::ignore),
    ("glGetDoublei_v", GlRetracer::ignore),
    ("glWindowPos2dARB", GlRetracer::retrace_glWindowPos2dARB),
    ("glWindowPos2dvARB", GlRetracer::retrace_glWindowPos2dvARB),
    ("glWindowPos2fARB", GlRetracer::retrace_glWindowPos2fARB),
    ("glWindowPos2fvARB", GlRetracer::retrace_glWindowPos2fvARB),
    ("glWindowPos2iARB", GlRetracer::retrace_glWindowPos2iARB),
    ("glWindowPos2ivARB", GlRetracer::retrace_glWindowPos2ivARB),
    ("glWindowPos2sARB", GlRetracer::retrace_glWindowPos2sARB),
    ("glWindowPos2svARB", GlRetracer::retrace_glWindowPos2svARB),
    ("glWindowPos3dARB", GlRetracer::retrace_glWindowPos3dARB),
    ("glWindowPos3dvARB", GlRetracer::retrace_glWindowPos3dvARB),
    ("glWindowPos3fARB", GlRetracer::retrace_glWindowPos3fARB),
    ("glWindowPos3fvARB", GlRetracer::retrace_glWindowPos3fvARB),
    ("glWindowPos3iARB", GlRetracer::retrace_glWindowPos3iARB),
    ("glWindowPos3ivARB", GlRetracer::retrace_glWindowPos3ivARB),
    ("glWindowPos3sARB", GlRetracer::retrace_glWindowPos3sARB),
    ("glWindowPos3svARB", GlRetracer::retrace_glWindowPos3svARB),
    ("glDrawBuffersATI", GlRetracer::retrace_glDrawBuffersATI),
    ("glElementPointerATI", GlRetracer::retrace_glElementPointerATI),
    ("glDrawElementArrayATI", GlRetracer::retrace_glDrawElementArrayATI),
    ("glDrawRangeElementArrayATI", GlRetracer::retrace_glDrawRangeElementArrayATI),
    ("glTexBumpParameterivATI", GlRetracer::retrace_glTexBumpParameterivATI),
    ("glTexBumpParameterfvATI", GlRetracer::retrace_glTexBumpParameterfvATI),
    ("glGetTexBumpParameterivATI", GlRetracer::ignore),
    ("glGetTexBumpParameterfvATI", GlRetracer::ignore),
    ("glBlendEquationSeparateATI", GlRetracer::retrace_glBlendEquationSeparateATI),
    ("glGenFragmentShadersATI", GlRetracer::retrace_glGenFragmentShadersATI),
    ("glBindFragmentShaderATI", GlRetracer::retrace_glBindFragmentShaderATI),
    ("glDeleteFragmentShaderATI", GlRetracer::retrace_glDeleteFragmentShaderATI),
    ("glBeginFragmentShaderATI", GlRetracer::retrace_glBeginFragmentShaderATI),
    ("glEndFragmentShaderATI", GlRetracer::retrace_glEndFragmentShaderATI),
    ("glPassTexCoordATI", GlRetracer::retrace_glPassTexCoordATI),
    ("glSampleMapATI", GlRetracer::retrace_glSampleMapATI),
    ("glColorFragmentOp1ATI", GlRetracer::retrace_glColorFragmentOp1ATI),
    ("glColorFragmentOp2ATI", GlRetracer::retrace_glColorFragmentOp2ATI),
    ("glColorFragmentOp3ATI", GlRetracer::retrace_glColorFragmentOp3ATI),
    ("glAlphaFragmentOp1ATI", GlRetracer::retrace_glAlphaFragmentOp1ATI),
    ("glAlphaFragmentOp2ATI", GlRetracer::retrace_glAlphaFragmentOp2ATI),
    ("glAlphaFragmentOp3ATI", GlRetracer::retrace_glAlphaFragmentOp3ATI),
    ("glSetFragmentShaderConstantATI", GlRetracer::retrace_glSetFragmentShaderConstantATI),
    ("glMapObjectBufferATI", GlRetracer::retrace_glMapObjectBufferATI),
    ("glUnmapObjectBufferATI", GlRetracer::retrace_glUnmapObjectBufferATI),
    ("glPNTrianglesiATI", GlRetracer::retrace_glPNTrianglesiATI),
    ("glPNTrianglesfATI", GlRetracer::retrace_glPNTrianglesfATI),
    ("glPNTrianglesiATIX", GlRetracer::retrace_glPNTrianglesiATIX),
    ("glPNTrianglesfATIX", GlRetracer::retrace_glPNTrianglesfATIX),
    ("glStencilOpSeparateATI", GlRetracer::retrace_glStencilOpSeparateATI),
    ("glStencilFuncSeparateATI", GlRetracer::retrace_glStencilFuncSeparateATI),
    ("glNewObjectBufferATI", GlRetracer::retrace_glNewObjectBufferATI),
    ("glIsObjectBufferATI", GlRetracer::ignore),
    ("glUpdateObjectBufferATI", GlRetracer::retrace_glUpdateObjectBufferATI),
    ("glGetObjectBufferfvATI", GlRetracer::ignore),
    ("glGetObjectBufferivATI", GlRetracer::ignore),
    ("glFreeObjectBufferATI", GlRetracer::retrace_glFreeObjectBufferATI),
    ("glArrayObjectATI", GlRetracer::retrace_glArrayObjectATI),
    ("glGetArrayObjectfvATI", GlRetracer::ignore),
    ("glGetArrayObjectivATI", GlRetracer::ignore),
    ("glVariantArrayObjectATI", GlRetracer::retrace_glVariantArrayObjectATI),
    ("glGetVariantArrayObjectfvATI", GlRetracer::ignore),
    ("glGetVariantArrayObjectivATI", GlRetracer::ignore),
    ("glVertexAttribArrayObjectATI", GlRetracer::retrace_glVertexAttribArrayObjectATI),
    ("glGetVertexAttribArrayObjectfvATI", GlRetracer::ignore),
    ("glGetVertexAttribArrayObjectivATI", GlRetracer::ignore),
    ("glVertexStream1sATI", GlRetracer::retrace_glVertexStream1sATI),
    ("glVertexStream1svATI", GlRetracer::retrace_glVertexStream1svATI),
    ("glVertexStream1iATI", GlRetracer::retrace_glVertexStream1iATI),
    ("glVertexStream1ivATI", GlRetracer::retrace_glVertexStream1ivATI),
    ("glVertexStream1fATI", GlRetracer::retrace_glVertexStream1fATI),
    ("glVertexStream1fvATI", GlRetracer::retrace_glVertexStream1fvATI),
    ("glVertexStream1dATI", GlRetracer::retrace_glVertexStream1dATI),
    ("glVertexStream1dvATI", GlRetracer::retrace_glVertexStream1dvATI),
    ("glVertexStream2sATI", GlRetracer::retrace_glVertexStream2sATI),
    ("glVertexStream2svATI", GlRetracer::retrace_glVertexStream2svATI),
    ("glVertexStream2iATI", GlRetracer::retrace_glVertexStream2iATI),
    ("glVertexStream2ivATI", GlRetracer::retrace_glVertexStream2ivATI),
    ("glVertexStream2fATI", GlRetracer::retrace_glVertexStream2fATI),
    ("glVertexStream2fvATI", GlRetracer::retrace_glVertexStream2fvATI),
    ("glVertexStream2dATI", GlRetracer::retrace_glVertexStream2dATI),
    ("glVertexStream2dvATI", GlRetracer::retrace_glVertexStream2dvATI),
    ("glVertexStream3sATI", GlRetracer::retrace_glVertexStream3sATI),
    ("glVertexStream3svATI", GlRetracer::retrace_glVertexStream3svATI),
    ("glVertexStream3iATI", GlRetracer::retrace_glVertexStream3iATI),
    ("glVertexStream3ivATI", GlRetracer::retrace_glVertexStream3ivATI),
    ("glVertexStream3fATI", GlRetracer::retrace_glVertexStream3fATI),
    ("glVertexStream3fvATI", GlRetracer::retrace_glVertexStream3fvATI),
    ("glVertexStream3dATI", GlRetracer::retrace_glVertexStream3dATI),
    ("glVertexStream3dvATI", GlRetracer::retrace_glVertexStream3dvATI),
    ("glVertexStream4sATI", GlRetracer::retrace_glVertexStream4sATI),
    ("glVertexStream4svATI", GlRetracer::retrace_glVertexStream4svATI),
    ("glVertexStream4iATI", GlRetracer::retrace_glVertexStream4iATI),
    ("glVertexStream4ivATI", GlRetracer::retrace_glVertexStream4ivATI),
    ("glVertexStream4fATI", GlRetracer::retrace_glVertexStream4fATI),
    ("glVertexStream4fvATI", GlRetracer::retrace_glVertexStream4fvATI),
    ("glVertexStream4dATI", GlRetracer::retrace_glVertexStream4dATI),
    ("glVertexStream4dvATI", GlRetracer::retrace_glVertexStream4dvATI),
    ("glNormalStream3bATI", GlRetracer::retrace_glNormalStream3bATI),
    ("glNormalStream3bvATI", GlRetracer::retrace_glNormalStream3bvATI),
    ("glNormalStream3sATI", GlRetracer::retrace_glNormalStream3sATI),
    ("glNormalStream3svATI", GlRetracer::retrace_glNormalStream3svATI),
    ("glNormalStream3iATI", GlRetracer::retrace_glNormalStream3iATI),
    ("glNormalStream3ivATI", GlRetracer::retrace_glNormalStream3ivATI),
    ("glNormalStream3fATI", GlRetracer::retrace_glNormalStream3fATI),
    ("glNormalStream3fvATI", GlRetracer::retrace_glNormalStream3fvATI),
    ("glNormalStream3dATI", GlRetracer::retrace_glNormalStream3dATI),
    ("glNormalStream3dvATI", GlRetracer::retrace_glNormalStream3dvATI),
    ("glClientActiveVertexStreamATI", GlRetracer::retrace_glClientActiveVertexStreamATI),
    ("glVertexBlendEnviATI", GlRetracer::retrace_glVertexBlendEnviATI),
    ("glVertexBlendEnvfATI", GlRetracer::retrace_glVertexBlendEnvfATI),
    ("glDrawArraysInstancedBaseInstanceEXT", GlRetracer::retrace_glDrawArraysInstancedBaseInstanceEXT),
    ("glDrawElementsInstancedBaseInstanceEXT", GlRetracer::retrace_glDrawElementsInstancedBaseInstanceEXT),
    ("glDrawElementsInstancedBaseVertexBaseInstanceEXT", GlRetracer::retrace_glDrawElementsInstancedBaseVertexBaseInstanceEXT),
    ("glUniformBufferEXT", GlRetracer::retrace_glUniformBufferEXT),
    ("glGetUniformBufferSizeEXT", GlRetracer::retrace_glGetUniformBufferSizeEXT),
    ("glGetUniformOffsetEXT", GlRetracer::retrace_glGetUniformOffsetEXT),
    ("glBlendColorEXT", GlRetracer::retrace_glBlendColorEXT),
    ("glBlendEquationSeparateEXT", GlRetracer::retrace_glBlendEquationSeparateEXT),
    ("glBindFragDataLocationIndexedEXT", GlRetracer::retrace_glBindFragDataLocationIndexedEXT),
    ("glBindFragDataLocationEXT", GlRetracer::retrace_glBindFragDataLocationEXT),
    ("glGetProgramResourceLocationIndexEXT", GlRetracer::retrace_glGetProgramResourceLocationIndexEXT),
    ("glGetFragDataIndexEXT", GlRetracer::retrace_glGetFragDataIndexEXT),
    ("glBlendFuncSeparateEXT", GlRetracer::retrace_glBlendFuncSeparateEXT),
    ("glBlendEquationEXT", GlRetracer::retrace_glBlendEquationEXT),
    ("glBufferStorageEXT", GlRetracer::retrace_glBufferStorageEXT),
    ("glClearTexImageEXT", GlRetracer::retrace_glClearTexImageEXT),
    ("glClearTexSubImageEXT", GlRetracer::retrace_glClearTexSubImageEXT),
    ("glClipControlEXT", GlRetracer::retrace_glClipControlEXT),
    ("glColorSubTableEXT", GlRetracer::retrace_glColorSubTableEXT),
    ("glCopyColorSubTableEXT", GlRetracer::retrace_glCopyColorSubTableEXT),
    ("glLockArraysEXT", GlRetracer::retrace_glLockArraysEXT),
    ("glUnlockArraysEXT", GlRetracer::retrace_glUnlockArraysEXT),
    ("glConvolutionFilter1DEXT", GlRetracer::retrace_glConvolutionFilter1DEXT),
    ("glConvolutionFilter2DEXT", GlRetracer::retrace_glConvolutionFilter2DEXT),
    ("glConvolutionParameterfEXT", GlRetracer::retrace_glConvolutionParameterfEXT),
    ("glConvolutionParameterfvEXT", GlRetracer::retrace_glConvolutionParameterfvEXT),
    ("glConvolutionParameteriEXT", GlRetracer::retrace_glConvolutionParameteriEXT),
    ("glConvolutionParameterivEXT", GlRetracer::retrace_glConvolutionParameterivEXT),
    ("glCopyConvolutionFilter1DEXT", GlRetracer::retrace_glCopyConvolutionFilter1DEXT),
    ("glCopyConvolutionFilter2DEXT", GlRetracer::retrace_glCopyConvolutionFilter2DEXT),
    ("glGetConvolutionFilterEXT", GlRetracer::retrace_glGetConvolutionFilterEXT),
    ("glGetConvolutionParameterfvEXT", GlRetracer::ignore),
    ("glGetConvolutionParameterivEXT", GlRetracer::ignore),
    ("glGetSeparableFilterEXT", GlRetracer::retrace_glGetSeparableFilterEXT),
    ("glSeparableFilter2DEXT", GlRetracer::retrace_glSeparableFilter2DEXT),
    ("glTangent3bEXT", GlRetracer::retrace_glTangent3bEXT),
    ("glTangent3bvEXT", GlRetracer::retrace_glTangent3bvEXT),
    ("glTangent3dEXT", GlRetracer::retrace_glTangent3dEXT),
    ("glTangent3dvEXT", GlRetracer::retrace_glTangent3dvEXT),
    ("glTangent3fEXT", GlRetracer::retrace_glTangent3fEXT),
    ("glTangent3fvEXT", GlRetracer::retrace_glTangent3fvEXT),
    ("glTangent3iEXT", GlRetracer::retrace_glTangent3iEXT),
    ("glTangent3ivEXT", GlRetracer::retrace_glTangent3ivEXT),
    ("glTangent3sEXT", GlRetracer::retrace_glTangent3sEXT),
    ("glTangent3svEXT", GlRetracer::retrace_glTangent3svEXT),
    ("glBinormal3bEXT", GlRetracer::retrace_glBinormal3bEXT),
    ("glBinormal3bvEXT", GlRetracer::retrace_glBinormal3bvEXT),
    ("glBinormal3dEXT", GlRetracer::retrace_glBinormal3dEXT),
    ("glBinormal3dvEXT", GlRetracer::retrace_glBinormal3dvEXT),
    ("glBinormal3fEXT", GlRetracer::retrace_glBinormal3fEXT),
    ("glBinormal3fvEXT", GlRetracer::retrace_glBinormal3fvEXT),
    ("glBinormal3iEXT", GlRetracer::retrace_glBinormal3iEXT),
    ("glBinormal3ivEXT", GlRetracer::retrace_glBinormal3ivEXT),
    ("glBinormal3sEXT", GlRetracer::retrace_glBinormal3sEXT),
    ("glBinormal3svEXT", GlRetracer::retrace_glBinormal3svEXT),
    ("glTangentPointerEXT", GlRetracer::retrace_glTangentPointerEXT),
    ("glBinormalPointerEXT", GlRetracer::retrace_glBinormalPointerEXT),
    ("glCopyImageSubDataEXT", GlRetracer::retrace_glCopyImageSubDataEXT),
    ("glCopyTexImage1DEXT", GlRetracer::retrace_glCopyTexImage1DEXT),
    ("glCopyTexImage2DEXT", GlRetracer::retrace_glCopyTexImage2DEXT),
    ("glCopyTexSubImage1DEXT", GlRetracer::retrace_glCopyTexSubImage1DEXT),
    ("glCopyTexSubImage2DEXT", GlRetracer::retrace_glCopyTexSubImage2DEXT),
    ("glCopyTexSubImage3DEXT", GlRetracer::retrace_glCopyTexSubImage3DEXT),
    ("glCullParameterdvEXT", GlRetracer::retrace_glCullParameterdvEXT),
    ("glCullParameterfvEXT", GlRetracer::retrace_glCullParameterfvEXT),
    ("glLabelObjectEXT", GlRetracer::retrace_glLabelObjectEXT),
    ("glGetObjectLabelEXT", GlRetracer::ignore),
    ("glInsertEventMarkerEXT", GlRetracer::retrace_glInsertEventMarkerEXT),
    ("glPushGroupMarkerEXT", GlRetracer::retrace_glPushGroupMarkerEXT),
    ("glPopGroupMarkerEXT", GlRetracer::retrace_glPopGroupMarkerEXT),
    ("glDepthBoundsEXT", GlRetracer::retrace_glDepthBoundsEXT),
    ("glBindMultiTextureEXT", GlRetracer::retrace_glBindMultiTextureEXT),
    ("glCheckNamedFramebufferStatusEXT", GlRetracer::retrace_glCheckNamedFramebufferStatusEXT),
    ("glClearNamedBufferDataEXT", GlRetracer::retrace_glClearNamedBufferDataEXT),
    ("glClearNamedBufferSubDataEXT", GlRetracer::retrace_glClearNamedBufferSubDataEXT),
    ("glClientAttribDefaultEXT", GlRetracer::retrace_glClientAttribDefaultEXT),
    ("glCompressedMultiTexImage1DEXT", GlRetracer::retrace_glCompressedMultiTexImage1DEXT),
    ("glCompressedMultiTexImage2DEXT", GlRetracer::retrace_glCompressedMultiTexImage2DEXT),
    ("glCompressedMultiTexImage3DEXT", GlRetracer::retrace_glCompressedMultiTexImage3DEXT),
    ("glCompressedMultiTexSubImage1DEXT", GlRetracer::retrace_glCompressedMultiTexSubImage1DEXT),
    ("glCompressedMultiTexSubImage2DEXT", GlRetracer::retrace_glCompressedMultiTexSubImage2DEXT),
    ("glCompressedMultiTexSubImage3DEXT", GlRetracer::retrace_glCompressedMultiTexSubImage3DEXT),
    ("glCompressedTextureImage1DEXT", GlRetracer::retrace_glCompressedTextureImage1DEXT),
    ("glCompressedTextureImage2DEXT", GlRetracer::retrace_glCompressedTextureImage2DEXT),
    ("glCompressedTextureImage3DEXT", GlRetracer::retrace_glCompressedTextureImage3DEXT),
    ("glCompressedTextureSubImage1DEXT", GlRetracer::retrace_glCompressedTextureSubImage1DEXT),
    ("glCompressedTextureSubImage2DEXT", GlRetracer::retrace_glCompressedTextureSubImage2DEXT),
    ("glCompressedTextureSubImage3DEXT", GlRetracer::retrace_glCompressedTextureSubImage3DEXT),
    ("glCopyMultiTexImage1DEXT", GlRetracer::retrace_glCopyMultiTexImage1DEXT),
    ("glCopyMultiTexImage2DEXT", GlRetracer::retrace_glCopyMultiTexImage2DEXT),
    ("glCopyMultiTexSubImage1DEXT", GlRetracer::retrace_glCopyMultiTexSubImage1DEXT),
    ("glCopyMultiTexSubImage2DEXT", GlRetracer::retrace_glCopyMultiTexSubImage2DEXT),
    ("glCopyMultiTexSubImage3DEXT", GlRetracer::retrace_glCopyMultiTexSubImage3DEXT),
    ("glCopyTextureImage1DEXT", GlRetracer::retrace_glCopyTextureImage1DEXT),
    ("glCopyTextureImage2DEXT", GlRetracer::retrace_glCopyTextureImage2DEXT),
    ("glCopyTextureSubImage1DEXT", GlRetracer::retrace_glCopyTextureSubImage1DEXT),
    ("glCopyTextureSubImage2DEXT", GlRetracer::retrace_glCopyTextureSubImage2DEXT),
    ("glCopyTextureSubImage3DEXT", GlRetracer::retrace_glCopyTextureSubImage3DEXT),
    ("glDisableClientStateIndexedEXT", GlRetracer::retrace_glDisableClientStateIndexedEXT),
    ("glDisableClientStateiEXT", GlRetracer::retrace_glDisableClientStateiEXT),
    ("glDisableVertexArrayAttribEXT", GlRetracer::retrace_glDisableVertexArrayAttribEXT),
    ("glDisableVertexArrayEXT", GlRetracer::retrace_glDisableVertexArrayEXT),
    ("glEnableClientStateIndexedEXT", GlRetracer::retrace_glEnableClientStateIndexedEXT),
    ("glEnableClientStateiEXT", GlRetracer::retrace_glEnableClientStateiEXT),
    ("glEnableVertexArrayAttribEXT", GlRetracer::retrace_glEnableVertexArrayAttribEXT),
    ("glEnableVertexArrayEXT", GlRetracer::retrace_glEnableVertexArrayEXT),
    ("glFlushMappedNamedBufferRangeEXT", GlRetracer::retrace_glFlushMappedNamedBufferRangeEXT),
    ("glFramebufferDrawBufferEXT", GlRetracer::retrace_glFramebufferDrawBufferEXT),
    ("glFramebufferDrawBuffersEXT", GlRetracer::retrace_glFramebufferDrawBuffersEXT),
    ("glFramebufferReadBufferEXT", GlRetracer::retrace_glFramebufferReadBufferEXT),
    ("glGenerateMultiTexMipmapEXT", GlRetracer::retrace_glGenerateMultiTexMipmapEXT),
    ("glGenerateTextureMipmapEXT", GlRetracer::retrace_glGenerateTextureMipmapEXT),
    ("glGetCompressedMultiTexImageEXT", GlRetracer::retrace_glGetCompressedMultiTexImageEXT),
    ("glGetCompressedTextureImageEXT", GlRetracer::retrace_glGetCompressedTextureImageEXT),
    ("glGetDoubleIndexedvEXT", GlRetracer::ignore),
    ("glGetDoublei_vEXT", GlRetracer::ignore),
    ("glGetFloatIndexedvEXT", GlRetracer::ignore),
    ("glGetFloati_vEXT", GlRetracer::ignore),
    ("glGetFramebufferParameterivEXT", GlRetracer::ignore),
    ("glGetMultiTexEnvfvEXT", GlRetracer::ignore),
    ("glGetMultiTexEnvivEXT", GlRetracer::ignore),
    ("glGetMultiTexGendvEXT", GlRetracer::ignore),
    ("glGetMultiTexGenfvEXT", GlRetracer::ignore),
    ("glGetMultiTexGenivEXT", GlRetracer::ignore),
    ("glGetMultiTexImageEXT", GlRetracer::retrace_glGetMultiTexImageEXT),
    ("glGetMultiTexLevelParameterfvEXT", GlRetracer::ignore),
    ("glGetMultiTexLevelParameterivEXT", GlRetracer::ignore),
    ("glGetMultiTexParameterIivEXT", GlRetracer::ignore),
    ("glGetMultiTexParameterIuivEXT", GlRetracer::ignore),
    ("glGetMultiTexParameterfvEXT", GlRetracer::ignore),
    ("glGetMultiTexParameterivEXT", GlRetracer::ignore),
    ("glGetNamedBufferParameterivEXT", GlRetracer::ignore),
    ("glGetNamedBufferPointervEXT", GlRetracer::ignore),
    ("glGetNamedBufferSubDataEXT", GlRetracer::ignore),
    ("glGetNamedFramebufferAttachmentParameterivEXT", GlRetracer::ignore),
    ("glGetNamedFramebufferParameterivEXT", GlRetracer::ignore),
    ("glGetNamedProgramLocalParameterIivEXT", GlRetracer::ignore),
    ("glGetNamedProgramLocalParameterIuivEXT", GlRetracer::ignore),
    ("glGetNamedProgramLocalParameterdvEXT", GlRetracer::ignore),
    ("glGetNamedProgramLocalParameterfvEXT", GlRetracer::ignore),
    ("glGetNamedProgramStringEXT", GlRetracer::ignore),
    ("glGetNamedProgramivEXT", GlRetracer::ignore),
    ("glGetNamedRenderbufferParameterivEXT", GlRetracer::ignore),
    ("glGetPointerIndexedvEXT", GlRetracer::ignore),
    ("glGetPointeri_vEXT", GlRetracer::ignore),
    ("glGetTextureImageEXT", GlRetracer::retrace_glGetTextureImageEXT),
    ("glGetTextureLevelParameterfvEXT", GlRetracer::ignore),
    ("glGetTextureLevelParameterivEXT", GlRetracer::ignore),
    ("glGetTextureParameterIivEXT", GlRetracer::ignore),
    ("glGetTextureParameterIuivEXT", GlRetracer::ignore),
    ("glGetTextureParameterfvEXT", GlRetracer::ignore),
    ("glGetTextureParameterivEXT", GlRetracer::ignore),
    ("glGetVertexArrayIntegeri_vEXT", GlRetracer::ignore),
    ("glGetVertexArrayIntegervEXT", GlRetracer::ignore),
    ("glGetVertexArrayPointeri_vEXT", GlRetracer::ignore),
    ("glGetVertexArrayPointervEXT", GlRetracer::ignore),
    ("glMapNamedBufferEXT", GlRetracer::retrace_glMapNamedBufferEXT),
    ("glMapNamedBufferRangeEXT", GlRetracer::retrace_glMapNamedBufferRangeEXT),
    ("glMatrixFrustumEXT", GlRetracer::retrace_glMatrixFrustumEXT),
    ("glMatrixLoadIdentityEXT", GlRetracer::retrace_glMatrixLoadIdentityEXT),
    ("glMatrixLoadTransposedEXT", GlRetracer::retrace_glMatrixLoadTransposedEXT),
    ("glMatrixLoadTransposefEXT", GlRetracer::retrace_glMatrixLoadTransposefEXT),
    ("glMatrixLoaddEXT", GlRetracer::retrace_glMatrixLoaddEXT),
    ("glMatrixLoadfEXT", GlRetracer::retrace_glMatrixLoadfEXT),
    ("glMatrixMultTransposedEXT", GlRetracer::retrace_glMatrixMultTransposedEXT),
    ("glMatrixMultTransposefEXT", GlRetracer::retrace_glMatrixMultTransposefEXT),
    ("glMatrixMultdEXT", GlRetracer::retrace_glMatrixMultdEXT),
    ("glMatrixMultfEXT", GlRetracer::retrace_glMatrixMultfEXT),
    ("glMatrixOrthoEXT", GlRetracer::retrace_glMatrixOrthoEXT),
    ("glMatrixPopEXT", GlRetracer::retrace_glMatrixPopEXT),
    ("glMatrixPushEXT", GlRetracer::retrace_glMatrixPushEXT),
    ("glMatrixRotatedEXT", GlRetracer::retrace_glMatrixRotatedEXT),
    ("glMatrixRotatefEXT", GlRetracer::retrace_glMatrixRotatefEXT),
    ("glMatrixScaledEXT", GlRetracer::retrace_glMatrixScaledEXT),
    ("glMatrixScalefEXT", GlRetracer::retrace_glMatrixScalefEXT),
    ("glMatrixTranslatedEXT", GlRetracer::retrace_glMatrixTranslatedEXT),
    ("glMatrixTranslatefEXT", GlRetracer::retrace_glMatrixTranslatefEXT),
    ("glMultiTexBufferEXT", GlRetracer::retrace_glMultiTexBufferEXT),
    ("glMultiTexCoordPointerEXT", GlRetracer::retrace_glMultiTexCoordPointerEXT),
    ("glMultiTexEnvfEXT", GlRetracer::retrace_glMultiTexEnvfEXT),
    ("glMultiTexEnvfvEXT", GlRetracer::retrace_glMultiTexEnvfvEXT),
    ("glMultiTexEnviEXT", GlRetracer::retrace_glMultiTexEnviEXT),
    ("glMultiTexEnvivEXT", GlRetracer::retrace_glMultiTexEnvivEXT),
    ("glMultiTexGendEXT", GlRetracer::retrace_glMultiTexGendEXT),
    ("glMultiTexGendvEXT", GlRetracer::retrace_glMultiTexGendvEXT),
    ("glMultiTexGenfEXT", GlRetracer::retrace_glMultiTexGenfEXT),
    ("glMultiTexGenfvEXT", GlRetracer::retrace_glMultiTexGenfvEXT),
    ("glMultiTexGeniEXT", GlRetracer::retrace_glMultiTexGeniEXT),
    ("glMultiTexGenivEXT", GlRetracer::retrace_glMultiTexGenivEXT),
    ("glMultiTexImage1DEXT", GlRetracer::retrace_glMultiTexImage1DEXT),
    ("glMultiTexImage2DEXT", GlRetracer::retrace_glMultiTexImage2DEXT),
    ("glMultiTexImage3DEXT", GlRetracer::retrace_glMultiTexImage3DEXT),
    ("glMultiTexParameterIivEXT", GlRetracer::retrace_glMultiTexParameterIivEXT),
    ("glMultiTexParameterIuivEXT", GlRetracer::retrace_glMultiTexParameterIuivEXT),
    ("glMultiTexParameterfEXT", GlRetracer::retrace_glMultiTexParameterfEXT),
    ("glMultiTexParameterfvEXT", GlRetracer::retrace_glMultiTexParameterfvEXT),
    ("glMultiTexParameteriEXT", GlRetracer::retrace_glMultiTexParameteriEXT),
    ("glMultiTexParameterivEXT", GlRetracer::retrace_glMultiTexParameterivEXT),
    ("glMultiTexRenderbufferEXT", GlRetracer::retrace_glMultiTexRenderbufferEXT),
    ("glMultiTexSubImage1DEXT", GlRetracer::retrace_glMultiTexSubImage1DEXT),
    ("glMultiTexSubImage2DEXT", GlRetracer::retrace_glMultiTexSubImage2DEXT),
    ("glMultiTexSubImage3DEXT", GlRetracer::retrace_glMultiTexSubImage3DEXT),
    ("glNamedBufferDataEXT", GlRetracer::retrace_glNamedBufferDataEXT),
    ("glNamedBufferStorageEXT", GlRetracer::retrace_glNamedBufferStorageEXT),
    ("glNamedBufferSubDataEXT", GlRetracer::retrace_glNamedBufferSubDataEXT),
    ("glNamedCopyBufferSubDataEXT", GlRetracer::retrace_glNamedCopyBufferSubDataEXT),
    ("glNamedFramebufferParameteriEXT", GlRetracer::retrace_glNamedFramebufferParameteriEXT),
    ("glNamedFramebufferRenderbufferEXT", GlRetracer::retrace_glNamedFramebufferRenderbufferEXT),
    ("glNamedFramebufferTexture1DEXT", GlRetracer::retrace_glNamedFramebufferTexture1DEXT),
    ("glNamedFramebufferTexture2DEXT", GlRetracer::retrace_glNamedFramebufferTexture2DEXT),
    ("glNamedFramebufferTexture3DEXT", GlRetracer::retrace_glNamedFramebufferTexture3DEXT),
    ("glNamedFramebufferTextureEXT", GlRetracer::retrace_glNamedFramebufferTextureEXT),
    ("glNamedFramebufferTextureFaceEXT", GlRetracer::retrace_glNamedFramebufferTextureFaceEXT),
    ("glNamedFramebufferTextureLayerEXT", GlRetracer::retrace_glNamedFramebufferTextureLayerEXT),
    ("glNamedProgramLocalParameter4dEXT", GlRetracer::retrace_glNamedProgramLocalParameter4dEXT),
    ("glNamedProgramLocalParameter4dvEXT", GlRetracer::retrace_glNamedProgramLocalParameter4dvEXT),
    ("glNamedProgramLocalParameter4fEXT", GlRetracer::retrace_glNamedProgramLocalParameter4fEXT),
    ("glNamedProgramLocalParameter4fvEXT", GlRetracer::retrace_glNamedProgramLocalParameter4fvEXT),
    ("glNamedProgramLocalParameterI4iEXT", GlRetracer::retrace_glNamedProgramLocalParameterI4iEXT),
    ("glNamedProgramLocalParameterI4ivEXT", GlRetracer::retrace_glNamedProgramLocalParameterI4ivEXT),
    ("glNamedProgramLocalParameterI4uiEXT", GlRetracer::retrace_glNamedProgramLocalParameterI4uiEXT),
    ("glNamedProgramLocalParameterI4uivEXT", GlRetracer::retrace_glNamedProgramLocalParameterI4uivEXT),
    ("glNamedProgramLocalParameters4fvEXT", GlRetracer::retrace_glNamedProgramLocalParameters4fvEXT),
    ("glNamedProgramLocalParametersI4ivEXT", GlRetracer::retrace_glNamedProgramLocalParametersI4ivEXT),
    ("glNamedProgramLocalParametersI4uivEXT", GlRetracer::retrace_glNamedProgramLocalParametersI4uivEXT),
    ("glNamedProgramStringEXT", GlRetracer::retrace_glNamedProgramStringEXT),
    ("glNamedRenderbufferStorageEXT", GlRetracer::retrace_glNamedRenderbufferStorageEXT),
    ("glNamedRenderbufferStorageMultisampleCoverageEXT", GlRetracer::retrace_glNamedRenderbufferStorageMultisampleCoverageEXT),
    ("glNamedRenderbufferStorageMultisampleEXT", GlRetracer::retrace_glNamedRenderbufferStorageMultisampleEXT),
    ("glProgramUniform1dEXT", GlRetracer::retrace_glProgramUniform1dEXT),
    ("glProgramUniform1dvEXT", GlRetracer::retrace_glProgramUniform1dvEXT),
    ("glProgramUniform1fEXT", GlRetracer::retrace_glProgramUniform1fEXT),
    ("glProgramUniform1fvEXT", GlRetracer::retrace_glProgramUniform1fvEXT),
    ("glProgramUniform1iEXT", GlRetracer::retrace_glProgramUniform1iEXT),
    ("glProgramUniform1ivEXT", GlRetracer::retrace_glProgramUniform1ivEXT),
    ("glProgramUniform1uiEXT", GlRetracer::retrace_glProgramUniform1uiEXT),
    ("glProgramUniform1uivEXT", GlRetracer::retrace_glProgramUniform1uivEXT),
    ("glProgramUniform2dEXT", GlRetracer::retrace_glProgramUniform2dEXT),
    ("glProgramUniform2dvEXT", GlRetracer::retrace_glProgramUniform2dvEXT),
    ("glProgramUniform2fEXT", GlRetracer::retrace_glProgramUniform2fEXT),
    ("glProgramUniform2fvEXT", GlRetracer::retrace_glProgramUniform2fvEXT),
    ("glProgramUniform2iEXT", GlRetracer::retrace_glProgramUniform2iEXT),
    ("glProgramUniform2ivEXT", GlRetracer::retrace_glProgramUniform2ivEXT),
    ("glProgramUniform2uiEXT", GlRetracer::retrace_glProgramUniform2uiEXT),
    ("glProgramUniform2uivEXT", GlRetracer::retrace_glProgramUniform2uivEXT),
    ("glProgramUniform3dEXT", GlRetracer::retrace_glProgramUniform3dEXT),
    ("glProgramUniform3dvEXT", GlRetracer::retrace_glProgramUniform3dvEXT),
    ("glProgramUniform3fEXT", GlRetracer::retrace_glProgramUniform3fEXT),
    ("glProgramUniform3fvEXT", GlRetracer::retrace_glProgramUniform3fvEXT),
    ("glProgramUniform3iEXT", GlRetracer::retrace_glProgramUniform3iEXT),
    ("glProgramUniform3ivEXT", GlRetracer::retrace_glProgramUniform3ivEXT),
    ("glProgramUniform3uiEXT", GlRetracer::retrace_glProgramUniform3uiEXT),
    ("glProgramUniform3uivEXT", GlRetracer::retrace_glProgramUniform3uivEXT),
    ("glProgramUniform4dEXT", GlRetracer::retrace_glProgramUniform4dEXT),
    ("glProgramUniform4dvEXT", GlRetracer::retrace_glProgramUniform4dvEXT),
    ("glProgramUniform4fEXT", GlRetracer::retrace_glProgramUniform4fEXT),
    ("glProgramUniform4fvEXT", GlRetracer::retrace_glProgramUniform4fvEXT),
    ("glProgramUniform4iEXT", GlRetracer::retrace_glProgramUniform4iEXT),
    ("glProgramUniform4ivEXT", GlRetracer::retrace_glProgramUniform4ivEXT),
    ("glProgramUniform4uiEXT", GlRetracer::retrace_glProgramUniform4uiEXT),
    ("glProgramUniform4uivEXT", GlRetracer::retrace_glProgramUniform4uivEXT),
    ("glProgramUniformMatrix2dvEXT", GlRetracer::retrace_glProgramUniformMatrix2dvEXT),
    ("glProgramUniformMatrix2fvEXT", GlRetracer::retrace_glProgramUniformMatrix2fvEXT),
    ("glProgramUniformMatrix2x3dvEXT", GlRetracer::retrace_glProgramUniformMatrix2x3dvEXT),
    ("glProgramUniformMatrix2x3fvEXT", GlRetracer::retrace_glProgramUniformMatrix2x3fvEXT),
    ("glProgramUniformMatrix2x4dvEXT", GlRetracer::retrace_glProgramUniformMatrix2x4dvEXT),
    ("glProgramUniformMatrix2x4fvEXT", GlRetracer::retrace_glProgramUniformMatrix2x4fvEXT),
    ("glProgramUniformMatrix3dvEXT", GlRetracer::retrace_glProgramUniformMatrix3dvEXT),
    ("glProgramUniformMatrix3fvEXT", GlRetracer::retrace_glProgramUniformMatrix3fvEXT),
    ("glProgramUniformMatrix3x2dvEXT", GlRetracer::retrace_glProgramUniformMatrix3x2dvEXT),
    ("glProgramUniformMatrix3x2fvEXT", GlRetracer::retrace_glProgramUniformMatrix3x2fvEXT),
    ("glProgramUniformMatrix3x4dvEXT", GlRetracer::retrace_glProgramUniformMatrix3x4dvEXT),
    ("glProgramUniformMatrix3x4fvEXT", GlRetracer::retrace_glProgramUniformMatrix3x4fvEXT),
    ("glProgramUniformMatrix4dvEXT", GlRetracer::retrace_glProgramUniformMatrix4dvEXT),
    ("glProgramUniformMatrix4fvEXT", GlRetracer::retrace_glProgramUniformMatrix4fvEXT),
    ("glProgramUniformMatrix4x2dvEXT", GlRetracer::retrace_glProgramUniformMatrix4x2dvEXT),
    ("glProgramUniformMatrix4x2fvEXT", GlRetracer::retrace_glProgramUniformMatrix4x2fvEXT),
    ("glProgramUniformMatrix4x3dvEXT", GlRetracer::retrace_glProgramUniformMatrix4x3dvEXT),
    ("glProgramUniformMatrix4x3fvEXT", GlRetracer::retrace_glProgramUniformMatrix4x3fvEXT),
    ("glPushClientAttribDefaultEXT", GlRetracer::retrace_glPushClientAttribDefaultEXT),
    ("glTextureBufferEXT", GlRetracer::retrace_glTextureBufferEXT),
    ("glTextureBufferRangeEXT", GlRetracer::retrace_glTextureBufferRangeEXT),
    ("glTextureImage1DEXT", GlRetracer::retrace_glTextureImage1DEXT),
    ("glTextureImage2DEXT", GlRetracer::retrace_glTextureImage2DEXT),
    ("glTextureImage3DEXT", GlRetracer::retrace_glTextureImage3DEXT),
    ("glTexturePageCommitmentEXT", GlRetracer::retrace_glTexturePageCommitmentEXT),
    ("glTextureParameterIivEXT", GlRetracer::retrace_glTextureParameterIivEXT),
    ("glTextureParameterIuivEXT", GlRetracer::retrace_glTextureParameterIuivEXT),
    ("glTextureParameterfEXT", GlRetracer::retrace_glTextureParameterfEXT),
    ("glTextureParameterfvEXT", GlRetracer::retrace_glTextureParameterfvEXT),
    ("glTextureParameteriEXT", GlRetracer::retrace_glTextureParameteriEXT),
    ("glTextureParameterivEXT", GlRetracer::retrace_glTextureParameterivEXT),
    ("glTextureRenderbufferEXT", GlRetracer::retrace_glTextureRenderbufferEXT),
    ("glTextureStorage1DEXT", GlRetracer::retrace_glTextureStorage1DEXT),
    ("glTextureStorage2DEXT", GlRetracer::retrace_glTextureStorage2DEXT),
    ("glTextureStorage2DMultisampleEXT", GlRetracer::retrace_glTextureStorage2DMultisampleEXT),
    ("glTextureStorage3DEXT", GlRetracer::retrace_glTextureStorage3DEXT),
    ("glTextureStorage3DMultisampleEXT", GlRetracer::retrace_glTextureStorage3DMultisampleEXT),
    ("glTextureSubImage1DEXT", GlRetracer::retrace_glTextureSubImage1DEXT),
    ("glTextureSubImage2DEXT", GlRetracer::retrace_glTextureSubImage2DEXT),
    ("glTextureSubImage3DEXT", GlRetracer::retrace_glTextureSubImage3DEXT),
    ("glUnmapNamedBufferEXT", GlRetracer::retrace_glUnmapNamedBufferEXT),
    ("glVertexArrayBindVertexBufferEXT", GlRetracer::retrace_glVertexArrayBindVertexBufferEXT),
    ("glVertexArrayColorOffsetEXT", GlRetracer::retrace_glVertexArrayColorOffsetEXT),
    ("glVertexArrayEdgeFlagOffsetEXT", GlRetracer::retrace_glVertexArrayEdgeFlagOffsetEXT),
    ("glVertexArrayFogCoordOffsetEXT", GlRetracer::retrace_glVertexArrayFogCoordOffsetEXT),
    ("glVertexArrayIndexOffsetEXT", GlRetracer::retrace_glVertexArrayIndexOffsetEXT),
    ("glVertexArrayMultiTexCoordOffsetEXT", GlRetracer::retrace_glVertexArrayMultiTexCoordOffsetEXT),
    ("glVertexArrayNormalOffsetEXT", GlRetracer::retrace_glVertexArrayNormalOffsetEXT),
    ("glVertexArraySecondaryColorOffsetEXT", GlRetracer::retrace_glVertexArraySecondaryColorOffsetEXT),
    ("glVertexArrayTexCoordOffsetEXT", GlRetracer::retrace_glVertexArrayTexCoordOffsetEXT),
    ("glVertexArrayVertexAttribBindingEXT", GlRetracer::retrace_glVertexArrayVertexAttribBindingEXT),
    ("glVertexArrayVertexAttribDivisorEXT", GlRetracer::retrace_glVertexArrayVertexAttribDivisorEXT),
    ("glVertexArrayVertexAttribFormatEXT", GlRetracer::retrace_glVertexArrayVertexAttribFormatEXT),
    ("glVertexArrayVertexAttribIFormatEXT", GlRetracer::retrace_glVertexArrayVertexAttribIFormatEXT),
    ("glVertexArrayVertexAttribIOffsetEXT", GlRetracer::retrace_glVertexArrayVertexAttribIOffsetEXT),
    ("glVertexArrayVertexAttribLFormatEXT", GlRetracer::retrace_glVertexArrayVertexAttribLFormatEXT),
    ("glVertexArrayVertexAttribLOffsetEXT", GlRetracer::retrace_glVertexArrayVertexAttribLOffsetEXT),
    ("glVertexArrayVertexAttribOffsetEXT", GlRetracer::retrace_glVertexArrayVertexAttribOffsetEXT),
    ("glVertexArrayVertexBindingDivisorEXT", GlRetracer::retrace_glVertexArrayVertexBindingDivisorEXT),
    ("glVertexArrayVertexOffsetEXT", GlRetracer::retrace_glVertexArrayVertexOffsetEXT),
    ("glDiscardFramebufferEXT", GlRetracer::retrace_glDiscardFramebufferEXT),
    ("glGenQueriesEXT", GlRetracer::retrace_glGenQueriesEXT),
    ("glDeleteQueriesEXT", GlRetracer::retrace_glDeleteQueriesEXT),
    ("glIsQueryEXT", GlRetracer::ignore),
    ("glBeginQueryEXT", GlRetracer::retrace_glBeginQueryEXT),
    ("glEndQueryEXT", GlRetracer::retrace_glEndQueryEXT),
    ("glQueryCounterEXT", GlRetracer::retrace_glQueryCounterEXT),
    ("glGetQueryivEXT", GlRetracer::ignore),
    ("glGetQueryObjectivEXT", GlRetracer::retrace_glGetQueryObjectivEXT),
    ("glGetQueryObjectuivEXT", GlRetracer::retrace_glGetQueryObjectuivEXT),
    ("glGetQueryObjecti64vEXT", GlRetracer::retrace_glGetQueryObjecti64vEXT),
    ("glGetQueryObjectui64vEXT", GlRetracer::retrace_glGetQueryObjectui64vEXT),
    ("glDrawBuffersEXT", GlRetracer::retrace_glDrawBuffersEXT),
    ("glColorMaskIndexedEXT", GlRetracer::retrace_glColorMaskIndexedEXT),
    ("glGetBooleanIndexedvEXT", GlRetracer::ignore),
    ("glGetIntegerIndexedvEXT", GlRetracer::ignore),
    ("glEnableIndexedEXT", GlRetracer::retrace_glEnableIndexedEXT),
    ("glDisableIndexedEXT", GlRetracer::retrace_glDisableIndexedEXT),
    ("glIsEnabledIndexedEXT", GlRetracer::ignore),
    ("glEnableiEXT", GlRetracer::retrace_glEnableiEXT),
    ("glDisableiEXT", GlRetracer::retrace_glDisableiEXT),
    ("glBlendEquationiEXT", GlRetracer::retrace_glBlendEquationiEXT),
    ("glBlendEquationSeparateiEXT", GlRetracer::retrace_glBlendEquationSeparateiEXT),
    ("glBlendFunciEXT", GlRetracer::retrace_glBlendFunciEXT),
    ("glBlendFuncSeparateiEXT", GlRetracer::retrace_glBlendFuncSeparateiEXT),
    ("glColorMaskiEXT", GlRetracer::retrace_glColorMaskiEXT),
    ("glIsEnablediEXT", GlRetracer::ignore),
    ("glDrawElementsBaseVertexEXT", GlRetracer::retrace_glDrawElementsBaseVertexEXT),
    ("glDrawRangeElementsBaseVertexEXT", GlRetracer::retrace_glDrawRangeElementsBaseVertexEXT),
    ("glDrawElementsInstancedBaseVertexEXT", GlRetracer::retrace_glDrawElementsInstancedBaseVertexEXT),
    ("glMultiDrawElementsBaseVertexEXT", GlRetracer::retrace_glMultiDrawElementsBaseVertexEXT),
    ("glDrawArraysInstancedEXT", GlRetracer::retrace_glDrawArraysInstancedEXT),
    ("glDrawElementsInstancedEXT", GlRetracer::retrace_glDrawElementsInstancedEXT),
    ("glDrawRangeElementsEXT", GlRetracer::retrace_glDrawRangeElementsEXT),
    ("glFogCoordfEXT", GlRetracer::retrace_glFogCoordfEXT),
    ("glFogCoordfvEXT", GlRetracer::retrace_glFogCoordfvEXT),
    ("glFogCoorddEXT", GlRetracer::retrace_glFogCoorddEXT),
    ("glFogCoorddvEXT", GlRetracer::retrace_glFogCoorddvEXT),
    ("glFogCoordPointerEXT", GlRetracer::retrace_glFogCoordPointerEXT),
    ("glBlitFramebufferEXT", GlRetracer::retrace_glBlitFramebufferEXT),
    ("glRenderbufferStorageMultisampleEXT", GlRetracer::retrace_glRenderbufferStorageMultisampleEXT),
    ("glIsRenderbufferEXT", GlRetracer::ignore),
    ("glBindRenderbufferEXT", GlRetracer::retrace_glBindRenderbufferEXT),
    ("glDeleteRenderbuffersEXT", GlRetracer::retrace_glDeleteRenderbuffersEXT),
    ("glGenRenderbuffersEXT", GlRetracer::retrace_glGenRenderbuffersEXT),
    ("glRenderbufferStorageEXT", GlRetracer::retrace_glRenderbufferStorageEXT),
    ("glGetRenderbufferParameterivEXT", GlRetracer::ignore),
    ("glIsFramebufferEXT", GlRetracer::ignore),
    ("glBindFramebufferEXT", GlRetracer::retrace_glBindFramebufferEXT),
    ("glDeleteFramebuffersEXT", GlRetracer::retrace_glDeleteFramebuffersEXT),
    ("glGenFramebuffersEXT", GlRetracer::retrace_glGenFramebuffersEXT),
    ("glCheckFramebufferStatusEXT", GlRetracer::retrace_glCheckFramebufferStatusEXT),
    ("glFramebufferTexture1DEXT", GlRetracer::retrace_glFramebufferTexture1DEXT),
    ("glFramebufferTexture2DEXT", GlRetracer::retrace_glFramebufferTexture2DEXT),
    ("glFramebufferTexture3DEXT", GlRetracer::retrace_glFramebufferTexture3DEXT),
    ("glFramebufferRenderbufferEXT", GlRetracer::retrace_glFramebufferRenderbufferEXT),
    ("glGetFramebufferAttachmentParameterivEXT", GlRetracer::ignore),
    ("glGenerateMipmapEXT", GlRetracer::retrace_glGenerateMipmapEXT),
    ("glFramebufferTextureEXT", GlRetracer::retrace_glFramebufferTextureEXT),
    ("glProgramParameteriEXT", GlRetracer::retrace_glProgramParameteriEXT),
    ("glProgramEnvParameters4fvEXT", GlRetracer::retrace_glProgramEnvParameters4fvEXT),
    ("glProgramLocalParameters4fvEXT", GlRetracer::retrace_glProgramLocalParameters4fvEXT),
    ("glGetUniformuivEXT", GlRetracer::ignore),
    ("glGetFragDataLocationEXT", GlRetracer::ignore),
    ("glUniform1uiEXT", GlRetracer::retrace_glUniform1uiEXT),
    ("glUniform2uiEXT", GlRetracer::retrace_glUniform2uiEXT),
    ("glUniform3uiEXT", GlRetracer::retrace_glUniform3uiEXT),
    ("glUniform4uiEXT", GlRetracer::retrace_glUniform4uiEXT),
    ("glUniform1uivEXT", GlRetracer::retrace_glUniform1uivEXT),
    ("glUniform2uivEXT", GlRetracer::retrace_glUniform2uivEXT),
    ("glUniform3uivEXT", GlRetracer::retrace_glUniform3uivEXT),
    ("glUniform4uivEXT", GlRetracer::retrace_glUniform4uivEXT),
    ("glGetHistogramEXT", GlRetracer::retrace_glGetHistogramEXT),
    ("glGetHistogramParameterfvEXT", GlRetracer::ignore),
    ("glGetHistogramParameterivEXT", GlRetracer::retrace_glGetHistogramParameterivEXT),
    ("glGetMinmaxEXT", GlRetracer::retrace_glGetMinmaxEXT),
    ("glGetMinmaxParameterfvEXT", GlRetracer::ignore),
    ("glGetMinmaxParameterivEXT", GlRetracer::ignore),
    ("glHistogramEXT", GlRetracer::retrace_glHistogramEXT),
    ("glMinmaxEXT", GlRetracer::retrace_glMinmaxEXT),
    ("glResetHistogramEXT", GlRetracer::retrace_glResetHistogramEXT),
    ("glResetMinmaxEXT", GlRetracer::retrace_glResetMinmaxEXT),
    ("glIndexFuncEXT", GlRetracer::retrace_glIndexFuncEXT),
    ("glIndexMaterialEXT", GlRetracer::retrace_glIndexMaterialEXT),
    ("glVertexAttribDivisorEXT", GlRetracer::retrace_glVertexAttribDivisorEXT),
    ("glApplyTextureEXT", GlRetracer::retrace_glApplyTextureEXT),
    ("glTextureLightEXT", GlRetracer::retrace_glTextureLightEXT),
    ("glTextureMaterialEXT", GlRetracer::retrace_glTextureMaterialEXT),
    ("glMapBufferRangeEXT", GlRetracer::retrace_glMapBufferRangeEXT),
    ("glFlushMappedBufferRangeEXT", GlRetracer::retrace_glFlushMappedBufferRangeEXT),
    ("glMultiDrawArraysEXT", GlRetracer::retrace_glMultiDrawArraysEXT),
    ("glMultiDrawElementsEXT", GlRetracer::retrace_glMultiDrawElementsEXT),
    ("glMultiDrawArraysIndirectEXT", GlRetracer::retrace_glMultiDrawArraysIndirectEXT),
    ("glMultiDrawElementsIndirectEXT", GlRetracer::retrace_glMultiDrawElementsIndirectEXT),
    ("glSampleMaskEXT", GlRetracer::retrace_glSampleMaskEXT),
    ("glSamplePatternEXT", GlRetracer::retrace_glSamplePatternEXT),
    ("glFramebufferTexture2DMultisampleEXT", GlRetracer::retrace_glFramebufferTexture2DMultisampleEXT),
    ("glReadBufferIndexedEXT", GlRetracer::retrace_glReadBufferIndexedEXT),
    ("glDrawBuffersIndexedEXT", GlRetracer::retrace_glDrawBuffersIndexedEXT),
    ("glGetIntegeri_vEXT", GlRetracer::ignore),
    ("glColorTableEXT", GlRetracer::retrace_glColorTableEXT),
    ("glGetColorTableEXT", GlRetracer::ignore),
    ("glGetColorTableParameterivEXT", GlRetracer::ignore),
    ("glGetColorTableParameterfvEXT", GlRetracer::ignore),
    ("glPixelTransformParameteriEXT", GlRetracer::retrace_glPixelTransformParameteriEXT),
    ("glPixelTransformParameterfEXT", GlRetracer::retrace_glPixelTransformParameterfEXT),
    ("glPixelTransformParameterivEXT", GlRetracer::retrace_glPixelTransformParameterivEXT),
    ("glPixelTransformParameterfvEXT", GlRetracer::retrace_glPixelTransformParameterfvEXT),
    ("glGetPixelTransformParameterivEXT", GlRetracer::ignore),
    ("glGetPixelTransformParameterfvEXT", GlRetracer::ignore),
    ("glPointParameterfEXT", GlRetracer::retrace_glPointParameterfEXT),
    ("glPointParameterfvEXT", GlRetracer::retrace_glPointParameterfvEXT),
    ("glPolygonOffsetEXT", GlRetracer::retrace_glPolygonOffsetEXT),
    ("glPolygonOffsetClampEXT", GlRetracer::retrace_glPolygonOffsetClampEXT),
    ("glPrimitiveBoundingBoxEXT", GlRetracer::retrace_glPrimitiveBoundingBoxEXT),
    ("glProvokingVertexEXT", GlRetracer::retrace_glProvokingVertexEXT),
    ("glRasterSamplesEXT", GlRetracer::retrace_glRasterSamplesEXT),
    ("glGetGraphicsResetStatusEXT", GlRetracer::ignore),
    ("glReadnPixelsEXT", GlRetracer::retrace_glReadnPixelsEXT),
    ("glGetnUniformfvEXT", GlRetracer::ignore),
    ("glGetnUniformivEXT", GlRetracer::ignore),
    ("glSecondaryColor3bEXT", GlRetracer::retrace_glSecondaryColor3bEXT),
    ("glSecondaryColor3bvEXT", GlRetracer::retrace_glSecondaryColor3bvEXT),
    ("glSecondaryColor3dEXT", GlRetracer::retrace_glSecondaryColor3dEXT),
    ("glSecondaryColor3dvEXT", GlRetracer::retrace_glSecondaryColor3dvEXT),
    ("glSecondaryColor3fEXT", GlRetracer::retrace_glSecondaryColor3fEXT),
    ("glSecondaryColor3fvEXT", GlRetracer::retrace_glSecondaryColor3fvEXT),
    ("glSecondaryColor3iEXT", GlRetracer::retrace_glSecondaryColor3iEXT),
    ("glSecondaryColor3ivEXT", GlRetracer::retrace_glSecondaryColor3ivEXT),
    ("glSecondaryColor3sEXT", GlRetracer::retrace_glSecondaryColor3sEXT),
    ("glSecondaryColor3svEXT", GlRetracer::retrace_glSecondaryColor3svEXT),
    ("glSecondaryColor3ubEXT", GlRetracer::retrace_glSecondaryColor3ubEXT),
    ("glSecondaryColor3ubvEXT", GlRetracer::retrace_glSecondaryColor3ubvEXT),
    ("glSecondaryColor3uiEXT", GlRetracer::retrace_glSecondaryColor3uiEXT),
    ("glSecondaryColor3uivEXT", GlRetracer::retrace_glSecondaryColor3uivEXT),
    ("glSecondaryColor3usEXT", GlRetracer::retrace_glSecondaryColor3usEXT),
    ("glSecondaryColor3usvEXT", GlRetracer::retrace_glSecondaryColor3usvEXT),
    ("glSecondaryColorPointerEXT", GlRetracer::retrace_glSecondaryColorPointerEXT),
    ("glUseShaderProgramEXT", GlRetracer::retrace_glUseShaderProgramEXT),
    ("glActiveProgramEXT", GlRetracer::retrace_glActiveProgramEXT),
    ("glCreateShaderProgramEXT", GlRetracer::retrace_glCreateShaderProgramEXT),
    ("glActiveShaderProgramEXT", GlRetracer::retrace_glActiveShaderProgramEXT),
    ("glBindProgramPipelineEXT", GlRetracer::retrace_glBindProgramPipelineEXT),
    ("glCreateShaderProgramvEXT", GlRetracer::retrace_glCreateShaderProgramvEXT),
    ("glDeleteProgramPipelinesEXT", GlRetracer::retrace_glDeleteProgramPipelinesEXT),
    ("glGenProgramPipelinesEXT", GlRetracer::retrace_glGenProgramPipelinesEXT),
    ("glGetProgramPipelineInfoLogEXT", GlRetracer::ignore),
    ("glGetProgramPipelineivEXT", GlRetracer::ignore),
    ("glIsProgramPipelineEXT", GlRetracer::ignore),
    ("glUseProgramStagesEXT", GlRetracer::retrace_glUseProgramStagesEXT),
    ("glValidateProgramPipelineEXT", GlRetracer::retrace_glValidateProgramPipelineEXT),
    ("glBindImageTextureEXT", GlRetracer::retrace_glBindImageTextureEXT),
    ("glMemoryBarrierEXT", GlRetracer::retrace_glMemoryBarrierEXT),
    ("glFramebufferPixelLocalStorageSizeEXT", GlRetracer::retrace_glFramebufferPixelLocalStorageSizeEXT),
    ("glGetFramebufferPixelLocalStorageSizeEXT", GlRetracer::ignore),
    ("glClearPixelLocalStorageuiEXT", GlRetracer::retrace_glClearPixelLocalStorageuiEXT),
    ("glTexPageCommitmentEXT", GlRetracer::retrace_glTexPageCommitmentEXT),
    ("glStencilClearTagEXT", GlRetracer::retrace_glStencilClearTagEXT),
    ("glActiveStencilFaceEXT", GlRetracer::retrace_glActiveStencilFaceEXT),
    ("glTexSubImage1DEXT", GlRetracer::retrace_glTexSubImage1DEXT),
    ("glTexSubImage2DEXT", GlRetracer::retrace_glTexSubImage2DEXT),
    ("glPatchParameteriEXT", GlRetracer::retrace_glPatchParameteriEXT),
    ("glTexImage3DEXT", GlRetracer::retrace_glTexImage3DEXT),
    ("glTexSubImage3DEXT", GlRetracer::retrace_glTexSubImage3DEXT),
    ("glFramebufferTextureLayerEXT", GlRetracer::retrace_glFramebufferTextureLayerEXT),
    ("glTexParameterIivEXT", GlRetracer::retrace_glTexParameterIivEXT),
    ("glTexParameterIuivEXT", GlRetracer::retrace_glTexParameterIuivEXT),
    ("glGetTexParameterIivEXT", GlRetracer::ignore),
    ("glGetTexParameterIuivEXT", GlRetracer::ignore),
    ("glSamplerParameterIivEXT", GlRetracer::retrace_glSamplerParameterIivEXT),
    ("glSamplerParameterIuivEXT", GlRetracer::retrace_glSamplerParameterIuivEXT),
    ("glGetSamplerParameterIivEXT", GlRetracer::ignore),
    ("glGetSamplerParameterIuivEXT", GlRetracer::ignore),
    ("glTexBufferEXT", GlRetracer::retrace_glTexBufferEXT),
    ("glTexBufferRangeEXT", GlRetracer::retrace_glTexBufferRangeEXT),
    ("glClearColorIiEXT", GlRetracer::retrace_glClearColorIiEXT),
    ("glClearColorIuiEXT", GlRetracer::retrace_glClearColorIuiEXT),
    ("glAreTexturesResidentEXT", GlRetracer::ignore),
    ("glBindTextureEXT", GlRetracer::retrace_glBindTextureEXT),
    ("glDeleteTexturesEXT", GlRetracer::retrace_glDeleteTexturesEXT),
    ("glGenTexturesEXT", GlRetracer::retrace_glGenTexturesEXT),
    ("glIsTextureEXT", GlRetracer::ignore),
    ("glPrioritizeTexturesEXT", GlRetracer::retrace_glPrioritizeTexturesEXT),
    ("glTextureNormalEXT", GlRetracer::retrace_glTextureNormalEXT),
    ("glTexStorage1DEXT", GlRetracer::retrace_glTexStorage1DEXT),
    ("glTexStorage2DEXT", GlRetracer::retrace_glTexStorage2DEXT),
    ("glTexStorage3DEXT", GlRetracer::retrace_glTexStorage3DEXT),
    ("glTextureViewEXT", GlRetracer::retrace_glTextureViewEXT),
    ("glBeginTransformFeedbackEXT", GlRetracer::retrace_glBeginTransformFeedbackEXT),
    ("glEndTransformFeedbackEXT", GlRetracer::retrace_glEndTransformFeedbackEXT),
    ("glBindBufferRangeEXT", GlRetracer::retrace_glBindBufferRangeEXT),
    ("glBindBufferOffsetEXT", GlRetracer::retrace_glBindBufferOffsetEXT),
    ("glBindBufferBaseEXT", GlRetracer::retrace_glBindBufferBaseEXT),
    ("glTransformFeedbackVaryingsEXT", GlRetracer::retrace_glTransformFeedbackVaryingsEXT),
    ("glGetTransformFeedbackVaryingEXT", GlRetracer::ignore),
    ("glArrayElementEXT", GlRetracer::retrace_glArrayElementEXT),
    ("glColorPointerEXT", GlRetracer::retrace_glColorPointerEXT),
    ("glDrawArraysEXT", GlRetracer::retrace_glDrawArraysEXT),
    ("glEdgeFlagPointerEXT", GlRetracer::retrace_glEdgeFlagPointerEXT),
    ("glGetPointervEXT", GlRetracer::ignore),
    ("glIndexPointerEXT", GlRetracer::retrace_glIndexPointerEXT),
    ("glNormalPointerEXT", GlRetracer::retrace_glNormalPointerEXT),
    ("glTexCoordPointerEXT", GlRetracer::retrace_glTexCoordPointerEXT),
    ("glVertexPointerEXT", GlRetracer::retrace_glVertexPointerEXT),
    ("glVertexAttribL1dEXT", GlRetracer::retrace_glVertexAttribL1dEXT),
    ("glVertexAttribL2dEXT", GlRetracer::retrace_glVertexAttribL2dEXT),
    ("glVertexAttribL3dEXT", GlRetracer::retrace_glVertexAttribL3dEXT),
    ("glVertexAttribL4dEXT", GlRetracer::retrace_glVertexAttribL4dEXT),
    ("glVertexAttribL1dvEXT", GlRetracer::retrace_glVertexAttribL1dvEXT),
    ("glVertexAttribL2dvEXT", GlRetracer::retrace_glVertexAttribL2dvEXT),
    ("glVertexAttribL3dvEXT", GlRetracer::retrace_glVertexAttribL3dvEXT),
    ("glVertexAttribL4dvEXT", GlRetracer::retrace_glVertexAttribL4dvEXT),
    ("glVertexAttribLPointerEXT", GlRetracer::retrace_glVertexAttribLPointerEXT),
    ("glGetVertexAttribLdvEXT", GlRetracer::ignore),
    ("glBeginVertexShaderEXT", GlRetracer::retrace_glBeginVertexShaderEXT),
    ("glEndVertexShaderEXT", GlRetracer::retrace_glEndVertexShaderEXT),
    ("glBindVertexShaderEXT", GlRetracer::retrace_glBindVertexShaderEXT),
    ("glGenVertexShadersEXT", GlRetracer::retrace_glGenVertexShadersEXT),
    ("glDeleteVertexShaderEXT", GlRetracer::retrace_glDeleteVertexShaderEXT),
    ("glShaderOp1EXT", GlRetracer::retrace_glShaderOp1EXT),
    ("glShaderOp2EXT", GlRetracer::retrace_glShaderOp2EXT),
    ("glShaderOp3EXT", GlRetracer::retrace_glShaderOp3EXT),
    ("glSwizzleEXT", GlRetracer::retrace_glSwizzleEXT),
    ("glWriteMaskEXT", GlRetracer::retrace_glWriteMaskEXT),
    ("glInsertComponentEXT", GlRetracer::retrace_glInsertComponentEXT),
    ("glExtractComponentEXT", GlRetracer::retrace_glExtractComponentEXT),
    ("glGenSymbolsEXT", GlRetracer::retrace_glGenSymbolsEXT),
    ("glSetInvariantEXT", GlRetracer::retrace_glSetInvariantEXT),
    ("glSetLocalConstantEXT", GlRetracer::retrace_glSetLocalConstantEXT),
    ("glVariantbvEXT", GlRetracer::retrace_glVariantbvEXT),
    ("glVariantsvEXT", GlRetracer::retrace_glVariantsvEXT),
    ("glVariantivEXT", GlRetracer::retrace_glVariantivEXT),
    ("glVariantfvEXT", GlRetracer::retrace_glVariantfvEXT),
    ("glVariantdvEXT", GlRetracer::retrace_glVariantdvEXT),
    ("glVariantubvEXT", GlRetracer::retrace_glVariantubvEXT),
    ("glVariantusvEXT", GlRetracer::retrace_glVariantusvEXT),
    ("glVariantuivEXT", GlRetracer::retrace_glVariantuivEXT),
    ("glVariantPointerEXT", GlRetracer::retrace_glVariantPointerEXT),
    ("glEnableVariantClientStateEXT", GlRetracer::retrace_glEnableVariantClientStateEXT),
    ("glDisableVariantClientStateEXT", GlRetracer::retrace_glDisableVariantClientStateEXT),
    ("glBindLightParameterEXT", GlRetracer::retrace_glBindLightParameterEXT),
    ("glBindMaterialParameterEXT", GlRetracer::retrace_glBindMaterialParameterEXT),
    ("glBindTexGenParameterEXT", GlRetracer::retrace_glBindTexGenParameterEXT),
    ("glBindTextureUnitParameterEXT", GlRetracer::retrace_glBindTextureUnitParameterEXT),
    ("glBindParameterEXT", GlRetracer::retrace_glBindParameterEXT),
    ("glIsVariantEnabledEXT", GlRetracer::ignore),
    ("glGetVariantBooleanvEXT", GlRetracer::ignore),
    ("glGetVariantIntegervEXT", GlRetracer::ignore),
    ("glGetVariantFloatvEXT", GlRetracer::ignore),
    ("glGetVariantPointervEXT", GlRetracer::ignore),
    ("glGetInvariantBooleanvEXT", GlRetracer::ignore),
    ("glGetInvariantIntegervEXT", GlRetracer::ignore),
    ("glGetInvariantFloatvEXT", GlRetracer::ignore),
    ("glGetLocalConstantBooleanvEXT", GlRetracer::ignore),
    ("glGetLocalConstantIntegervEXT", GlRetracer::ignore),
    ("glGetLocalConstantFloatvEXT", GlRetracer::ignore),
    ("glVertexWeightfEXT", GlRetracer::retrace_glVertexWeightfEXT),
    ("glVertexWeightfvEXT", GlRetracer::retrace_glVertexWeightfvEXT),
    ("glVertexWeightPointerEXT", GlRetracer::retrace_glVertexWeightPointerEXT),
    ("glImportSyncEXT", GlRetracer::retrace_glImportSyncEXT),
    ("glFrameTerminatorGREMEDY", GlRetracer::retrace_glFrameTerminatorGREMEDY),
    ("glStringMarkerGREMEDY", GlRetracer::retrace_glStringMarkerGREMEDY),
    ("glImageTransformParameteriHP", GlRetracer::retrace_glImageTransformParameteriHP),
    ("glImageTransformParameterfHP", GlRetracer::retrace_glImageTransformParameterfHP),
    ("glImageTransformParameterivHP", GlRetracer::retrace_glImageTransformParameterivHP),
    ("glImageTransformParameterfvHP", GlRetracer::retrace_glImageTransformParameterfvHP),
    ("glGetImageTransformParameterivHP", GlRetracer::ignore),
    ("glGetImageTransformParameterfvHP", GlRetracer::ignore),
    ("glMultiModeDrawArraysIBM", GlRetracer::retrace_glMultiModeDrawArraysIBM),
    ("glMultiModeDrawElementsIBM", GlRetracer::retrace_glMultiModeDrawElementsIBM),
    ("glColorPointerListIBM", GlRetracer::retrace_glColorPointerListIBM),
    ("glSecondaryColorPointerListIBM", GlRetracer::retrace_glSecondaryColorPointerListIBM),
    ("glEdgeFlagPointerListIBM", GlRetracer::retrace_glEdgeFlagPointerListIBM),
    ("glFogCoordPointerListIBM", GlRetracer::retrace_glFogCoordPointerListIBM),
    ("glIndexPointerListIBM", GlRetracer::retrace_glIndexPointerListIBM),
    ("glNormalPointerListIBM", GlRetracer::retrace_glNormalPointerListIBM),
    ("glTexCoordPointerListIBM", GlRetracer::retrace_glTexCoordPointerListIBM),
    ("glVertexPointerListIBM", GlRetracer::retrace_glVertexPointerListIBM),
    ("glRenderbufferStorageMultisampleIMG", GlRetracer::retrace_glRenderbufferStorageMultisampleIMG),
    ("glFramebufferTexture2DMultisampleIMG", GlRetracer::retrace_glFramebufferTexture2DMultisampleIMG),
    ("glBlendFuncSeparateINGR", GlRetracer::retrace_glBlendFuncSeparateINGR),
    ("glSyncTextureINTEL", GlRetracer::retrace_glSyncTextureINTEL),
    ("glUnmapTexture2DINTEL", GlRetracer::retrace_glUnmapTexture2DINTEL),
    ("glMapTexture2DINTEL", GlRetracer::retrace_glMapTexture2DINTEL),
    ("glVertexPointervINTEL", GlRetracer::retrace_glVertexPointervINTEL),
    ("glNormalPointervINTEL", GlRetracer::retrace_glNormalPointervINTEL),
    ("glColorPointervINTEL", GlRetracer::retrace_glColorPointervINTEL),
    ("glTexCoordPointervINTEL", GlRetracer::retrace_glTexCoordPointervINTEL),
    ("glBeginPerfQueryINTEL", GlRetracer::ignore),
    ("glCreatePerfQueryINTEL", GlRetracer::ignore),
    ("glDeletePerfQueryINTEL", GlRetracer::ignore),
    ("glEndPerfQueryINTEL", GlRetracer::ignore),
    ("glGetFirstPerfQueryIdINTEL", GlRetracer::ignore),
    ("glGetNextPerfQueryIdINTEL", GlRetracer::ignore),
    ("glGetPerfCounterInfoINTEL", GlRetracer::ignore),
    ("glGetPerfQueryDataINTEL", GlRetracer::ignore),
    ("glGetPerfQueryIdByNameINTEL", GlRetracer::ignore),
    ("glGetPerfQueryInfoINTEL", GlRetracer::ignore),
    ("glBlendBarrierKHR", GlRetracer::retrace_glBlendBarrierKHR),
    ("glDebugMessageControl", GlRetracer::retrace_glDebugMessageControl),
    ("glDebugMessageInsert", GlRetracer::retrace_glDebugMessageInsert),
    ("glDebugMessageCallback", GlRetracer::ignore),
    ("glGetDebugMessageLog", GlRetracer::ignore),
    ("glPushDebugGroup", GlRetracer::retrace_glPushDebugGroup),
    ("glPopDebugGroup", GlRetracer::retrace_glPopDebugGroup),
    ("glObjectLabel", GlRetracer::retrace_glObjectLabel),
    ("glGetObjectLabel", GlRetracer::ignore),
    ("glObjectPtrLabel", GlRetracer::retrace_glObjectPtrLabel),
    ("glGetObjectPtrLabel", GlRetracer::ignore),
    ("glDebugMessageControlKHR", GlRetracer::retrace_glDebugMessageControlKHR),
    ("glDebugMessageInsertKHR", GlRetracer::retrace_glDebugMessageInsertKHR),
    ("glDebugMessageCallbackKHR", GlRetracer::ignore),
    ("glGetDebugMessageLogKHR", GlRetracer::ignore),
    ("glPushDebugGroupKHR", GlRetracer::retrace_glPushDebugGroupKHR),
    ("glPopDebugGroupKHR", GlRetracer::retrace_glPopDebugGroupKHR),
    ("glObjectLabelKHR", GlRetracer::retrace_glObjectLabelKHR),
    ("glGetObjectLabelKHR", GlRetracer::ignore),
    ("glObjectPtrLabelKHR", GlRetracer::retrace_glObjectPtrLabelKHR),
    ("glGetObjectPtrLabelKHR", GlRetracer::ignore),
    ("glGetPointervKHR", GlRetracer::ignore),
    ("glGetGraphicsResetStatus", GlRetracer::ignore),
    ("glReadnPixels", GlRetracer::retrace_glReadnPixels),
    ("glGetnUniformfv", GlRetracer::ignore),
    ("glGetnUniformiv", GlRetracer::ignore),
    ("glGetnUniformuiv", GlRetracer::ignore),
    ("glGetGraphicsResetStatusKHR", GlRetracer::ignore),
    ("glReadnPixelsKHR", GlRetracer::retrace_glReadnPixelsKHR),
    ("glGetnUniformfvKHR", GlRetracer::ignore),
    ("glGetnUniformivKHR", GlRetracer::ignore),
    ("glGetnUniformuivKHR", GlRetracer::ignore),
    ("glNewBufferRegion", GlRetracer::retrace_glNewBufferRegion),
    ("glDeleteBufferRegion", GlRetracer::retrace_glDeleteBufferRegion),
    ("glReadBufferRegion", GlRetracer::retrace_glReadBufferRegion),
    ("glDrawBufferRegion", GlRetracer::retrace_glDrawBufferRegion),
    ("glBufferRegionEnabled", GlRetracer::ignore),
    ("glResizeBuffersMESA", GlRetracer::retrace_glResizeBuffersMESA),
    ("glWindowPos2dMESA", GlRetracer::retrace_glWindowPos2dMESA),
    ("glWindowPos2dvMESA", GlRetracer::retrace_glWindowPos2dvMESA),
    ("glWindowPos2fMESA", GlRetracer::retrace_glWindowPos2fMESA),
    ("glWindowPos2fvMESA", GlRetracer::retrace_glWindowPos2fvMESA),
    ("glWindowPos2iMESA", GlRetracer::retrace_glWindowPos2iMESA),
    ("glWindowPos2ivMESA", GlRetracer::retrace_glWindowPos2ivMESA),
    ("glWindowPos2sMESA", GlRetracer::retrace_glWindowPos2sMESA),
    ("glWindowPos2svMESA", GlRetracer::retrace_glWindowPos2svMESA),
    ("glWindowPos3dMESA", GlRetracer::retrace_glWindowPos3dMESA),
    ("glWindowPos3dvMESA", GlRetracer::retrace_glWindowPos3dvMESA),
    ("glWindowPos3fMESA", GlRetracer::retrace_glWindowPos3fMESA),
    ("glWindowPos3fvMESA", GlRetracer::retrace_glWindowPos3fvMESA),
    ("glWindowPos3iMESA", GlRetracer::retrace_glWindowPos3iMESA),
    ("glWindowPos3ivMESA", GlRetracer::retrace_glWindowPos3ivMESA),
    ("glWindowPos3sMESA", GlRetracer::retrace_glWindowPos3sMESA),
    ("glWindowPos3svMESA", GlRetracer::retrace_glWindowPos3svMESA),
    ("glWindowPos4dMESA", GlRetracer::retrace_glWindowPos4dMESA),
    ("glWindowPos4dvMESA", GlRetracer::retrace_glWindowPos4dvMESA),
    ("glWindowPos4fMESA", GlRetracer::retrace_glWindowPos4fMESA),
    ("glWindowPos4fvMESA", GlRetracer::retrace_glWindowPos4fvMESA),
    ("glWindowPos4iMESA", GlRetracer::retrace_glWindowPos4iMESA),
    ("glWindowPos4ivMESA", GlRetracer::retrace_glWindowPos4ivMESA),
    ("glWindowPos4sMESA", GlRetracer::retrace_glWindowPos4sMESA),
    ("glWindowPos4svMESA", GlRetracer::retrace_glWindowPos4svMESA),
    ("glBeginConditionalRenderNVX", GlRetracer::retrace_glBeginConditionalRenderNVX),
    ("glEndConditionalRenderNVX", GlRetracer::retrace_glEndConditionalRenderNVX),
    ("glMultiDrawArraysIndirectBindlessNV", GlRetracer::retrace_glMultiDrawArraysIndirectBindlessNV),
    ("glMultiDrawElementsIndirectBindlessNV", GlRetracer::retrace_glMultiDrawElementsIndirectBindlessNV),
    ("glGetTextureHandleNV", GlRetracer::retrace_glGetTextureHandleNV),
    ("glGetTextureSamplerHandleNV", GlRetracer::retrace_glGetTextureSamplerHandleNV),
    ("glMakeTextureHandleResidentNV", GlRetracer::retrace_glMakeTextureHandleResidentNV),
    ("glMakeTextureHandleNonResidentNV", GlRetracer::retrace_glMakeTextureHandleNonResidentNV),
    ("glGetImageHandleNV", GlRetracer::retrace_glGetImageHandleNV),
    ("glMakeImageHandleResidentNV", GlRetracer::retrace_glMakeImageHandleResidentNV),
    ("glMakeImageHandleNonResidentNV", GlRetracer::retrace_glMakeImageHandleNonResidentNV),
    ("glUniformHandleui64NV", GlRetracer::retrace_glUniformHandleui64NV),
    ("glUniformHandleui64vNV", GlRetracer::retrace_glUniformHandleui64vNV),
    ("glProgramUniformHandleui64NV", GlRetracer::retrace_glProgramUniformHandleui64NV),
    ("glProgramUniformHandleui64vNV", GlRetracer::retrace_glProgramUniformHandleui64vNV),
    ("glIsTextureHandleResidentNV", GlRetracer::ignore),
    ("glIsImageHandleResidentNV", GlRetracer::ignore),
    ("glBlendParameteriNV", GlRetracer::retrace_glBlendParameteriNV),
    ("glBlendBarrierNV", GlRetracer::retrace_glBlendBarrierNV),
    ("glBeginConditionalRenderNV", GlRetracer::retrace_glBeginConditionalRenderNV),
    ("glEndConditionalRenderNV", GlRetracer::retrace_glEndConditionalRenderNV),
    ("glCopyImageSubDataNV", GlRetracer::retrace_glCopyImageSubDataNV),
    ("glCoverageMaskNV", GlRetracer::retrace_glCoverageMaskNV),
    ("glCoverageOperationNV", GlRetracer::retrace_glCoverageOperationNV),
    ("glDepthRangedNV", GlRetracer::retrace_glDepthRangedNV),
    ("glClearDepthdNV", GlRetracer::retrace_glClearDepthdNV),
    ("glDepthBoundsdNV", GlRetracer::retrace_glDepthBoundsdNV),
    ("glDrawBuffersNV", GlRetracer::retrace_glDrawBuffersNV),
    ("glDrawTextureNV", GlRetracer::retrace_glDrawTextureNV),
    ("glMapControlPointsNV", GlRetracer::retrace_glMapControlPointsNV),
    ("glMapParameterivNV", GlRetracer::retrace_glMapParameterivNV),
    ("glMapParameterfvNV", GlRetracer::retrace_glMapParameterfvNV),
    ("glGetMapControlPointsNV", GlRetracer::ignore),
    ("glGetMapParameterivNV", GlRetracer::ignore),
    ("glGetMapParameterfvNV", GlRetracer::ignore),
    ("glGetMapAttribParameterivNV", GlRetracer::ignore),
    ("glGetMapAttribParameterfvNV", GlRetracer::ignore),
    ("glEvalMapsNV", GlRetracer::retrace_glEvalMapsNV),
    ("glGetMultisamplefvNV", GlRetracer::ignore),
    ("glSampleMaskIndexedNV", GlRetracer::retrace_glSampleMaskIndexedNV),
    ("glTexRenderbufferNV", GlRetracer::retrace_glTexRenderbufferNV),
    ("glDeleteFencesNV", GlRetracer::retrace_glDeleteFencesNV),
    ("glGenFencesNV", GlRetracer::retrace_glGenFencesNV),
    ("glIsFenceNV", GlRetracer::ignore),
    ("glTestFenceNV", GlRetracer::retrace_glTestFenceNV),
    ("glGetFenceivNV", GlRetracer::ignore),
    ("glFinishFenceNV", GlRetracer::retrace_glFinishFenceNV),
    ("glSetFenceNV", GlRetracer::retrace_glSetFenceNV),
    ("glProgramNamedParameter4fNV", GlRetracer::retrace_glProgramNamedParameter4fNV),
    ("glProgramNamedParameter4dNV", GlRetracer::retrace_glProgramNamedParameter4dNV),
    ("glProgramNamedParameter4fvNV", GlRetracer::retrace_glProgramNamedParameter4fvNV),
    ("glProgramNamedParameter4dvNV", GlRetracer::retrace_glProgramNamedParameter4dvNV),
    ("glGetProgramNamedParameterdvNV", GlRetracer::ignore),
    ("glGetProgramNamedParameterfvNV", GlRetracer::ignore),
    ("glBlitFramebufferNV", GlRetracer::retrace_glBlitFramebufferNV),
    ("glCoverageModulationTableNV", GlRetracer::retrace_glCoverageModulationTableNV),
    ("glGetCoverageModulationTableNV", GlRetracer::ignore),
    ("glCoverageModulationNV", GlRetracer::retrace_glCoverageModulationNV),
    ("glRenderbufferStorageMultisampleCoverageNV", GlRetracer::retrace_glRenderbufferStorageMultisampleCoverageNV),
    ("glProgramVertexLimitNV", GlRetracer::retrace_glProgramVertexLimitNV),
    ("glFramebufferTextureFaceEXT", GlRetracer::retrace_glFramebufferTextureFaceEXT),
    ("glProgramLocalParameterI4iNV", GlRetracer::retrace_glProgramLocalParameterI4iNV),
    ("glProgramLocalParameterI4ivNV", GlRetracer::retrace_glProgramLocalParameterI4ivNV),
    ("glProgramLocalParametersI4ivNV", GlRetracer::retrace_glProgramLocalParametersI4ivNV),
    ("glProgramLocalParameterI4uiNV", GlRetracer::retrace_glProgramLocalParameterI4uiNV),
    ("glProgramLocalParameterI4uivNV", GlRetracer::retrace_glProgramLocalParameterI4uivNV),
    ("glProgramLocalParametersI4uivNV", GlRetracer::retrace_glProgramLocalParametersI4uivNV),
    ("glProgramEnvParameterI4iNV", GlRetracer::retrace_glProgramEnvParameterI4iNV),
    ("glProgramEnvParameterI4ivNV", GlRetracer::retrace_glProgramEnvParameterI4ivNV),
    ("glProgramEnvParametersI4ivNV", GlRetracer::retrace_glProgramEnvParametersI4ivNV),
    ("glProgramEnvParameterI4uiNV", GlRetracer::retrace_glProgramEnvParameterI4uiNV),
    ("glProgramEnvParameterI4uivNV", GlRetracer::retrace_glProgramEnvParameterI4uivNV),
    ("glProgramEnvParametersI4uivNV", GlRetracer::retrace_glProgramEnvParametersI4uivNV),
    ("glGetProgramLocalParameterIivNV", GlRetracer::ignore),
    ("glGetProgramLocalParameterIuivNV", GlRetracer::ignore),
    ("glGetProgramEnvParameterIivNV", GlRetracer::ignore),
    ("glGetProgramEnvParameterIuivNV", GlRetracer::ignore),
    ("glProgramSubroutineParametersuivNV", GlRetracer::retrace_glProgramSubroutineParametersuivNV),
    ("glGetProgramSubroutineParameteruivNV", GlRetracer::ignore),
    ("glUniform1i64NV", GlRetracer::retrace_glUniform1i64NV),
    ("glUniform2i64NV", GlRetracer::retrace_glUniform2i64NV),
    ("glUniform3i64NV", GlRetracer::retrace_glUniform3i64NV),
    ("glUniform4i64NV", GlRetracer::retrace_glUniform4i64NV),
    ("glUniform1i64vNV", GlRetracer::retrace_glUniform1i64vNV),
    ("glUniform2i64vNV", GlRetracer::retrace_glUniform2i64vNV),
    ("glUniform3i64vNV", GlRetracer::retrace_glUniform3i64vNV),
    ("glUniform4i64vNV", GlRetracer::retrace_glUniform4i64vNV),
    ("glUniform1ui64NV", GlRetracer::retrace_glUniform1ui64NV),
    ("glUniform2ui64NV", GlRetracer::retrace_glUniform2ui64NV),
    ("glUniform3ui64NV", GlRetracer::retrace_glUniform3ui64NV),
    ("glUniform4ui64NV", GlRetracer::retrace_glUniform4ui64NV),
    ("glUniform1ui64vNV", GlRetracer::retrace_glUniform1ui64vNV),
    ("glUniform2ui64vNV", GlRetracer::retrace_glUniform2ui64vNV),
    ("glUniform3ui64vNV", GlRetracer::retrace_glUniform3ui64vNV),
    ("glUniform4ui64vNV", GlRetracer::retrace_glUniform4ui64vNV),
    ("glGetUniformi64vNV", GlRetracer::ignore),
    ("glProgramUniform1i64NV", GlRetracer::retrace_glProgramUniform1i64NV),
    ("glProgramUniform2i64NV", GlRetracer::retrace_glProgramUniform2i64NV),
    ("glProgramUniform3i64NV", GlRetracer::retrace_glProgramUniform3i64NV),
    ("glProgramUniform4i64NV", GlRetracer::retrace_glProgramUniform4i64NV),
    ("glProgramUniform1i64vNV", GlRetracer::retrace_glProgramUniform1i64vNV),
    ("glProgramUniform2i64vNV", GlRetracer::retrace_glProgramUniform2i64vNV),
    ("glProgramUniform3i64vNV", GlRetracer::retrace_glProgramUniform3i64vNV),
    ("glProgramUniform4i64vNV", GlRetracer::retrace_glProgramUniform4i64vNV),
    ("glProgramUniform1ui64NV", GlRetracer::retrace_glProgramUniform1ui64NV),
    ("glProgramUniform2ui64NV", GlRetracer::retrace_glProgramUniform2ui64NV),
    ("glProgramUniform3ui64NV", GlRetracer::retrace_glProgramUniform3ui64NV),
    ("glProgramUniform4ui64NV", GlRetracer::retrace_glProgramUniform4ui64NV),
    ("glProgramUniform1ui64vNV", GlRetracer::retrace_glProgramUniform1ui64vNV),
    ("glProgramUniform2ui64vNV", GlRetracer::retrace_glProgramUniform2ui64vNV),
    ("glProgramUniform3ui64vNV", GlRetracer::retrace_glProgramUniform3ui64vNV),
    ("glProgramUniform4ui64vNV", GlRetracer::retrace_glProgramUniform4ui64vNV),
    ("glVertex2hNV", GlRetracer::retrace_glVertex2hNV),
    ("glVertex2hvNV", GlRetracer::retrace_glVertex2hvNV),
    ("glVertex3hNV", GlRetracer::retrace_glVertex3hNV),
    ("glVertex3hvNV", GlRetracer::retrace_glVertex3hvNV),
    ("glVertex4hNV", GlRetracer::retrace_glVertex4hNV),
    ("glVertex4hvNV", GlRetracer::retrace_glVertex4hvNV),
    ("glNormal3hNV", GlRetracer::retrace_glNormal3hNV),
    ("glNormal3hvNV", GlRetracer::retrace_glNormal3hvNV),
    ("glColor3hNV", GlRetracer::retrace_glColor3hNV),
    ("glColor3hvNV", GlRetracer::retrace_glColor3hvNV),
    ("glColor4hNV", GlRetracer::retrace_glColor4hNV),
    ("glColor4hvNV", GlRetracer::retrace_glColor4hvNV),
    ("glTexCoord1hNV", GlRetracer::retrace_glTexCoord1hNV),
    ("glTexCoord1hvNV", GlRetracer::retrace_glTexCoord1hvNV),
    ("glTexCoord2hNV", GlRetracer::retrace_glTexCoord2hNV),
    ("glTexCoord2hvNV", GlRetracer::retrace_glTexCoord2hvNV),
    ("glTexCoord3hNV", GlRetracer::retrace_glTexCoord3hNV),
    ("glTexCoord3hvNV", GlRetracer::retrace_glTexCoord3hvNV),
    ("glTexCoord4hNV", GlRetracer::retrace_glTexCoord4hNV),
    ("glTexCoord4hvNV", GlRetracer::retrace_glTexCoord4hvNV),
    ("glMultiTexCoord1hNV", GlRetracer::retrace_glMultiTexCoord1hNV),
    ("glMultiTexCoord1hvNV", GlRetracer::retrace_glMultiTexCoord1hvNV),
    ("glMultiTexCoord2hNV", GlRetracer::retrace_glMultiTexCoord2hNV),
    ("glMultiTexCoord2hvNV", GlRetracer::retrace_glMultiTexCoord2hvNV),
    ("glMultiTexCoord3hNV", GlRetracer::retrace_glMultiTexCoord3hNV),
    ("glMultiTexCoord3hvNV", GlRetracer::retrace_glMultiTexCoord3hvNV),
    ("glMultiTexCoord4hNV", GlRetracer::retrace_glMultiTexCoord4hNV),
    ("glMultiTexCoord4hvNV", GlRetracer::retrace_glMultiTexCoord4hvNV),
    ("glFogCoordhNV", GlRetracer::retrace_glFogCoordhNV),
    ("glFogCoordhvNV", GlRetracer::retrace_glFogCoordhvNV),
    ("glSecondaryColor3hNV", GlRetracer::retrace_glSecondaryColor3hNV),
    ("glSecondaryColor3hvNV", GlRetracer::retrace_glSecondaryColor3hvNV),
    ("glVertexWeighthNV", GlRetracer::retrace_glVertexWeighthNV),
    ("glVertexWeighthvNV", GlRetracer::retrace_glVertexWeighthvNV),
    ("glVertexAttrib1hNV", GlRetracer::retrace_glVertexAttrib1hNV),
    ("glVertexAttrib1hvNV", GlRetracer::retrace_glVertexAttrib1hvNV),
    ("glVertexAttrib2hNV", GlRetracer::retrace_glVertexAttrib2hNV),
    ("glVertexAttrib2hvNV", GlRetracer::retrace_glVertexAttrib2hvNV),
    ("glVertexAttrib3hNV", GlRetracer::retrace_glVertexAttrib3hNV),
    ("glVertexAttrib3hvNV", GlRetracer::retrace_glVertexAttrib3hvNV),
    ("glVertexAttrib4hNV", GlRetracer::retrace_glVertexAttrib4hNV),
    ("glVertexAttrib4hvNV", GlRetracer::retrace_glVertexAttrib4hvNV),
    ("glVertexAttribs1hvNV", GlRetracer::retrace_glVertexAttribs1hvNV),
    ("glVertexAttribs2hvNV", GlRetracer::retrace_glVertexAttribs2hvNV),
    ("glVertexAttribs3hvNV", GlRetracer::retrace_glVertexAttribs3hvNV),
    ("glVertexAttribs4hvNV", GlRetracer::retrace_glVertexAttribs4hvNV),
    ("glGenOcclusionQueriesNV", GlRetracer::retrace_glGenOcclusionQueriesNV),
    ("glDeleteOcclusionQueriesNV", GlRetracer::retrace_glDeleteOcclusionQueriesNV),
    ("glIsOcclusionQueryNV", GlRetracer::ignore),
    ("glBeginOcclusionQueryNV", GlRetracer::retrace_glBeginOcclusionQueryNV),
    ("glEndOcclusionQueryNV", GlRetracer::retrace_glEndOcclusionQueryNV),
    ("glGetOcclusionQueryivNV", GlRetracer::ignore),
    ("glGetOcclusionQueryuivNV", GlRetracer::ignore),
    ("glProgramBufferParametersfvNV", GlRetracer::retrace_glProgramBufferParametersfvNV),
    ("glProgramBufferParametersIivNV", GlRetracer::retrace_glProgramBufferParametersIivNV),
    ("glProgramBufferParametersIuivNV", GlRetracer::retrace_glProgramBufferParametersIuivNV),
    ("glGenPathsNV", GlRetracer::retrace_glGenPathsNV),
    ("glDeletePathsNV", GlRetracer::retrace_glDeletePathsNV),
    ("glIsPathNV", GlRetracer::retrace_glIsPathNV),
    ("glPathCommandsNV", GlRetracer::retrace_glPathCommandsNV),
    ("glPathCoordsNV", GlRetracer::retrace_glPathCoordsNV),
    ("glPathSubCommandsNV", GlRetracer::retrace_glPathSubCommandsNV),
    ("glPathSubCoordsNV", GlRetracer::retrace_glPathSubCoordsNV),
    ("glPathStringNV", GlRetracer::retrace_glPathStringNV),
    ("glPathGlyphsNV", GlRetracer::retrace_glPathGlyphsNV),
    ("glPathGlyphRangeNV", GlRetracer::retrace_glPathGlyphRangeNV),
    ("glWeightPathsNV", GlRetracer::retrace_glWeightPathsNV),
    ("glCopyPathNV", GlRetracer::retrace_glCopyPathNV),
    ("glInterpolatePathsNV", GlRetracer::retrace_glInterpolatePathsNV),
    ("glTransformPathNV", GlRetracer::retrace_glTransformPathNV),
    ("glPathParameterivNV", GlRetracer::retrace_glPathParameterivNV),
    ("glPathParameteriNV", GlRetracer::retrace_glPathParameteriNV),
    ("glPathParameterfvNV", GlRetracer::retrace_glPathParameterfvNV),
    ("glPathParameterfNV", GlRetracer::retrace_glPathParameterfNV),
    ("glPathDashArrayNV", GlRetracer::retrace_glPathDashArrayNV),
    ("glPathStencilFuncNV", GlRetracer::retrace_glPathStencilFuncNV),
    ("glPathStencilDepthOffsetNV", GlRetracer::retrace_glPathStencilDepthOffsetNV),
    ("glStencilFillPathNV", GlRetracer::retrace_glStencilFillPathNV),
    ("glStencilStrokePathNV", GlRetracer::retrace_glStencilStrokePathNV),
    ("glStencilFillPathInstancedNV", GlRetracer::retrace_glStencilFillPathInstancedNV),
    ("glStencilStrokePathInstancedNV", GlRetracer::retrace_glStencilStrokePathInstancedNV),
    ("glPathCoverDepthFuncNV", GlRetracer::retrace_glPathCoverDepthFuncNV),
    ("glPathColorGenNV", GlRetracer::retrace_glPathColorGenNV),
    ("glPathTexGenNV", GlRetracer::retrace_glPathTexGenNV),
    ("glPathFogGenNV", GlRetracer::retrace_glPathFogGenNV),
    ("glCoverFillPathNV", GlRetracer::retrace_glCoverFillPathNV),
    ("glCoverStrokePathNV", GlRetracer::retrace_glCoverStrokePathNV),
    ("glCoverFillPathInstancedNV", GlRetracer::retrace_glCoverFillPathInstancedNV),
    ("glCoverStrokePathInstancedNV", GlRetracer::retrace_glCoverStrokePathInstancedNV),
    ("glGetPathParameterivNV", GlRetracer::ignore),
    ("glGetPathParameterfvNV", GlRetracer::ignore),
    ("glGetPathCommandsNV", GlRetracer::ignore),
    ("glGetPathCoordsNV", GlRetracer::ignore),
    ("glGetPathDashArrayNV", GlRetracer::ignore),
    ("glGetPathMetricsNV", GlRetracer::ignore),
    ("glGetPathMetricRangeNV", GlRetracer::ignore),
    ("glGetPathSpacingNV", GlRetracer::retrace_glGetPathSpacingNV),
    ("glGetPathColorGenivNV", GlRetracer::ignore),
    ("glGetPathColorGenfvNV", GlRetracer::ignore),
    ("glGetPathTexGenivNV", GlRetracer::ignore),
    ("glGetPathTexGenfvNV", GlRetracer::ignore),
    ("glIsPointInFillPathNV", GlRetracer::ignore),
    ("glIsPointInStrokePathNV", GlRetracer::ignore),
    ("glGetPathLengthNV", GlRetracer::retrace_glGetPathLengthNV),
    ("glPointAlongPathNV", GlRetracer::ignore),
    ("glMatrixLoad3x2fNV", GlRetracer::retrace_glMatrixLoad3x2fNV),
    ("glMatrixLoad3x3fNV", GlRetracer::retrace_glMatrixLoad3x3fNV),
    ("glMatrixLoadTranspose3x3fNV", GlRetracer::retrace_glMatrixLoadTranspose3x3fNV),
    ("glMatrixMult3x2fNV", GlRetracer::retrace_glMatrixMult3x2fNV),
    ("glMatrixMult3x3fNV", GlRetracer::retrace_glMatrixMult3x3fNV),
    ("glMatrixMultTranspose3x3fNV", GlRetracer::retrace_glMatrixMultTranspose3x3fNV),
    ("glStencilThenCoverFillPathNV", GlRetracer::retrace_glStencilThenCoverFillPathNV),
    ("glStencilThenCoverStrokePathNV", GlRetracer::retrace_glStencilThenCoverStrokePathNV),
    ("glStencilThenCoverFillPathInstancedNV", GlRetracer::retrace_glStencilThenCoverFillPathInstancedNV),
    ("glStencilThenCoverStrokePathInstancedNV", GlRetracer::retrace_glStencilThenCoverStrokePathInstancedNV),
    ("glPathGlyphIndexRangeNV", GlRetracer::retrace_glPathGlyphIndexRangeNV),
    ("glPathGlyphIndexArrayNV", GlRetracer::retrace_glPathGlyphIndexArrayNV),
    ("glPathMemoryGlyphIndexArrayNV", GlRetracer::retrace_glPathMemoryGlyphIndexArrayNV),
    ("glProgramPathFragmentInputGenNV", GlRetracer::retrace_glProgramPathFragmentInputGenNV),
    ("glGetProgramResourcefvNV", GlRetracer::ignore),
    ("glPixelDataRangeNV", GlRetracer::retrace_glPixelDataRangeNV),
    ("glFlushPixelDataRangeNV", GlRetracer::retrace_glFlushPixelDataRangeNV),
    ("glPointParameteriNV", GlRetracer::retrace_glPointParameteriNV),
    ("glPointParameterivNV", GlRetracer::retrace_glPointParameterivNV),
    ("glPresentFrameKeyedNV", GlRetracer::retrace_glPresentFrameKeyedNV),
    ("glPresentFrameDualFillNV", GlRetracer::retrace_glPresentFrameDualFillNV),
    ("glGetVideoivNV", GlRetracer::ignore),
    ("glGetVideouivNV", GlRetracer::ignore),
    ("glGetVideoi64vNV", GlRetracer::ignore),
    ("glGetVideoui64vNV", GlRetracer::ignore),
    ("glPrimitiveRestartNV", GlRetracer::retrace_glPrimitiveRestartNV),
    ("glPrimitiveRestartIndexNV", GlRetracer::retrace_glPrimitiveRestartIndexNV),
    ("glReadBufferNV", GlRetracer::retrace_glReadBufferNV),
    ("glCombinerParameterfvNV", GlRetracer::retrace_glCombinerParameterfvNV),
    ("glCombinerParameterfNV", GlRetracer::retrace_glCombinerParameterfNV),
    ("glCombinerParameterivNV", GlRetracer::retrace_glCombinerParameterivNV),
    ("glCombinerParameteriNV", GlRetracer::retrace_glCombinerParameteriNV),
    ("glCombinerInputNV", GlRetracer::retrace_glCombinerInputNV),
    ("glCombinerOutputNV", GlRetracer::retrace_glCombinerOutputNV),
    ("glFinalCombinerInputNV", GlRetracer::retrace_glFinalCombinerInputNV),
    ("glGetCombinerInputParameterfvNV", GlRetracer::ignore),
    ("glGetCombinerInputParameterivNV", GlRetracer::ignore),
    ("glGetCombinerOutputParameterfvNV", GlRetracer::ignore),
    ("glGetCombinerOutputParameterivNV", GlRetracer::ignore),
    ("glGetFinalCombinerInputParameterfvNV", GlRetracer::ignore),
    ("glGetFinalCombinerInputParameterivNV", GlRetracer::ignore),
    ("glCombinerStageParameterfvNV", GlRetracer::retrace_glCombinerStageParameterfvNV),
    ("glGetCombinerStageParameterfvNV", GlRetracer::ignore),
    ("glMakeBufferResidentNV", GlRetracer::retrace_glMakeBufferResidentNV),
    ("glMakeBufferNonResidentNV", GlRetracer::retrace_glMakeBufferNonResidentNV),
    ("glIsBufferResidentNV", GlRetracer::ignore),
    ("glMakeNamedBufferResidentNV", GlRetracer::retrace_glMakeNamedBufferResidentNV),
    ("glMakeNamedBufferNonResidentNV", GlRetracer::retrace_glMakeNamedBufferNonResidentNV),
    ("glIsNamedBufferResidentNV", GlRetracer::ignore),
    ("glGetBufferParameterui64vNV", GlRetracer::ignore),
    ("glGetNamedBufferParameterui64vNV", GlRetracer::ignore),
    ("glGetIntegerui64vNV", GlRetracer::ignore),
    ("glUniformui64NV", GlRetracer::retrace_glUniformui64NV),
    ("glUniformui64vNV", GlRetracer::retrace_glUniformui64vNV),
    ("glGetUniformui64vNV", GlRetracer::ignore),
    ("glProgramUniformui64NV", GlRetracer::retrace_glProgramUniformui64NV),
    ("glProgramUniformui64vNV", GlRetracer::retrace_glProgramUniformui64vNV),
    ("glTextureBarrierNV", GlRetracer::retrace_glTextureBarrierNV),
    ("glTexImage2DMultisampleCoverageNV", GlRetracer::retrace_glTexImage2DMultisampleCoverageNV),
    ("glTexImage3DMultisampleCoverageNV", GlRetracer::retrace_glTexImage3DMultisampleCoverageNV),
    ("glTextureImage2DMultisampleNV", GlRetracer::retrace_glTextureImage2DMultisampleNV),
    ("glTextureImage3DMultisampleNV", GlRetracer::retrace_glTextureImage3DMultisampleNV),
    ("glTextureImage2DMultisampleCoverageNV", GlRetracer::retrace_glTextureImage2DMultisampleCoverageNV),
    ("glTextureImage3DMultisampleCoverageNV", GlRetracer::retrace_glTextureImage3DMultisampleCoverageNV),
    ("glBeginTransformFeedbackNV", GlRetracer::retrace_glBeginTransformFeedbackNV),
    ("glEndTransformFeedbackNV", GlRetracer::retrace_glEndTransformFeedbackNV),
    ("glTransformFeedbackAttribsNV", GlRetracer::retrace_glTransformFeedbackAttribsNV),
    ("glBindBufferRangeNV", GlRetracer::retrace_glBindBufferRangeNV),
    ("glBindBufferOffsetNV", GlRetracer::retrace_glBindBufferOffsetNV),
    ("glBindBufferBaseNV", GlRetracer::retrace_glBindBufferBaseNV),
    ("glTransformFeedbackVaryingsNV", GlRetracer::retrace_glTransformFeedbackVaryingsNV),
    ("glActiveVaryingNV", GlRetracer::retrace_glActiveVaryingNV),
    ("glGetVaryingLocationNV", GlRetracer::retrace_glGetVaryingLocationNV),
    ("glGetActiveVaryingNV", GlRetracer::ignore),
    ("glGetTransformFeedbackVaryingNV", GlRetracer::ignore),
    ("glTransformFeedbackStreamAttribsNV", GlRetracer::retrace_glTransformFeedbackStreamAttribsNV),
    ("glBindTransformFeedbackNV", GlRetracer::retrace_glBindTransformFeedbackNV),
    ("glDeleteTransformFeedbacksNV", GlRetracer::retrace_glDeleteTransformFeedbacksNV),
    ("glGenTransformFeedbacksNV", GlRetracer::retrace_glGenTransformFeedbacksNV),
    ("glIsTransformFeedbackNV", GlRetracer::ignore),
    ("glPauseTransformFeedbackNV", GlRetracer::retrace_glPauseTransformFeedbackNV),
    ("glResumeTransformFeedbackNV", GlRetracer::retrace_glResumeTransformFeedbackNV),
    ("glDrawTransformFeedbackNV", GlRetracer::retrace_glDrawTransformFeedbackNV),
    ("glVDPAUInitNV", GlRetracer::retrace_glVDPAUInitNV),
    ("glVDPAUFiniNV", GlRetracer::retrace_glVDPAUFiniNV),
    ("glVDPAURegisterVideoSurfaceNV", GlRetracer::retrace_glVDPAURegisterVideoSurfaceNV),
    ("glVDPAURegisterOutputSurfaceNV", GlRetracer::retrace_glVDPAURegisterOutputSurfaceNV),
    ("glVDPAUIsSurfaceNV", GlRetracer::ignore),
    ("glVDPAUUnregisterSurfaceNV", GlRetracer::retrace_glVDPAUUnregisterSurfaceNV),
    ("glVDPAUGetSurfaceivNV", GlRetracer::retrace_glVDPAUGetSurfaceivNV),
    ("glVDPAUSurfaceAccessNV", GlRetracer::retrace_glVDPAUSurfaceAccessNV),
    ("glVDPAUMapSurfacesNV", GlRetracer::retrace_glVDPAUMapSurfacesNV),
    ("glVDPAUUnmapSurfacesNV", GlRetracer::retrace_glVDPAUUnmapSurfacesNV),
    ("glFlushVertexArrayRangeNV", GlRetracer::retrace_glFlushVertexArrayRangeNV),
    ("glVertexArrayRangeNV", GlRetracer::retrace_glVertexArrayRangeNV),
    ("glVertexAttribL1i64NV", GlRetracer::retrace_glVertexAttribL1i64NV),
    ("glVertexAttribL2i64NV", GlRetracer::retrace_glVertexAttribL2i64NV),
    ("glVertexAttribL3i64NV", GlRetracer::retrace_glVertexAttribL3i64NV),
    ("glVertexAttribL4i64NV", GlRetracer::retrace_glVertexAttribL4i64NV),
    ("glVertexAttribL1i64vNV", GlRetracer::retrace_glVertexAttribL1i64vNV),
    ("glVertexAttribL2i64vNV", GlRetracer::retrace_glVertexAttribL2i64vNV),
    ("glVertexAttribL3i64vNV", GlRetracer::retrace_glVertexAttribL3i64vNV),
    ("glVertexAttribL4i64vNV", GlRetracer::retrace_glVertexAttribL4i64vNV),
    ("glVertexAttribL1ui64NV", GlRetracer::retrace_glVertexAttribL1ui64NV),
    ("glVertexAttribL2ui64NV", GlRetracer::retrace_glVertexAttribL2ui64NV),
    ("glVertexAttribL3ui64NV", GlRetracer::retrace_glVertexAttribL3ui64NV),
    ("glVertexAttribL4ui64NV", GlRetracer::retrace_glVertexAttribL4ui64NV),
    ("glVertexAttribL1ui64vNV", GlRetracer::retrace_glVertexAttribL1ui64vNV),
    ("glVertexAttribL2ui64vNV", GlRetracer::retrace_glVertexAttribL2ui64vNV),
    ("glVertexAttribL3ui64vNV", GlRetracer::retrace_glVertexAttribL3ui64vNV),
    ("glVertexAttribL4ui64vNV", GlRetracer::retrace_glVertexAttribL4ui64vNV),
    ("glGetVertexAttribLi64vNV", GlRetracer::ignore),
    ("glGetVertexAttribLui64vNV", GlRetracer::ignore),
    ("glVertexAttribLFormatNV", GlRetracer::retrace_glVertexAttribLFormatNV),
    ("glBufferAddressRangeNV", GlRetracer::retrace_glBufferAddressRangeNV),
    ("glVertexFormatNV", GlRetracer::retrace_glVertexFormatNV),
    ("glNormalFormatNV", GlRetracer::retrace_glNormalFormatNV),
    ("glColorFormatNV", GlRetracer::retrace_glColorFormatNV),
    ("glIndexFormatNV", GlRetracer::retrace_glIndexFormatNV),
    ("glTexCoordFormatNV", GlRetracer::retrace_glTexCoordFormatNV),
    ("glEdgeFlagFormatNV", GlRetracer::retrace_glEdgeFlagFormatNV),
    ("glSecondaryColorFormatNV", GlRetracer::retrace_glSecondaryColorFormatNV),
    ("glFogCoordFormatNV", GlRetracer::retrace_glFogCoordFormatNV),
    ("glVertexAttribFormatNV", GlRetracer::retrace_glVertexAttribFormatNV),
    ("glVertexAttribIFormatNV", GlRetracer::retrace_glVertexAttribIFormatNV),
    ("glGetIntegerui64i_vNV", GlRetracer::ignore),
    ("glAreProgramsResidentNV", GlRetracer::ignore),
    ("glBindProgramNV", GlRetracer::retrace_glBindProgramNV),
    ("glDeleteProgramsNV", GlRetracer::retrace_glDeleteProgramsNV),
    ("glExecuteProgramNV", GlRetracer::retrace_glExecuteProgramNV),
    ("glGenProgramsNV", GlRetracer::retrace_glGenProgramsNV),
    ("glGetProgramParameterdvNV", GlRetracer::ignore),
    ("glGetProgramParameterfvNV", GlRetracer::ignore),
    ("glGetProgramivNV", GlRetracer::ignore),
    ("glGetProgramStringNV", GlRetracer::ignore),
    ("glGetTrackMatrixivNV", GlRetracer::ignore),
    ("glGetVertexAttribdvNV", GlRetracer::ignore),
    ("glGetVertexAttribfvNV", GlRetracer::ignore),
    ("glGetVertexAttribivNV", GlRetracer::ignore),
    ("glGetVertexAttribPointervNV", GlRetracer::ignore),
    ("glIsProgramNV", GlRetracer::ignore),
    ("glLoadProgramNV", GlRetracer::retrace_glLoadProgramNV),
    ("glProgramParameter4dNV", GlRetracer::retrace_glProgramParameter4dNV),
    ("glProgramParameter4dvNV", GlRetracer::retrace_glProgramParameter4dvNV),
    ("glProgramParameter4fNV", GlRetracer::retrace_glProgramParameter4fNV),
    ("glProgramParameter4fvNV", GlRetracer::retrace_glProgramParameter4fvNV),
    ("glProgramParameters4dvNV", GlRetracer::retrace_glProgramParameters4dvNV),
    ("glProgramParameters4fvNV", GlRetracer::retrace_glProgramParameters4fvNV),
    ("glRequestResidentProgramsNV", GlRetracer::retrace_glRequestResidentProgramsNV),
    ("glTrackMatrixNV", GlRetracer::retrace_glTrackMatrixNV),
    ("glVertexAttribPointerNV", GlRetracer::retrace_glVertexAttribPointerNV),
    ("glVertexAttrib1dNV", GlRetracer::retrace_glVertexAttrib1dNV),
    ("glVertexAttrib1dvNV", GlRetracer::retrace_glVertexAttrib1dvNV),
    ("glVertexAttrib1fNV", GlRetracer::retrace_glVertexAttrib1fNV),
    ("glVertexAttrib1fvNV", GlRetracer::retrace_glVertexAttrib1fvNV),
    ("glVertexAttrib1sNV", GlRetracer::retrace_glVertexAttrib1sNV),
    ("glVertexAttrib1svNV", GlRetracer::retrace_glVertexAttrib1svNV),
    ("glVertexAttrib2dNV", GlRetracer::retrace_glVertexAttrib2dNV),
    ("glVertexAttrib2dvNV", GlRetracer::retrace_glVertexAttrib2dvNV),
    ("glVertexAttrib2fNV", GlRetracer::retrace_glVertexAttrib2fNV),
    ("glVertexAttrib2fvNV", GlRetracer::retrace_glVertexAttrib2fvNV),
    ("glVertexAttrib2sNV", GlRetracer::retrace_glVertexAttrib2sNV),
    ("glVertexAttrib2svNV", GlRetracer::retrace_glVertexAttrib2svNV),
    ("glVertexAttrib3dNV", GlRetracer::retrace_glVertexAttrib3dNV),
    ("glVertexAttrib3dvNV", GlRetracer::retrace_glVertexAttrib3dvNV),
    ("glVertexAttrib3fNV", GlRetracer::retrace_glVertexAttrib3fNV),
    ("glVertexAttrib3fvNV", GlRetracer::retrace_glVertexAttrib3fvNV),
    ("glVertexAttrib3sNV", GlRetracer::retrace_glVertexAttrib3sNV),
    ("glVertexAttrib3svNV", GlRetracer::retrace_glVertexAttrib3svNV),
    ("glVertexAttrib4dNV", GlRetracer::retrace_glVertexAttrib4dNV),
    ("glVertexAttrib4dvNV", GlRetracer::retrace_glVertexAttrib4dvNV),
    ("glVertexAttrib4fNV", GlRetracer::retrace_glVertexAttrib4fNV),
    ("glVertexAttrib4fvNV", GlRetracer::retrace_glVertexAttrib4fvNV),
    ("glVertexAttrib4sNV", GlRetracer::retrace_glVertexAttrib4sNV),
    ("glVertexAttrib4svNV", GlRetracer::retrace_glVertexAttrib4svNV),
    ("glVertexAttrib4ubNV", GlRetracer::retrace_glVertexAttrib4ubNV),
    ("glVertexAttrib4ubvNV", GlRetracer::retrace_glVertexAttrib4ubvNV),
    ("glVertexAttribs1dvNV", GlRetracer::retrace_glVertexAttribs1dvNV),
    ("glVertexAttribs1fvNV", GlRetracer::retrace_glVertexAttribs1fvNV),
    ("glVertexAttribs1svNV", GlRetracer::retrace_glVertexAttribs1svNV),
    ("glVertexAttribs2dvNV", GlRetracer::retrace_glVertexAttribs2dvNV),
    ("glVertexAttribs2fvNV", GlRetracer::retrace_glVertexAttribs2fvNV),
    ("glVertexAttribs2svNV", GlRetracer::retrace_glVertexAttribs2svNV),
    ("glVertexAttribs3dvNV", GlRetracer::retrace_glVertexAttribs3dvNV),
    ("glVertexAttribs3fvNV", GlRetracer::retrace_glVertexAttribs3fvNV),
    ("glVertexAttribs3svNV", GlRetracer::retrace_glVertexAttribs3svNV),
    ("glVertexAttribs4dvNV", GlRetracer::retrace_glVertexAttribs4dvNV),
    ("glVertexAttribs4fvNV", GlRetracer::retrace_glVertexAttribs4fvNV),
    ("glVertexAttribs4svNV", GlRetracer::retrace_glVertexAttribs4svNV),
    ("glVertexAttribs4ubvNV", GlRetracer::retrace_glVertexAttribs4ubvNV),
    ("glVertexAttribI1iEXT", GlRetracer::retrace_glVertexAttribI1iEXT),
    ("glVertexAttribI2iEXT", GlRetracer::retrace_glVertexAttribI2iEXT),
    ("glVertexAttribI3iEXT", GlRetracer::retrace_glVertexAttribI3iEXT),
    ("glVertexAttribI4iEXT", GlRetracer::retrace_glVertexAttribI4iEXT),
    ("glVertexAttribI1uiEXT", GlRetracer::retrace_glVertexAttribI1uiEXT),
    ("glVertexAttribI2uiEXT", GlRetracer::retrace_glVertexAttribI2uiEXT),
    ("glVertexAttribI3uiEXT", GlRetracer::retrace_glVertexAttribI3uiEXT),
    ("glVertexAttribI4uiEXT", GlRetracer::retrace_glVertexAttribI4uiEXT),
    ("glVertexAttribI1ivEXT", GlRetracer::retrace_glVertexAttribI1ivEXT),
    ("glVertexAttribI2ivEXT", GlRetracer::retrace_glVertexAttribI2ivEXT),
    ("glVertexAttribI3ivEXT", GlRetracer::retrace_glVertexAttribI3ivEXT),
    ("glVertexAttribI4ivEXT", GlRetracer::retrace_glVertexAttribI4ivEXT),
    ("glVertexAttribI1uivEXT", GlRetracer::retrace_glVertexAttribI1uivEXT),
    ("glVertexAttribI2uivEXT", GlRetracer::retrace_glVertexAttribI2uivEXT),
    ("glVertexAttribI3uivEXT", GlRetracer::retrace_glVertexAttribI3uivEXT),
    ("glVertexAttribI4uivEXT", GlRetracer::retrace_glVertexAttribI4uivEXT),
    ("glVertexAttribI4bvEXT", GlRetracer::retrace_glVertexAttribI4bvEXT),
    ("glVertexAttribI4svEXT", GlRetracer::retrace_glVertexAttribI4svEXT),
    ("glVertexAttribI4ubvEXT", GlRetracer::retrace_glVertexAttribI4ubvEXT),
    ("glVertexAttribI4usvEXT", GlRetracer::retrace_glVertexAttribI4usvEXT),
    ("glVertexAttribIPointerEXT", GlRetracer::retrace_glVertexAttribIPointerEXT),
    ("glGetVertexAttribIivEXT", GlRetracer::ignore),
    ("glGetVertexAttribIuivEXT", GlRetracer::ignore),
    ("glBeginVideoCaptureNV", GlRetracer::retrace_glBeginVideoCaptureNV),
    ("glBindVideoCaptureStreamBufferNV", GlRetracer::retrace_glBindVideoCaptureStreamBufferNV),
    ("glBindVideoCaptureStreamTextureNV", GlRetracer::retrace_glBindVideoCaptureStreamTextureNV),
    ("glEndVideoCaptureNV", GlRetracer::retrace_glEndVideoCaptureNV),
    ("glGetVideoCaptureivNV", GlRetracer::ignore),
    ("glGetVideoCaptureStreamivNV", GlRetracer::ignore),
    ("glGetVideoCaptureStreamfvNV", GlRetracer::ignore),
    ("glGetVideoCaptureStreamdvNV", GlRetracer::ignore),
    ("glVideoCaptureNV", GlRetracer::retrace_glVideoCaptureNV),
    ("glVideoCaptureStreamParameterivNV", GlRetracer::retrace_glVideoCaptureStreamParameterivNV),
    ("glVideoCaptureStreamParameterfvNV", GlRetracer::retrace_glVideoCaptureStreamParameterfvNV),
    ("glVideoCaptureStreamParameterdvNV", GlRetracer::retrace_glVideoCaptureStreamParameterdvNV),
    ("glBlendEquationSeparateOES", GlRetracer::retrace_glBlendEquationSeparateOES),
    ("glBlendFuncSeparateOES", GlRetracer::retrace_glBlendFuncSeparateOES),
    ("glBlendEquationOES", GlRetracer::retrace_glBlendEquationOES),
    ("glDrawTexfOES", GlRetracer::retrace_glDrawTexfOES),
    ("glDrawTexfvOES", GlRetracer::retrace_glDrawTexfvOES),
    ("glDrawTexiOES", GlRetracer::retrace_glDrawTexiOES),
    ("glDrawTexivOES", GlRetracer::retrace_glDrawTexivOES),
    ("glDrawTexsOES", GlRetracer::retrace_glDrawTexsOES),
    ("glDrawTexsvOES", GlRetracer::retrace_glDrawTexsvOES),
    ("glIsRenderbufferOES", GlRetracer::ignore),
    ("glBindRenderbufferOES", GlRetracer::retrace_glBindRenderbufferOES),
    ("glDeleteRenderbuffersOES", GlRetracer::retrace_glDeleteRenderbuffersOES),
    ("glGenRenderbuffersOES", GlRetracer::retrace_glGenRenderbuffersOES),
    ("glRenderbufferStorageOES", GlRetracer::retrace_glRenderbufferStorageOES),
    ("glGetRenderbufferParameterivOES", GlRetracer::ignore),
    ("glIsFramebufferOES", GlRetracer::ignore),
    ("glBindFramebufferOES", GlRetracer::retrace_glBindFramebufferOES),
    ("glDeleteFramebuffersOES", GlRetracer::retrace_glDeleteFramebuffersOES),
    ("glGenFramebuffersOES", GlRetracer::retrace_glGenFramebuffersOES),
    ("glCheckFramebufferStatusOES", GlRetracer::retrace_glCheckFramebufferStatusOES),
    ("glFramebufferTexture2DOES", GlRetracer::retrace_glFramebufferTexture2DOES),
    ("glFramebufferRenderbufferOES", GlRetracer::retrace_glFramebufferRenderbufferOES),
    ("glGetFramebufferAttachmentParameterivOES", GlRetracer::ignore),
    ("glGenerateMipmapOES", GlRetracer::retrace_glGenerateMipmapOES),
    ("glGetProgramBinaryOES", GlRetracer::ignore),
    ("glProgramBinaryOES", GlRetracer::retrace_glProgramBinaryOES),
    ("glGetBufferPointervOES", GlRetracer::ignore),
    ("glMapBufferOES", GlRetracer::retrace_glMapBufferOES),
    ("glUnmapBufferOES", GlRetracer::retrace_glUnmapBufferOES),
    ("glCurrentPaletteMatrixOES", GlRetracer::retrace_glCurrentPaletteMatrixOES),
    ("glLoadPaletteFromModelViewMatrixOES", GlRetracer::retrace_glLoadPaletteFromModelViewMatrixOES),
    ("glMatrixIndexPointerOES", GlRetracer::retrace_glMatrixIndexPointerOES),
    ("glWeightPointerOES", GlRetracer::retrace_glWeightPointerOES),
    ("glPointSizePointerOES", GlRetracer::retrace_glPointSizePointerOES),
    ("glQueryMatrixxOES", GlRetracer::retrace_glQueryMatrixxOES),
    ("glClearDepthfOES", GlRetracer::retrace_glClearDepthfOES),
    ("glClipPlanefOES", GlRetracer::retrace_glClipPlanefOES),
    ("glDepthRangefOES", GlRetracer::retrace_glDepthRangefOES),
    ("glFrustumfOES", GlRetracer::retrace_glFrustumfOES),
    ("glGetClipPlanefOES", GlRetracer::ignore),
    ("glOrthofOES", GlRetracer::retrace_glOrthofOES),
    ("glTexImage3DOES", GlRetracer::retrace_glTexImage3DOES),
    ("glTexSubImage3DOES", GlRetracer::retrace_glTexSubImage3DOES),
    ("glCopyTexSubImage3DOES", GlRetracer::retrace_glCopyTexSubImage3DOES),
    ("glCompressedTexImage3DOES", GlRetracer::retrace_glCompressedTexImage3DOES),
    ("glCompressedTexSubImage3DOES", GlRetracer::retrace_glCompressedTexSubImage3DOES),
    ("glFramebufferTexture3DOES", GlRetracer::retrace_glFramebufferTexture3DOES),
    ("glTexGenfOES", GlRetracer::retrace_glTexGenfOES),
    ("glTexGenfvOES", GlRetracer::retrace_glTexGenfvOES),
    ("glTexGeniOES", GlRetracer::retrace_glTexGeniOES),
    ("glTexGenivOES", GlRetracer::retrace_glTexGenivOES),
    ("glTexGenxOES", GlRetracer::retrace_glTexGenxOES),
    ("glTexGenxvOES", GlRetracer::retrace_glTexGenxvOES),
    ("glGetTexGenfvOES", GlRetracer::ignore),
    ("glGetTexGenivOES", GlRetracer::ignore),
    ("glGetTexGenxvOES", GlRetracer::ignore),
    ("glBindVertexArrayOES", GlRetracer::retrace_glBindVertexArrayOES),
    ("glDeleteVertexArraysOES", GlRetracer::retrace_glDeleteVertexArraysOES),
    ("glGenVertexArraysOES", GlRetracer::retrace_glGenVertexArraysOES),
    ("glIsVertexArrayOES", GlRetracer::ignore),
    ("glViewportArrayvOES", GlRetracer::retrace_glViewportArrayvOES),
    ("glViewportIndexedfOES", GlRetracer::retrace_glViewportIndexedfOES),
    ("glViewportIndexedfvOES", GlRetracer::retrace_glViewportIndexedfvOES),
    ("glScissorArrayvOES", GlRetracer::retrace_glScissorArrayvOES),
    ("glScissorIndexedOES", GlRetracer::retrace_glScissorIndexedOES),
    ("glScissorIndexedvOES", GlRetracer::retrace_glScissorIndexedvOES),
    ("glDepthRangeArrayfvOES", GlRetracer::retrace_glDepthRangeArrayfvOES),
    ("glDepthRangeIndexedfOES", GlRetracer::retrace_glDepthRangeIndexedfOES),
    ("glGetFloati_vOES", GlRetracer::ignore),
    ("glFramebufferTextureMultiviewOVR", GlRetracer::retrace_glFramebufferTextureMultiviewOVR),
    ("glNamedFramebufferTextureMultiviewOVR", GlRetracer::retrace_glNamedFramebufferTextureMultiviewOVR),
    ("glHintPGI", GlRetracer::retrace_glHintPGI),
    ("glDetailTexFuncSGIS", GlRetracer::retrace_glDetailTexFuncSGIS),
    ("glGetDetailTexFuncSGIS", GlRetracer::ignore),
    ("glFogFuncSGIS", GlRetracer::retrace_glFogFuncSGIS),
    ("glGetFogFuncSGIS", GlRetracer::ignore),
    ("glSampleMaskSGIS", GlRetracer::retrace_glSampleMaskSGIS),
    ("glSamplePatternSGIS", GlRetracer::retrace_glSamplePatternSGIS),
    ("glPixelTexGenParameteriSGIS", GlRetracer::retrace_glPixelTexGenParameteriSGIS),
    ("glPixelTexGenParameterivSGIS", GlRetracer::retrace_glPixelTexGenParameterivSGIS),
    ("glPixelTexGenParameterfSGIS", GlRetracer::retrace_glPixelTexGenParameterfSGIS),
    ("glPixelTexGenParameterfvSGIS", GlRetracer::retrace_glPixelTexGenParameterfvSGIS),
    ("glGetPixelTexGenParameterivSGIS", GlRetracer::ignore),
    ("glGetPixelTexGenParameterfvSGIS", GlRetracer::ignore),
    ("glPointParameterfSGIS", GlRetracer::retrace_glPointParameterfSGIS),
    ("glPointParameterfvSGIS", GlRetracer::retrace_glPointParameterfvSGIS),
    ("glSharpenTexFuncSGIS", GlRetracer::retrace_glSharpenTexFuncSGIS),
    ("glGetSharpenTexFuncSGIS", GlRetracer::ignore),
    ("glTexImage4DSGIS", GlRetracer::retrace_glTexImage4DSGIS),
    ("glTexSubImage4DSGIS", GlRetracer::retrace_glTexSubImage4DSGIS),
    ("glTextureColorMaskSGIS", GlRetracer::retrace_glTextureColorMaskSGIS),
    ("glGetTexFilterFuncSGIS", GlRetracer::ignore),
    ("glTexFilterFuncSGIS", GlRetracer::retrace_glTexFilterFuncSGIS),
    ("glAsyncMarkerSGIX", GlRetracer::retrace_glAsyncMarkerSGIX),
    ("glFinishAsyncSGIX", GlRetracer::retrace_glFinishAsyncSGIX),
    ("glPollAsyncSGIX", GlRetracer::retrace_glPollAsyncSGIX),
    ("glGenAsyncMarkersSGIX", GlRetracer::retrace_glGenAsyncMarkersSGIX),
    ("glDeleteAsyncMarkersSGIX", GlRetracer::retrace_glDeleteAsyncMarkersSGIX),
    ("glIsAsyncMarkerSGIX", GlRetracer::ignore),
    ("glFlushRasterSGIX", GlRetracer::retrace_glFlushRasterSGIX),
    ("glFragmentColorMaterialSGIX", GlRetracer::retrace_glFragmentColorMaterialSGIX),
    ("glFragmentLightfSGIX", GlRetracer::retrace_glFragmentLightfSGIX),
    ("glFragmentLightfvSGIX", GlRetracer::retrace_glFragmentLightfvSGIX),
    ("glFragmentLightiSGIX", GlRetracer::retrace_glFragmentLightiSGIX),
    ("glFragmentLightivSGIX", GlRetracer::retrace_glFragmentLightivSGIX),
    ("glFragmentLightModelfSGIX", GlRetracer::retrace_glFragmentLightModelfSGIX),
    ("glFragmentLightModelfvSGIX", GlRetracer::retrace_glFragmentLightModelfvSGIX),
    ("glFragmentLightModeliSGIX", GlRetracer::retrace_glFragmentLightModeliSGIX),
    ("glFragmentLightModelivSGIX", GlRetracer::retrace_glFragmentLightModelivSGIX),
    ("glFragmentMaterialfSGIX", GlRetracer::retrace_glFragmentMaterialfSGIX),
    ("glFragmentMaterialfvSGIX", GlRetracer::retrace_glFragmentMaterialfvSGIX),
    ("glFragmentMaterialiSGIX", GlRetracer::retrace_glFragmentMaterialiSGIX),
    ("glFragmentMaterialivSGIX", GlRetracer::retrace_glFragmentMaterialivSGIX),
    ("glGetFragmentLightfvSGIX", GlRetracer::ignore),
    ("glGetFragmentLightivSGIX", GlRetracer::ignore),
    ("glGetFragmentMaterialfvSGIX", GlRetracer::ignore),
    ("glGetFragmentMaterialivSGIX", GlRetracer::ignore),
    ("glLightEnviSGIX", GlRetracer::retrace_glLightEnviSGIX),
    ("glFrameZoomSGIX", GlRetracer::retrace_glFrameZoomSGIX),
    ("glIglooInterfaceSGIX", GlRetracer::retrace_glIglooInterfaceSGIX),
    ("glGetInstrumentsSGIX", GlRetracer::ignore),
    ("glInstrumentsBufferSGIX", GlRetracer::retrace_glInstrumentsBufferSGIX),
    ("glPollInstrumentsSGIX", GlRetracer::retrace_glPollInstrumentsSGIX),
    ("glReadInstrumentsSGIX", GlRetracer::retrace_glReadInstrumentsSGIX),
    ("glStartInstrumentsSGIX", GlRetracer::retrace_glStartInstrumentsSGIX),
    ("glStopInstrumentsSGIX", GlRetracer::retrace_glStopInstrumentsSGIX),
    ("glGetListParameterfvSGIX", GlRetracer::ignore),
    ("glGetListParameterivSGIX", GlRetracer::ignore),
    ("glListParameterfSGIX", GlRetracer::retrace_glListParameterfSGIX),
    ("glListParameterfvSGIX", GlRetracer::retrace_glListParameterfvSGIX),
    ("glListParameteriSGIX", GlRetracer::retrace_glListParameteriSGIX),
    ("glListParameterivSGIX", GlRetracer::retrace_glListParameterivSGIX),
    ("glPixelTexGenSGIX", GlRetracer::retrace_glPixelTexGenSGIX),
    ("glDeformationMap3dSGIX", GlRetracer::retrace_glDeformationMap3dSGIX),
    ("glDeformationMap3fSGIX", GlRetracer::retrace_glDeformationMap3fSGIX),
    ("glDeformSGIX", GlRetracer::retrace_glDeformSGIX),
    ("glLoadIdentityDeformationMapSGIX", GlRetracer::retrace_glLoadIdentityDeformationMapSGIX),
    ("glReferencePlaneSGIX", GlRetracer::retrace_glReferencePlaneSGIX),
    ("glSpriteParameterfSGIX", GlRetracer::retrace_glSpriteParameterfSGIX),
    ("glSpriteParameterfvSGIX", GlRetracer::retrace_glSpriteParameterfvSGIX),
    ("glSpriteParameteriSGIX", GlRetracer::retrace_glSpriteParameteriSGIX),
    ("glSpriteParameterivSGIX", GlRetracer::retrace_glSpriteParameterivSGIX),
    ("glTagSampleBufferSGIX", GlRetracer::retrace_glTagSampleBufferSGIX),
    ("glColorTableSGI", GlRetracer::retrace_glColorTableSGI),
    ("glColorTableParameterfvSGI", GlRetracer::retrace_glColorTableParameterfvSGI),
    ("glColorTableParameterivSGI", GlRetracer::retrace_glColorTableParameterivSGI),
    ("glCopyColorTableSGI", GlRetracer::retrace_glCopyColorTableSGI),
    ("glGetColorTableSGI", GlRetracer::ignore),
    ("glGetColorTableParameterfvSGI", GlRetracer::ignore),
    ("glGetColorTableParameterivSGI", GlRetracer::ignore),
    ("glFinishTextureSUNX", GlRetracer::retrace_glFinishTextureSUNX),
    ("glGlobalAlphaFactorbSUN", GlRetracer::retrace_glGlobalAlphaFactorbSUN),
    ("glGlobalAlphaFactorsSUN", GlRetracer::retrace_glGlobalAlphaFactorsSUN),
    ("glGlobalAlphaFactoriSUN", GlRetracer::retrace_glGlobalAlphaFactoriSUN),
    ("glGlobalAlphaFactorfSUN", GlRetracer::retrace_glGlobalAlphaFactorfSUN),
    ("glGlobalAlphaFactordSUN", GlRetracer::retrace_glGlobalAlphaFactordSUN),
    ("glGlobalAlphaFactorubSUN", GlRetracer::retrace_glGlobalAlphaFactorubSUN),
    ("glGlobalAlphaFactorusSUN", GlRetracer::retrace_glGlobalAlphaFactorusSUN),
    ("glGlobalAlphaFactoruiSUN", GlRetracer::retrace_glGlobalAlphaFactoruiSUN),
    ("glDrawMeshArraysSUN", GlRetracer::retrace_glDrawMeshArraysSUN),
    ("glReplacementCodeuiSUN", GlRetracer::retrace_glReplacementCodeuiSUN),
    ("glReplacementCodeusSUN", GlRetracer::retrace_glReplacementCodeusSUN),
    ("glReplacementCodeubSUN", GlRetracer::retrace_glReplacementCodeubSUN),
    ("glReplacementCodeuivSUN", GlRetracer::retrace_glReplacementCodeuivSUN),
    ("glReplacementCodeusvSUN", GlRetracer::retrace_glReplacementCodeusvSUN),
    ("glReplacementCodeubvSUN", GlRetracer::retrace_glReplacementCodeubvSUN),
    ("glReplacementCodePointerSUN", GlRetracer::retrace_glReplacementCodePointerSUN),
    ("glColor4ubVertex2fSUN", GlRetracer::retrace_glColor4ubVertex2fSUN),
    ("glColor4ubVertex2fvSUN", GlRetracer::retrace_glColor4ubVertex2fvSUN),
    ("glColor4ubVertex3fSUN", GlRetracer::retrace_glColor4ubVertex3fSUN),
    ("glColor4ubVertex3fvSUN", GlRetracer::retrace_glColor4ubVertex3fvSUN),
    ("glColor3fVertex3fSUN", GlRetracer::retrace_glColor3fVertex3fSUN),
    ("glColor3fVertex3fvSUN", GlRetracer::retrace_glColor3fVertex3fvSUN),
    ("glNormal3fVertex3fSUN", GlRetracer::retrace_glNormal3fVertex3fSUN),
    ("glNormal3fVertex3fvSUN", GlRetracer::retrace_glNormal3fVertex3fvSUN),
    ("glColor4fNormal3fVertex3fSUN", GlRetracer::retrace_glColor4fNormal3fVertex3fSUN),
    ("glColor4fNormal3fVertex3fvSUN", GlRetracer::retrace_glColor4fNormal3fVertex3fvSUN),
    ("glTexCoord2fVertex3fSUN", GlRetracer::retrace_glTexCoord2fVertex3fSUN),
    ("glTexCoord2fVertex3fvSUN", GlRetracer::retrace_glTexCoord2fVertex3fvSUN),
    ("glTexCoord4fVertex4fSUN", GlRetracer::retrace_glTexCoord4fVertex4fSUN),
    ("glTexCoord4fVertex4fvSUN", GlRetracer::retrace_glTexCoord4fVertex4fvSUN),
    ("glTexCoord2fColor4ubVertex3fSUN", GlRetracer::retrace_glTexCoord2fColor4ubVertex3fSUN),
    ("glTexCoord2fColor4ubVertex3fvSUN", GlRetracer::retrace_glTexCoord2fColor4ubVertex3fvSUN),
    ("glTexCoord2fColor3fVertex3fSUN", GlRetracer::retrace_glTexCoord2fColor3fVertex3fSUN),
    ("glTexCoord2fColor3fVertex3fvSUN", GlRetracer::retrace_glTexCoord2fColor3fVertex3fvSUN),
    ("glTexCoord2fNormal3fVertex3fSUN", GlRetracer::retrace_glTexCoord2fNormal3fVertex3fSUN),
    ("glTexCoord2fNormal3fVertex3fvSUN", GlRetracer::retrace_glTexCoord2fNormal3fVertex3fvSUN),
    ("glTexCoord2fColor4fNormal3fVertex3fSUN", GlRetracer::retrace_glTexCoord2fColor4fNormal3fVertex3fSUN),
    ("glTexCoord2fColor4fNormal3fVertex3fvSUN", GlRetracer::retrace_glTexCoord2fColor4fNormal3fVertex3fvSUN),
    ("glTexCoord4fColor4fNormal3fVertex4fSUN", GlRetracer::retrace_glTexCoord4fColor4fNormal3fVertex4fSUN),
    ("glTexCoord4fColor4fNormal3fVertex4fvSUN", GlRetracer::retrace_glTexCoord4fColor4fNormal3fVertex4fvSUN),
    ("glReplacementCodeuiVertex3fSUN", GlRetracer::retrace_glReplacementCodeuiVertex3fSUN),
    ("glReplacementCodeuiVertex3fvSUN", GlRetracer::retrace_glReplacementCodeuiVertex3fvSUN),
    ("glReplacementCodeuiColor4ubVertex3fSUN", GlRetracer::retrace_glReplacementCodeuiColor4ubVertex3fSUN),
    ("glReplacementCodeuiColor4ubVertex3fvSUN", GlRetracer::retrace_glReplacementCodeuiColor4ubVertex3fvSUN),
    ("glReplacementCodeuiColor3fVertex3fSUN", GlRetracer::retrace_glReplacementCodeuiColor3fVertex3fSUN),
    ("glReplacementCodeuiColor3fVertex3fvSUN", GlRetracer::retrace_glReplacementCodeuiColor3fVertex3fvSUN),
    ("glReplacementCodeuiNormal3fVertex3fSUN", GlRetracer::retrace_glReplacementCodeuiNormal3fVertex3fSUN),
    ("glReplacementCodeuiNormal3fVertex3fvSUN", GlRetracer::retrace_glReplacementCodeuiNormal3fVertex3fvSUN),
    ("glReplacementCodeuiColor4fNormal3fVertex3fSUN", GlRetracer::retrace_glReplacementCodeuiColor4fNormal3fVertex3fSUN),
    ("glReplacementCodeuiColor4fNormal3fVertex3fvSUN", GlRetracer::retrace_glReplacementCodeuiColor4fNormal3fVertex3fvSUN),
    ("glReplacementCodeuiTexCoord2fVertex3fSUN", GlRetracer::retrace_glReplacementCodeuiTexCoord2fVertex3fSUN),
    ("glReplacementCodeuiTexCoord2fVertex3fvSUN", GlRetracer::retrace_glReplacementCodeuiTexCoord2fVertex3fvSUN),
    ("glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN", GlRetracer::retrace_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN),
    ("glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN", GlRetracer::retrace_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN),
    ("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN", GlRetracer::retrace_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN),
    ("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN", GlRetracer::retrace_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN),
    ("glAddSwapHintRectWIN", GlRetracer::retrace_glAddSwapHintRectWIN),
];

fn _getActiveProgram() -> u32 {
unsafe {
    let mut program = 0;
    unsafe { gl::GetIntegerv(gl::CURRENT_PROGRAM, &mut program) };
    program as u32
}
}
/*
static void
_validateActiveProgram(trace::Call &call)
{
    assert(retrace::debug > 0);

    glretrace::Context *self.context = glretrace::getself.context();



        let program = _getActiveProgram();
        if program = 0 {
            return;
        }

        let validate_status = false;
        unsafe { gl::GetProgramiv(program, gl::VALIDATE_STATUS, &validate_status) };
        if validate_status != 0 {
            // Validate only once
            return;
        }

        unsafe { gl::ValidateProgram(program) };
        glGetProgramiv(program, unsafe { gl::VALIDATE_STATUS, &validate_status) };
        if validate_status == 0 {
            println!("program validation failed");
        }

        let info_log_length = 0;
        unsafe { gl::GetProgramiv(program, gl::INFO_LOG_LENGTH, &info_log_length) };
        if info_log_length > 1 {
             let mut infoLog = vec![0i8; info_log_length];
             unsafe { gl::GetProgramInfoLog(program, info_log_length, NULL, infoLog) };
        }
    
}
*/

